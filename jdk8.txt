[info] Loading settings from plugins.sbt ...
[info] Loading project definition from /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/project
[info] Loading settings from build.sbt,version.sbt,release.sbt ...
[info] Set current project to jsoniter-scala (in build file:/home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/)
[info] Setting Scala version to 2.12.6 on 4 projects.
[info] Reapplying settings...
[info] Set current project to jsoniter-scala (in build file:/home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/)
[success] Total time: 0 s, completed 30 черв. 2018 20:04:34
[info] Updating core...
[info] Done updating.
[info] Updating macros...
[info] Done updating.
[info] Updating benchmark...
[info] Done updating.
[info] Compiling 4 Scala sources and 1 Java source to /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/core/target/scala-2.12/classes ...
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:989:79: constructor String in class String is deprecated: see corresponding Javadoc for more information.
[warn]   private[this] def toDouble(pos: Int): Double = java.lang.Double.parseDouble(new String(buf, 0, mark, pos - mark))
[warn]                                                                               ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:1075:75: constructor String in class String is deprecated: see corresponding Javadoc for more information.
[warn]   private[this] def toFloat(pos: Int): Float = java.lang.Float.parseFloat(new String(buf, 0, mark, pos - mark))
[warn]                                                                           ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:443:7: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]     s.getBytes(0, len, buf, pos)
[warn]       ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:451:7: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]     s.getBytes(0, len, buf, pos + 1)
[warn]       ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:967:14: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]       zoneId.getBytes(0, len, buf, pos)
[warn]              ^
[warn] 5 warnings found
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/java/com/github/plokhotnyuk/jsoniter_scala/core/UnsafeUtils.java:8:1: sun.misc.Unsafe is internal proprietary API and may be removed in a future release
[warn]     private static final sun.misc.Unsafe UNSAFE;
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/java/com/github/plokhotnyuk/jsoniter_scala/core/UnsafeUtils.java:13:1: sun.misc.Unsafe is internal proprietary API and may be removed in a future release
[warn]         sun.misc.Unsafe u = null;
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/java/com/github/plokhotnyuk/jsoniter_scala/core/UnsafeUtils.java:16:1: sun.misc.Unsafe is internal proprietary API and may be removed in a future release
[warn]             Field f = sun.misc.Unsafe.class.getDeclaredField("theUnsafe");
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/java/com/github/plokhotnyuk/jsoniter_scala/core/UnsafeUtils.java:18:1: sun.misc.Unsafe is internal proprietary API and may be removed in a future release
[warn]             u = (sun.misc.Unsafe) f.get(null);
[info] Done compiling.
[info] Compiling 1 Scala source to /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/classes ...
[info] Packaging /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/core/target/scala-2.12/core_2.12-0.28.2-SNAPSHOT.jar ...
[info] Done packaging.
[info] Done compiling.
[info] Packaging /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/macros_2.12-0.28.2-SNAPSHOT.jar ...
[info] Compiling 59 Scala sources and 1 Java source to /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] Done packaging.
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:17:48: Generated JSON codec for type 'Int':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Int] {
[info]       def nullValue: Int = 0;
[info]       def decodeValue(in: JsonReader, default: Int): Int = in.readInt();
[info]       def encodeValue(x: Int, out: JsonWriter): Unit = out.writeVal(x)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val intCodec: JsonValueCodec[Int] = make[Int](CodecMakerConfig()) // don't define implicit for supported types
[info]                                                ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:18:57: Generated JSON codec for type 'String':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[String] {
[info]       def nullValue: String = null;
[info]       def decodeValue(in: JsonReader, default: String): String = in.readString(default);
[info]       def encodeValue(x: String, out: JsonWriter): Unit = out.writeVal(x)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val stringCodec: JsonValueCodec[String] = make[String](CodecMakerConfig()) // don't define implicit for supported types
[info]                                                         ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:19:56: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase): com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.A): com.github.plokhotnyuk.jsoniter_scala.macros.A = if (in.isNextToken('{'))
[info]         {
[info]           var _a: Int = 0;
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 97 => if (in.isCharBufEqualsTo(l, "a"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _a = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(1).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.A(a = _a)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.B): com.github.plokhotnyuk.jsoniter_scala.macros.B = if (in.isNextToken('{'))
[info]         {
[info]           var _b: String = null;
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 98 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _b = in.readString(_b)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(1).!=(0))
[info]             in.requiredFieldError(f1(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.B(b = _b)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.C): com.github.plokhotnyuk.jsoniter_scala.macros.C = if (in.isNextToken('{'))
[info]         {
[info]           var _l: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]           var _r: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]           var p0 = 3;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _l = d0(in, _l)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 114 => if (in.isCharBufEqualsTo(l, "r"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _r = d0(in, _r)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f2(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.C(l = _l, r = _r)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase): com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           if (in.skipToKey("type"))
[info]             {
[info]               val l = in.readStringAsCharBuf();
[info]               (in.charBufToHashCode(l): @switch) match {
[info]                 case 65 => if (in.isCharBufEqualsTo(l, "A"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d1(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 66 => if (in.isCharBufEqualsTo(l, "B"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d2(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 67 => if (in.isCharBufEqualsTo(l, "C"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d3(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case _ => in.discriminatorValueError("type")
[info]               }
[info]             }
[info]           else
[info]             in.requiredFieldError("type")
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.A, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("A")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("a");
[info]           out.writeVal(x.a)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e2(x: com.github.plokhotnyuk.jsoniter_scala.macros.B, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("B")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("b");
[info]           out.writeVal(x.b)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.C, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("C")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("l");
[info]           e0(x.l, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("r");
[info]           e0(x.r, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.A)) => e1(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.B)) => e2(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.C)) => e3(x, out)
[info]       };
[info]       private[this] def f0(i: Int): String = (i: @switch) match {
[info]         case 0 => "a"
[info]       };
[info]       private[this] def f1(i: Int): String = (i: @switch) match {
[info]         case 0 => "b"
[info]       };
[info]       private[this] def f2(i: Int): String = (i: @switch) match {
[info]         case 0 => "l"
[info]         case 1 => "r"
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val adtCodec: JsonValueCodec[AdtBase] = make[AdtBase](CodecMakerConfig()) // don't define implicit for recursive structures
[info]                                                        ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:20:60: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON): com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d2(in: JsonReader, default: scala.collection.immutable.Map[String,String]): scala.collection.immutable.Map[String,String] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = Map.empty[String, String];
[info]             do 
[info]               x = x.updated(in.readKeyAsString(), in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d7(in: JsonReader, default: (Double, Double)): (Double, Double) = if (in.isNextToken('['))
[info]         {
[info]           val _1: Double = in.readDouble();
[info]           val _2: Double = if (in.isNextToken(','))
[info]             in.readDouble()
[info]           else
[info]             in.commaError();
[info]           if (in.isNextToken(']'))
[info]             new (Double, Double)(_1, _2)
[info]           else
[info]             in.arrayEndError()
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d6(in: JsonReader, default: IndexedSeq[(Double, Double)]): IndexedSeq[(Double, Double)] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[(Double, Double)];
[info]             do 
[info]               x.+=(d7(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d5(in: JsonReader, default: IndexedSeq[IndexedSeq[(Double, Double)]]): IndexedSeq[IndexedSeq[(Double, Double)]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[IndexedSeq[(Double, Double)]];
[info]             do 
[info]               x.+=(d6(in, IndexedSeq.empty[(Double, Double)]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d4(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Polygon): com.github.plokhotnyuk.jsoniter_scala.macros.Polygon = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[IndexedSeq[(Double, Double)]] = IndexedSeq.empty[IndexedSeq[(Double, Double)]];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d5(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Polygon(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d8(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Point): com.github.plokhotnyuk.jsoniter_scala.macros.Point = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: (Double, Double) = null;
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d7(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(1).!=(0))
[info]             in.requiredFieldError(f1(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Point(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d10(in: JsonReader, default: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry]): IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry];
[info]             do 
[info]               x.+=(d3(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d9(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection): com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection = if (in.isNextToken('{'))
[info]         {
[info]           var _geometries: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 203916432 => if (in.isCharBufEqualsTo(l, "geometries"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geometries = d10(in, _geometries)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection(geometries = _geometries)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d12(in: JsonReader, default: IndexedSeq[IndexedSeq[IndexedSeq[(Double, Double)]]]): IndexedSeq[IndexedSeq[IndexedSeq[(Double, Double)]]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[IndexedSeq[IndexedSeq[(Double, Double)]]];
[info]             do 
[info]               x.+=(d5(in, IndexedSeq.empty[IndexedSeq[(Double, Double)]]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d11(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[IndexedSeq[IndexedSeq[(Double, Double)]]] = IndexedSeq.empty[IndexedSeq[IndexedSeq[(Double, Double)]]];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d12(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d13(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString): com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[IndexedSeq[(Double, Double)]] = IndexedSeq.empty[IndexedSeq[(Double, Double)]];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d5(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d14(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[(Double, Double)] = IndexedSeq.empty[(Double, Double)];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d6(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d15(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.LineString): com.github.plokhotnyuk.jsoniter_scala.macros.LineString = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[(Double, Double)] = IndexedSeq.empty[(Double, Double)];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d6(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.LineString(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Geometry): com.github.plokhotnyuk.jsoniter_scala.macros.Geometry = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           if (in.skipToKey("type"))
[info]             {
[info]               val l = in.readStringAsCharBuf();
[info]               (in.charBufToHashCode(l): @switch) match {
[info]                 case 1267133722 => if (in.isCharBufEqualsTo(l, "Polygon"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d4(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 77292912 => if (in.isCharBufEqualsTo(l, "Point"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d8(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 1950410960 => if (in.isCharBufEqualsTo(l, "GeometryCollection"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d9(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case -2116761119 => if (in.isCharBufEqualsTo(l, "MultiPolygon"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d11(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case -627102946 => if (in.isCharBufEqualsTo(l, "MultiLineString"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d13(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case -1065891849 => if (in.isCharBufEqualsTo(l, "MultiPoint"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d14(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 1806700869 => if (in.isCharBufEqualsTo(l, "LineString"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d15(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case _ => in.discriminatorValueError("type")
[info]               }
[info]             }
[info]           else
[info]             in.requiredFieldError("type")
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Feature): com.github.plokhotnyuk.jsoniter_scala.macros.Feature = if (in.isNextToken('{'))
[info]         {
[info]           var _properties: scala.collection.immutable.Map[String,String] = Map.empty[String, String];
[info]           var _geometry: com.github.plokhotnyuk.jsoniter_scala.macros.Geometry = null;
[info]           var p0 = 3;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -926053069 => if (in.isCharBufEqualsTo(l, "properties"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _properties = d2(in, _properties)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1846020210 => if (in.isCharBufEqualsTo(l, "geometry"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geometry = d3(in, _geometry)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(2).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Feature(properties = _properties, geometry = _geometry)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d17(in: JsonReader, default: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON]): IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON];
[info]             do 
[info]               x.+=(d0(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d16(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection): com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection = if (in.isNextToken('{'))
[info]         {
[info]           var _features: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -290659267 => if (in.isCharBufEqualsTo(l, "features"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _features = d17(in, _features)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection(features = _features)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON): com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           if (in.skipToKey("type"))
[info]             {
[info]               val l = in.readStringAsCharBuf();
[info]               (in.charBufToHashCode(l): @switch) match {
[info]                 case 685445846 => if (in.isCharBufEqualsTo(l, "Feature"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d1(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case -1377727980 => if (in.isCharBufEqualsTo(l, "FeatureCollection"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d16(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case _ => in.discriminatorValueError("type")
[info]               }
[info]             }
[info]           else
[info]             in.requiredFieldError("type")
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private[this] def e2(x: scala.collection.immutable.Map[String,String], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e7(x: (Double, Double), out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         {
[info]           out.writeComma();
[info]           out.writeVal(x._1)
[info]         };
[info]         {
[info]           out.writeComma();
[info]           out.writeVal(x._2)
[info]         };
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e6(x: IndexedSeq[(Double, Double)], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e7(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e5(x: IndexedSeq[IndexedSeq[(Double, Double)]], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e6(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e4(x: com.github.plokhotnyuk.jsoniter_scala.macros.Polygon, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("Polygon")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e5(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e8(x: com.github.plokhotnyuk.jsoniter_scala.macros.Point, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("Point")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("coordinates");
[info]           e7(x.coordinates, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e10(x: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e3(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e9(x: com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("GeometryCollection")
[info]         };
[info]         {
[info]           val v = x.geometries;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("geometries");
[info]               e10(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e12(x: IndexedSeq[IndexedSeq[IndexedSeq[(Double, Double)]]], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e5(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e11(x: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("MultiPolygon")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e12(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e13(x: com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("MultiLineString")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e5(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e14(x: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("MultiPoint")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e6(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e15(x: com.github.plokhotnyuk.jsoniter_scala.macros.LineString, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("LineString")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e6(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.Geometry, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.Polygon)) => e4(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.Point)) => e8(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection)) => e9(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon)) => e11(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString)) => e13(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint)) => e14(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.LineString)) => e15(x, out)
[info]       };
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Feature, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("Feature")
[info]         };
[info]         {
[info]           val v = x.properties;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("properties");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("geometry");
[info]           e3(x.geometry, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e17(x: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e0(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e16(x: com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("FeatureCollection")
[info]         };
[info]         {
[info]           val v = x.features;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("features");
[info]               e17(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.Feature)) => e1(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection)) => e16(x, out)
[info]       };
[info]       private[this] def f0(i: Int): String = (i: @switch) match {
[info]         case 0 => "properties"
[info]         case 1 => "geometry"
[info]       };
[info]       private[this] def f1(i: Int): String = (i: @switch) match {
[info]         case 0 => "coordinates"
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val geoJSONCodec: JsonValueCodec[GeoJSON] = make[GeoJSON](CodecMakerConfig()) // don't define implicit for recursive structures
[info]                                                            ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:21:78: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs): com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: Option[com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs]): Option[com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs] = if (in.isNextToken('n'))
[info]         in.readNullOrError(default, "expected value or null")
[info]       else
[info]         {
[info]           in.rollbackToken();
[info]           Some(d0(in, null))
[info]         };
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs): com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs = if (in.isNextToken('{'))
[info]         {
[info]           var _n: Option[com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs] = None;
[info]           var p0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 110 => if (in.isCharBufEqualsTo(l, "n"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _n = d1(in, _n)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs(n = _n)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.n;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("n");
[info]               e0(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val nestedStructsCodec: JsonValueCodec[NestedStructs] = make[NestedStructs](CodecMakerConfig())
[info]                                                                              ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:22:69: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: Option[String]): Option[String] = if (in.isNextToken('n'))
[info]         in.readNullOrError(default, "expected value or null")
[info]       else
[info]         {
[info]           in.rollbackToken();
[info]           Some(in.readString(null))
[info]         };
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _bd: scala.math.BigDecimal = null;
[info]           var _os: Option[String] = None;
[info]           var p0 = 7;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readString(_s)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3138 => if (in.isCharBufEqualsTo(l, "bd"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _bd = in.readBigDecimal(_bd, 300)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556 => if (in.isCharBufEqualsTo(l, "os"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _os = d1(in, _os)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs(s = _s, bd = _bd, os = _os)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("bd");
[info]           out.writeVal(x.bd)
[info]         };
[info]         {
[info]           val v = x.os;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("os");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def f0(i: Int): String = (i: @switch) match {
[info]         case 0 => "s"
[info]         case 1 => "bd"
[info]         case 2 => "os"
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val anyRefsCodec: JsonValueCodec[AnyRefs] = make[AnyRefs](CodecMakerConfig())
[info]                                                                     ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:23:97: Generated JSON codec for type 'Array[BigDecimal]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[BigDecimal]] {
[info]       def nullValue: Array[BigDecimal] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[BigDecimal]): Array[BigDecimal] = d0(in, default);
[info]       def encodeValue(x: Array[BigDecimal], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[BigDecimal]): Array[BigDecimal] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[scala.math.BigDecimal](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBigDecimal(null, 300));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[BigDecimal], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[BigDecimal] = new Array[scala.math.BigDecimal](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bigDecimalArrayCodec: JsonValueCodec[Array[BigDecimal]] = make[Array[BigDecimal]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:24:85: Generated JSON codec for type 'Array[BigInt]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[BigInt]] {
[info]       def nullValue: Array[BigInt] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[BigInt]): Array[BigInt] = d0(in, default);
[info]       def encodeValue(x: Array[BigInt], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[BigInt]): Array[BigInt] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[scala.math.BigInt](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBigInt(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[BigInt], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[BigInt] = new Array[scala.math.BigInt](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bigIntArrayCodec: JsonValueCodec[Array[BigInt]] = make[Array[BigInt]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:25:122: Generated JSON codec for type 'scala.collection.mutable.ArrayBuffer[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.ArrayBuffer[Boolean]] {
[info]       def nullValue: scala.collection.mutable.ArrayBuffer[Boolean] = ArrayBuffer.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.ArrayBuffer[Boolean]): scala.collection.mutable.ArrayBuffer[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.ArrayBuffer[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.ArrayBuffer[Boolean]): scala.collection.mutable.ArrayBuffer[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = default;
[info]             if (x.nonEmpty)
[info]               x.clear()
[info]             else
[info]               ();
[info]             do 
[info]               x.+=(in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.mutable.ArrayBuffer[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanArrayBufferCodec: JsonValueCodec[mutable.ArrayBuffer[Boolean]] = make[mutable.ArrayBuffer[Boolean]](CodecMakerConfig())
[info]                                                                                                                          ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:26:88: Generated JSON codec for type 'Array[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Boolean]] {
[info]       def nullValue: Array[Boolean] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Boolean]): Array[Boolean] = d0(in, default);
[info]       def encodeValue(x: Array[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[Boolean]): Array[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Boolean](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBoolean());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[Boolean] = new Array[Boolean](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanArrayCodec: JsonValueCodec[Array[Boolean]] = make[Array[Boolean]](CodecMakerConfig())
[info]                                                                                        ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:27:85: Generated JSON codec for type 'List[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[List[Boolean]] {
[info]       def nullValue: List[Boolean] = List.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: List[Boolean]): List[Boolean] = d0(in, default);
[info]       def encodeValue(x: List[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: List[Boolean]): List[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = new scala.collection.mutable.ListBuffer[Boolean]();
[info]             do 
[info]               x.+=(in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.toList
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: List[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         var l = x;
[info]         while (l.isEmpty.`unary_!`) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(l.head);
[info]             l = l.tail
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanListCodec: JsonValueCodec[List[Boolean]] = make[List[Boolean]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:28:91: Generated JSON codec for type 'scala.collection.immutable.Vector[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.Vector[Boolean]] {
[info]       def nullValue: scala.collection.immutable.Vector[Boolean] = Vector.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.Vector[Boolean]): scala.collection.immutable.Vector[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.Vector[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.Vector[Boolean]): scala.collection.immutable.Vector[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Vector.newBuilder[Boolean];
[info]             do 
[info]               x.+=(in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.immutable.Vector[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanVectorCodec: JsonValueCodec[Vector[Boolean]] = make[Vector[Boolean]](CodecMakerConfig())
[info]                                                                                           ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:29:79: Generated JSON codec for type 'Array[Byte]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Byte]] {
[info]       def nullValue: Array[Byte] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Byte]): Array[Byte] = d0(in, default);
[info]       def encodeValue(x: Array[Byte], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[Byte]): Array[Byte] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Byte](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readByte());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Byte], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[Byte] = new Array[Byte](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val byteArrayCodec: JsonValueCodec[Array[Byte]] = make[Array[Byte]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:30:79: Generated JSON codec for type 'Array[Char]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Char]] {
[info]       def nullValue: Array[Char] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Char]): Array[Char] = d0(in, default);
[info]       def encodeValue(x: Array[Char], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[Char]): Array[Char] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Char](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readChar());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Char], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[Char] = new Array[Char](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val charArrayCodec: JsonValueCodec[Array[Char]] = make[Array[Char]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:31:85: Generated JSON codec for type 'Array[Double]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Double]] {
[info]       def nullValue: Array[Double] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Double]): Array[Double] = d0(in, default);
[info]       def encodeValue(x: Array[Double], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[Double]): Array[Double] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Double](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readDouble());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Double], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[Double] = new Array[Double](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val doubleArrayCodec: JsonValueCodec[Array[Double]] = make[Array[Double]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:32:91: Generated JSON codec for type 'Array[java.time.Duration]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Duration]] {
[info]       def nullValue: Array[java.time.Duration] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Duration]): Array[java.time.Duration] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Duration], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Duration]): Array[java.time.Duration] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Duration](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readDuration(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Duration], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.Duration] = new Array[java.time.Duration](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val durationArrayCodec: JsonValueCodec[Array[Duration]] = make[Array[Duration]](CodecMakerConfig())
[info]                                                                                           ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:33:87: Generated JSON codec for type 'Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]] {
[info]       def nullValue: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = d0(in, default);
[info]       def encodeValue(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value): com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value = if (in.isNextToken('\"'))
[info]         {
[info]           in.rollbackToken();
[info]           val len = in.readStringAsCharBuf();
[info]           SuitEnum.values.iterator.find(((e) => in.isCharBufEqualsTo(len, e.toString))).getOrElse(in.enumValueError(len))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '\"');
[info]       private[this] def d0(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, d1(in, null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value, out: JsonWriter): Unit = out.writeVal(x.toString);
[info]       private[this] def e0(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e1(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val enumArrayCodec: JsonValueCodec[Array[SuitEnum]] = make[Array[SuitEnum]](CodecMakerConfig())
[info]                                                                                       ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:34:82: Generated JSON codec for type 'Array[Float]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Float]] {
[info]       def nullValue: Array[Float] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Float]): Array[Float] = d0(in, default);
[info]       def encodeValue(x: Array[Float], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[Float]): Array[Float] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Float](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readFloat());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Float], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[Float] = new Array[Float](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val floatArrayCodec: JsonValueCodec[Array[Float]] = make[Array[Float]](CodecMakerConfig())
[info]                                                                                  ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:35:88: Generated JSON codec for type 'Array[java.time.Instant]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Instant]] {
[info]       def nullValue: Array[java.time.Instant] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Instant]): Array[java.time.Instant] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Instant], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Instant]): Array[java.time.Instant] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Instant](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readInstant(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Instant], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.Instant] = new Array[java.time.Instant](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val instantArrayCodec: JsonValueCodec[Array[Instant]] = make[Array[Instant]](CodecMakerConfig())
[info]                                                                                        ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:36:76: Generated JSON codec for type 'Array[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Int]] {
[info]       def nullValue: Array[Int] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Int]): Array[Int] = d0(in, default);
[info]       def encodeValue(x: Array[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[Int]): Array[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Int](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readInt());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[Int] = new Array[Int](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val intArrayCodec: JsonValueCodec[Array[Int]] = make[Array[Int]](CodecMakerConfig())
[info]                                                                            ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:37:83: Generated JSON codec for type 'Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]] {
[info]       def nullValue: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = d0(in, default);
[info]       def encodeValue(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Suit): com.github.plokhotnyuk.jsoniter_scala.macros.Suit = if (in.isNextToken('\"'))
[info]         {
[info]           in.rollbackToken();
[info]           val v = in.readString(null);
[info]           try {
[info]             Suit.valueOf(v)
[info]           } catch {
[info]             case ((_): IllegalArgumentException) => in.enumValueError(v)
[info]           }
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '\"');
[info]       private[this] def d0(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, d1(in, null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Suit, out: JsonWriter): Unit = out.writeVal(x.name);
[info]       private[this] def e0(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e1(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val javaEnumArrayCodec: JsonValueCodec[Array[Suit]] = make[Array[Suit]](CodecMakerConfig())
[info]                                                                                   ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:38:79: Generated JSON codec for type 'Array[Long]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Long]] {
[info]       def nullValue: Array[Long] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Long]): Array[Long] = d0(in, default);
[info]       def encodeValue(x: Array[Long], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[Long]): Array[Long] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Long](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLong());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Long], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[Long] = new Array[Long](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val longArrayCodec: JsonValueCodec[Array[Long]] = make[Array[Long]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:39:94: Generated JSON codec for type 'Array[java.time.LocalDate]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalDate]] {
[info]       def nullValue: Array[java.time.LocalDate] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalDate]): Array[java.time.LocalDate] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalDate], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalDate]): Array[java.time.LocalDate] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalDate](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalDate(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalDate], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.LocalDate] = new Array[java.time.LocalDate](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localDateArrayCodec: JsonValueCodec[Array[LocalDate]] = make[Array[LocalDate]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:40:106: Generated JSON codec for type 'Array[java.time.LocalDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalDateTime]] {
[info]       def nullValue: Array[java.time.LocalDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalDateTime]): Array[java.time.LocalDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalDateTime]): Array[java.time.LocalDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.LocalDateTime] = new Array[java.time.LocalDateTime](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localDateTimeArrayCodec: JsonValueCodec[Array[LocalDateTime]] = make[Array[LocalDateTime]](CodecMakerConfig())
[info]                                                                                                          ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:41:94: Generated JSON codec for type 'Array[java.time.LocalTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalTime]] {
[info]       def nullValue: Array[java.time.LocalTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalTime]): Array[java.time.LocalTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalTime]): Array[java.time.LocalTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.LocalTime] = new Array[java.time.LocalTime](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localTimeArrayCodec: JsonValueCodec[Array[LocalTime]] = make[Array[LocalTime]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:42:109: Generated JSON codec for type 'Array[java.time.OffsetDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.OffsetDateTime]] {
[info]       def nullValue: Array[java.time.OffsetDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.OffsetDateTime]): Array[java.time.OffsetDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.OffsetDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.OffsetDateTime]): Array[java.time.OffsetDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.OffsetDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readOffsetDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.OffsetDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.OffsetDateTime] = new Array[java.time.OffsetDateTime](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val offsetDateTimeArrayCodec: JsonValueCodec[Array[OffsetDateTime]] = make[Array[OffsetDateTime]](CodecMakerConfig())
[info]                                                                                                             ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:43:97: Generated JSON codec for type 'Array[java.time.OffsetTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.OffsetTime]] {
[info]       def nullValue: Array[java.time.OffsetTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.OffsetTime]): Array[java.time.OffsetTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.OffsetTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.OffsetTime]): Array[java.time.OffsetTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.OffsetTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readOffsetTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.OffsetTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.OffsetTime] = new Array[java.time.OffsetTime](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val offsetTimeArrayCodec: JsonValueCodec[Array[OffsetTime]] = make[Array[OffsetTime]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:44:85: Generated JSON codec for type 'Array[java.time.Period]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Period]] {
[info]       def nullValue: Array[java.time.Period] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Period]): Array[java.time.Period] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Period], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Period]): Array[java.time.Period] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Period](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readPeriod(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Period], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.Period] = new Array[java.time.Period](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val periodArrayCodec: JsonValueCodec[Array[Period]] = make[Array[Period]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:45:82: Generated JSON codec for type 'Array[Short]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Short]] {
[info]       def nullValue: Array[Short] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Short]): Array[Short] = d0(in, default);
[info]       def encodeValue(x: Array[Short], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[Short]): Array[Short] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Short](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readShort());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Short], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[Short] = new Array[Short](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val shortArrayCodec: JsonValueCodec[Array[Short]] = make[Array[Short]](CodecMakerConfig())
[info]                                                                                  ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:46:79: Generated JSON codec for type 'Array[java.util.UUID]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.util.UUID]] {
[info]       def nullValue: Array[java.util.UUID] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.util.UUID]): Array[java.util.UUID] = d0(in, default);
[info]       def encodeValue(x: Array[java.util.UUID], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.util.UUID]): Array[java.util.UUID] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.util.UUID](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readUUID(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.util.UUID], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.util.UUID] = new Array[java.util.UUID](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val uuidArrayCodec: JsonValueCodec[Array[UUID]] = make[Array[UUID]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:47:79: Generated JSON codec for type 'Array[java.time.Year]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Year]] {
[info]       def nullValue: Array[java.time.Year] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Year]): Array[java.time.Year] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Year], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Year]): Array[java.time.Year] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Year](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readYear(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Year], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.Year] = new Array[java.time.Year](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val yearArrayCodec: JsonValueCodec[Array[Year]] = make[Array[Year]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:48:94: Generated JSON codec for type 'Array[java.time.YearMonth]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.YearMonth]] {
[info]       def nullValue: Array[java.time.YearMonth] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.YearMonth]): Array[java.time.YearMonth] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.YearMonth], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.YearMonth]): Array[java.time.YearMonth] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.YearMonth](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readYearMonth(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.YearMonth], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.YearMonth] = new Array[java.time.YearMonth](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val yearMonthArrayCodec: JsonValueCodec[Array[YearMonth]] = make[Array[YearMonth]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:49:106: Generated JSON codec for type 'Array[java.time.ZonedDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZonedDateTime]] {
[info]       def nullValue: Array[java.time.ZonedDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZonedDateTime]): Array[java.time.ZonedDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZonedDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZonedDateTime]): Array[java.time.ZonedDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZonedDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZonedDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZonedDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.ZonedDateTime] = new Array[java.time.ZonedDateTime](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zonedDateTimeArrayCodec: JsonValueCodec[Array[ZonedDateTime]] = make[Array[ZonedDateTime]](CodecMakerConfig())
[info]                                                                                                          ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:50:85: Generated JSON codec for type 'Array[java.time.ZoneId]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZoneId]] {
[info]       def nullValue: Array[java.time.ZoneId] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZoneId]): Array[java.time.ZoneId] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZoneId], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZoneId]): Array[java.time.ZoneId] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZoneId](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZoneId(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZoneId], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.ZoneId] = new Array[java.time.ZoneId](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zoneIdArrayCodec: JsonValueCodec[Array[ZoneId]] = make[Array[ZoneId]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:51:97: Generated JSON codec for type 'Array[java.time.ZoneOffset]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZoneOffset]] {
[info]       def nullValue: Array[java.time.ZoneOffset] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZoneOffset]): Array[java.time.ZoneOffset] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZoneOffset], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZoneOffset]): Array[java.time.ZoneOffset] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZoneOffset](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZoneOffset(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZoneOffset], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.ZoneOffset] = new Array[java.time.ZoneOffset](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zoneOffsetArrayCodec: JsonValueCodec[Array[ZoneOffset]] = make[Array[ZoneOffset]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:52:66: Generated JSON codec for type 'scala.collection.immutable.BitSet':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.BitSet] {
[info]       def nullValue: scala.collection.immutable.BitSet = BitSet.empty;
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.BitSet): scala.collection.immutable.BitSet = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.BitSet, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.BitSet): scala.collection.immutable.BitSet = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Long](2);
[info]             var mi = 0;
[info]             do 
[info]               {
[info]                 val v = in.readInt();
[info]                 if (v.<(0).||(v.>=(2147483647)))
[info]                   in.decodeError("illegal value for bit set")
[info]                 else
[info]                   ();
[info]                 val i = v.>>>(6);
[info]                 if (i.>(mi))
[info]                   {
[info]                     mi = i;
[info]                     if (i.>=(x.length))
[info]                       x = java.util.Arrays.copyOf(x, java.lang.Integer.highestOneBit(i).<<(1))
[info]                     else
[info]                       ()
[info]                   }
[info]                 else
[info]                   ();
[info]                 x(i).|=(1L.<<(v.&(63)))
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               {
[info]                 if (mi.>(1).&&(mi.+(1).!=(x.length)))
[info]                   x = java.util.Arrays.copyOf(x, mi.+(1))
[info]                 else
[info]                   ();
[info]                 BitSet.fromBitMaskNoCopy(x)
[info]               }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.immutable.BitSet, out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bitSetCodec: JsonValueCodec[BitSet] = make[BitSet](CodecMakerConfig(bitSetValueLimit = Int.MaxValue /*WARNING: don't do this for open-system*/))
[info]                                                                  ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:53:87: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _i: Int = 0;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readString(_s)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _i = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields(s = _s, i = _i)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("i");
[info]           out.writeVal(x.i)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def f0(i: Int): String = (i: @switch) match {
[info]         case 0 => "s"
[info]         case 1 => "i"
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val extractFieldsCodec: JsonValueCodec[ExtractFields] = make[ExtractFields](CodecMakerConfig())
[info]                                                                                       ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:54:94: Generated JSON codec for type 'scala.collection.immutable.IntMap[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.IntMap[Boolean]] {
[info]       def nullValue: scala.collection.immutable.IntMap[Boolean] = IntMap.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.IntMap[Boolean]): scala.collection.immutable.IntMap[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.IntMap[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.IntMap[Boolean]): scala.collection.immutable.IntMap[Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = IntMap.empty[Boolean];
[info]             do 
[info]               x = x.updated(in.readKeyAsInt(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.immutable.IntMap[Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val intMapOfBooleansCodec: JsonValueCodec[IntMap[Boolean]] = make[IntMap[Boolean]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:55:89: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: IndexedSeq[String]): IndexedSeq[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d6(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Value): com.github.plokhotnyuk.jsoniter_scala.macros.Value = if (in.isNextToken('{'))
[info]         {
[info]           var _text: String = null;
[info]           var _value: Int = 0;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _text = in.readString(_text)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 111972721 => if (in.isCharBufEqualsTo(l, "value"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _value = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f2(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Value(text = _text, value = _value)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Elements): com.github.plokhotnyuk.jsoniter_scala.macros.Elements = if (in.isNextToken('{'))
[info]         {
[info]           var _distance: com.github.plokhotnyuk.jsoniter_scala.macros.Value = null;
[info]           var _duration: com.github.plokhotnyuk.jsoniter_scala.macros.Value = null;
[info]           var _status: String = null;
[info]           var p0 = 7;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 288459765 => if (in.isCharBufEqualsTo(l, "distance"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _distance = d6(in, _distance)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1992012396 => if (in.isCharBufEqualsTo(l, "duration"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _duration = d6(in, _duration)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -892481550 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _status = in.readString(_status)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(7).!=(0))
[info]             in.requiredFieldError(f1(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Elements(distance = _distance, duration = _duration, status = _status)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d4(in: JsonReader, default: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements]): IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Elements];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Rows): com.github.plokhotnyuk.jsoniter_scala.macros.Rows = if (in.isNextToken('{'))
[info]         {
[info]           var _elements: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Elements];
[info]           var p0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -8339209 => if (in.isCharBufEqualsTo(l, "elements"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _elements = d4(in, _elements)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Rows(elements = _elements)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d2(in: JsonReader, default: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows]): IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Rows];
[info]             do 
[info]               x.+=(d3(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = if (in.isNextToken('{'))
[info]         {
[info]           var _destination_addresses: IndexedSeq[String] = IndexedSeq.empty[String];
[info]           var _origin_addresses: IndexedSeq[String] = IndexedSeq.empty[String];
[info]           var _rows: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Rows];
[info]           var _status: String = null;
[info]           var p0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 715423921 => if (in.isCharBufEqualsTo(l, "destination_addresses"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _destination_addresses = d1(in, _destination_addresses)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1780936137 => if (in.isCharBufEqualsTo(l, "origin_addresses"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _origin_addresses = d1(in, _origin_addresses)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3506649 => if (in.isCharBufEqualsTo(l, "rows"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _rows = d2(in, _rows)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -892481550 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _status = in.readString(_status)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(8).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix(destination_addresses = _destination_addresses, origin_addresses = _origin_addresses, rows = _rows, status = _status)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e1(x: IndexedSeq[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e6(x: com.github.plokhotnyuk.jsoniter_scala.macros.Value, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           out.writeVal(x.text)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("value");
[info]           out.writeVal(x.value)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e5(x: com.github.plokhotnyuk.jsoniter_scala.macros.Elements, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("distance");
[info]           e6(x.distance, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("duration");
[info]           e6(x.duration, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("status");
[info]           out.writeVal(x.status)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e4(x: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e5(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.Rows, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.elements;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("elements");
[info]               e4(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e2(x: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e3(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.destination_addresses;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("destination_addresses");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.origin_addresses;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("origin_addresses");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.rows;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("rows");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("status");
[info]           out.writeVal(x.status)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def f0(i: Int): String = (i: @switch) match {
[info]         case 0 => "destination_addresses"
[info]         case 1 => "origin_addresses"
[info]         case 2 => "rows"
[info]         case 3 => "status"
[info]       };
[info]       private[this] def f1(i: Int): String = (i: @switch) match {
[info]         case 0 => "distance"
[info]         case 1 => "duration"
[info]         case 2 => "status"
[info]       };
[info]       private[this] def f2(i: Int): String = (i: @switch) match {
[info]         case 0 => "text"
[info]         case 1 => "value"
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val googleMapsAPICodec: JsonValueCodec[DistanceMatrix] = make[DistanceMatrix](CodecMakerConfig())
[info]                                                                                         ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:56:101: Generated JSON codec for type 'scala.collection.immutable.Map[Int,Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.Map[Int,Boolean]] {
[info]       def nullValue: scala.collection.immutable.Map[Int,Boolean] = Map.empty[Int, Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.Map[Int,Boolean]): scala.collection.immutable.Map[Int,Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.Map[Int,Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.Map[Int,Boolean]): scala.collection.immutable.Map[Int,Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = Map.empty[Int, Boolean];
[info]             do 
[info]               x = x.updated(in.readKeyAsInt(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.immutable.Map[Int,Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mapOfIntsToBooleansCodec: JsonValueCodec[Map[Int, Boolean]] = make[Map[Int, Boolean]](CodecMakerConfig())
[info]                                                                                                     ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:57:95: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _i: Int = 0;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readString(_s)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _i = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields(s = _s, i = _i)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("i");
[info]           out.writeVal(x.i)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def f0(i: Int): String = (i: @switch) match {
[info]         case 0 => "s"
[info]         case 1 => "i"
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val missingReqFieldCodec: JsonValueCodec[MissingReqFields] = make[MissingReqFields](CodecMakerConfig())
[info]                                                                                               ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:58:89: Generated JSON codec for type 'scala.collection.mutable.BitSet':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.BitSet] {
[info]       def nullValue: scala.collection.mutable.BitSet = BitSet.empty;
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.BitSet): scala.collection.mutable.BitSet = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.BitSet, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.BitSet): scala.collection.mutable.BitSet = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Long](2);
[info]             do 
[info]               {
[info]                 val v = in.readInt();
[info]                 if (v.<(0).||(v.>=(2147483647)))
[info]                   in.decodeError("illegal value for bit set")
[info]                 else
[info]                   ();
[info]                 val i = v.>>>(6);
[info]                 if (i.>=(x.length))
[info]                   x = java.util.Arrays.copyOf(x, java.lang.Integer.highestOneBit(i).<<(1))
[info]                 else
[info]                   ();
[info]                 x(i).|=(1L.<<(v.&(63)))
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               BitSet.fromBitMaskNoCopy(x)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.mutable.BitSet, out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableBitSetCodec: JsonValueCodec[mutable.BitSet] = make[mutable.BitSet](CodecMakerConfig(bitSetValueLimit = Int.MaxValue /*WARNING: don't do this for open-system*/))
[info]                                                                                         ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:59:120: Generated JSON codec for type 'scala.collection.mutable.LongMap[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.LongMap[Boolean]] {
[info]       def nullValue: scala.collection.mutable.LongMap[Boolean] = LongMap.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.LongMap[Boolean]): scala.collection.mutable.LongMap[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.LongMap[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.LongMap[Boolean]): scala.collection.mutable.LongMap[Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               LongMap.empty[Boolean];
[info]             do 
[info]               x.update(in.readKeyAsLong(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.mutable.LongMap[Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableLongMapOfBooleansCodec: JsonValueCodec[mutable.LongMap[Boolean]] = make[mutable.LongMap[Boolean]](CodecMakerConfig())
[info]                                                                                                                        ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:60:124: Generated JSON codec for type 'scala.collection.mutable.Map[Int,Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.Map[Int,Boolean]] {
[info]       def nullValue: scala.collection.mutable.Map[Int,Boolean] = Map.empty[Int, Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.Map[Int,Boolean]): scala.collection.mutable.Map[Int,Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.Map[Int,Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.Map[Int,Boolean]): scala.collection.mutable.Map[Int,Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               Map.empty[Int, Boolean];
[info]             do 
[info]               x.update(in.readKeyAsInt(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.mutable.Map[Int,Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableMapOfIntsToBooleansCodec: JsonValueCodec[mutable.Map[Int, Boolean]] = make[mutable.Map[Int, Boolean]](CodecMakerConfig())
[info]                                                                                                                            ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:61:96: Generated JSON codec for type 'scala.collection.mutable.Set[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.Set[Int]] {
[info]       def nullValue: scala.collection.mutable.Set[Int] = Set.empty[Int];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.Set[Int]): scala.collection.mutable.Set[Int] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.Set[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.Set[Int]): scala.collection.mutable.Set[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = default;
[info]             if (x.nonEmpty)
[info]               x.clear()
[info]             else
[info]               ();
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.mutable.Set[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableSetOfIntsCodec: JsonValueCodec[mutable.Set[Int]] = make[mutable.Set[Int]](CodecMakerConfig())
[info]                                                                                                ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:62:78: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Primitives':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Primitives] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives): com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives): com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = if (in.isNextToken('{'))
[info]         {
[info]           var _b: Byte = ((0): Byte);
[info]           var _s: Short = ((0): Short);
[info]           var _i: Int = 0;
[info]           var _l: Long = 0L;
[info]           var _bl: Boolean = false;
[info]           var _ch: Char = '\u0000';
[info]           var _dbl: Double = 0.0;
[info]           var _f: Float = 0.0F;
[info]           var p0 = 255;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 98 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _b = in.readByte()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readShort()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _i = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _l = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3146 => if (in.isCharBufEqualsTo(l, "bl"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _bl = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3173 => if (in.isCharBufEqualsTo(l, "ch"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _ch = in.readChar()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 99246 => if (in.isCharBufEqualsTo(l, "dbl"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _dbl = in.readDouble()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102 => if (in.isCharBufEqualsTo(l, "f"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _f = in.readFloat()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(255).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Primitives(b = _b, s = _s, i = _i, l = _l, bl = _bl, ch = _ch, dbl = _dbl, f = _f)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("b");
[info]           out.writeVal(x.b)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("i");
[info]           out.writeVal(x.i)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("l");
[info]           out.writeVal(x.l)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("bl");
[info]           out.writeVal(x.bl)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("ch");
[info]           out.writeVal(x.ch)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("dbl");
[info]           out.writeVal(x.dbl)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("f");
[info]           out.writeVal(x.f)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def f0(i: Int): String = (i: @switch) match {
[info]         case 0 => "b"
[info]         case 1 => "s"
[info]         case 2 => "i"
[info]         case 3 => "l"
[info]         case 4 => "bl"
[info]         case 5 => "ch"
[info]         case 6 => "dbl"
[info]         case 7 => "f"
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val primitivesCodec: JsonValueCodec[Primitives] = make[Primitives](CodecMakerConfig())
[info]                                                                              ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:63:73: Generated JSON codec for type 'scala.collection.immutable.Set[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.Set[Int]] {
[info]       def nullValue: scala.collection.immutable.Set[Int] = Set.empty[Int];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.Set[Int]): scala.collection.immutable.Set[Int] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.Set[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.Set[Int]): scala.collection.immutable.Set[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Set.newBuilder[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.immutable.Set[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val setOfIntsCodec: JsonValueCodec[Set[Int]] = make[Set[Int]](CodecMakerConfig())
[info]                                                                         ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:64:78: Generated JSON codec for type 'Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]] {
[info]       def nullValue: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet];
[info]       def decodeValue(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = d0(in, default);
[info]       def encodeValue(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d3(in: JsonReader, default: Seq[String]): Seq[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d6(in: JsonReader, default: Seq[Int]): Seq[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions): com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions = if (in.isNextToken('{'))
[info]         {
[info]           var _screen_name: String = null;
[info]           var _name: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _indices: Seq[Int] = Seq.empty[Int];
[info]           var p0 = 31;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -43264386 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _screen_name = in.readString(_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3373707 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _name = in.readString(_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1943391143 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _indices = d6(in, _indices)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(15).!=(0))
[info]             in.requiredFieldError(f1(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions(screen_name = _screen_name, name = _name, id = _id, id_str = _id_str, indices = _indices)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d4(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d8(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Urls): com.github.plokhotnyuk.jsoniter_scala.macros.Urls = if (in.isNextToken('{'))
[info]         {
[info]           var _url: String = null;
[info]           var _expanded_url: String = null;
[info]           var _display_url: String = null;
[info]           var _indices: Seq[Int] = Seq.empty[Int];
[info]           var p0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _url = in.readString(_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -518939415 => if (in.isCharBufEqualsTo(l, "expanded_url"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _expanded_url = in.readString(_expanded_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1714674802 => if (in.isCharBufEqualsTo(l, "display_url"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _display_url = in.readString(_display_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1943391143 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _indices = d6(in, _indices)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(7).!=(0))
[info]             in.requiredFieldError(f2(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Urls(url = _url, expanded_url = _expanded_url, display_url = _display_url, indices = _indices)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d7(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]             do 
[info]               x.+=(d8(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Entities): com.github.plokhotnyuk.jsoniter_scala.macros.Entities = if (in.isNextToken('{'))
[info]         {
[info]           var _hashtags: Seq[String] = Seq.empty[String];
[info]           var _symbols: Seq[String] = Seq.empty[String];
[info]           var _user_mentions: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions];
[info]           var _urls: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]           var p0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 149143079 => if (in.isCharBufEqualsTo(l, "hashtags"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _hashtags = d3(in, _hashtags)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1743438373 => if (in.isCharBufEqualsTo(l, "symbols"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _symbols = d3(in, _symbols)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -553518659 => if (in.isCharBufEqualsTo(l, "user_mentions"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _user_mentions = d4(in, _user_mentions)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3598564 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _urls = d7(in, _urls)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Entities(hashtags = _hashtags, symbols = _symbols, user_mentions = _user_mentions, urls = _urls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d9(in: JsonReader, default: Option[String]): Option[String] = if (in.isNextToken('n'))
[info]         in.readNullOrError(default, "expected value or null")
[info]       else
[info]         {
[info]           in.rollbackToken();
[info]           Some(in.readString(null))
[info]         };
[info]       private[this] def d12(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Url): com.github.plokhotnyuk.jsoniter_scala.macros.Url = if (in.isNextToken('{'))
[info]         {
[info]           var _urls: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]           var p0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3598564 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _urls = d7(in, _urls)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Url(urls = _urls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d11(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities): com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities = if (in.isNextToken('{'))
[info]         {
[info]           var _url: com.github.plokhotnyuk.jsoniter_scala.macros.Url = null;
[info]           var _description: com.github.plokhotnyuk.jsoniter_scala.macros.Url = null;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _url = d12(in, _url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1724546052 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _description = d12(in, _description)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f4(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities(url = _url, description = _description)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d10(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.User): com.github.plokhotnyuk.jsoniter_scala.macros.User = if (in.isNextToken('{'))
[info]         {
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _name: String = null;
[info]           var _screen_name: String = null;
[info]           var _location: String = null;
[info]           var _description: String = null;
[info]           var _url: String = null;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities = null;
[info]           var _protected: Boolean = false;
[info]           var _followers_count: Int = 0;
[info]           var _friends_count: Int = 0;
[info]           var _listed_count: Int = 0;
[info]           var _created_at: String = null;
[info]           var _favourites_count: Int = 0;
[info]           var _utc_offset: Int = 0;
[info]           var _time_zone: String = null;
[info]           var _geo_enabled: Boolean = false;
[info]           var _verified: Boolean = false;
[info]           var _statuses_count: Int = 0;
[info]           var _lang: String = null;
[info]           var _contributors_enabled: Boolean = false;
[info]           var _is_translator: Boolean = false;
[info]           var _is_translation_enabled: Boolean = false;
[info]           var _profile_background_color: String = null;
[info]           var _profile_background_image_url: String = null;
[info]           var _profile_background_image_url_https: String = null;
[info]           var _profile_background_tile: Boolean = false;
[info]           var _profile_image_url: String = null;
[info]           var _profile_image_url_https: String = null;
[info]           var _profile_banner_url: String = null;
[info]           var _profile_link_color: String = null;
[info]           var _profile_sidebar_border_color: String = null;
[info]           var _profile_sidebar_fill_color: String = null;
[info]           var _profile_text_color: String = null;
[info]           var _profile_use_background_image: Boolean = false;
[info]           var _has_extended_profile: Boolean = false;
[info]           var _default_profile: Boolean = false;
[info]           var _default_profile_image: Boolean = false;
[info]           var _following: Boolean = false;
[info]           var _follow_request_sent: Boolean = false;
[info]           var _notifications: Boolean = false;
[info]           var _translator_type: String = null;
[info]           var p0 = -1;
[info]           var p1 = 1023;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3373707 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _name = in.readString(_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -43264386 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _screen_name = in.readString(_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1901043637 => if (in.isCharBufEqualsTo(l, "location"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _location = in.readString(_location)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1724546052 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _description = in.readString(_description)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _url = in.readString(_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _entities = d11(in, _entities)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -608539730 => if (in.isCharBufEqualsTo(l, "protected"))
[info]                       {
[info]                         if (p0.&(256).!=(0))
[info]                           p0.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _protected = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -460163995 => if (in.isCharBufEqualsTo(l, "followers_count"))
[info]                       {
[info]                         if (p0.&(512).!=(0))
[info]                           p0.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _followers_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1666926107 => if (in.isCharBufEqualsTo(l, "friends_count"))
[info]                       {
[info]                         if (p0.&(1024).!=(0))
[info]                           p0.^=(1024)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _friends_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1974943731 => if (in.isCharBufEqualsTo(l, "listed_count"))
[info]                       {
[info]                         if (p0.&(2048).!=(0))
[info]                           p0.^=(2048)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _listed_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         if (p0.&(4096).!=(0))
[info]                           p0.^=(4096)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _created_at = in.readString(_created_at)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 226316666 => if (in.isCharBufEqualsTo(l, "favourites_count"))
[info]                       {
[info]                         if (p0.&(8192).!=(0))
[info]                           p0.^=(8192)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favourites_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1699658638 => if (in.isCharBufEqualsTo(l, "utc_offset"))
[info]                       {
[info]                         if (p0.&(16384).!=(0))
[info]                           p0.^=(16384)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _utc_offset = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 36848094 => if (in.isCharBufEqualsTo(l, "time_zone"))
[info]                       {
[info]                         if (p0.&(32768).!=(0))
[info]                           p0.^=(32768)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _time_zone = in.readString(_time_zone)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1085743021 => if (in.isCharBufEqualsTo(l, "geo_enabled"))
[info]                       {
[info]                         if (p0.&(65536).!=(0))
[info]                           p0.^=(65536)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geo_enabled = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1994383672 => if (in.isCharBufEqualsTo(l, "verified"))
[info]                       {
[info]                         if (p0.&(131072).!=(0))
[info]                           p0.^=(131072)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _verified = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1824078800 => if (in.isCharBufEqualsTo(l, "statuses_count"))
[info]                       {
[info]                         if (p0.&(262144).!=(0))
[info]                           p0.^=(262144)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _statuses_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         if (p0.&(524288).!=(0))
[info]                           p0.^=(524288)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _lang = in.readString(_lang)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 647263482 => if (in.isCharBufEqualsTo(l, "contributors_enabled"))
[info]                       {
[info]                         if (p0.&(1048576).!=(0))
[info]                           p0.^=(1048576)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _contributors_enabled = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 583435343 => if (in.isCharBufEqualsTo(l, "is_translator"))
[info]                       {
[info]                         if (p0.&(2097152).!=(0))
[info]                           p0.^=(2097152)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_translator = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1690715422 => if (in.isCharBufEqualsTo(l, "is_translation_enabled"))
[info]                       {
[info]                         if (p0.&(4194304).!=(0))
[info]                           p0.^=(4194304)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_translation_enabled = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1592986856 => if (in.isCharBufEqualsTo(l, "profile_background_color"))
[info]                       {
[info]                         if (p0.&(8388608).!=(0))
[info]                           p0.^=(8388608)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_color = in.readString(_profile_background_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1189803120 => if (in.isCharBufEqualsTo(l, "profile_background_image_url"))
[info]                       {
[info]                         if (p0.&(16777216).!=(0))
[info]                           p0.^=(16777216)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_image_url = in.readString(_profile_background_image_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 594447228 => if (in.isCharBufEqualsTo(l, "profile_background_image_url_https"))
[info]                       {
[info]                         if (p0.&(33554432).!=(0))
[info]                           p0.^=(33554432)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_image_url_https = in.readString(_profile_background_image_url_https)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1021718665 => if (in.isCharBufEqualsTo(l, "profile_background_tile"))
[info]                       {
[info]                         if (p0.&(67108864).!=(0))
[info]                           p0.^=(67108864)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_tile = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -174080651 => if (in.isCharBufEqualsTo(l, "profile_image_url"))
[info]                       {
[info]                         if (p0.&(134217728).!=(0))
[info]                           p0.^=(134217728)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_image_url = in.readString(_profile_image_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -782008927 => if (in.isCharBufEqualsTo(l, "profile_image_url_https"))
[info]                       {
[info]                         if (p0.&(268435456).!=(0))
[info]                           p0.^=(268435456)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_image_url_https = in.readString(_profile_image_url_https)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -690137550 => if (in.isCharBufEqualsTo(l, "profile_banner_url"))
[info]                       {
[info]                         if (p0.&(536870912).!=(0))
[info]                           p0.^=(536870912)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_banner_url = in.readString(_profile_banner_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1512257332 => if (in.isCharBufEqualsTo(l, "profile_link_color"))
[info]                       {
[info]                         if (p0.&(1073741824).!=(0))
[info]                           p0.^=(1073741824)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_link_color = in.readString(_profile_link_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1412739479 => if (in.isCharBufEqualsTo(l, "profile_sidebar_border_color"))
[info]                       {
[info]                         if (p0.&(-2147483648).!=(0))
[info]                           p0.^=(-2147483648)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_sidebar_border_color = in.readString(_profile_sidebar_border_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 486184128 => if (in.isCharBufEqualsTo(l, "profile_sidebar_fill_color"))
[info]                       {
[info]                         if (p1.&(1).!=(0))
[info]                           p1.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_sidebar_fill_color = in.readString(_profile_sidebar_fill_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1774134745 => if (in.isCharBufEqualsTo(l, "profile_text_color"))
[info]                       {
[info]                         if (p1.&(2).!=(0))
[info]                           p1.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_text_color = in.readString(_profile_text_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -101767272 => if (in.isCharBufEqualsTo(l, "profile_use_background_image"))
[info]                       {
[info]                         if (p1.&(4).!=(0))
[info]                           p1.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_use_background_image = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 284519336 => if (in.isCharBufEqualsTo(l, "has_extended_profile"))
[info]                       {
[info]                         if (p1.&(8).!=(0))
[info]                           p1.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _has_extended_profile = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -312724053 => if (in.isCharBufEqualsTo(l, "default_profile"))
[info]                       {
[info]                         if (p1.&(16).!=(0))
[info]                           p1.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _default_profile = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 545330631 => if (in.isCharBufEqualsTo(l, "default_profile_image"))
[info]                       {
[info]                         if (p1.&(32).!=(0))
[info]                           p1.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _default_profile_image = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 765915793 => if (in.isCharBufEqualsTo(l, "following"))
[info]                       {
[info]                         if (p1.&(64).!=(0))
[info]                           p1.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _following = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 585125142 => if (in.isCharBufEqualsTo(l, "follow_request_sent"))
[info]                       {
[info]                         if (p1.&(128).!=(0))
[info]                           p1.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _follow_request_sent = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1272354024 => if (in.isCharBufEqualsTo(l, "notifications"))
[info]                       {
[info]                         if (p1.&(256).!=(0))
[info]                           p1.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _notifications = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -475640257 => if (in.isCharBufEqualsTo(l, "translator_type"))
[info]                       {
[info]                         if (p1.&(512).!=(0))
[info]                           p1.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _translator_type = in.readString(_translator_type)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(-1).!=(0))
[info]             in.requiredFieldError(f3(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           if (p1.&(1023).!=(0))
[info]             in.requiredFieldError(f3(Integer.numberOfTrailingZeros(p1).+(32)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.User(id = _id, id_str = _id_str, name = _name, screen_name = _screen_name, location = _location, description = _description, url = _url, entities = _entities, `protected` = _protected, followers_count = _followers_count, friends_count = _friends_count, listed_count = _listed_count, created_at = _created_at, favourites_count = _favourites_count, utc_offset = _utc_offset, time_zone = _time_zone, geo_enabled = _geo_enabled, verified = _verified, statuses_count = _statuses_count, lang = _lang, contributors_enabled = _contributors_enabled, is_translator = _is_translator, is_translation_enabled = _is_translation_enabled, profile_background_color = _profile_background_color, profile_background_image_url = _profile_background_image_url, profile_background_image_url_https = _profile_background_image_url_https, profile_background_tile = _profile_background_tile, profile_image_url = _profile_image_url, profile_image_url_https = _profile_image_url_https, profile_banner_url = _profile_banner_url, profile_link_color = _profile_link_color, profile_sidebar_border_color = _profile_sidebar_border_color, profile_sidebar_fill_color = _profile_sidebar_fill_color, profile_text_color = _profile_text_color, profile_use_background_image = _profile_use_background_image, has_extended_profile = _has_extended_profile, default_profile = _default_profile, default_profile_image = _default_profile_image, following = _following, follow_request_sent = _follow_request_sent, notifications = _notifications, translator_type = _translator_type)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d13(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus): com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus = if (in.isNextToken('{'))
[info]         {
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.macros.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           var p0 = 16777215;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _created_at = in.readString(_created_at)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _text = in.readString(_text)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1607950270 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _truncated = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _entities = d2(in, _entities)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -896505829 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _source = in.readString(_source)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1960224851 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id = d9(in, _in_reply_to_status_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1577137221 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       {
[info]                         if (p0.&(256).!=(0))
[info]                           p0.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id_str = d9(in, _in_reply_to_status_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 2047002778 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       {
[info]                         if (p0.&(512).!=(0))
[info]                           p0.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id = d9(in, _in_reply_to_user_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1274685172 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       {
[info]                         if (p0.&(1024).!=(0))
[info]                           p0.^=(1024)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id_str = d9(in, _in_reply_to_user_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -866290807 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       {
[info]                         if (p0.&(2048).!=(0))
[info]                           p0.^=(2048)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_screen_name = d9(in, _in_reply_to_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3599307 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         if (p0.&(4096).!=(0))
[info]                           p0.^=(4096)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _user = d10(in, _user)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102225 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       {
[info]                         if (p0.&(8192).!=(0))
[info]                           p0.^=(8192)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geo = d9(in, _geo)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(16384).!=(0))
[info]                           p0.^=(16384)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d9(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 106748167 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       {
[info]                         if (p0.&(32768).!=(0))
[info]                           p0.^=(32768)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _place = d9(in, _place)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1375976184 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       {
[info]                         if (p0.&(65536).!=(0))
[info]                           p0.^=(65536)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _contributors = d9(in, _contributors)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -920773622 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         if (p0.&(131072).!=(0))
[info]                           p0.^=(131072)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_quote_status = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1612760494 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         if (p0.&(262144).!=(0))
[info]                           p0.^=(262144)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweet_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1435051860 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         if (p0.&(524288).!=(0))
[info]                           p0.^=(524288)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorite_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1785238968 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         if (p0.&(1048576).!=(0))
[info]                           p0.^=(1048576)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorited = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -881681091 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         if (p0.&(2097152).!=(0))
[info]                           p0.^=(2097152)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweeted = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -4566948 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         if (p0.&(4194304).!=(0))
[info]                           p0.^=(4194304)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _possibly_sensitive = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         if (p0.&(8388608).!=(0))
[info]                           p0.^=(8388608)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _lang = in.readString(_lang)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(16650367).!=(0))
[info]             in.requiredFieldError(f5(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Tweet): com.github.plokhotnyuk.jsoniter_scala.macros.Tweet = if (in.isNextToken('{'))
[info]         {
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.macros.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _retweeted_status: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus = null;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           var p0 = 33554431;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _created_at = in.readString(_created_at)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _text = in.readString(_text)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1607950270 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _truncated = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _entities = d2(in, _entities)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -896505829 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _source = in.readString(_source)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1960224851 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id = d9(in, _in_reply_to_status_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1577137221 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       {
[info]                         if (p0.&(256).!=(0))
[info]                           p0.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id_str = d9(in, _in_reply_to_status_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 2047002778 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       {
[info]                         if (p0.&(512).!=(0))
[info]                           p0.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id = d9(in, _in_reply_to_user_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1274685172 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       {
[info]                         if (p0.&(1024).!=(0))
[info]                           p0.^=(1024)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id_str = d9(in, _in_reply_to_user_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -866290807 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       {
[info]                         if (p0.&(2048).!=(0))
[info]                           p0.^=(2048)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_screen_name = d9(in, _in_reply_to_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3599307 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         if (p0.&(4096).!=(0))
[info]                           p0.^=(4096)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _user = d10(in, _user)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102225 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       {
[info]                         if (p0.&(8192).!=(0))
[info]                           p0.^=(8192)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geo = d9(in, _geo)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(16384).!=(0))
[info]                           p0.^=(16384)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d9(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 106748167 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       {
[info]                         if (p0.&(32768).!=(0))
[info]                           p0.^=(32768)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _place = d9(in, _place)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1375976184 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       {
[info]                         if (p0.&(65536).!=(0))
[info]                           p0.^=(65536)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _contributors = d9(in, _contributors)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 364396852 => if (in.isCharBufEqualsTo(l, "retweeted_status"))
[info]                       {
[info]                         if (p0.&(131072).!=(0))
[info]                           p0.^=(131072)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweeted_status = d13(in, _retweeted_status)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -920773622 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         if (p0.&(262144).!=(0))
[info]                           p0.^=(262144)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_quote_status = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1612760494 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         if (p0.&(524288).!=(0))
[info]                           p0.^=(524288)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweet_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1435051860 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         if (p0.&(1048576).!=(0))
[info]                           p0.^=(1048576)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorite_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1785238968 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         if (p0.&(2097152).!=(0))
[info]                           p0.^=(2097152)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorited = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -881681091 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         if (p0.&(4194304).!=(0))
[info]                           p0.^=(4194304)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweeted = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -4566948 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         if (p0.&(8388608).!=(0))
[info]                           p0.^=(8388608)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _possibly_sensitive = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         if (p0.&(16777216).!=(0))
[info]                           p0.^=(16777216)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _lang = in.readString(_lang)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(33427583).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Tweet(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, retweeted_status = _retweeted_status, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet];
[info]             do 
[info]               x.+=(d1(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e3(x: Seq[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e6(x: Seq[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e5(x: com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("screen_name");
[info]           out.writeVal(x.screen_name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("name");
[info]           out.writeVal(x.name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           val v = x.indices;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("indices");
[info]               e6(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e4(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e5(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e8(x: com.github.plokhotnyuk.jsoniter_scala.macros.Urls, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           out.writeVal(x.url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("expanded_url");
[info]           out.writeVal(x.expanded_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("display_url");
[info]           out.writeVal(x.display_url)
[info]         };
[info]         {
[info]           val v = x.indices;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("indices");
[info]               e6(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e7(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e8(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e2(x: com.github.plokhotnyuk.jsoniter_scala.macros.Entities, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.hashtags;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("hashtags");
[info]               e3(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.symbols;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("symbols");
[info]               e3(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.user_mentions;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("user_mentions");
[info]               e4(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.urls;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("urls");
[info]               e7(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e11(x: com.github.plokhotnyuk.jsoniter_scala.macros.Url, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.urls;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("urls");
[info]               e7(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e10(x: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           e11(x.url, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("description");
[info]           e11(x.description, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e9(x: com.github.plokhotnyuk.jsoniter_scala.macros.User, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("name");
[info]           out.writeVal(x.name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("screen_name");
[info]           out.writeVal(x.screen_name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("location");
[info]           out.writeVal(x.location)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("description");
[info]           out.writeVal(x.description)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           out.writeVal(x.url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e10(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("protected");
[info]           out.writeVal(x.`protected`)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("followers_count");
[info]           out.writeVal(x.followers_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("friends_count");
[info]           out.writeVal(x.friends_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("listed_count");
[info]           out.writeVal(x.listed_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           out.writeVal(x.created_at)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favourites_count");
[info]           out.writeVal(x.favourites_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("utc_offset");
[info]           out.writeVal(x.utc_offset)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("time_zone");
[info]           out.writeVal(x.time_zone)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("geo_enabled");
[info]           out.writeVal(x.geo_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("verified");
[info]           out.writeVal(x.verified)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("statuses_count");
[info]           out.writeVal(x.statuses_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           out.writeVal(x.lang)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("contributors_enabled");
[info]           out.writeVal(x.contributors_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_translator");
[info]           out.writeVal(x.is_translator)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_translation_enabled");
[info]           out.writeVal(x.is_translation_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_color");
[info]           out.writeVal(x.profile_background_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_image_url");
[info]           out.writeVal(x.profile_background_image_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_image_url_https");
[info]           out.writeVal(x.profile_background_image_url_https)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_tile");
[info]           out.writeVal(x.profile_background_tile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_image_url");
[info]           out.writeVal(x.profile_image_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_image_url_https");
[info]           out.writeVal(x.profile_image_url_https)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_banner_url");
[info]           out.writeVal(x.profile_banner_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_link_color");
[info]           out.writeVal(x.profile_link_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_sidebar_border_color");
[info]           out.writeVal(x.profile_sidebar_border_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_sidebar_fill_color");
[info]           out.writeVal(x.profile_sidebar_fill_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_text_color");
[info]           out.writeVal(x.profile_text_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_use_background_image");
[info]           out.writeVal(x.profile_use_background_image)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("has_extended_profile");
[info]           out.writeVal(x.has_extended_profile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("default_profile");
[info]           out.writeVal(x.default_profile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("default_profile_image");
[info]           out.writeVal(x.default_profile_image)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("following");
[info]           out.writeVal(x.following)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("follow_request_sent");
[info]           out.writeVal(x.follow_request_sent)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("notifications");
[info]           out.writeVal(x.notifications)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("translator_type");
[info]           out.writeVal(x.translator_type)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e12(x: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           out.writeVal(x.created_at)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           out.writeVal(x.text)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("truncated");
[info]           out.writeVal(x.truncated)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e2(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("source");
[info]           out.writeVal(x.source)
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_screen_name;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_screen_name");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("user");
[info]           e9(x.user, out)
[info]         };
[info]         {
[info]           val v = x.geo;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("geo");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.place;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("place");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.contributors;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("contributors");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_quote_status");
[info]           out.writeVal(x.is_quote_status)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweet_count");
[info]           out.writeVal(x.retweet_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorite_count");
[info]           out.writeVal(x.favorite_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorited");
[info]           out.writeVal(x.favorited)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted");
[info]           out.writeVal(x.retweeted)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("possibly_sensitive");
[info]           out.writeVal(x.possibly_sensitive)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           out.writeVal(x.lang)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Tweet, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           out.writeVal(x.created_at)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           out.writeVal(x.text)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("truncated");
[info]           out.writeVal(x.truncated)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e2(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("source");
[info]           out.writeVal(x.source)
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_screen_name;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_screen_name");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("user");
[info]           e9(x.user, out)
[info]         };
[info]         {
[info]           val v = x.geo;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("geo");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.place;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("place");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.contributors;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("contributors");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted_status");
[info]           e12(x.retweeted_status, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_quote_status");
[info]           out.writeVal(x.is_quote_status)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweet_count");
[info]           out.writeVal(x.retweet_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorite_count");
[info]           out.writeVal(x.favorite_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorited");
[info]           out.writeVal(x.favorited)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted");
[info]           out.writeVal(x.retweeted)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("possibly_sensitive");
[info]           out.writeVal(x.possibly_sensitive)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           out.writeVal(x.lang)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e1(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def f0(i: Int): String = (i: @switch) match {
[info]         case 0 => "created_at"
[info]         case 1 => "id"
[info]         case 2 => "id_str"
[info]         case 3 => "text"
[info]         case 4 => "truncated"
[info]         case 5 => "entities"
[info]         case 6 => "source"
[info]         case 7 => "in_reply_to_status_id"
[info]         case 8 => "in_reply_to_status_id_str"
[info]         case 9 => "in_reply_to_user_id"
[info]         case 10 => "in_reply_to_user_id_str"
[info]         case 11 => "in_reply_to_screen_name"
[info]         case 12 => "user"
[info]         case 13 => "geo"
[info]         case 14 => "coordinates"
[info]         case 15 => "place"
[info]         case 16 => "contributors"
[info]         case 17 => "retweeted_status"
[info]         case 18 => "is_quote_status"
[info]         case 19 => "retweet_count"
[info]         case 20 => "favorite_count"
[info]         case 21 => "favorited"
[info]         case 22 => "retweeted"
[info]         case 23 => "possibly_sensitive"
[info]         case 24 => "lang"
[info]       };
[info]       private[this] def f1(i: Int): String = (i: @switch) match {
[info]         case 0 => "screen_name"
[info]         case 1 => "name"
[info]         case 2 => "id"
[info]         case 3 => "id_str"
[info]         case 4 => "indices"
[info]       };
[info]       private[this] def f2(i: Int): String = (i: @switch) match {
[info]         case 0 => "url"
[info]         case 1 => "expanded_url"
[info]         case 2 => "display_url"
[info]         case 3 => "indices"
[info]       };
[info]       private[this] def f3(i: Int): String = (i: @switch) match {
[info]         case 0 => "id"
[info]         case 1 => "id_str"
[info]         case 2 => "name"
[info]         case 3 => "screen_name"
[info]         case 4 => "location"
[info]         case 5 => "description"
[info]         case 6 => "url"
[info]         case 7 => "entities"
[info]         case 8 => "protected"
[info]         case 9 => "followers_count"
[info]         case 10 => "friends_count"
[info]         case 11 => "listed_count"
[info]         case 12 => "created_at"
[info]         case 13 => "favourites_count"
[info]         case 14 => "utc_offset"
[info]         case 15 => "time_zone"
[info]         case 16 => "geo_enabled"
[info]         case 17 => "verified"
[info]         case 18 => "statuses_count"
[info]         case 19 => "lang"
[info]         case 20 => "contributors_enabled"
[info]         case 21 => "is_translator"
[info]         case 22 => "is_translation_enabled"
[info]         case 23 => "profile_background_color"
[info]         case 24 => "profile_background_image_url"
[info]         case 25 => "profile_background_image_url_https"
[info]         case 26 => "profile_background_tile"
[info]         case 27 => "profile_image_url"
[info]         case 28 => "profile_image_url_https"
[info]         case 29 => "profile_banner_url"
[info]         case 30 => "profile_link_color"
[info]         case 31 => "profile_sidebar_border_color"
[info]         case 32 => "profile_sidebar_fill_color"
[info]         case 33 => "profile_text_color"
[info]         case 34 => "profile_use_background_image"
[info]         case 35 => "has_extended_profile"
[info]         case 36 => "default_profile"
[info]         case 37 => "default_profile_image"
[info]         case 38 => "following"
[info]         case 39 => "follow_request_sent"
[info]         case 40 => "notifications"
[info]         case 41 => "translator_type"
[info]       };
[info]       private[this] def f4(i: Int): String = (i: @switch) match {
[info]         case 0 => "url"
[info]         case 1 => "description"
[info]       };
[info]       private[this] def f5(i: Int): String = (i: @switch) match {
[info]         case 0 => "created_at"
[info]         case 1 => "id"
[info]         case 2 => "id_str"
[info]         case 3 => "text"
[info]         case 4 => "truncated"
[info]         case 5 => "entities"
[info]         case 6 => "source"
[info]         case 7 => "in_reply_to_status_id"
[info]         case 8 => "in_reply_to_status_id_str"
[info]         case 9 => "in_reply_to_user_id"
[info]         case 10 => "in_reply_to_user_id_str"
[info]         case 11 => "in_reply_to_screen_name"
[info]         case 12 => "user"
[info]         case 13 => "geo"
[info]         case 14 => "coordinates"
[info]         case 15 => "place"
[info]         case 16 => "contributors"
[info]         case 17 => "is_quote_status"
[info]         case 18 => "retweet_count"
[info]         case 19 => "favorite_count"
[info]         case 20 => "favorited"
[info]         case 21 => "retweeted"
[info]         case 22 => "possibly_sensitive"
[info]         case 23 => "lang"
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val twitterAPICodec: JsonValueCodec[Seq[Tweet]] = make[Seq[Tweet]](CodecMakerConfig())
[info]                                                                              ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:36:18: local val v1 in value primitivesFormat is never used
[warn]     implicit val v1: Format[Char] = Format(
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:43:23: local val v1 in value adtFormat is never used
[warn]     implicit lazy val v1: OFormat[A] = Json.format[A]
[warn]                       ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:44:23: local val v2 in value adtFormat is never used
[warn]     implicit lazy val v2: OFormat[B] = Json.format[B]
[warn]                       ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:45:23: local val v3 in value adtFormat is never used
[warn]     implicit lazy val v3: OFormat[C] = Json.format[C]
[warn]                       ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:50:18: local val v1 in value googleMapsAPIFormat is never used
[warn]     implicit val v1: OFormat[Value] = Json.format[Value]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:51:18: local val v2 in value googleMapsAPIFormat is never used
[warn]     implicit val v2: OFormat[Elements] = Json.format[Elements]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:52:18: local val v3 in value googleMapsAPIFormat is never used
[warn]     implicit val v3: OFormat[Rows] = Json.format[Rows]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:56:18: local val v1 in value twitterAPIFormat is never used
[warn]     implicit val v1: OFormat[Urls] = Json.format[Urls]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:57:18: local val v2 in value twitterAPIFormat is never used
[warn]     implicit val v2: OFormat[Url] = Json.format[Url]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:58:18: local val v3 in value twitterAPIFormat is never used
[warn]     implicit val v3: OFormat[UserEntities] = Json.format[UserEntities]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:59:18: local val v4 in value twitterAPIFormat is never used
[warn]     implicit val v4: OFormat[UserMentions] = Json.format[UserMentions]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:60:18: local val v5 in value twitterAPIFormat is never used
[warn]     implicit val v5: OFormat[Entities] = Json.format[Entities]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:61:18: local val v6 in value twitterAPIFormat is never used
[warn]     implicit val v6: Format[User] = Jsonx.formatCaseClass[User]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:62:18: local val v7 in value twitterAPIFormat is never used
[warn]     implicit val v7: Format[RetweetedStatus] = Jsonx.formatCaseClass[RetweetedStatus]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:9:79: dead code following this construct
[warn]   implicit val adtReaderWriter: ReadWriter[AdtBase] = ReadWriter.merge(macroRW[A], macroRW[B], macroRW[C])
[warn]                                                                               ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:9:91: dead code following this construct
[warn]   implicit val adtReaderWriter: ReadWriter[AdtBase] = ReadWriter.merge(macroRW[A], macroRW[B], macroRW[C])
[warn]                                                                                           ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:9:103: dead code following this construct
[warn]   implicit val adtReaderWriter: ReadWriter[AdtBase] = ReadWriter.merge(macroRW[A], macroRW[B], macroRW[C])
[warn]                                                                                                       ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:10:66: dead code following this construct
[warn]   implicit val anyRefsReaderWriter: ReadWriter[AnyRefs] = macroRW[AnyRefs]
[warn]                                                                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:11:78: dead code following this construct
[warn]   implicit val extractFieldsReaderWriter: ReadWriter[ExtractFields] = macroRW[ExtractFields]
[warn]                                                                              ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:16:54: dead code following this construct
[warn]     implicit lazy val v1: ReadWriter[Point] = macroRW[Point]
[warn]                                                      ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:17:59: dead code following this construct
[warn]     implicit lazy val v2: ReadWriter[MultiPoint] = macroRW[MultiPoint]
[warn]                                                           ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:18:59: dead code following this construct
[warn]     implicit lazy val v3: ReadWriter[LineString] = macroRW[LineString]
[warn]                                                           ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:19:64: dead code following this construct
[warn]     implicit lazy val v4: ReadWriter[MultiLineString] = macroRW[MultiLineString]
[warn]                                                                ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:20:56: dead code following this construct
[warn]     implicit lazy val v5: ReadWriter[Polygon] = macroRW[Polygon]
[warn]                                                        ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:21:61: dead code following this construct
[warn]     implicit lazy val v6: ReadWriter[MultiPolygon] = macroRW[MultiPolygon]
[warn]                                                             ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:22:67: dead code following this construct
[warn]     implicit lazy val v7: ReadWriter[GeometryCollection] = macroRW[GeometryCollection]
[warn]                                                                   ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:24:66: dead code following this construct
[warn]     implicit lazy val v9: ReadWriter[FeatureCollection] = macroRW[FeatureCollection]
[warn]                                                                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:25:57: dead code following this construct
[warn]     implicit lazy val v10: ReadWriter[Feature] = macroRW[Feature]
[warn]                                                         ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:29:49: dead code following this construct
[warn]     implicit val v1: ReadWriter[Value] = macroRW[Value]
[warn]                                                 ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:30:52: dead code following this construct
[warn]     implicit val v2: ReadWriter[Elements] = macroRW[Elements]
[warn]                                                    ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:31:48: dead code following this construct
[warn]     implicit val v3: ReadWriter[Rows] = macroRW[Rows]
[warn]                                                ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:32:12: dead code following this construct
[warn]     macroRW[DistanceMatrix]
[warn]            ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:40:78: dead code following this construct
[warn]   implicit val nestedStructsReaderWriter: ReadWriter[NestedStructs] = macroRW[NestedStructs]
[warn]                                                                              ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:41:84: dead code following this construct
[warn]   implicit val missingReqFieldsReaderWriter: ReadWriter[MissingReqFields] = macroRW[MissingReqFields]
[warn]                                                                                    ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:47:72: dead code following this construct
[warn]   implicit val primitivesReaderWriter: ReadWriter[Primitives] = macroRW[Primitives]
[warn]                                                                        ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:52:48: dead code following this construct
[warn]     implicit val v1: ReadWriter[Urls] = macroRW[Urls]
[warn]                                                ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:53:47: dead code following this construct
[warn]     implicit val v2: ReadWriter[Url] = macroRW[Url]
[warn]                                               ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:54:56: dead code following this construct
[warn]     implicit val v3: ReadWriter[UserMentions] = macroRW[UserMentions]
[warn]                                                        ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:55:52: dead code following this construct
[warn]     implicit val v4: ReadWriter[Entities] = macroRW[Entities]
[warn]                                                    ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:56:56: dead code following this construct
[warn]     implicit val v5: ReadWriter[UserEntities] = macroRW[UserEntities]
[warn]                                                        ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:57:48: dead code following this construct
[warn]     implicit val v6: ReadWriter[User] = macroRW[User]
[warn]                                                ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:58:59: dead code following this construct
[warn]     implicit val v7: ReadWriter[RetweetedStatus] = macroRW[RetweetedStatus]
[warn]                                                           ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:59:12: dead code following this construct
[warn]     macroRW[Tweet]
[warn]            ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:16:23: local val v1 in value geoJsonReaderWriter is never used
[warn]     implicit lazy val v1: ReadWriter[Point] = macroRW[Point]
[warn]                       ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:17:23: local val v2 in value geoJsonReaderWriter is never used
[warn]     implicit lazy val v2: ReadWriter[MultiPoint] = macroRW[MultiPoint]
[warn]                       ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:18:23: local val v3 in value geoJsonReaderWriter is never used
[warn]     implicit lazy val v3: ReadWriter[LineString] = macroRW[LineString]
[warn]                       ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:19:23: local val v4 in value geoJsonReaderWriter is never used
[warn]     implicit lazy val v4: ReadWriter[MultiLineString] = macroRW[MultiLineString]
[warn]                       ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:20:23: local val v5 in value geoJsonReaderWriter is never used
[warn]     implicit lazy val v5: ReadWriter[Polygon] = macroRW[Polygon]
[warn]                       ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:21:23: local val v6 in value geoJsonReaderWriter is never used
[warn]     implicit lazy val v6: ReadWriter[MultiPolygon] = macroRW[MultiPolygon]
[warn]                       ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:22:23: local val v7 in value geoJsonReaderWriter is never used
[warn]     implicit lazy val v7: ReadWriter[GeometryCollection] = macroRW[GeometryCollection]
[warn]                       ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:23:23: local val v8 in value geoJsonReaderWriter is never used
[warn]     implicit lazy val v8: ReadWriter[Geometry] = macroRW[Geometry]
[warn]                       ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:24:23: local val v9 in value geoJsonReaderWriter is never used
[warn]     implicit lazy val v9: ReadWriter[FeatureCollection] = macroRW[FeatureCollection]
[warn]                       ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:25:23: local val v10 in value geoJsonReaderWriter is never used
[warn]     implicit lazy val v10: ReadWriter[Feature] = macroRW[Feature]
[warn]                       ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:29:18: local val v1 in value googleMApsAPIReaderWriter is never used
[warn]     implicit val v1: ReadWriter[Value] = macroRW[Value]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:30:18: local val v2 in value googleMApsAPIReaderWriter is never used
[warn]     implicit val v2: ReadWriter[Elements] = macroRW[Elements]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:31:18: local val v3 in value googleMApsAPIReaderWriter is never used
[warn]     implicit val v3: ReadWriter[Rows] = macroRW[Rows]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:52:18: local val v1 in value twitterAPIReaderWriter is never used
[warn]     implicit val v1: ReadWriter[Urls] = macroRW[Urls]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:53:18: local val v2 in value twitterAPIReaderWriter is never used
[warn]     implicit val v2: ReadWriter[Url] = macroRW[Url]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:54:18: local val v3 in value twitterAPIReaderWriter is never used
[warn]     implicit val v3: ReadWriter[UserMentions] = macroRW[UserMentions]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:55:18: local val v4 in value twitterAPIReaderWriter is never used
[warn]     implicit val v4: ReadWriter[Entities] = macroRW[Entities]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:56:18: local val v5 in value twitterAPIReaderWriter is never used
[warn]     implicit val v5: ReadWriter[UserEntities] = macroRW[UserEntities]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:57:18: local val v6 in value twitterAPIReaderWriter is never used
[warn]     implicit val v6: ReadWriter[User] = macroRW[User]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:58:18: local val v7 in value twitterAPIReaderWriter is never used
[warn]     implicit val v7: ReadWriter[RetweetedStatus] = macroRW[RetweetedStatus]
[warn]                  ^
[warn] 63 warnings found
[info] Done compiling.
[info] Packaging /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.28.2-SNAPSHOT.jar ...
[info] Compiling 50 Scala sources to /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/test-classes ...
Processing 523 classes from /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes with "reflection" generator
Writing out Java source to /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/src_managed/jmh and resources to /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/resource_managed/jmh
[info] Done packaging.
[info] Compiling 694 Java sources to /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] Done compiling.
[info] Packaging /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.28.2-SNAPSHOT-tests.jar ...
[info] Done packaging.
[info] Done compiling.
[info] Packaging /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.28.2-SNAPSHOT-jmh.jar ...
[info] Done packaging.
[info] Running (fork) org.openjdk.jmh.Main -p size=128 -jvm /usr/lib/jvm/java-8-oracle/bin/java -prof gc -rf json -rff jdk8.json .*Benchmark.*
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce
[info] # Run progress: 0,00% complete, ETA 01:23:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 472282,798 ops/s
[info] # Warmup Iteration   2: 838636,149 ops/s
[info] # Warmup Iteration   3: 848829,507 ops/s
[info] # Warmup Iteration   4: 848653,771 ops/s
[info] # Warmup Iteration   5: 841825,610 ops/s
[info] Iteration   1: 844191,970 ops/s
[info]                  ·gc.alloc.rate:                   2224,094 MB/sec
[info]                  ·gc.alloc.rate.norm:              4144,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2690,266 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5012,586 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,155 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 847177,921 ops/s
[info]                  ·gc.alloc.rate:                   2231,474 MB/sec
[info]                  ·gc.alloc.rate.norm:              4144,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2024,129 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3758,947 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,155 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 830620,322 ops/s
[info]                  ·gc.alloc.rate:                   2187,841 MB/sec
[info]                  ·gc.alloc.rate.norm:              4144,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2027,480 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3840,260 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,118 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 846045,341 ops/s
[info]                  ·gc.alloc.rate:                   2228,542 MB/sec
[info]                  ·gc.alloc.rate.norm:              4144,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2030,780 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3776,260 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,155 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 846305,533 ops/s
[info]                  ·gc.alloc.rate:                   2229,096 MB/sec
[info]                  ·gc.alloc.rate.norm:              4144,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2711,782 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5041,338 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,077 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce":
[info]   842868,217 ±(99.9%) 26695,133 ops/s [Average]
[info]   (min, avg, max) = (830620,322, 842868,217, 847177,921), stdev = 6932,641
[info]   CI (99.9%): [816173,085, 869563,350] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.alloc.rate":
[info]   2220,209 ±(99.9%) 70,428 MB/sec [Average]
[info]   (min, avg, max) = (2187,841, 2220,209, 2231,474), stdev = 18,290
[info]   CI (99.9%): [2149,781, 2290,638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   4144,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4144,001, 4144,001, 4144,001), stdev = 0,001
[info]   CI (99.9%): [4144,000, 4144,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2296,887 ±(99.9%) 1420,928 MB/sec [Average]
[info]   (min, avg, max) = (2024,129, 2296,887, 2711,782), stdev = 369,010
[info]   CI (99.9%): [875,959, 3717,815] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4285,878 ±(99.9%) 2607,917 B/op [Average]
[info]   (min, avg, max) = (3758,947, 4285,878, 5041,338), stdev = 677,268
[info]   CI (99.9%): [1677,961, 6893,796] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,071 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,071, 0,083), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,132 ±(99.9%) 0,133 B/op [Average]
[info]   (min, avg, max) = (0,077, 0,132, 0,155), stdev = 0,034
[info]   CI (99.9%): [≈ 0, 0,265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.count":
[info]   17,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,400, 4,000), stdev = 0,548
[info]   CI (99.9%): [17,000, 17,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.time":
[info]   11,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 2,200, 3,000), stdev = 0,837
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala
[info] # Run progress: 0,20% complete, ETA 02:11:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 730224,959 ops/s
[info] # Warmup Iteration   2: 1811027,271 ops/s
[info] # Warmup Iteration   3: 1802719,154 ops/s
[info] # Warmup Iteration   4: 1809734,419 ops/s
[info] # Warmup Iteration   5: 1818386,742 ops/s
[info] Iteration   1: 1815816,726 ops/s
[info]                  ·gc.alloc.rate:                   1292,631 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334,052 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1155,890 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,018 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 1821961,869 ops/s
[info]                  ·gc.alloc.rate:               1297,024 MB/sec
[info]                  ·gc.alloc.rate.norm:          1120,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667,685 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 576,557 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 1789837,636 ops/s
[info]                  ·gc.alloc.rate:                   1274,194 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336,434 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1174,708 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,055 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 1742410,120 ops/s
[info]                  ·gc.alloc.rate:               1240,405 MB/sec
[info]                  ·gc.alloc.rate.norm:          1120,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338,730 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1208,781 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   5: 1816434,039 ops/s
[info]                  ·gc.alloc.rate:                   1293,068 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341,057 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1161,567 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,054 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala":
[info]   1797292,078 ±(99.9%) 127504,785 ops/s [Average]
[info]   (min, avg, max) = (1742410,120, 1797292,078, 1821961,869), stdev = 33112,588
[info]   CI (99.9%): [1669787,293, 1924796,863] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1279,464 ±(99.9%) 90,718 MB/sec [Average]
[info]   (min, avg, max) = (1240,405, 1279,464, 1297,024), stdev = 23,559
[info]   CI (99.9%): [1188,746, 1370,182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1120,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1120,000, 1120,000, 1120,000), stdev = 0,001
[info]   CI (99.9%): [1120,000, 1120,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1203,592 ±(99.9%) 1153,623 MB/sec [Average]
[info]   (min, avg, max) = (667,685, 1203,592, 1341,057), stdev = 299,592
[info]   CI (99.9%): [49,969, 2357,214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1055,500 ±(99.9%) 1033,990 B/op [Average]
[info]   (min, avg, max) = (576,557, 1055,500, 1208,781), stdev = 268,524
[info]   CI (99.9%): [21,510, 2089,491] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,062), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,025 ±(99.9%) 0,106 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,055), stdev = 0,028
[info]   CI (99.9%): [≈ 0, 0,132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala
[info] # Run progress: 0,40% complete, ETA 02:10:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3423410,985 ops/s
[info] # Warmup Iteration   2: 4123840,561 ops/s
[info] # Warmup Iteration   3: 4125907,641 ops/s
[info] # Warmup Iteration   4: 4117206,388 ops/s
[info] # Warmup Iteration   5: 4113595,811 ops/s
[info] Iteration   1: 4112921,904 ops/s
[info]                  ·gc.alloc.rate:               271,870 MB/sec
[info]                  ·gc.alloc.rate.norm:          104,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,767 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 195,770 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 4138073,233 ops/s
[info]                  ·gc.alloc.rate:      273,558 MB/sec
[info]                  ·gc.alloc.rate.norm: 104,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 4102198,090 ops/s
[info]                  ·gc.alloc.rate:               271,160 MB/sec
[info]                  ·gc.alloc.rate.norm:          104,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,771 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 196,283 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 4124061,630 ops/s
[info]                  ·gc.alloc.rate:      272,622 MB/sec
[info]                  ·gc.alloc.rate.norm: 104,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 4118462,123 ops/s
[info]                  ·gc.alloc.rate:                   272,252 MB/sec
[info]                  ·gc.alloc.rate.norm:              104,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,758 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     195,492 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,048 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,018 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala":
[info]   4119143,396 ±(99.9%) 51259,948 ops/s [Average]
[info]   (min, avg, max) = (4102198,090, 4119143,396, 4138073,233), stdev = 13312,046
[info]   CI (99.9%): [4067883,448, 4170403,343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   272,292 ±(99.9%) 3,429 MB/sec [Average]
[info]   (min, avg, max) = (271,160, 272,292, 273,558), stdev = 0,890
[info]   CI (99.9%): [268,864, 275,721] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   104,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (104,000, 104,000, 104,000), stdev = 0,001
[info]   CI (99.9%): [104,000, 104,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   307,059 ±(99.9%) 1079,357 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 307,059, 511,771), stdev = 280,306
[info]   CI (99.9%): [≈ 0, 1386,416] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   117,509 ±(99.9%) 413,062 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 117,509, 196,283), stdev = 107,271
[info]   CI (99.9%): [≈ 0, 530,571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,010 ±(99.9%) 0,082 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,010, 0,048), stdev = 0,021
[info]   CI (99.9%): [≈ 0, 0,091] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,004 ±(99.9%) 0,031 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,004, 0,018), stdev = 0,008
[info]   CI (99.9%): [≈ 0, 0,035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson
[info] # Run progress: 0,60% complete, ETA 02:10:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 63162,250 ops/s
[info] # Warmup Iteration   2: 190652,955 ops/s
[info] # Warmup Iteration   3: 192159,229 ops/s
[info] # Warmup Iteration   4: 192666,255 ops/s
[info] # Warmup Iteration   5: 192477,695 ops/s
[info] Iteration   1: 189999,258 ops/s
[info]                  ·gc.alloc.rate:                   1580,592 MB/sec
[info]                  ·gc.alloc.rate.norm:              13088,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2003,075 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16586,346 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,172 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 188693,906 ops/s
[info]                  ·gc.alloc.rate:                   1569,710 MB/sec
[info]                  ·gc.alloc.rate.norm:              13088,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337,415 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11151,163 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,042 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 191776,446 ops/s
[info]                  ·gc.alloc.rate:                   1595,315 MB/sec
[info]                  ·gc.alloc.rate.norm:              13088,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011,406 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16501,622 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,342 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   4: 191419,785 ops/s
[info]                  ·gc.alloc.rate:                   1592,414 MB/sec
[info]                  ·gc.alloc.rate.norm:              13088,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,368 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11041,101 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,171 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 190776,721 ops/s
[info]                  ·gc.alloc.rate:               1586,997 MB/sec
[info]                  ·gc.alloc.rate.norm:          13088,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345,365 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11095,257 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson":
[info]   190533,223 ±(99.9%) 4739,223 ops/s [Average]
[info]   (min, avg, max) = (188693,906, 190533,223, 191776,446), stdev = 1230,761
[info]   CI (99.9%): [185794,001, 195272,446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1585,006 ±(99.9%) 39,389 MB/sec [Average]
[info]   (min, avg, max) = (1569,710, 1585,006, 1595,315), stdev = 10,229
[info]   CI (99.9%): [1545,616, 1624,395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   13088,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (13088,002, 13088,002, 13088,002), stdev = 0,001
[info]   CI (99.9%): [13088,002, 13088,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1608,126 ±(99.9%) 1403,035 MB/sec [Average]
[info]   (min, avg, max) = (1337,415, 1608,126, 2011,406), stdev = 364,364
[info]   CI (99.9%): [205,091, 3011,161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   13275,098 ±(99.9%) 11492,152 B/op [Average]
[info]   (min, avg, max) = (11041,101, 13275,098, 16586,346), stdev = 2984,475
[info]   CI (99.9%): [1782,946, 24767,250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,188 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,042, 0,125), stdev = 0,049
[info]   CI (99.9%): [≈ 0, 0,230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,345 ±(99.9%) 1,570 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,345, 1,042), stdev = 0,408
[info]   CI (99.9%): [≈ 0, 1,915] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.time":
[info]   11,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 2,200, 4,000), stdev = 1,095
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce
[info] # Run progress: 0,80% complete, ETA 02:10:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 291948,357 ops/s
[info] # Warmup Iteration   2: 623514,735 ops/s
[info] # Warmup Iteration   3: 636344,131 ops/s
[info] # Warmup Iteration   4: 636417,497 ops/s
[info] # Warmup Iteration   5: 636424,650 ops/s
[info] Iteration   1: 636004,696 ops/s
[info]                  ·gc.alloc.rate:                   2076,238 MB/sec
[info]                  ·gc.alloc.rate.norm:              5136,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017,391 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4990,433 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,052 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 639954,606 ops/s
[info]                  ·gc.alloc.rate:                   2083,614 MB/sec
[info]                  ·gc.alloc.rate.norm:              5136,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016,714 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4971,096 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,256 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 633000,885 ops/s
[info]                  ·gc.alloc.rate:                   2066,454 MB/sec
[info]                  ·gc.alloc.rate.norm:              5136,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2025,408 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5033,985 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,207 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 637732,311 ops/s
[info]                  ·gc.alloc.rate:                   2081,921 MB/sec
[info]                  ·gc.alloc.rate.norm:              5136,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029,092 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5005,674 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,154 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 636821,439 ops/s
[info]                  ·gc.alloc.rate:                   2078,901 MB/sec
[info]                  ·gc.alloc.rate.norm:              5136,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2031,708 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5019,410 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,103 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce":
[info]   636702,788 ±(99.9%) 9786,950 ops/s [Average]
[info]   (min, avg, max) = (633000,885, 636702,788, 639954,606), stdev = 2541,640
[info]   CI (99.9%): [626915,837, 646489,738] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.alloc.rate":
[info]   2077,426 ±(99.9%) 26,008 MB/sec [Average]
[info]   (min, avg, max) = (2066,454, 2077,426, 2083,614), stdev = 6,754
[info]   CI (99.9%): [2051,417, 2103,434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5136,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (5136,001, 5136,001, 5136,001), stdev = 0,001
[info]   CI (99.9%): [5136,001, 5136,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2024,063 ±(99.9%) 26,121 MB/sec [Average]
[info]   (min, avg, max) = (2016,714, 2024,063, 2031,708), stdev = 6,783
[info]   CI (99.9%): [1997,942, 2050,184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5004,119 ±(99.9%) 94,440 B/op [Average]
[info]   (min, avg, max) = (4971,096, 5004,119, 5033,985), stdev = 24,526
[info]   CI (99.9%): [4909,679, 5098,560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,062 ±(99.9%) 0,126 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,062, 0,104), stdev = 0,033
[info]   CI (99.9%): [≈ 0, 0,189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,154 ±(99.9%) 0,312 B/op [Average]
[info]   (min, avg, max) = (0,052, 0,154, 0,256), stdev = 0,081
[info]   CI (99.9%): [≈ 0, 0,467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.count":
[info]   15,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,000, 3,000), stdev = 0,001
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.time":
[info]   9,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala
[info] # Run progress: 1,00% complete, ETA 02:10:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 973161,921 ops/s
[info] # Warmup Iteration   2: 2347342,066 ops/s
[info] # Warmup Iteration   3: 2340727,593 ops/s
[info] # Warmup Iteration   4: 2341866,962 ops/s
[info] # Warmup Iteration   5: 2359786,303 ops/s
[info] Iteration   1: 2378878,362 ops/s
[info]                  ·gc.alloc.rate:                   774,169 MB/sec
[info]                  ·gc.alloc.rate.norm:              512,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666,692 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     440,920 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,314 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,530 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 2379948,734 ops/s
[info]                  ·gc.alloc.rate:               774,506 MB/sec
[info]                  ·gc.alloc.rate.norm:          512,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666,699 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 440,733 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 2375041,899 ops/s
[info]                  ·gc.alloc.rate:                   772,930 MB/sec
[info]                  ·gc.alloc.rate.norm:              512,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334,064 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     883,703 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,041 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 2379124,400 ops/s
[info]                  ·gc.alloc.rate:                   774,247 MB/sec
[info]                  ·gc.alloc.rate.norm:              512,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667,022 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     441,094 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,014 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 2379012,608 ops/s
[info]                  ·gc.alloc.rate:               774,211 MB/sec
[info]                  ·gc.alloc.rate.norm:          512,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667,033 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 441,121 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala":
[info]   2378401,200 ±(99.9%) 7407,934 ops/s [Average]
[info]   (min, avg, max) = (2375041,899, 2378401,200, 2379948,734), stdev = 1923,817
[info]   CI (99.9%): [2370993,266, 2385809,135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   774,013 ±(99.9%) 2,384 MB/sec [Average]
[info]   (min, avg, max) = (772,930, 774,013, 774,506), stdev = 0,619
[info]   CI (99.9%): [771,628, 776,397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   512,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (512,000, 512,000, 512,000), stdev = 0,001
[info]   CI (99.9%): [512,000, 512,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   800,302 ±(99.9%) 1148,964 MB/sec [Average]
[info]   (min, avg, max) = (666,692, 800,302, 1334,064), stdev = 298,382
[info]   CI (99.9%): [≈ 0, 1949,266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   529,514 ±(99.9%) 762,419 B/op [Average]
[info]   (min, avg, max) = (440,733, 529,514, 883,703), stdev = 197,998
[info]   CI (99.9%): [≈ 0, 1291,934] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,479 ±(99.9%) 3,950 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,479, 2,314), stdev = 1,026
[info]   CI (99.9%): [≈ 0, 4,429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,317 ±(99.9%) 2,612 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,317, 1,530), stdev = 0,678
[info]   CI (99.9%): [≈ 0, 2,929] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala
[info] # Run progress: 1,20% complete, ETA 02:09:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8626685,915 ops/s
[info] # Warmup Iteration   2: 19228125,745 ops/s
[info] # Warmup Iteration   3: 20207917,843 ops/s
[info] # Warmup Iteration   4: 20211490,849 ops/s
[info] # Warmup Iteration   5: 20318073,371 ops/s
[info] Iteration   1: 20399429,946 ops/s
[info]                  ·gc.alloc.rate:               1037,257 MB/sec
[info]                  ·gc.alloc.rate.norm:          80,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,693 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 51,960 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 20393658,944 ops/s
[info]                  ·gc.alloc.rate:                   1036,979 MB/sec
[info]                  ·gc.alloc.rate.norm:              80,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,398 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     103,948 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,003 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 20404949,705 ops/s
[info]                  ·gc.alloc.rate:               1037,577 MB/sec
[info]                  ·gc.alloc.rate.norm:          80,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,692 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 51,944 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 20357028,330 ops/s
[info]                  ·gc.alloc.rate:                   1035,155 MB/sec
[info]                  ·gc.alloc.rate.norm:              80,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,430 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     104,134 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,003 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 20175155,090 ops/s
[info]                  ·gc.alloc.rate:               1025,888 MB/sec
[info]                  ·gc.alloc.rate.norm:          80,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,381 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 52,589 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala":
[info]   20346044,403 ±(99.9%) 374873,582 ops/s [Average]
[info]   (min, avg, max) = (20175155,090, 20346044,403, 20404949,705), stdev = 97353,479
[info]   CI (99.9%): [19971170,821, 20720917,985] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1034,571 ±(99.9%) 19,039 MB/sec [Average]
[info]   (min, avg, max) = (1025,888, 1034,571, 1037,577), stdev = 4,944
[info]   CI (99.9%): [1015,532, 1053,610] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   80,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (80,000, 80,000, 80,000), stdev = 0,001
[info]   CI (99.9%): [80,000, 80,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   943,319 ±(99.9%) 1420,451 MB/sec [Average]
[info]   (min, avg, max) = (673,692, 943,319, 1347,430), stdev = 368,887
[info]   CI (99.9%): [≈ 0, 2363,770] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   72,915 ±(99.9%) 109,417 B/op [Average]
[info]   (min, avg, max) = (51,944, 72,915, 104,134), stdev = 28,415
[info]   CI (99.9%): [≈ 0, 182,332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,017 ±(99.9%) 0,088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,042), stdev = 0,023
[info]   CI (99.9%): [≈ 0, 0,104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,001 ±(99.9%) 0,007 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,001, 0,003), stdev = 0,002
[info]   CI (99.9%): [≈ 0, 0,008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 1,41% complete, ETA 02:09:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14351309,091 ops/s
[info] # Warmup Iteration   2: 22263022,168 ops/s
[info] # Warmup Iteration   3: 23118538,790 ops/s
[info] # Warmup Iteration   4: 23029855,491 ops/s
[info] # Warmup Iteration   5: 22993163,418 ops/s
[info] Iteration   1: 23011958,316 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 23024114,259 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 22979188,815 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 22812757,110 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 22904405,282 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc":
[info]   22946484,756 ±(99.9%) 339187,134 ops/s [Average]
[info]   (min, avg, max) = (22812757,110, 22946484,756, 23024114,259), stdev = 88085,822
[info]   CI (99.9%): [22607297,623, 23285671,890] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson
[info] # Run progress: 1,61% complete, ETA 02:09:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 122184,708 ops/s
[info] # Warmup Iteration   2: 352782,019 ops/s
[info] # Warmup Iteration   3: 346846,208 ops/s
[info] # Warmup Iteration   4: 361386,138 ops/s
[info] # Warmup Iteration   5: 362282,163 ops/s
[info] Iteration   1: 362026,084 ops/s
[info]                  ·gc.alloc.rate:                   1121,138 MB/sec
[info]                  ·gc.alloc.rate.norm:              4872,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334,192 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5797,846 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,091 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 362423,774 ops/s
[info]                  ·gc.alloc.rate:                   1122,369 MB/sec
[info]                  ·gc.alloc.rate.norm:              4872,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334,194 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5791,495 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,362 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 357971,029 ops/s
[info]                  ·gc.alloc.rate:               1108,514 MB/sec
[info]                  ·gc.alloc.rate.norm:          4872,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668,032 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2936,051 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 361385,768 ops/s
[info]                  ·gc.alloc.rate:                   1119,121 MB/sec
[info]                  ·gc.alloc.rate.norm:              4872,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336,757 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5819,459 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,181 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 360309,481 ops/s
[info]                  ·gc.alloc.rate:               1115,813 MB/sec
[info]                  ·gc.alloc.rate.norm:          4872,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338,839 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5845,807 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson":
[info]   360823,227 ±(99.9%) 6867,772 ops/s [Average]
[info]   (min, avg, max) = (357971,029, 360823,227, 362423,774), stdev = 1783,539
[info]   CI (99.9%): [353955,455, 367690,999] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1117,391 ±(99.9%) 21,362 MB/sec [Average]
[info]   (min, avg, max) = (1108,514, 1117,391, 1122,369), stdev = 5,548
[info]   CI (99.9%): [1096,028, 1138,753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4872,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4872,001, 4872,001, 4872,001), stdev = 0,001
[info]   CI (99.9%): [4872,001, 4872,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1202,403 ±(99.9%) 1150,298 MB/sec [Average]
[info]   (min, avg, max) = (668,032, 1202,403, 1338,839), stdev = 298,729
[info]   CI (99.9%): [52,105, 2352,700] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   5238,132 ±(99.9%) 4956,078 B/op [Average]
[info]   (min, avg, max) = (2936,051, 5238,132, 5845,807), stdev = 1287,078
[info]   CI (99.9%): [282,054, 10194,209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,134 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,083), stdev = 0,035
[info]   CI (99.9%): [≈ 0, 0,163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,127 ±(99.9%) 0,583 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,127, 0,362), stdev = 0,151
[info]   CI (99.9%): [≈ 0, 0,709] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce
[info] # Run progress: 1,81% complete, ETA 02:08:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1169405,182 ops/s
[info] # Warmup Iteration   2: 1817274,029 ops/s
[info] # Warmup Iteration   3: 1854602,263 ops/s
[info] # Warmup Iteration   4: 1824525,101 ops/s
[info] # Warmup Iteration   5: 1849274,788 ops/s
[info] Iteration   1: 1839862,265 ops/s
[info]                  ·gc.alloc.rate:                   2844,116 MB/sec
[info]                  ·gc.alloc.rate.norm:              2432,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2704,534 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2312,644 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,053 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 1843594,182 ops/s
[info]                  ·gc.alloc.rate:                   2849,896 MB/sec
[info]                  ·gc.alloc.rate.norm:              2432,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2709,799 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2312,447 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,071 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 1838571,243 ops/s
[info]                  ·gc.alloc.rate:                   2842,071 MB/sec
[info]                  ·gc.alloc.rate.norm:              2432,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2714,408 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2322,757 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,089 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 1832413,249 ops/s
[info]                  ·gc.alloc.rate:                   2832,589 MB/sec
[info]                  ·gc.alloc.rate.norm:              2432,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2717,439 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2333,135 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,054 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 1820162,533 ops/s
[info]                  ·gc.alloc.rate:                   2813,692 MB/sec
[info]                  ·gc.alloc.rate.norm:              2432,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3400,586 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2939,279 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,036 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce":
[info]   1834920,694 ±(99.9%) 35347,654 ops/s [Average]
[info]   (min, avg, max) = (1820162,533, 1834920,694, 1843594,182), stdev = 9179,674
[info]   CI (99.9%): [1799573,040, 1870268,349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.alloc.rate":
[info]   2836,473 ±(99.9%) 54,591 MB/sec [Average]
[info]   (min, avg, max) = (2813,692, 2836,473, 2849,896), stdev = 14,177
[info]   CI (99.9%): [2781,882, 2891,064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2432,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (2432,000, 2432,000, 2432,000), stdev = 0,001
[info]   CI (99.9%): [2432,000, 2432,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2849,353 ±(99.9%) 1186,719 MB/sec [Average]
[info]   (min, avg, max) = (2704,534, 2849,353, 3400,586), stdev = 308,187
[info]   CI (99.9%): [1662,634, 4036,072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2444,052 ±(99.9%) 1066,518 B/op [Average]
[info]   (min, avg, max) = (2312,447, 2444,052, 2939,279), stdev = 276,971
[info]   CI (99.9%): [1377,534, 3510,570] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,071 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,071, 0,104), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,061 ±(99.9%) 0,078 B/op [Average]
[info]   (min, avg, max) = (0,036, 0,061, 0,089), stdev = 0,020
[info]   CI (99.9%): [≈ 0, 0,138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.count":
[info]   21,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,200, 5,000), stdev = 0,447
[info]   CI (99.9%): [21,000, 21,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.time":
[info]   12,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava
[info] # Run progress: 2,01% complete, ETA 02:08:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 300346,628 ops/s
[info] # Warmup Iteration   2: 10644937,233 ops/s
[info] # Warmup Iteration   3: 10719393,114 ops/s
[info] # Warmup Iteration   4: 10813195,501 ops/s
[info] # Warmup Iteration   5: 10774503,585 ops/s
[info] Iteration   1: 10633083,617 ops/s
[info]                  ·gc.alloc.rate:                   1297,639 MB/sec
[info]                  ·gc.alloc.rate.norm:              192,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333,419 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     197,294 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,030 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,004 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 10662435,340 ops/s
[info]                  ·gc.alloc.rate:                   1301,226 MB/sec
[info]                  ·gc.alloc.rate.norm:              192,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336,102 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     197,146 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,012 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,002 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 10711352,882 ops/s
[info]                  ·gc.alloc.rate:                   1307,149 MB/sec
[info]                  ·gc.alloc.rate.norm:              192,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338,037 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     196,537 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,003 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   4: 10687895,681 ops/s
[info]                  ·gc.alloc.rate:                   1304,351 MB/sec
[info]                  ·gc.alloc.rate.norm:              192,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,080 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     197,259 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,318 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,341 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 10713744,060 ops/s
[info]                  ·gc.alloc.rate:               1307,485 MB/sec
[info]                  ·gc.alloc.rate.norm:          192,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669,713 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 98,345 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava":
[info]   10681702,316 ±(99.9%) 131700,768 ops/s [Average]
[info]   (min, avg, max) = (10633083,617, 10681702,316, 10713744,060), stdev = 34202,271
[info]   CI (99.9%): [10550001,549, 10813403,084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   1303,570 ±(99.9%) 16,042 MB/sec [Average]
[info]   (min, avg, max) = (1297,639, 1303,570, 1307,485), stdev = 4,166
[info]   CI (99.9%): [1287,528, 1319,611] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   192,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (192,000, 192,000, 192,000), stdev = 0,001
[info]   CI (99.9%): [192,000, 192,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   1203,470 ±(99.9%) 1148,991 MB/sec [Average]
[info]   (min, avg, max) = (669,713, 1203,470, 1340,080), stdev = 298,389
[info]   CI (99.9%): [54,479, 2352,461] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   177,316 ±(99.9%) 169,995 B/op [Average]
[info]   (min, avg, max) = (98,345, 177,316, 197,294), stdev = 44,147
[info]   CI (99.9%): [7,321, 347,312] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,476 ±(99.9%) 3,966 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,476, 2,318), stdev = 1,030
[info]   CI (99.9%): [≈ 0, 4,442] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0,070 ±(99.9%) 0,584 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,070, 0,341), stdev = 0,152
[info]   CI (99.9%): [≈ 0, 0,654] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.time":
[info]   14,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 2,800, 4,000), stdev = 1,095
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala
[info] # Run progress: 2,21% complete, ETA 02:08:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1275621,482 ops/s
[info] # Warmup Iteration   2: 2896625,706 ops/s
[info] # Warmup Iteration   3: 2947189,152 ops/s
[info] # Warmup Iteration   4: 2946534,505 ops/s
[info] # Warmup Iteration   5: 2943276,160 ops/s
[info] Iteration   1: 2958542,905 ops/s
[info]                  ·gc.alloc.rate:                   2076,046 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008,796 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1068,238 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,022 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 2948986,369 ops/s
[info]                  ·gc.alloc.rate:                   2069,307 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015,080 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1075,069 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,044 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 2942022,700 ops/s
[info]                  ·gc.alloc.rate:                   2064,537 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019,193 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1079,753 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,033 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 2910751,661 ops/s
[info]                  ·gc.alloc.rate:                   2042,550 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2024,166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1094,064 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,011 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   5: 2940230,945 ops/s
[info]                  ·gc.alloc.rate:                   2063,158 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2027,391 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1084,861 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,022 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala":
[info]   2940106,916 ±(99.9%) 68993,906 ops/s [Average]
[info]   (min, avg, max) = (2910751,661, 2940106,916, 2958542,905), stdev = 17917,498
[info]   CI (99.9%): [2871113,011, 3009100,822] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   2063,119 ±(99.9%) 48,344 MB/sec [Average]
[info]   (min, avg, max) = (2042,550, 2063,119, 2076,046), stdev = 12,555
[info]   CI (99.9%): [2014,775, 2111,464] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1104,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1104,000, 1104,000, 1104,000), stdev = 0,001
[info]   CI (99.9%): [1104,000, 1104,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   2018,925 ±(99.9%) 28,336 MB/sec [Average]
[info]   (min, avg, max) = (2008,796, 2018,925, 2027,391), stdev = 7,359
[info]   CI (99.9%): [1990,590, 2047,261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1080,397 ±(99.9%) 37,696 B/op [Average]
[info]   (min, avg, max) = (1068,238, 1080,397, 1094,064), stdev = 9,790
[info]   CI (99.9%): [1042,701, 1118,094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,050 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,050, 0,083), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,027 ±(99.9%) 0,049 B/op [Average]
[info]   (min, avg, max) = (0,011, 0,027, 0,044), stdev = 0,013
[info]   CI (99.9%): [≈ 0, 0,075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.count":
[info]   15,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,000, 3,000), stdev = 0,001
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.time":
[info]   13,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 4,000), stdev = 0,894
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala
[info] # Run progress: 2,41% complete, ETA 02:08:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10084340,979 ops/s
[info] # Warmup Iteration   2: 11122228,197 ops/s
[info] # Warmup Iteration   3: 11042820,070 ops/s
[info] # Warmup Iteration   4: 11231349,004 ops/s
[info] # Warmup Iteration   5: 11129386,956 ops/s
[info] Iteration   1: 11245395,176 ops/s
[info]                  ·gc.alloc.rate:                   1429,638 MB/sec
[info]                  ·gc.alloc.rate.norm:              200,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350,244 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     188,893 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,003 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 10761996,046 ops/s
[info]                  ·gc.alloc.rate:                   1368,050 MB/sec
[info]                  ·gc.alloc.rate.norm:              200,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350,720 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     197,466 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,012 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 11164759,429 ops/s
[info]                  ·gc.alloc.rate:                   1419,289 MB/sec
[info]                  ·gc.alloc.rate.norm:              200,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2027,710 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     285,736 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,015 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 11201250,137 ops/s
[info]                  ·gc.alloc.rate:               1423,915 MB/sec
[info]                  ·gc.alloc.rate.norm:          200,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1352,702 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 189,998 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 10667264,960 ops/s
[info]                  ·gc.alloc.rate:                   1356,066 MB/sec
[info]                  ·gc.alloc.rate.norm:              200,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,139 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     199,716 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,006 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala":
[info]   11008133,149 ±(99.9%) 1045529,297 ops/s [Average]
[info]   (min, avg, max) = (10667264,960, 11008133,149, 11245395,176), stdev = 271520,638
[info]   CI (99.9%): [9962603,853, 12053662,446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1399,392 ±(99.9%) 132,993 MB/sec [Average]
[info]   (min, avg, max) = (1356,066, 1399,392, 1429,638), stdev = 34,538
[info]   CI (99.9%): [1266,398, 1532,385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   200,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (200,000, 200,000, 200,000), stdev = 0,001
[info]   CI (99.9%): [200,000, 200,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1487,103 ±(99.9%) 1163,712 MB/sec [Average]
[info]   (min, avg, max) = (1350,244, 1487,103, 2027,710), stdev = 302,212
[info]   CI (99.9%): [323,390, 2650,815] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   212,362 ±(99.9%) 158,959 B/op [Average]
[info]   (min, avg, max) = (188,893, 212,362, 285,736), stdev = 41,281
[info]   CI (99.9%): [53,403, 371,321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,050 ±(99.9%) 0,166 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,050, 0,104), stdev = 0,043
[info]   CI (99.9%): [≈ 0, 0,216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,007 ±(99.9%) 0,024 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,007, 0,015), stdev = 0,006
[info]   CI (99.9%): [≈ 0, 0,031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson
[info] # Run progress: 2,61% complete, ETA 02:07:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 264012,942 ops/s
[info] # Warmup Iteration   2: 698686,574 ops/s
[info] # Warmup Iteration   3: 713893,824 ops/s
[info] # Warmup Iteration   4: 650515,099 ops/s
[info] # Warmup Iteration   5: 706284,689 ops/s
[info] Iteration   1: 711628,563 ops/s
[info]                  ·gc.alloc.rate:                   1881,667 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005,114 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4432,918 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,046 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 700840,553 ops/s
[info]                  ·gc.alloc.rate:                   1853,158 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011,098 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4514,547 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,234 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 718618,274 ops/s
[info]                  ·gc.alloc.rate:                   1900,150 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015,119 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4411,703 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,137 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 687773,618 ops/s
[info]                  ·gc.alloc.rate:                   1818,655 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,760 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3080,586 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,143 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 720551,090 ops/s
[info]                  ·gc.alloc.rate:                   1905,385 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2024,290 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4419,604 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,045 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson":
[info]   707882,420 ±(99.9%) 52506,575 ops/s [Average]
[info]   (min, avg, max) = (687773,618, 707882,420, 720551,090), stdev = 13635,791
[info]   CI (99.9%): [655375,845, 760388,994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1871,803 ±(99.9%) 138,849 MB/sec [Average]
[info]   (min, avg, max) = (1818,655, 1871,803, 1905,385), stdev = 36,059
[info]   CI (99.9%): [1732,954, 2010,653] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   4160,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4160,001, 4160,001, 4160,001), stdev = 0,001
[info]   CI (99.9%): [4160,001, 4160,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1880,476 ±(99.9%) 1149,178 MB/sec [Average]
[info]   (min, avg, max) = (1346,760, 1880,476, 2024,290), stdev = 298,438
[info]   CI (99.9%): [731,299, 3029,654] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4171,872 ±(99.9%) 2354,383 B/op [Average]
[info]   (min, avg, max) = (3080,586, 4171,872, 4514,547), stdev = 611,426
[info]   CI (99.9%): [1817,488, 6526,255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,054 ±(99.9%) 0,134 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,054, 0,104), stdev = 0,035
[info]   CI (99.9%): [≈ 0, 0,188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,121 ±(99.9%) 0,303 B/op [Average]
[info]   (min, avg, max) = (0,045, 0,121, 0,234), stdev = 0,079
[info]   CI (99.9%): [≈ 0, 0,424] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.time":
[info]   11,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce
[info] # Run progress: 2,81% complete, ETA 02:07:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1335842,366 ops/s
[info] # Warmup Iteration   2: 2189382,692 ops/s
[info] # Warmup Iteration   3: 2279531,459 ops/s
[info] # Warmup Iteration   4: 2266212,538 ops/s
[info] # Warmup Iteration   5: 2275115,752 ops/s
[info] Iteration   1: 2267142,116 ops/s
[info]                  ·gc.alloc.rate:                   2224,981 MB/sec
[info]                  ·gc.alloc.rate.norm:              1544,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2692,870 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1868,687 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,058 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 2268174,596 ops/s
[info]                  ·gc.alloc.rate:                   2225,884 MB/sec
[info]                  ·gc.alloc.rate.norm:              1544,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2024,088 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1404,023 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,072 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 2236939,281 ops/s
[info]                  ·gc.alloc.rate:                   2195,295 MB/sec
[info]                  ·gc.alloc.rate.norm:              1544,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2027,406 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1425,920 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,059 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 2264414,717 ops/s
[info]                  ·gc.alloc.rate:                   2222,289 MB/sec
[info]                  ·gc.alloc.rate.norm:              1544,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2030,744 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1410,918 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,014 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 2274440,101 ops/s
[info]                  ·gc.alloc.rate:                   2232,048 MB/sec
[info]                  ·gc.alloc.rate.norm:              1544,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2711,975 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1875,986 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,014 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce":
[info]   2262222,162 ±(99.9%) 56229,516 ops/s [Average]
[info]   (min, avg, max) = (2236939,281, 2262222,162, 2274440,101), stdev = 14602,627
[info]   CI (99.9%): [2205992,646, 2318451,678] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.alloc.rate":
[info]   2220,099 ±(99.9%) 55,135 MB/sec [Average]
[info]   (min, avg, max) = (2195,295, 2220,099, 2232,048), stdev = 14,318
[info]   CI (99.9%): [2164,964, 2275,235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   1544,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1544,000, 1544,000, 1544,000), stdev = 0,001
[info]   CI (99.9%): [1544,000, 1544,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2297,416 ±(99.9%) 1423,919 MB/sec [Average]
[info]   (min, avg, max) = (2024,088, 2297,416, 2711,975), stdev = 369,787
[info]   CI (99.9%): [873,497, 3721,336] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1597,107 ±(99.9%) 968,002 B/op [Average]
[info]   (min, avg, max) = (1404,023, 1597,107, 1875,986), stdev = 251,387
[info]   CI (99.9%): [629,105, 2565,109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,062 ±(99.9%) 0,150 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,062, 0,104), stdev = 0,039
[info]   CI (99.9%): [≈ 0, 0,212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,043 ±(99.9%) 0,105 B/op [Average]
[info]   (min, avg, max) = (0,014, 0,043, 0,072), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.count":
[info]   17,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,400, 4,000), stdev = 0,548
[info]   CI (99.9%): [17,000, 17,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.time":
[info]   9,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava
[info] # Run progress: 3,01% complete, ETA 02:07:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 915667,330 ops/s
[info] # Warmup Iteration   2: 20326546,924 ops/s
[info] # Warmup Iteration   3: 20704643,232 ops/s
[info] # Warmup Iteration   4: 21450553,196 ops/s
[info] # Warmup Iteration   5: 21120021,018 ops/s
[info] Iteration   1: 21550448,164 ops/s
[info]                  ·gc.alloc.rate:               657,505 MB/sec
[info]                  ·gc.alloc.rate.norm:          48,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664,023 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 48,476 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 20927932,543 ops/s
[info]                  ·gc.alloc.rate:               638,515 MB/sec
[info]                  ·gc.alloc.rate.norm:          48,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664,040 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 49,919 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 20926227,631 ops/s
[info]                  ·gc.alloc.rate:                   638,469 MB/sec
[info]                  ·gc.alloc.rate.norm:              48,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665,396 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50,024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,003 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 19372744,995 ops/s
[info]                  ·gc.alloc.rate:               591,093 MB/sec
[info]                  ·gc.alloc.rate.norm:          48,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665,457 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 54,039 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 21081519,487 ops/s
[info]                  ·gc.alloc.rate:      643,149 MB/sec
[info]                  ·gc.alloc.rate.norm: 48,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava":
[info]   20771774,564 ±(99.9%) 3168192,784 ops/s [Average]
[info]   (min, avg, max) = (19372744,995, 20771774,564, 21550448,164), stdev = 822769,605
[info]   CI (99.9%): [17603581,780, 23939967,348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   633,746 ±(99.9%) 96,597 MB/sec [Average]
[info]   (min, avg, max) = (591,093, 633,746, 657,505), stdev = 25,086
[info]   CI (99.9%): [537,149, 730,343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   48,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (48,000, 48,000, 48,000), stdev = 0,001
[info]   CI (99.9%): [48,000, 48,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   531,783 ±(99.9%) 1144,707 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 531,783, 665,457), stdev = 297,277
[info]   CI (99.9%): [≈ 0, 1676,490] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   40,492 ±(99.9%) 87,525 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 40,492, 54,039), stdev = 22,730
[info]   CI (99.9%): [≈ 0, 128,016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,008 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,008, 0,042), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0,001 ±(99.9%) 0,005 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,001, 0,003), stdev = 0,001
[info]   CI (99.9%): [≈ 0, 0,006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 2,000), stdev = 0,837
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala
[info] # Run progress: 3,21% complete, ETA 02:07:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3223252,629 ops/s
[info] # Warmup Iteration   2: 6594849,765 ops/s
[info] # Warmup Iteration   3: 6137399,742 ops/s
[info] # Warmup Iteration   4: 6686115,040 ops/s
[info] # Warmup Iteration   5: 6693023,295 ops/s
[info] Iteration   1: 6220114,025 ops/s
[info]                  ·gc.alloc.rate:                   1708,024 MB/sec
[info]                  ·gc.alloc.rate.norm:              432,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2003,299 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     506,682 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,016 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 6714451,343 ops/s
[info]                  ·gc.alloc.rate:                   1843,766 MB/sec
[info]                  ·gc.alloc.rate.norm:              432,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338,865 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     313,700 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,024 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 6695812,190 ops/s
[info]                  ·gc.alloc.rate:                   1838,589 MB/sec
[info]                  ·gc.alloc.rate.norm:              432,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013,497 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     473,097 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,020 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   4: 6621710,923 ops/s
[info]                  ·gc.alloc.rate:                   1818,244 MB/sec
[info]                  ·gc.alloc.rate.norm:              432,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017,497 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     479,341 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,010 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 6661828,773 ops/s
[info]                  ·gc.alloc.rate:                   1829,200 MB/sec
[info]                  ·gc.alloc.rate.norm:              432,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2023,014 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     477,773 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,005 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala":
[info]   6582783,451 ±(99.9%) 792439,116 ops/s [Average]
[info]   (min, avg, max) = (6220114,025, 6582783,451, 6714451,343), stdev = 205793,922
[info]   CI (99.9%): [5790344,335, 7375222,567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1807,565 ±(99.9%) 217,515 MB/sec [Average]
[info]   (min, avg, max) = (1708,024, 1807,565, 1843,766), stdev = 56,488
[info]   CI (99.9%): [1590,050, 2025,080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   432,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (432,000, 432,000, 432,000), stdev = 0,001
[info]   CI (99.9%): [432,000, 432,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1879,235 ±(99.9%) 1163,518 MB/sec [Average]
[info]   (min, avg, max) = (1338,865, 1879,235, 2023,014), stdev = 302,162
[info]   CI (99.9%): [715,717, 3042,752] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   450,119 ±(99.9%) 297,997 B/op [Average]
[info]   (min, avg, max) = (313,700, 450,119, 506,682), stdev = 77,389
[info]   CI (99.9%): [152,122, 748,115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,062 ±(99.9%) 0,127 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,062, 0,104), stdev = 0,033
[info]   CI (99.9%): [≈ 0, 0,189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,015 ±(99.9%) 0,030 B/op [Average]
[info]   (min, avg, max) = (0,005, 0,015, 0,024), stdev = 0,008
[info]   CI (99.9%): [≈ 0, 0,045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.time":
[info]   13,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 2,600, 5,000), stdev = 1,517
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala
[info] # Run progress: 3,41% complete, ETA 02:06:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24428269,939 ops/s
[info] # Warmup Iteration   2: 29923702,609 ops/s
[info] # Warmup Iteration   3: 31018529,531 ops/s
[info] # Warmup Iteration   4: 31221756,707 ops/s
[info] # Warmup Iteration   5: 31309042,982 ops/s
[info] Iteration   1: 31414830,642 ops/s
[info]                  ·gc.alloc.rate:                   958,454 MB/sec
[info]                  ·gc.alloc.rate.norm:              48,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,698 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33,739 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,001 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 31401545,244 ops/s
[info]                  ·gc.alloc.rate:                   958,024 MB/sec
[info]                  ·gc.alloc.rate.norm:              48,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,404 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67,509 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,002 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 31375229,502 ops/s
[info]                  ·gc.alloc.rate:               957,233 MB/sec
[info]                  ·gc.alloc.rate.norm:          48,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,673 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 33,781 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 31429624,972 ops/s
[info]                  ·gc.alloc.rate:               958,904 MB/sec
[info]                  ·gc.alloc.rate.norm:          48,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,687 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 33,723 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 26632394,033 ops/s
[info]                  ·gc.alloc.rate:                   812,525 MB/sec
[info]                  ·gc.alloc.rate.norm:              48,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,098 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     79,639 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,004 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala":
[info]   30450724,878 ±(99.9%) 8219606,016 ops/s [Average]
[info]   (min, avg, max) = (26632394,033, 30450724,878, 31429624,972), stdev = 2134605,580
[info]   CI (99.9%): [22231118,862, 38670330,895] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   929,028 ±(99.9%) 250,792 MB/sec [Average]
[info]   (min, avg, max) = (812,525, 929,028, 958,904), stdev = 65,130
[info]   CI (99.9%): [678,236, 1179,820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   48,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (48,000, 48,000, 48,000), stdev = 0,001
[info]   CI (99.9%): [48,000, 48,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   943,312 ±(99.9%) 1421,660 MB/sec [Average]
[info]   (min, avg, max) = (673,673, 943,312, 1348,098), stdev = 369,201
[info]   CI (99.9%): [≈ 0, 2364,972] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   49,678 ±(99.9%) 85,605 B/op [Average]
[info]   (min, avg, max) = (33,723, 49,678, 79,639), stdev = 22,231
[info]   CI (99.9%): [≈ 0, 135,283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,001 ±(99.9%) 0,006 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,001, 0,004), stdev = 0,002
[info]   CI (99.9%): [≈ 0, 0,007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 3,61% complete, ETA 02:06:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24414382,116 ops/s
[info] # Warmup Iteration   2: 29869091,559 ops/s
[info] # Warmup Iteration   3: 29104297,903 ops/s
[info] # Warmup Iteration   4: 29849516,092 ops/s
[info] # Warmup Iteration   5: 29836731,893 ops/s
[info] Iteration   1: 29866147,230 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 29901562,700 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 29861924,007 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 29811482,909 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 29675157,715 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc":
[info]   29823254,912 ±(99.9%) 341919,614 ops/s [Average]
[info]   (min, avg, max) = (29675157,715, 29823254,912, 29901562,700), stdev = 88795,438
[info]   CI (99.9%): [29481335,298, 30165174,526] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson
[info] # Run progress: 3,82% complete, ETA 02:06:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 595482,776 ops/s
[info] # Warmup Iteration   2: 1478574,108 ops/s
[info] # Warmup Iteration   3: 1501077,034 ops/s
[info] # Warmup Iteration   4: 1491502,715 ops/s
[info] # Warmup Iteration   5: 1492559,720 ops/s
[info] Iteration   1: 1501342,336 ops/s
[info]                  ·gc.alloc.rate:                   2229,172 MB/sec
[info]                  ·gc.alloc.rate.norm:              2336,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011,437 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2107,830 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,109 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 1498184,985 ops/s
[info]                  ·gc.alloc.rate:                   2224,522 MB/sec
[info]                  ·gc.alloc.rate.norm:              2336,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016,080 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2117,112 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,066 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 1500471,417 ops/s
[info]                  ·gc.alloc.rate:                   2227,940 MB/sec
[info]                  ·gc.alloc.rate.norm:              2336,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2696,146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2826,915 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,109 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 1457413,330 ops/s
[info]                  ·gc.alloc.rate:                   2164,145 MB/sec
[info]                  ·gc.alloc.rate.norm:              2336,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2027,340 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2188,333 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,045 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         7,000 ms
[info] Iteration   5: 1502520,014 ops/s
[info]                  ·gc.alloc.rate:                   2230,916 MB/sec
[info]                  ·gc.alloc.rate.norm:              2336,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2030,388 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2126,026 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,044 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson":
[info]   1491986,416 ±(99.9%) 74671,862 ops/s [Average]
[info]   (min, avg, max) = (1457413,330, 1491986,416, 1502520,014), stdev = 19392,046
[info]   CI (99.9%): [1417314,554, 1566658,279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2215,339 ±(99.9%) 110,568 MB/sec [Average]
[info]   (min, avg, max) = (2164,145, 2215,339, 2230,916), stdev = 28,714
[info]   CI (99.9%): [2104,771, 2325,907] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2336,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (2336,000, 2336,000, 2336,000), stdev = 0,001
[info]   CI (99.9%): [2336,000, 2336,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2156,278 ±(99.9%) 1162,495 MB/sec [Average]
[info]   (min, avg, max) = (2011,437, 2156,278, 2696,146), stdev = 301,896
[info]   CI (99.9%): [993,783, 3318,773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2273,243 ±(99.9%) 1197,999 B/op [Average]
[info]   (min, avg, max) = (2107,830, 2273,243, 2826,915), stdev = 311,117
[info]   CI (99.9%): [1075,244, 3471,242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,071 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,071, 0,104), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,074 ±(99.9%) 0,126 B/op [Average]
[info]   (min, avg, max) = (0,044, 0,074, 0,109), stdev = 0,033
[info]   CI (99.9%): [≈ 0, 0,201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.count":
[info]   16,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,200, 4,000), stdev = 0,447
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.time":
[info]   16,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 3,200, 7,000), stdev = 2,168
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 4,02% complete, ETA 02:06:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 327279,975 ops/s
[info] # Warmup Iteration   2: 377142,424 ops/s
[info] # Warmup Iteration   3: 376377,382 ops/s
[info] # Warmup Iteration   4: 377224,165 ops/s
[info] # Warmup Iteration   5: 352316,868 ops/s
[info] Iteration   1: 357792,836 ops/s
[info]                  ·gc.alloc.rate:                   2139,574 MB/sec
[info]                  ·gc.alloc.rate.norm:              9408,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2023,490 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8897,561 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,183 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 377163,427 ops/s
[info]                  ·gc.alloc.rate:                   2255,367 MB/sec
[info]                  ·gc.alloc.rate.norm:              9408,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2704,053 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11279,643 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,521 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 379397,154 ops/s
[info]                  ·gc.alloc.rate:                   2268,654 MB/sec
[info]                  ·gc.alloc.rate.norm:              9408,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2031,744 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8425,549 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,259 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 377693,941 ops/s
[info]                  ·gc.alloc.rate:                   2258,626 MB/sec
[info]                  ·gc.alloc.rate.norm:              9408,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2033,888 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8471,883 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,087 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 378012,725 ops/s
[info]                  ·gc.alloc.rate:                   2260,357 MB/sec
[info]                  ·gc.alloc.rate.norm:              9408,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2715,386 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11301,910 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,173 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce":
[info]   374012,016 ±(99.9%) 35057,525 ops/s [Average]
[info]   (min, avg, max) = (357792,836, 374012,016, 379397,154), stdev = 9104,328
[info]   CI (99.9%): [338954,491, 409069,542] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   2236,516 ±(99.9%) 209,526 MB/sec [Average]
[info]   (min, avg, max) = (2139,574, 2236,516, 2268,654), stdev = 54,413
[info]   CI (99.9%): [2026,990, 2446,041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   9408,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (9408,001, 9408,001, 9408,001), stdev = 0,001
[info]   CI (99.9%): [9408,001, 9408,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2301,712 ±(99.9%) 1434,365 MB/sec [Average]
[info]   (min, avg, max) = (2023,490, 2301,712, 2715,386), stdev = 372,500
[info]   CI (99.9%): [867,348, 3736,077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   9675,309 ±(99.9%) 5722,693 B/op [Average]
[info]   (min, avg, max) = (8425,549, 9675,309, 11301,910), stdev = 1486,165
[info]   CI (99.9%): [3952,617, 15398,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,058 ±(99.9%) 0,154 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,058, 0,125), stdev = 0,040
[info]   CI (99.9%): [≈ 0, 0,213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,245 ±(99.9%) 0,640 B/op [Average]
[info]   (min, avg, max) = (0,087, 0,245, 0,521), stdev = 0,166
[info]   CI (99.9%): [≈ 0, 0,885] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.count":
[info]   17,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,400, 4,000), stdev = 0,548
[info]   CI (99.9%): [17,000, 17,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.time":
[info]   10,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 2,000, 3,000), stdev = 0,707
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 4,22% complete, ETA 02:05:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 335368,008 ops/s
[info] # Warmup Iteration   2: 562989,852 ops/s
[info] # Warmup Iteration   3: 561324,325 ops/s
[info] # Warmup Iteration   4: 563354,867 ops/s
[info] # Warmup Iteration   5: 561205,947 ops/s
[info] Iteration   1: 560557,606 ops/s
[info]                  ·gc.alloc.rate:                   764,156 MB/sec
[info]                  ·gc.alloc.rate.norm:              2144,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333,354 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3741,004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,469 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6,926 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 560008,363 ops/s
[info]                  ·gc.alloc.rate:               763,156 MB/sec
[info]                  ·gc.alloc.rate.norm:          2144,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667,064 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1874,042 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 559781,417 ops/s
[info]                  ·gc.alloc.rate:               762,842 MB/sec
[info]                  ·gc.alloc.rate.norm:          2144,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667,049 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1874,772 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 559661,329 ops/s
[info]                  ·gc.alloc.rate:                   762,675 MB/sec
[info]                  ·gc.alloc.rate.norm:              2144,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666,998 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1875,039 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,117 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 561984,171 ops/s
[info]                  ·gc.alloc.rate:               765,810 MB/sec
[info]                  ·gc.alloc.rate.norm:          2144,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667,015 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1867,410 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala":
[info]   560398,577 ±(99.9%) 3661,194 ops/s [Average]
[info]   (min, avg, max) = (559661,329, 560398,577, 561984,171), stdev = 950,800
[info]   CI (99.9%): [556737,383, 564059,771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   763,728 ±(99.9%) 4,999 MB/sec [Average]
[info]   (min, avg, max) = (762,675, 763,728, 765,810), stdev = 1,298
[info]   CI (99.9%): [758,729, 768,727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   2144,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (2144,001, 2144,001, 2144,001), stdev = 0,001
[info]   CI (99.9%): [2144,001, 2144,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   800,296 ±(99.9%) 1147,447 MB/sec [Average]
[info]   (min, avg, max) = (666,998, 800,296, 1333,354), stdev = 297,988
[info]   CI (99.9%): [≈ 0, 1947,743] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   2246,453 ±(99.9%) 3217,155 B/op [Average]
[info]   (min, avg, max) = (1867,410, 2246,453, 3741,004), stdev = 835,485
[info]   CI (99.9%): [≈ 0, 5463,608] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,502 ±(99.9%) 4,234 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,502, 2,469), stdev = 1,099
[info]   CI (99.9%): [≈ 0, 4,736] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1,409 ±(99.9%) 11,878 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,409, 6,926), stdev = 3,085
[info]   CI (99.9%): [≈ 0, 13,287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 3,000), stdev = 1,095
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 4,42% complete, ETA 02:05:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1121822,098 ops/s
[info] # Warmup Iteration   2: 1172664,066 ops/s
[info] # Warmup Iteration   3: 1174886,254 ops/s
[info] # Warmup Iteration   4: 1167431,926 ops/s
[info] # Warmup Iteration   5: 1168507,864 ops/s
[info] Iteration   1: 1175746,198 ops/s
[info]                  ·gc.alloc.rate:                   783,184 MB/sec
[info]                  ·gc.alloc.rate.norm:              1048,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,671 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     901,458 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,111 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 1177896,083 ops/s
[info]                  ·gc.alloc.rate:               784,594 MB/sec
[info]                  ·gc.alloc.rate.norm:          1048,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,024 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 898,973 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 1178439,783 ops/s
[info]                  ·gc.alloc.rate:                   784,953 MB/sec
[info]                  ·gc.alloc.rate.norm:              1048,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,024 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     898,563 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,056 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 1178035,989 ops/s
[info]                  ·gc.alloc.rate:                   784,737 MB/sec
[info]                  ·gc.alloc.rate.norm:              1048,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,397 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     899,308 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,083 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 1003702,599 ops/s
[info]                  ·gc.alloc.rate:               668,594 MB/sec
[info]                  ·gc.alloc.rate.norm:          1048,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,404 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1055,540 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala":
[info]   1142764,130 ±(99.9%) 299367,671 ops/s [Average]
[info]   (min, avg, max) = (1003702,599, 1142764,130, 1178439,783), stdev = 77744,834
[info]   CI (99.9%): [843396,459, 1442131,802] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   761,212 ±(99.9%) 199,386 MB/sec [Average]
[info]   (min, avg, max) = (668,594, 761,212, 784,953), stdev = 51,780
[info]   CI (99.9%): [561,827, 960,598] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1048,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1048,000, 1048,000, 1048,000), stdev = 0,001
[info]   CI (99.9%): [1048,000, 1048,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   673,304 ±(99.9%) 1,073 MB/sec [Average]
[info]   (min, avg, max) = (673,024, 673,304, 673,671), stdev = 0,279
[info]   CI (99.9%): [672,231, 674,376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   930,769 ±(99.9%) 268,615 B/op [Average]
[info]   (min, avg, max) = (898,563, 930,769, 1055,540), stdev = 69,758
[info]   CI (99.9%): [662,154, 1199,383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,083), stdev = 0,037
[info]   CI (99.9%): [≈ 0, 0,181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,050 ±(99.9%) 0,192 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,050, 0,111), stdev = 0,050
[info]   CI (99.9%): [≈ 0, 0,242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 4,62% complete, ETA 02:05:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 94762,183 ops/s
[info] # Warmup Iteration   2: 127103,017 ops/s
[info] # Warmup Iteration   3: 126405,882 ops/s
[info] # Warmup Iteration   4: 127472,970 ops/s
[info] # Warmup Iteration   5: 127618,091 ops/s
[info] Iteration   1: 127551,565 ops/s
[info]                  ·gc.alloc.rate:                   4418,356 MB/sec
[info]                  ·gc.alloc.rate.norm:              54496,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4751,936 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     58610,383 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,027 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   2: 127581,605 ops/s
[info]                  ·gc.alloc.rate:                   4419,176 MB/sec
[info]                  ·gc.alloc.rate.norm:              54496,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4080,660 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50321,525 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,284 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   3: 118135,870 ops/s
[info]                  ·gc.alloc.rate:                   4092,146 MB/sec
[info]                  ·gc.alloc.rate.norm:              54496,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4084,921 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54399,794 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,555 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   4: 127024,954 ops/s
[info]                  ·gc.alloc.rate:                   4400,199 MB/sec
[info]                  ·gc.alloc.rate.norm:              54496,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4768,961 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     59063,079 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,516 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   5: 127823,290 ops/s
[info]                  ·gc.alloc.rate:                   4427,654 MB/sec
[info]                  ·gc.alloc.rate.norm:              54496,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4090,015 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50340,309 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,025 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson":
[info]   125623,457 ±(99.9%) 16156,579 ops/s [Average]
[info]   (min, avg, max) = (118135,870, 125623,457, 127823,290), stdev = 4195,812
[info]   CI (99.9%): [109466,878, 141780,036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   4351,506 ±(99.9%) 559,621 MB/sec [Average]
[info]   (min, avg, max) = (4092,146, 4351,506, 4427,654), stdev = 145,332
[info]   CI (99.9%): [3791,885, 4911,127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   54496,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (54496,003, 54496,003, 54496,004), stdev = 0,001
[info]   CI (99.9%): [54496,003, 54496,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   4355,299 ±(99.9%) 1424,405 MB/sec [Average]
[info]   (min, avg, max) = (4080,660, 4355,299, 4768,961), stdev = 369,913
[info]   CI (99.9%): [2930,894, 5779,704] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   54547,018 ±(99.9%) 16391,108 B/op [Average]
[info]   (min, avg, max) = (50321,525, 54547,018, 59063,079), stdev = 4256,719
[info]   CI (99.9%): [38155,910, 70938,126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,071 ±(99.9%) 0,108 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,071, 0,104), stdev = 0,028
[info]   CI (99.9%): [≈ 0, 0,178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,881 ±(99.9%) 1,283 B/op [Average]
[info]   (min, avg, max) = (0,516, 0,881, 1,284), stdev = 0,333
[info]   CI (99.9%): [≈ 0, 2,165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   32,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (6,000, 6,400, 7,000), stdev = 0,548
[info]   CI (99.9%): [32,000, 32,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   20,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (4,000, 4,000, 4,000), stdev = 0,001
[info]   CI (99.9%): [20,000, 20,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 4,82% complete, ETA 02:05:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 636195,610 ops/s
[info] # Warmup Iteration   2: 675538,994 ops/s
[info] # Warmup Iteration   3: 684747,813 ops/s
[info] # Warmup Iteration   4: 687636,541 ops/s
[info] # Warmup Iteration   5: 683143,484 ops/s
[info] Iteration   1: 688797,391 ops/s
[info]                  ·gc.alloc.rate:                   2108,442 MB/sec
[info]                  ·gc.alloc.rate.norm:              4816,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2025,643 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4626,874 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,190 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 683596,946 ops/s
[info]                  ·gc.alloc.rate:                   2092,562 MB/sec
[info]                  ·gc.alloc.rate.norm:              4816,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2705,394 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6226,425 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,192 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 689185,151 ops/s
[info]                  ·gc.alloc.rate:                   2109,616 MB/sec
[info]                  ·gc.alloc.rate.norm:              4816,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2031,736 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4638,209 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,095 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 683578,748 ops/s
[info]                  ·gc.alloc.rate:                   2092,501 MB/sec
[info]                  ·gc.alloc.rate.norm:              4816,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2034,368 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4682,204 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,096 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 686089,122 ops/s
[info]                  ·gc.alloc.rate:                   2100,158 MB/sec
[info]                  ·gc.alloc.rate.norm:              4816,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2036,348 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4669,676 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,096 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readUPickle":
[info]   686249,472 ±(99.9%) 10422,462 ops/s [Average]
[info]   (min, avg, max) = (683578,748, 686249,472, 689185,151), stdev = 2706,680
[info]   CI (99.9%): [675827,009, 696671,934] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readUPickle:·gc.alloc.rate":
[info]   2100,656 ±(99.9%) 31,822 MB/sec [Average]
[info]   (min, avg, max) = (2092,501, 2100,656, 2109,616), stdev = 8,264
[info]   CI (99.9%): [2068,834, 2132,477] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   4816,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4816,001, 4816,001, 4816,001), stdev = 0,001
[info]   CI (99.9%): [4816,001, 4816,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   2166,698 ±(99.9%) 1159,688 MB/sec [Average]
[info]   (min, avg, max) = (2025,643, 2166,698, 2705,394), stdev = 301,167
[info]   CI (99.9%): [1007,010, 3326,386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   4968,678 ±(99.9%) 2708,783 B/op [Average]
[info]   (min, avg, max) = (4626,874, 4968,678, 6226,425), stdev = 703,462
[info]   CI (99.9%): [2259,895, 7677,461] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,058 ±(99.9%) 0,088 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,058, 0,083), stdev = 0,023
[info]   CI (99.9%): [≈ 0, 0,146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,134 ±(99.9%) 0,201 B/op [Average]
[info]   (min, avg, max) = (0,095, 0,134, 0,192), stdev = 0,052
[info]   CI (99.9%): [≈ 0, 0,335] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readUPickle:·gc.count":
[info]   16,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,200, 4,000), stdev = 0,447
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readUPickle:·gc.time":
[info]   9,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 5,02% complete, ETA 02:05:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 314272,799 ops/s
[info] # Warmup Iteration   2: 402094,172 ops/s
[info] # Warmup Iteration   3: 400965,474 ops/s
[info] # Warmup Iteration   4: 380083,221 ops/s
[info] # Warmup Iteration   5: 379961,325 ops/s
[info] Iteration   1: 379416,381 ops/s
[info]                  ·gc.alloc.rate:                   1291,099 MB/sec
[info]                  ·gc.alloc.rate.norm:              5352,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341,212 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5559,735 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,086 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 374568,683 ops/s
[info]                  ·gc.alloc.rate:               1274,201 MB/sec
[info]                  ·gc.alloc.rate.norm:          5352,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,363 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2819,911 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 366859,296 ops/s
[info]                  ·gc.alloc.rate:                   1248,023 MB/sec
[info]                  ·gc.alloc.rate.norm:              5352,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,154 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5764,249 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,268 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 360062,165 ops/s
[info]                  ·gc.alloc.rate:                   1224,871 MB/sec
[info]                  ·gc.alloc.rate.norm:              5352,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,437 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5878,804 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,364 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 371738,180 ops/s
[info]                  ·gc.alloc.rate:                   1264,572 MB/sec
[info]                  ·gc.alloc.rate.norm:              5352,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,361 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5702,384 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,176 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce":
[info]   370528,941 ±(99.9%) 28543,381 ops/s [Average]
[info]   (min, avg, max) = (360062,165, 370528,941, 379416,381), stdev = 7412,625
[info]   CI (99.9%): [341985,560, 399072,322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   1260,553 ±(99.9%) 97,522 MB/sec [Average]
[info]   (min, avg, max) = (1224,871, 1260,553, 1291,099), stdev = 25,326
[info]   CI (99.9%): [1163,031, 1358,076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5352,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (5352,001, 5352,001, 5352,001), stdev = 0,001
[info]   CI (99.9%): [5352,001, 5352,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1209,905 ±(99.9%) 1159,286 MB/sec [Average]
[info]   (min, avg, max) = (671,363, 1209,905, 1347,361), stdev = 301,063
[info]   CI (99.9%): [50,620, 2369,191] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5145,017 ±(99.9%) 5024,558 B/op [Average]
[info]   (min, avg, max) = (2819,911, 5145,017, 5878,804), stdev = 1304,862
[info]   CI (99.9%): [120,459, 10169,575] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,127 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,042, 0,083), stdev = 0,033
[info]   CI (99.9%): [≈ 0, 0,168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,179 ±(99.9%) 0,554 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,179, 0,364), stdev = 0,144
[info]   CI (99.9%): [≈ 0, 0,733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 5,22% complete, ETA 02:04:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 524255,658 ops/s
[info] # Warmup Iteration   2: 739591,224 ops/s
[info] # Warmup Iteration   3: 739008,014 ops/s
[info] # Warmup Iteration   4: 739439,922 ops/s
[info] # Warmup Iteration   5: 741462,284 ops/s
[info] Iteration   1: 741331,330 ops/s
[info]                  ·gc.alloc.rate:                   554,120 MB/sec
[info]                  ·gc.alloc.rate.norm:              1176,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,772 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1086,127 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,015 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,032 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 742200,860 ops/s
[info]                  ·gc.alloc.rate:                   554,782 MB/sec
[info]                  ·gc.alloc.rate.norm:              1176,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666,697 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1413,234 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,345 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,971 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 744132,119 ops/s
[info]                  ·gc.alloc.rate:      556,219 MB/sec
[info]                  ·gc.alloc.rate.norm: 1176,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 743816,141 ops/s
[info]                  ·gc.alloc.rate:                   555,985 MB/sec
[info]                  ·gc.alloc.rate.norm:              1176,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666,685 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1410,149 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,132 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 743423,729 ops/s
[info]                  ·gc.alloc.rate:                   555,660 MB/sec
[info]                  ·gc.alloc.rate.norm:              1176,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666,980 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1411,598 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,088 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala":
[info]   742980,836 ±(99.9%) 4535,175 ops/s [Average]
[info]   (min, avg, max) = (741331,330, 742980,836, 744132,119), stdev = 1177,771
[info]   CI (99.9%): [738445,661, 747516,010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   555,353 ±(99.9%) 3,384 MB/sec [Average]
[info]   (min, avg, max) = (554,120, 555,353, 556,219), stdev = 0,879
[info]   CI (99.9%): [551,969, 558,737] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1176,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1176,001, 1176,001, 1176,001), stdev = 0,001
[info]   CI (99.9%): [1176,001, 1176,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   502,427 ±(99.9%) 1111,969 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 502,427, 666,980), stdev = 288,775
[info]   CI (99.9%): [≈ 0, 1614,396] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1064,222 ±(99.9%) 2354,247 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1064,222, 1413,234), stdev = 611,391
[info]   CI (99.9%): [≈ 0, 3418,469] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,493 ±(99.9%) 3,988 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,493, 2,345), stdev = 1,036
[info]   CI (99.9%): [≈ 0, 4,481] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1,045 ±(99.9%) 8,454 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,045, 4,971), stdev = 2,195
[info]   CI (99.9%): [≈ 0, 9,498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 3,000), stdev = 1,304
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 5,42% complete, ETA 02:04:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2274701,931 ops/s
[info] # Warmup Iteration   2: 2413464,311 ops/s
[info] # Warmup Iteration   3: 2392464,487 ops/s
[info] # Warmup Iteration   4: 2405970,879 ops/s
[info] # Warmup Iteration   5: 2421433,217 ops/s
[info] Iteration   1: 2414409,990 ops/s
[info]                  ·gc.alloc.rate:                   1117,198 MB/sec
[info]                  ·gc.alloc.rate.norm:              728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,077 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     877,796 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,014 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 2407607,228 ops/s
[info]                  ·gc.alloc.rate:                   1114,058 MB/sec
[info]                  ·gc.alloc.rate.norm:              728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,026 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     880,237 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,054 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 2411839,073 ops/s
[info]                  ·gc.alloc.rate:               1116,061 MB/sec
[info]                  ·gc.alloc.rate.norm:          728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,713 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 439,459 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 2409286,195 ops/s
[info]                  ·gc.alloc.rate:                   1114,855 MB/sec
[info]                  ·gc.alloc.rate.norm:              728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,121 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     880,323 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,027 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 2387623,847 ops/s
[info]                  ·gc.alloc.rate:                   1104,799 MB/sec
[info]                  ·gc.alloc.rate.norm:              728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1349,392 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     889,174 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,041 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala":
[info]   2406153,267 ±(99.9%) 41103,280 ops/s [Average]
[info]   (min, avg, max) = (2387623,847, 2406153,267, 2414409,990), stdev = 10674,391
[info]   CI (99.9%): [2365049,987, 2447256,546] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1113,394 ±(99.9%) 19,064 MB/sec [Average]
[info]   (min, avg, max) = (1104,799, 1113,394, 1117,198), stdev = 4,951
[info]   CI (99.9%): [1094,331, 1132,458] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   728,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (728,000, 728,000, 728,000), stdev = 0,001
[info]   CI (99.9%): [728,000, 728,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1213,066 ±(99.9%) 1161,003 MB/sec [Average]
[info]   (min, avg, max) = (673,713, 1213,066, 1349,392), stdev = 301,509
[info]   CI (99.9%): [52,063, 2374,069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   793,398 ±(99.9%) 762,062 B/op [Average]
[info]   (min, avg, max) = (439,459, 793,398, 889,174), stdev = 197,905
[info]   CI (99.9%): [31,336, 1555,460] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,127 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,042, 0,083), stdev = 0,033
[info]   CI (99.9%): [≈ 0, 0,168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,027 ±(99.9%) 0,083 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,027, 0,054), stdev = 0,022
[info]   CI (99.9%): [≈ 0, 0,110] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 5,62% complete, ETA 02:04:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2854813,300 ops/s
[info] # Warmup Iteration   2: 2934992,816 ops/s
[info] # Warmup Iteration   3: 2939880,280 ops/s
[info] # Warmup Iteration   4: 2936909,047 ops/s
[info] # Warmup Iteration   5: 2932754,037 ops/s
[info] Iteration   1: 2937890,880 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2903612,836 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2940047,890 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2904119,797 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2937538,442 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   2924641,969 ±(99.9%) 73126,228 ops/s [Average]
[info]   (min, avg, max) = (2903612,836, 2924641,969, 2940047,890), stdev = 18990,649
[info]   CI (99.9%): [2851515,741, 2997768,197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 5,82% complete, ETA 02:04:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 366127,076 ops/s
[info] # Warmup Iteration   2: 433565,629 ops/s
[info] # Warmup Iteration   3: 424171,452 ops/s
[info] # Warmup Iteration   4: 435275,591 ops/s
[info] # Warmup Iteration   5: 431065,694 ops/s
[info] Iteration   1: 432333,628 ops/s
[info]                  ·gc.alloc.rate:      622,138 MB/sec
[info]                  ·gc.alloc.rate.norm: 2264,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 435042,329 ops/s
[info]                  ·gc.alloc.rate:                   626,015 MB/sec
[info]                  ·gc.alloc.rate.norm:              2264,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670,014 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2423,126 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1,995 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7,216 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 429988,180 ops/s
[info]                  ·gc.alloc.rate:                   618,749 MB/sec
[info]                  ·gc.alloc.rate.norm:              2264,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670,012 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2451,573 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,229 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 436442,100 ops/s
[info]                  ·gc.alloc.rate:                   628,051 MB/sec
[info]                  ·gc.alloc.rate.norm:              2264,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669,679 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2414,065 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,075 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 437530,844 ops/s
[info]                  ·gc.alloc.rate:               629,606 MB/sec
[info]                  ·gc.alloc.rate.norm:          2264,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669,675 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2408,085 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson":
[info]   434267,416 ±(99.9%) 11873,338 ops/s [Average]
[info]   (min, avg, max) = (429988,180, 434267,416, 437530,844), stdev = 3083,468
[info]   CI (99.9%): [422394,078, 446140,754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   624,912 ±(99.9%) 17,089 MB/sec [Average]
[info]   (min, avg, max) = (618,749, 624,912, 629,606), stdev = 4,438
[info]   CI (99.9%): [607,823, 642,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2264,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (2264,001, 2264,001, 2264,001), stdev = 0,001
[info]   CI (99.9%): [2264,001, 2264,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   535,876 ±(99.9%) 1153,514 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 535,876, 670,014), stdev = 299,564
[info]   CI (99.9%): [≈ 0, 1689,390] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1939,370 ±(99.9%) 4175,133 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1939,370, 2451,573), stdev = 1084,269
[info]   CI (99.9%): [≈ 0, 6114,503] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,416 ±(99.9%) 3,402 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,416, 1,995), stdev = 0,883
[info]   CI (99.9%): [≈ 0, 3,817] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1,504 ±(99.9%) 12,302 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,504, 7,216), stdev = 3,195
[info]   CI (99.9%): [≈ 0, 13,806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 6,02% complete, ETA 02:03:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 174229,204 ops/s
[info] # Warmup Iteration   2: 182958,716 ops/s
[info] # Warmup Iteration   3: 183122,630 ops/s
[info] # Warmup Iteration   4: 183545,864 ops/s
[info] # Warmup Iteration   5: 183922,632 ops/s
[info] Iteration   1: 184055,796 ops/s
[info]                  ·gc.alloc.rate:                   1078,107 MB/sec
[info]                  ·gc.alloc.rate.norm:              9216,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,673 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11528,885 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,178 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 183776,432 ops/s
[info]                  ·gc.alloc.rate:               1076,528 MB/sec
[info]                  ·gc.alloc.rate.norm:          9216,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,345 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5772,972 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 182965,537 ops/s
[info]                  ·gc.alloc.rate:                   1071,767 MB/sec
[info]                  ·gc.alloc.rate.norm:              9216,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,669 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11597,048 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,537 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 183187,819 ops/s
[info]                  ·gc.alloc.rate:               1073,063 MB/sec
[info]                  ·gc.alloc.rate.norm:          9216,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,672 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5794,423 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 183276,215 ops/s
[info]                  ·gc.alloc.rate:                   1073,508 MB/sec
[info]                  ·gc.alloc.rate.norm:              9216,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1349,604 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11586,270 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,179 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeUPickle":
[info]   183452,360 ±(99.9%) 1729,753 ops/s [Average]
[info]   (min, avg, max) = (182965,537, 183452,360, 184055,796), stdev = 449,211
[info]   CI (99.9%): [181722,607, 185182,113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.alloc.rate":
[info]   1074,595 ±(99.9%) 10,114 MB/sec [Average]
[info]   (min, avg, max) = (1071,767, 1074,595, 1078,107), stdev = 2,627
[info]   CI (99.9%): [1064,480, 1084,709] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   9216,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (9216,002, 9216,002, 9216,002), stdev = 0,001
[info]   CI (99.9%): [9216,002, 9216,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   1079,193 ±(99.9%) 1422,522 MB/sec [Average]
[info]   (min, avg, max) = (674,345, 1079,193, 1349,604), stdev = 369,425
[info]   CI (99.9%): [≈ 0, 2501,715] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   9255,920 ±(99.9%) 12205,792 B/op [Average]
[info]   (min, avg, max) = (5772,972, 9255,920, 11597,048), stdev = 3169,805
[info]   CI (99.9%): [≈ 0, 21461,712] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,021 ±(99.9%) 0,098 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,062), stdev = 0,026
[info]   CI (99.9%): [≈ 0, 0,119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,179 ±(99.9%) 0,844 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,179, 0,537), stdev = 0,219
[info]   CI (99.9%): [≈ 0, 1,023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 6,22% complete, ETA 02:03:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17200,484 ops/s
[info] # Warmup Iteration   2: 20601,551 ops/s
[info] # Warmup Iteration   3: 20675,681 ops/s
[info] # Warmup Iteration   4: 20737,043 ops/s
[info] # Warmup Iteration   5: 20717,216 ops/s
[info] Iteration   1: 20652,966 ops/s
[info]                  ·gc.alloc.rate:                   1463,077 MB/sec
[info]                  ·gc.alloc.rate.norm:              111448,029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,707 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     102431,328 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6,345 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 20697,001 ops/s
[info]                  ·gc.alloc.rate:               1466,267 MB/sec
[info]                  ·gc.alloc.rate.norm:          111448,021 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1346,237 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 102324,808 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 20817,061 ops/s
[info]                  ·gc.alloc.rate:                   1474,621 MB/sec
[info]                  ·gc.alloc.rate.norm:              111448,021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,307 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     101825,986 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,721 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 20671,852 ops/s
[info]                  ·gc.alloc.rate:               1464,294 MB/sec
[info]                  ·gc.alloc.rate.norm:          111448,021 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1349,318 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 102697,156 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 20801,148 ops/s
[info]                  ·gc.alloc.rate:                   1473,866 MB/sec
[info]                  ·gc.alloc.rate.norm:              111448,021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2025,392 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     153152,320 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,721 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce":
[info]   20728,005 ±(99.9%) 292,155 ops/s [Average]
[info]   (min, avg, max) = (20652,966, 20728,005, 20817,061), stdev = 75,872
[info]   CI (99.9%): [20435,850, 21020,161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate":
[info]   1468,425 ±(99.9%) 20,942 MB/sec [Average]
[info]   (min, avg, max) = (1463,077, 1468,425, 1474,621), stdev = 5,438
[info]   CI (99.9%): [1447,483, 1489,367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   111448,022 ±(99.9%) 0,014 B/op [Average]
[info]   (min, avg, max) = (111448,021, 111448,022, 111448,029), stdev = 0,004
[info]   CI (99.9%): [111448,009, 111448,036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1482,592 ±(99.9%) 1168,435 MB/sec [Average]
[info]   (min, avg, max) = (1344,707, 1482,592, 2025,392), stdev = 303,439
[info]   CI (99.9%): [314,157, 2651,028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   112486,319 ±(99.9%) 87545,073 B/op [Average]
[info]   (min, avg, max) = (101825,986, 112486,319, 153152,320), stdev = 22735,178
[info]   CI (99.9%): [24941,246, 200031,393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,150 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,042, 0,083), stdev = 0,039
[info]   CI (99.9%): [≈ 0, 0,192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3,157 ±(99.9%) 11,388 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3,157, 6,345), stdev = 2,958
[info]   CI (99.9%): [≈ 0, 14,546] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 6,43% complete, ETA 02:03:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24647,922 ops/s
[info] # Warmup Iteration   2: 33455,724 ops/s
[info] # Warmup Iteration   3: 30742,307 ops/s
[info] # Warmup Iteration   4: 33547,781 ops/s
[info] # Warmup Iteration   5: 33807,426 ops/s
[info] Iteration   1: 33771,453 ops/s
[info]                  ·gc.alloc.rate:                   906,876 MB/sec
[info]                  ·gc.alloc.rate.norm:              42248,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335,715 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62226,023 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,910 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 33872,167 ops/s
[info]                  ·gc.alloc.rate:               909,592 MB/sec
[info]                  ·gc.alloc.rate.norm:          42248,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667,694 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 31012,520 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 33845,101 ops/s
[info]                  ·gc.alloc.rate:               908,832 MB/sec
[info]                  ·gc.alloc.rate.norm:          42248,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668,354 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 31069,148 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 33815,211 ops/s
[info]                  ·gc.alloc.rate:                   908,026 MB/sec
[info]                  ·gc.alloc.rate.norm:              42248,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337,373 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62224,418 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,907 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 33958,557 ops/s
[info]                  ·gc.alloc.rate:               911,925 MB/sec
[info]                  ·gc.alloc.rate.norm:          42248,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669,025 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 30994,827 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala":
[info]   33852,498 ±(99.9%) 269,880 ops/s [Average]
[info]   (min, avg, max) = (33771,453, 33852,498, 33958,557), stdev = 70,087
[info]   CI (99.9%): [33582,618, 34122,378] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   909,050 ±(99.9%) 7,302 MB/sec [Average]
[info]   (min, avg, max) = (906,876, 909,050, 911,925), stdev = 1,896
[info]   CI (99.9%): [901,749, 916,352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   42248,013 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (42248,013, 42248,013, 42248,014), stdev = 0,001
[info]   CI (99.9%): [42248,011, 42248,015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   935,632 ±(99.9%) 1409,265 MB/sec [Average]
[info]   (min, avg, max) = (667,694, 935,632, 1337,373), stdev = 365,982
[info]   CI (99.9%): [≈ 0, 2344,897] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   43505,387 ±(99.9%) 65802,936 B/op [Average]
[info]   (min, avg, max) = (30994,827, 43505,387, 62226,023), stdev = 17088,814
[info]   CI (99.9%): [≈ 0, 109308,323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,034
[info]   CI (99.9%): [≈ 0, 0,157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1,163 ±(99.9%) 6,134 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,163, 2,910), stdev = 1,593
[info]   CI (99.9%): [≈ 0, 7,298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 6,63% complete, ETA 02:03:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 35277,395 ops/s
[info] # Warmup Iteration   2: 39024,296 ops/s
[info] # Warmup Iteration   3: 38821,187 ops/s
[info] # Warmup Iteration   4: 38465,213 ops/s
[info] # Warmup Iteration   5: 38933,150 ops/s
[info] Iteration   1: 38978,781 ops/s
[info]                  ·gc.alloc.rate:                   580,955 MB/sec
[info]                  ·gc.alloc.rate.norm:              23448,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,774 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20655,766 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,522 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 39123,250 ops/s
[info]                  ·gc.alloc.rate:                   583,086 MB/sec
[info]                  ·gc.alloc.rate.norm:              23448,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,369 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27078,611 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1,637 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 65,827 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 38964,155 ops/s
[info]                  ·gc.alloc.rate:                   580,737 MB/sec
[info]                  ·gc.alloc.rate.norm:              23448,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,375 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27188,393 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,363 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 38942,169 ops/s
[info]                  ·gc.alloc.rate:               580,406 MB/sec
[info]                  ·gc.alloc.rate.norm:          23448,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 27189,591 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 38874,300 ops/s
[info]                  ·gc.alloc.rate:                   579,405 MB/sec
[info]                  ·gc.alloc.rate.norm:              23448,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,018 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27236,441 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,685 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala":
[info]   38976,531 ±(99.9%) 351,426 ops/s [Average]
[info]   (min, avg, max) = (38874,300, 38976,531, 39123,250), stdev = 91,264
[info]   CI (99.9%): [38625,105, 39327,957] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   580,918 ±(99.9%) 5,197 MB/sec [Average]
[info]   (min, avg, max) = (579,405, 580,918, 583,086), stdev = 1,350
[info]   CI (99.9%): [575,721, 586,115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   23448,011 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (23448,011, 23448,011, 23448,012), stdev = 0,001
[info]   CI (99.9%): [23448,010, 23448,013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   640,911 ±(99.9%) 277,979 MB/sec [Average]
[info]   (min, avg, max) = (511,774, 640,911, 673,375), stdev = 72,190
[info]   CI (99.9%): [362,932, 918,890] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   25869,760 ±(99.9%) 11225,735 B/op [Average]
[info]   (min, avg, max) = (20655,766, 25869,760, 27236,441), stdev = 2915,288
[info]   CI (99.9%): [14644,025, 37095,496] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,365 ±(99.9%) 2,741 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,365, 1,637), stdev = 0,712
[info]   CI (99.9%): [≈ 0, 3,106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   14,679 ±(99.9%) 110,202 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 14,679, 65,827), stdev = 28,619
[info]   CI (99.9%): [≈ 0, 124,881] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 6,83% complete, ETA 02:02:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18006,339 ops/s
[info] # Warmup Iteration   2: 27887,384 ops/s
[info] # Warmup Iteration   3: 27758,132 ops/s
[info] # Warmup Iteration   4: 28243,902 ops/s
[info] # Warmup Iteration   5: 28065,094 ops/s
[info] Iteration   1: 28068,971 ops/s
[info]                  ·gc.alloc.rate:                   1453,367 MB/sec
[info]                  ·gc.alloc.rate.norm:              81456,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338,456 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     75015,669 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,334 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 28300,776 ops/s
[info]                  ·gc.alloc.rate:                   1465,257 MB/sec
[info]                  ·gc.alloc.rate.norm:              81456,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010,089 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     111744,136 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,473 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 28232,606 ops/s
[info]                  ·gc.alloc.rate:               1461,760 MB/sec
[info]                  ·gc.alloc.rate.norm:          81456,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342,747 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 74824,019 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 28232,424 ops/s
[info]                  ·gc.alloc.rate:                   1461,797 MB/sec
[info]                  ·gc.alloc.rate.norm:              81456,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,732 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74932,766 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,160 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 27995,850 ops/s
[info]                  ·gc.alloc.rate:                   1449,506 MB/sec
[info]                  ·gc.alloc.rate.norm:              81456,017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,662 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     75676,610 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,340 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson":
[info]   28166,126 ±(99.9%) 492,290 ops/s [Average]
[info]   (min, avg, max) = (27995,850, 28166,126, 28300,776), stdev = 127,846
[info]   CI (99.9%): [27673,836, 28658,415] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1458,337 ±(99.9%) 25,417 MB/sec [Average]
[info]   (min, avg, max) = (1449,506, 1458,337, 1465,257), stdev = 6,601
[info]   CI (99.9%): [1432,921, 1483,754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   81456,016 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (81456,015, 81456,016, 81456,017), stdev = 0,001
[info]   CI (99.9%): [81456,013, 81456,018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1476,537 ±(99.9%) 1148,571 MB/sec [Average]
[info]   (min, avg, max) = (1338,456, 1476,537, 2010,089), stdev = 298,280
[info]   CI (99.9%): [327,966, 2625,109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   82438,640 ±(99.9%) 63095,308 B/op [Average]
[info]   (min, avg, max) = (74824,019, 82438,640, 111744,136), stdev = 16385,651
[info]   CI (99.9%): [19343,332, 145533,947] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,062), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1,862 ±(99.9%) 5,096 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,862, 3,473), stdev = 1,323
[info]   CI (99.9%): [≈ 0, 6,958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 7,03% complete, ETA 02:02:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 21558,131 ops/s
[info] # Warmup Iteration   2: 31009,310 ops/s
[info] # Warmup Iteration   3: 31039,871 ops/s
[info] # Warmup Iteration   4: 30651,570 ops/s
[info] # Warmup Iteration   5: 30868,431 ops/s
[info] Iteration   1: 29370,875 ops/s
[info]                  ·gc.alloc.rate:                   2011,566 MB/sec
[info]                  ·gc.alloc.rate.norm:              107752,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018,771 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     108137,969 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,346 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 31059,896 ops/s
[info]                  ·gc.alloc.rate:                   2127,326 MB/sec
[info]                  ·gc.alloc.rate.norm:              107752,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022,201 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     102427,293 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,110 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 31153,735 ops/s
[info]                  ·gc.alloc.rate:                   2133,692 MB/sec
[info]                  ·gc.alloc.rate.norm:              107752,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2026,067 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     102316,923 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,206 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 31115,346 ops/s
[info]                  ·gc.alloc.rate:                   2131,053 MB/sec
[info]                  ·gc.alloc.rate.norm:              107752,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029,298 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     102607,018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,159 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 31141,495 ops/s
[info]                  ·gc.alloc.rate:                   2132,805 MB/sec
[info]                  ·gc.alloc.rate.norm:              107752,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2710,843 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     136955,216 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,104 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce":
[info]   30768,269 ±(99.9%) 3011,206 ops/s [Average]
[info]   (min, avg, max) = (29370,875, 30768,269, 31153,735), stdev = 782,001
[info]   CI (99.9%): [27757,064, 33779,475] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate":
[info]   2107,289 ±(99.9%) 206,264 MB/sec [Average]
[info]   (min, avg, max) = (2011,566, 2107,289, 2133,692), stdev = 53,566
[info]   CI (99.9%): [1901,025, 2313,552] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   107752,014 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (107752,014, 107752,014, 107752,015), stdev = 0,001
[info]   CI (99.9%): [107752,013, 107752,015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2161,436 ±(99.9%) 1182,738 MB/sec [Average]
[info]   (min, avg, max) = (2018,771, 2161,436, 2710,843), stdev = 307,153
[info]   CI (99.9%): [978,698, 3344,174] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   110488,884 ±(99.9%) 57756,050 B/op [Average]
[info]   (min, avg, max) = (102316,923, 110488,884, 136955,216), stdev = 14999,063
[info]   CI (99.9%): [52732,834, 168244,934] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,058 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,058, 0,083), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2,985 ±(99.9%) 3,441 B/op [Average]
[info]   (min, avg, max) = (2,104, 2,985, 4,206), stdev = 0,894
[info]   CI (99.9%): [≈ 0, 6,426] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.count":
[info]   16,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,200, 4,000), stdev = 0,447
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.time":
[info]   11,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 7,23% complete, ETA 02:02:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17512,211 ops/s
[info] # Warmup Iteration   2: 30782,182 ops/s
[info] # Warmup Iteration   3: 30642,583 ops/s
[info] # Warmup Iteration   4: 29710,091 ops/s
[info] # Warmup Iteration   5: 30952,187 ops/s
[info] Iteration   1: 30824,767 ops/s
[info]                  ·gc.alloc.rate:                   1808,219 MB/sec
[info]                  ·gc.alloc.rate.norm:              92288,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004,786 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     102320,421 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,063 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 30753,957 ops/s
[info]                  ·gc.alloc.rate:                   1804,026 MB/sec
[info]                  ·gc.alloc.rate.norm:              92288,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010,085 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     102829,308 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,326 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 30957,628 ops/s
[info]                  ·gc.alloc.rate:               1815,893 MB/sec
[info]                  ·gc.alloc.rate.norm:          92288,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342,650 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 68236,683 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 30730,234 ops/s
[info]                  ·gc.alloc.rate:                   1802,593 MB/sec
[info]                  ·gc.alloc.rate.norm:              92288,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018,587 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     103346,379 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,066 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 30737,219 ops/s
[info]                  ·gc.alloc.rate:               1803,027 MB/sec
[info]                  ·gc.alloc.rate.norm:          92288,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2023,410 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 103568,325 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala":
[info]   30800,761 ±(99.9%) 367,257 ops/s [Average]
[info]   (min, avg, max) = (30730,234, 30800,761, 30957,628), stdev = 95,375
[info]   CI (99.9%): [30433,504, 31168,018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1806,751 ±(99.9%) 21,466 MB/sec [Average]
[info]   (min, avg, max) = (1802,593, 1806,751, 1815,893), stdev = 5,575
[info]   CI (99.9%): [1785,285, 1828,218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   92288,014 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (92288,014, 92288,014, 92288,015), stdev = 0,001
[info]   CI (99.9%): [92288,012, 92288,017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1879,904 ±(99.9%) 1156,815 MB/sec [Average]
[info]   (min, avg, max) = (1342,650, 1879,904, 2023,410), stdev = 300,421
[info]   CI (99.9%): [723,088, 3036,719] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   96060,223 ±(99.9%) 59921,131 B/op [Average]
[info]   (min, avg, max) = (68236,683, 96060,223, 103568,325), stdev = 15561,327
[info]   CI (99.9%): [36139,092, 155981,354] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,166 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,104), stdev = 0,043
[info]   CI (99.9%): [≈ 0, 0,195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1,491 ±(99.9%) 8,506 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,491, 5,326), stdev = 2,209
[info]   CI (99.9%): [≈ 0, 9,997] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.time":
[info]   12,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 2,400, 3,000), stdev = 0,894
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 7,43% complete, ETA 02:02:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 28698,561 ops/s
[info] # Warmup Iteration   2: 33650,225 ops/s
[info] # Warmup Iteration   3: 34465,626 ops/s
[info] # Warmup Iteration   4: 33365,418 ops/s
[info] # Warmup Iteration   5: 34400,408 ops/s
[info] Iteration   1: 34505,858 ops/s
[info]                  ·gc.alloc.rate:                   1915,430 MB/sec
[info]                  ·gc.alloc.rate.norm:              87328,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,112 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61462,905 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,949 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 34619,021 ops/s
[info]                  ·gc.alloc.rate:                   1921,523 MB/sec
[info]                  ·gc.alloc.rate.norm:              87328,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2024,371 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     92002,134 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,839 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 34527,025 ops/s
[info]                  ·gc.alloc.rate:                   1916,469 MB/sec
[info]                  ·gc.alloc.rate.norm:              87328,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2027,697 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     92396,385 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,847 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 34483,580 ops/s
[info]                  ·gc.alloc.rate:                   1914,160 MB/sec
[info]                  ·gc.alloc.rate.norm:              87328,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2030,386 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     92630,496 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,950 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 34264,273 ops/s
[info]                  ·gc.alloc.rate:                   1901,884 MB/sec
[info]                  ·gc.alloc.rate.norm:              87328,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2033,706 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     93380,816 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,868 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala":
[info]   34479,951 ±(99.9%) 504,851 ops/s [Average]
[info]   (min, avg, max) = (34264,273, 34479,951, 34619,021), stdev = 131,108
[info]   CI (99.9%): [33975,100, 34984,803] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1913,893 ±(99.9%) 28,000 MB/sec [Average]
[info]   (min, avg, max) = (1901,884, 1913,893, 1921,523), stdev = 7,272
[info]   CI (99.9%): [1885,893, 1941,893] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   87328,013 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (87328,012, 87328,013, 87328,013), stdev = 0,001
[info]   CI (99.9%): [87328,011, 87328,014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1892,854 ±(99.9%) 1172,674 MB/sec [Average]
[info]   (min, avg, max) = (1348,112, 1892,854, 2033,706), stdev = 304,540
[info]   CI (99.9%): [720,180, 3065,528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   86374,547 ±(99.9%) 53659,068 B/op [Average]
[info]   (min, avg, max) = (61462,905, 86374,547, 93380,816), stdev = 13935,089
[info]   CI (99.9%): [32715,480, 140033,615] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,046 ±(99.9%) 0,088 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,046, 0,062), stdev = 0,023
[info]   CI (99.9%): [≈ 0, 0,134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2,091 ±(99.9%) 4,011 B/op [Average]
[info]   (min, avg, max) = (0,949, 2,091, 2,868), stdev = 1,042
[info]   CI (99.9%): [≈ 0, 6,102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.time":
[info]   9,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 7,63% complete, ETA 02:01:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 29391,400 ops/s
[info] # Warmup Iteration   2: 34646,927 ops/s
[info] # Warmup Iteration   3: 34847,860 ops/s
[info] # Warmup Iteration   4: 34752,596 ops/s
[info] # Warmup Iteration   5: 34304,304 ops/s
[info] Iteration   1: 34526,819 ops/s
[info]                  ·gc.alloc.rate:                   1849,504 MB/sec
[info]                  ·gc.alloc.rate.norm:              84272,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2021,753 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     92120,445 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,795 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 34786,906 ops/s
[info]                  ·gc.alloc.rate:                   1863,345 MB/sec
[info]                  ·gc.alloc.rate.norm:              84272,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2024,385 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     91555,265 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,884 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 34721,637 ops/s
[info]                  ·gc.alloc.rate:                   1859,825 MB/sec
[info]                  ·gc.alloc.rate.norm:              84272,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2027,675 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     91877,588 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,887 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 34739,712 ops/s
[info]                  ·gc.alloc.rate:               1860,827 MB/sec
[info]                  ·gc.alloc.rate.norm:          84272,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1353,365 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 61290,409 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 34472,743 ops/s
[info]                  ·gc.alloc.rate:                   1846,532 MB/sec
[info]                  ·gc.alloc.rate.norm:              84272,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2032,268 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     92748,588 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,851 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc":
[info]   34649,563 ±(99.9%) 539,490 ops/s [Average]
[info]   (min, avg, max) = (34472,743, 34649,563, 34786,906), stdev = 140,104
[info]   CI (99.9%): [34110,074, 35189,053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1856,007 ±(99.9%) 28,796 MB/sec [Average]
[info]   (min, avg, max) = (1846,532, 1856,007, 1863,345), stdev = 7,478
[info]   CI (99.9%): [1827,210, 1884,803] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   84272,012 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (84272,012, 84272,012, 84272,013), stdev = 0,001
[info]   CI (99.9%): [84272,012, 84272,013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   1891,889 ±(99.9%) 1159,311 MB/sec [Average]
[info]   (min, avg, max) = (1353,365, 1891,889, 2032,268), stdev = 301,070
[info]   CI (99.9%): [732,578, 3051,201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   85918,459 ±(99.9%) 53040,468 B/op [Average]
[info]   (min, avg, max) = (61290,409, 85918,459, 92748,588), stdev = 13774,441
[info]   CI (99.9%): [32877,991, 138958,928] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0,046 ±(99.9%) 0,119 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,046, 0,083), stdev = 0,031
[info]   CI (99.9%): [≈ 0, 0,165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   2,083 ±(99.9%) 5,425 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,083, 3,795), stdev = 1,409
[info]   CI (99.9%): [≈ 0, 7,508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 7,83% complete, ETA 02:01:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6771,756 ops/s
[info] # Warmup Iteration   2: 9066,534 ops/s
[info] # Warmup Iteration   3: 9396,128 ops/s
[info] # Warmup Iteration   4: 9401,492 ops/s
[info] # Warmup Iteration   5: 9376,847 ops/s
[info] Iteration   1: 9103,803 ops/s
[info]                  ·gc.alloc.rate:                   1287,704 MB/sec
[info]                  ·gc.alloc.rate.norm:              222544,047 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339,271 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     231455,937 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7,197 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 9414,115 ops/s
[info]                  ·gc.alloc.rate:                   1331,701 MB/sec
[info]                  ·gc.alloc.rate.norm:              222544,046 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,621 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     224034,715 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10,439 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 9385,966 ops/s
[info]                  ·gc.alloc.rate:                   1327,674 MB/sec
[info]                  ·gc.alloc.rate.norm:              222544,049 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341,885 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     224926,197 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6,980 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 9398,307 ops/s
[info]                  ·gc.alloc.rate:                   1329,465 MB/sec
[info]                  ·gc.alloc.rate.norm:              222544,049 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,980 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     224973,704 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,486 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 9413,494 ops/s
[info]                  ·gc.alloc.rate:                   1331,589 MB/sec
[info]                  ·gc.alloc.rate.norm:              222544,046 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,315 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     224838,036 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6,960 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson":
[info]   9343,137 ±(99.9%) 517,145 ops/s [Average]
[info]   (min, avg, max) = (9103,803, 9343,137, 9414,115), stdev = 134,301
[info]   CI (99.9%): [8825,992, 9860,282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1321,627 ±(99.9%) 73,301 MB/sec [Average]
[info]   (min, avg, max) = (1287,704, 1321,627, 1331,701), stdev = 19,036
[info]   CI (99.9%): [1248,326, 1394,928] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   222544,048 ±(99.9%) 0,007 B/op [Average]
[info]   (min, avg, max) = (222544,046, 222544,048, 222544,049), stdev = 0,002
[info]   CI (99.9%): [222544,041, 222544,054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1342,215 ±(99.9%) 9,440 MB/sec [Average]
[info]   (min, avg, max) = (1339,271, 1342,215, 1345,315), stdev = 2,451
[info]   CI (99.9%): [1332,775, 1351,654] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   226045,718 ±(99.9%) 11739,040 B/op [Average]
[info]   (min, avg, max) = (224034,715, 226045,718, 231455,937), stdev = 3048,591
[info]   CI (99.9%): [214306,678, 237784,758] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,057 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,042, 0,062), stdev = 0,015
[info]   CI (99.9%): [≈ 0, 0,098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   7,012 ±(99.9%) 9,475 B/op [Average]
[info]   (min, avg, max) = (3,486, 7,012, 10,439), stdev = 2,461
[info]   CI (99.9%): [≈ 0, 16,487] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 8,03% complete, ETA 02:01:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15807,565 ops/s
[info] # Warmup Iteration   2: 19868,631 ops/s
[info] # Warmup Iteration   3: 19918,819 ops/s
[info] # Warmup Iteration   4: 19891,013 ops/s
[info] # Warmup Iteration   5: 19979,939 ops/s
[info] Iteration   1: 19694,860 ops/s
[info]                  ·gc.alloc.rate:                   1699,384 MB/sec
[info]                  ·gc.alloc.rate.norm:              135760,032 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019,247 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     161313,243 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,990 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 19896,109 ops/s
[info]                  ·gc.alloc.rate:                   1716,910 MB/sec
[info]                  ·gc.alloc.rate.norm:              135760,022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,088 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     106596,445 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,647 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 19882,096 ops/s
[info]                  ·gc.alloc.rate:                   1715,647 MB/sec
[info]                  ·gc.alloc.rate.norm:              135760,022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2024,835 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     160226,210 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,944 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 19984,000 ops/s
[info]                  ·gc.alloc.rate:               1724,438 MB/sec
[info]                  ·gc.alloc.rate.norm:          135760,023 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1351,370 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 106389,440 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 19960,495 ops/s
[info]                  ·gc.alloc.rate:                   1722,298 MB/sec
[info]                  ·gc.alloc.rate.norm:              135760,022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029,305 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     159959,838 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,924 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce":
[info]   19883,512 ±(99.9%) 438,088 ops/s [Average]
[info]   (min, avg, max) = (19694,860, 19883,512, 19984,000), stdev = 113,770
[info]   CI (99.9%): [19445,424, 20321,600] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   1715,735 ±(99.9%) 37,904 MB/sec [Average]
[info]   (min, avg, max) = (1699,384, 1715,735, 1724,438), stdev = 9,843
[info]   CI (99.9%): [1677,832, 1753,639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   135760,024 ±(99.9%) 0,017 B/op [Average]
[info]   (min, avg, max) = (135760,022, 135760,024, 135760,032), stdev = 0,004
[info]   CI (99.9%): [135760,007, 135760,041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1754,569 ±(99.9%) 1423,143 MB/sec [Average]
[info]   (min, avg, max) = (1348,088, 1754,569, 2029,305), stdev = 369,586
[info]   CI (99.9%): [331,426, 3177,712] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   138897,035 ±(99.9%) 113922,028 B/op [Average]
[info]   (min, avg, max) = (106389,440, 138897,035, 161313,243), stdev = 29585,189
[info]   CI (99.9%): [24975,007, 252819,063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,042, 0,062), stdev = 0,029
[info]   CI (99.9%): [≈ 0, 0,155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3,301 ±(99.9%) 8,994 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3,301, 4,990), stdev = 2,336
[info]   CI (99.9%): [≈ 0, 12,294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 8,23% complete, ETA 02:01:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 34447,383 ops/s
[info] # Warmup Iteration   2: 42724,520 ops/s
[info] # Warmup Iteration   3: 46025,356 ops/s
[info] # Warmup Iteration   4: 46423,873 ops/s
[info] # Warmup Iteration   5: 45120,439 ops/s
[info] Iteration   1: 46406,495 ops/s
[info]                  ·gc.alloc.rate:                   1281,635 MB/sec
[info]                  ·gc.alloc.rate.norm:              43448,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336,860 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     45320,136 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,118 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 45275,072 ops/s
[info]                  ·gc.alloc.rate:                   1250,381 MB/sec
[info]                  ·gc.alloc.rate.norm:              43448,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338,197 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     46499,428 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,342 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 46458,869 ops/s
[info]                  ·gc.alloc.rate:                   1283,081 MB/sec
[info]                  ·gc.alloc.rate.norm:              43448,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,173 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     45381,275 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,410 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 46475,336 ops/s
[info]                  ·gc.alloc.rate:                   1283,540 MB/sec
[info]                  ·gc.alloc.rate.norm:              43448,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341,495 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     45409,795 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,410 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 46490,262 ops/s
[info]                  ·gc.alloc.rate:                   1283,913 MB/sec
[info]                  ·gc.alloc.rate.norm:              43448,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,073 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22743,164 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,705 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala":
[info]   46221,207 ±(99.9%) 2040,259 ops/s [Average]
[info]   (min, avg, max) = (45275,072, 46221,207, 46490,262), stdev = 529,849
[info]   CI (99.9%): [44180,948, 48261,466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1276,510 ±(99.9%) 56,343 MB/sec [Average]
[info]   (min, avg, max) = (1250,381, 1276,510, 1283,913), stdev = 14,632
[info]   CI (99.9%): [1220,167, 1332,853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   43448,009 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (43448,009, 43448,009, 43448,010), stdev = 0,001
[info]   CI (99.9%): [43448,008, 43448,011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1205,759 ±(99.9%) 1148,821 MB/sec [Average]
[info]   (min, avg, max) = (672,073, 1205,759, 1341,495), stdev = 298,345
[info]   CI (99.9%): [56,939, 2354,580] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   41070,760 ±(99.9%) 39496,617 B/op [Average]
[info]   (min, avg, max) = (22743,164, 41070,760, 46499,428), stdev = 10257,146
[info]   CI (99.9%): [1574,143, 80567,376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,058 ±(99.9%) 0,154 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,058, 0,125), stdev = 0,040
[info]   CI (99.9%): [≈ 0, 0,213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1,997 ±(99.9%) 5,402 B/op [Average]
[info]   (min, avg, max) = (0,705, 1,997, 4,342), stdev = 1,403
[info]   CI (99.9%): [≈ 0, 7,399] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 2,000), stdev = 0,837
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 8,43% complete, ETA 02:00:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 62854,144 ops/s
[info] # Warmup Iteration   2: 67446,957 ops/s
[info] # Warmup Iteration   3: 67836,681 ops/s
[info] # Warmup Iteration   4: 68007,992 ops/s
[info] # Warmup Iteration   5: 67837,098 ops/s
[info] Iteration   1: 67916,930 ops/s
[info]                  ·gc.alloc.rate:                   877,870 MB/sec
[info]                  ·gc.alloc.rate.norm:              20336,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,420 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31190,069 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,930 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 68087,894 ops/s
[info]                  ·gc.alloc.rate:               880,135 MB/sec
[info]                  ·gc.alloc.rate.norm:          20336,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,096 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15552,253 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 67913,121 ops/s
[info]                  ·gc.alloc.rate:                   877,862 MB/sec
[info]                  ·gc.alloc.rate.norm:              20336,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,097 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15592,553 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,482 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 62492,188 ops/s
[info]                  ·gc.alloc.rate:                   807,810 MB/sec
[info]                  ·gc.alloc.rate.norm:              20336,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,506 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33897,280 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,049 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 67814,994 ops/s
[info]                  ·gc.alloc.rate:               876,582 MB/sec
[info]                  ·gc.alloc.rate.norm:          20336,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,410 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15622,583 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala":
[info]   66845,025 ±(99.9%) 9377,437 ops/s [Average]
[info]   (min, avg, max) = (62492,188, 66845,025, 68087,894), stdev = 2435,291
[info]   CI (99.9%): [57467,589, 76222,462] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   864,052 ±(99.9%) 121,165 MB/sec [Average]
[info]   (min, avg, max) = (807,810, 864,052, 880,135), stdev = 31,466
[info]   CI (99.9%): [742,887, 985,217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   20336,007 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (20336,006, 20336,007, 20336,007), stdev = 0,001
[info]   CI (99.9%): [20336,006, 20336,008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   942,506 ±(99.9%) 1419,967 MB/sec [Average]
[info]   (min, avg, max) = (673,096, 942,506, 1346,506), stdev = 368,761
[info]   CI (99.9%): [≈ 0, 2362,473] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   22370,947 ±(99.9%) 35948,133 B/op [Average]
[info]   (min, avg, max) = (15552,253, 22370,947, 33897,280), stdev = 9335,616
[info]   CI (99.9%): [≈ 0, 58319,081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,134 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,083), stdev = 0,035
[info]   CI (99.9%): [≈ 0, 0,163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,692 ±(99.9%) 3,140 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,692, 1,930), stdev = 0,816
[info]   CI (99.9%): [≈ 0, 3,832] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 8,63% complete, ETA 02:00:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19863,383 ops/s
[info] # Warmup Iteration   2: 35094,700 ops/s
[info] # Warmup Iteration   3: 35296,052 ops/s
[info] # Warmup Iteration   4: 35127,699 ops/s
[info] # Warmup Iteration   5: 35471,364 ops/s
[info] Iteration   1: 35622,808 ops/s
[info]                  ·gc.alloc.rate:                   2417,243 MB/sec
[info]                  ·gc.alloc.rate.norm:              106760,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2684,017 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     118542,356 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,759 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 35621,940 ops/s
[info]                  ·gc.alloc.rate:                   2417,276 MB/sec
[info]                  ·gc.alloc.rate.norm:              106760,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2693,124 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     118942,993 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,679 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 35617,716 ops/s
[info]                  ·gc.alloc.rate:                   2416,983 MB/sec
[info]                  ·gc.alloc.rate.norm:              106760,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2025,130 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     89451,563 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,840 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 35514,627 ops/s
[info]                  ·gc.alloc.rate:                   2409,824 MB/sec
[info]                  ·gc.alloc.rate.norm:              106760,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2705,979 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     119880,272 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,690 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 35591,516 ops/s
[info]                  ·gc.alloc.rate:                   2415,313 MB/sec
[info]                  ·gc.alloc.rate.norm:              106760,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2033,701 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     89892,249 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,761 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson":
[info]   35593,721 ±(99.9%) 177,285 ops/s [Average]
[info]   (min, avg, max) = (35514,627, 35593,721, 35622,808), stdev = 46,040
[info]   CI (99.9%): [35416,436, 35771,006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2415,328 ±(99.9%) 12,251 MB/sec [Average]
[info]   (min, avg, max) = (2409,824, 2415,328, 2417,276), stdev = 3,182
[info]   CI (99.9%): [2403,076, 2427,579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   106760,012 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (106760,012, 106760,012, 106760,013), stdev = 0,001
[info]   CI (99.9%): [106760,011, 106760,014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2428,390 ±(99.9%) 1402,822 MB/sec [Average]
[info]   (min, avg, max) = (2025,130, 2428,390, 2705,979), stdev = 364,309
[info]   CI (99.9%): [1025,568, 3831,213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   107341,886 ±(99.9%) 62143,501 B/op [Average]
[info]   (min, avg, max) = (89451,563, 107341,886, 119880,272), stdev = 16138,470
[info]   CI (99.9%): [45198,386, 169485,387] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,067 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,067, 0,083), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2,946 ±(99.9%) 2,972 B/op [Average]
[info]   (min, avg, max) = (1,840, 2,946, 3,690), stdev = 0,772
[info]   CI (99.9%): [≈ 0, 5,918] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.count":
[info]   18,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,600, 4,000), stdev = 0,548
[info]   CI (99.9%): [18,000, 18,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.time":
[info]   14,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 8,84% complete, ETA 02:00:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19753,171 ops/s
[info] # Warmup Iteration   2: 29925,194 ops/s
[info] # Warmup Iteration   3: 30074,491 ops/s
[info] # Warmup Iteration   4: 30088,543 ops/s
[info] # Warmup Iteration   5: 30083,446 ops/s
[info] Iteration   1: 30146,144 ops/s
[info]                  ·gc.alloc.rate:                   1875,448 MB/sec
[info]                  ·gc.alloc.rate.norm:              97880,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007,944 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     104795,005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,173 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 30191,728 ops/s
[info]                  ·gc.alloc.rate:                   1878,404 MB/sec
[info]                  ·gc.alloc.rate.norm:              97880,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012,710 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     104878,433 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,425 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 30029,607 ops/s
[info]                  ·gc.alloc.rate:                   1868,550 MB/sec
[info]                  ·gc.alloc.rate.norm:              97880,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018,276 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     105723,067 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,272 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 30038,637 ops/s
[info]                  ·gc.alloc.rate:                   1868,804 MB/sec
[info]                  ·gc.alloc.rate.norm:              97880,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,011 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70603,070 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,091 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 29992,368 ops/s
[info]                  ·gc.alloc.rate:                   1865,868 MB/sec
[info]                  ·gc.alloc.rate.norm:              97880,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2025,199 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     106238,225 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,277 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala":
[info]   30079,697 ±(99.9%) 326,667 ops/s [Average]
[info]   (min, avg, max) = (29992,368, 30079,697, 30191,728), stdev = 84,834
[info]   CI (99.9%): [29753,030, 30406,364] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1871,415 ±(99.9%) 20,276 MB/sec [Average]
[info]   (min, avg, max) = (1865,868, 1871,415, 1878,404), stdev = 5,266
[info]   CI (99.9%): [1851,139, 1891,691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   97880,015 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (97880,014, 97880,015, 97880,015), stdev = 0,001
[info]   CI (99.9%): [97880,013, 97880,016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1882,428 ±(99.9%) 1150,640 MB/sec [Average]
[info]   (min, avg, max) = (1348,011, 1882,428, 2025,199), stdev = 298,818
[info]   CI (99.9%): [731,788, 3033,068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   98447,560 ±(99.9%) 59982,022 B/op [Average]
[info]   (min, avg, max) = (70603,070, 98447,560, 106238,225), stdev = 15577,141
[info]   CI (99.9%): [38465,538, 158429,582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,058 ±(99.9%) 0,119 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,058, 0,104), stdev = 0,031
[info]   CI (99.9%): [≈ 0, 0,177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3,048 ±(99.9%) 6,194 B/op [Average]
[info]   (min, avg, max) = (1,091, 3,048, 5,425), stdev = 1,609
[info]   CI (99.9%): [≈ 0, 9,242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.time":
[info]   11,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 9,04% complete, ETA 02:00:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 38708,075 ops/s
[info] # Warmup Iteration   2: 42164,464 ops/s
[info] # Warmup Iteration   3: 42209,821 ops/s
[info] # Warmup Iteration   4: 42071,867 ops/s
[info] # Warmup Iteration   5: 42189,407 ops/s
[info] Iteration   1: 41987,580 ops/s
[info]                  ·gc.alloc.rate:               1798,988 MB/sec
[info]                  ·gc.alloc.rate.norm:          67408,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2021,735 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 75754,348 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 42196,873 ops/s
[info]                  ·gc.alloc.rate:                   1807,902 MB/sec
[info]                  ·gc.alloc.rate.norm:              67408,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2025,072 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     75505,224 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,106 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 42209,147 ops/s
[info]                  ·gc.alloc.rate:                   1808,465 MB/sec
[info]                  ·gc.alloc.rate.norm:              67408,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1351,385 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50370,991 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,105 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 42169,638 ops/s
[info]                  ·gc.alloc.rate:                   1806,773 MB/sec
[info]                  ·gc.alloc.rate.norm:              67408,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029,671 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     75723,998 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,777 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 42236,264 ops/s
[info]                  ·gc.alloc.rate:                   1809,662 MB/sec
[info]                  ·gc.alloc.rate.norm:              67408,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2032,213 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     75697,811 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,776 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala":
[info]   42159,901 ±(99.9%) 382,228 ops/s [Average]
[info]   (min, avg, max) = (41987,580, 42159,901, 42236,264), stdev = 99,263
[info]   CI (99.9%): [41777,673, 42542,128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1806,358 ±(99.9%) 16,364 MB/sec [Average]
[info]   (min, avg, max) = (1798,988, 1806,358, 1809,662), stdev = 4,250
[info]   CI (99.9%): [1789,994, 1822,722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   67408,011 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (67408,010, 67408,011, 67408,011), stdev = 0,001
[info]   CI (99.9%): [67408,009, 67408,012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1892,015 ±(99.9%) 1163,852 MB/sec [Average]
[info]   (min, avg, max) = (1351,385, 1892,015, 2032,213), stdev = 302,249
[info]   CI (99.9%): [728,164, 3055,867] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   70610,474 ±(99.9%) 43568,628 B/op [Average]
[info]   (min, avg, max) = (50370,991, 70610,474, 75754,348), stdev = 11314,634
[info]   CI (99.9%): [27041,846, 114179,102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,150 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,042, 0,083), stdev = 0,039
[info]   CI (99.9%): [≈ 0, 0,192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1,553 ±(99.9%) 5,592 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,553, 3,106), stdev = 1,452
[info]   CI (99.9%): [≈ 0, 7,145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 9,24% complete, ETA 01:59:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 38004,013 ops/s
[info] # Warmup Iteration   2: 42038,534 ops/s
[info] # Warmup Iteration   3: 41971,645 ops/s
[info] # Warmup Iteration   4: 42226,525 ops/s
[info] # Warmup Iteration   5: 42137,222 ops/s
[info] Iteration   1: 41908,541 ops/s
[info]                  ·gc.alloc.rate:               1722,452 MB/sec
[info]                  ·gc.alloc.rate.norm:          64664,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1347,398 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 50583,817 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 42309,292 ops/s
[info]                  ·gc.alloc.rate:                   1739,008 MB/sec
[info]                  ·gc.alloc.rate.norm:              64664,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2023,758 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     75252,264 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,097 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 42221,670 ops/s
[info]                  ·gc.alloc.rate:                   1735,405 MB/sec
[info]                  ·gc.alloc.rate.norm:              64664,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1351,070 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50343,070 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,776 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 41867,383 ops/s
[info]                  ·gc.alloc.rate:                   1720,763 MB/sec
[info]                  ·gc.alloc.rate.norm:              64664,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2028,707 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76236,170 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,565 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 42185,753 ops/s
[info]                  ·gc.alloc.rate:               1734,217 MB/sec
[info]                  ·gc.alloc.rate.norm:          64664,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2030,812 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 75723,176 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   42098,528 ±(99.9%) 762,187 ops/s [Average]
[info]   (min, avg, max) = (41867,383, 42098,528, 42309,292), stdev = 197,937
[info]   CI (99.9%): [41336,341, 42860,714] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1730,369 ±(99.9%) 31,623 MB/sec [Average]
[info]   (min, avg, max) = (1720,763, 1730,369, 1739,008), stdev = 8,212
[info]   CI (99.9%): [1698,746, 1761,992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   64664,010 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (64664,010, 64664,010, 64664,011), stdev = 0,001
[info]   CI (99.9%): [64664,009, 64664,012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   1756,349 ±(99.9%) 1431,109 MB/sec [Average]
[info]   (min, avg, max) = (1347,398, 1756,349, 2030,812), stdev = 371,655
[info]   CI (99.9%): [325,240, 3187,459] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   65627,699 ±(99.9%) 53322,342 B/op [Average]
[info]   (min, avg, max) = (50343,070, 65627,699, 76236,170), stdev = 13847,643
[info]   CI (99.9%): [12305,357, 118950,042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,134 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,083), stdev = 0,035
[info]   CI (99.9%): [≈ 0, 0,163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   1,088 ±(99.9%) 4,995 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,088, 3,097), stdev = 1,297
[info]   CI (99.9%): [≈ 0, 6,082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 9,44% complete, ETA 01:59:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 309149,995 ops/s
[info] # Warmup Iteration   2: 360910,792 ops/s
[info] # Warmup Iteration   3: 347859,463 ops/s
[info] # Warmup Iteration   4: 363072,817 ops/s
[info] # Warmup Iteration   5: 362573,993 ops/s
[info] Iteration   1: 365746,205 ops/s
[info]                  ·gc.alloc.rate:                   2023,470 MB/sec
[info]                  ·gc.alloc.rate.norm:              8704,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2021,426 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8695,209 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,090 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 368432,950 ops/s
[info]                  ·gc.alloc.rate:                   2038,329 MB/sec
[info]                  ·gc.alloc.rate.norm:              8704,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2025,781 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8650,420 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,267 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 367652,306 ops/s
[info]                  ·gc.alloc.rate:                   2033,949 MB/sec
[info]                  ·gc.alloc.rate.norm:              8704,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2028,365 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8680,104 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,178 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 366664,901 ops/s
[info]                  ·gc.alloc.rate:                   2028,508 MB/sec
[info]                  ·gc.alloc.rate.norm:              8704,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2031,699 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8717,690 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,089 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 367445,444 ops/s
[info]                  ·gc.alloc.rate:                   2032,815 MB/sec
[info]                  ·gc.alloc.rate.norm:              8704,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2033,707 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8707,819 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,178 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce":
[info]   367188,361 ±(99.9%) 3938,289 ops/s [Average]
[info]   (min, avg, max) = (365746,205, 367188,361, 368432,950), stdev = 1022,761
[info]   CI (99.9%): [363250,072, 371126,651] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   2031,414 ±(99.9%) 21,762 MB/sec [Average]
[info]   (min, avg, max) = (2023,470, 2031,414, 2038,329), stdev = 5,652
[info]   CI (99.9%): [2009,652, 2053,177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   8704,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (8704,001, 8704,001, 8704,001), stdev = 0,001
[info]   CI (99.9%): [8704,001, 8704,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2028,196 ±(99.9%) 18,699 MB/sec [Average]
[info]   (min, avg, max) = (2021,426, 2028,196, 2033,707), stdev = 4,856
[info]   CI (99.9%): [2009,497, 2046,894] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   8690,248 ±(99.9%) 101,433 B/op [Average]
[info]   (min, avg, max) = (8650,420, 8690,248, 8717,690), stdev = 26,342
[info]   CI (99.9%): [8588,815, 8791,682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,037, 0,062), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,160 ±(99.9%) 0,286 B/op [Average]
[info]   (min, avg, max) = (0,089, 0,160, 0,267), stdev = 0,074
[info]   CI (99.9%): [≈ 0, 0,446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.count":
[info]   15,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,000, 3,000), stdev = 0,001
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.time":
[info]   9,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 9,64% complete, ETA 01:59:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 253794,344 ops/s
[info] # Warmup Iteration   2: 1562228,327 ops/s
[info] # Warmup Iteration   3: 1569816,782 ops/s
[info] # Warmup Iteration   4: 1568437,993 ops/s
[info] # Warmup Iteration   5: 1375079,726 ops/s
[info] Iteration   1: 1565451,962 ops/s
[info]                  ·gc.alloc.rate:                   493,529 MB/sec
[info]                  ·gc.alloc.rate.norm:              496,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,765 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     514,328 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,009 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,009 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 1573585,050 ops/s
[info]                  ·gc.alloc.rate:      496,098 MB/sec
[info]                  ·gc.alloc.rate.norm: 496,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1565936,980 ops/s
[info]                  ·gc.alloc.rate:               493,688 MB/sec
[info]                  ·gc.alloc.rate.norm:          496,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664,033 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 667,143 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   4: 1567423,344 ops/s
[info]                  ·gc.alloc.rate:                   494,154 MB/sec
[info]                  ·gc.alloc.rate.norm:              496,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664,046 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     666,527 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,008 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 1573226,289 ops/s
[info]                  ·gc.alloc.rate:                   495,984 MB/sec
[info]                  ·gc.alloc.rate.norm:              496,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665,380 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     665,401 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,020 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,020 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava":
[info]   1569124,725 ±(99.9%) 15313,626 ops/s [Average]
[info]   (min, avg, max) = (1565451,962, 1569124,725, 1573585,050), stdev = 3976,900
[info]   CI (99.9%): [1553811,099, 1584438,350] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   494,691 ±(99.9%) 4,832 MB/sec [Average]
[info]   (min, avg, max) = (493,529, 494,691, 496,098), stdev = 1,255
[info]   CI (99.9%): [489,859, 499,523] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   496,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (496,000, 496,000, 496,000), stdev = 0,001
[info]   CI (99.9%): [496,000, 496,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   501,045 ±(99.9%) 1108,192 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 501,045, 665,380), stdev = 287,794
[info]   CI (99.9%): [≈ 0, 1609,237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   502,680 ±(99.9%) 1111,354 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 502,680, 667,143), stdev = 288,615
[info]   CI (99.9%): [≈ 0, 1614,034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,007 ±(99.9%) 0,031 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,007, 0,020), stdev = 0,008
[info]   CI (99.9%): [≈ 0, 0,039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0,007 ±(99.9%) 0,031 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,007, 0,020), stdev = 0,008
[info]   CI (99.9%): [≈ 0, 0,039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,400, 2,000), stdev = 0,894
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 9,84% complete, ETA 01:59:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 560663,757 ops/s
[info] # Warmup Iteration   2: 782244,604 ops/s
[info] # Warmup Iteration   3: 773326,326 ops/s
[info] # Warmup Iteration   4: 770089,617 ops/s
[info] # Warmup Iteration   5: 775936,907 ops/s
[info] Iteration   1: 781620,945 ops/s
[info]                  ·gc.alloc.rate:                   647,833 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668,011 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1344,617 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,157 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,343 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 784536,223 ops/s
[info]                  ·gc.alloc.rate:                   650,231 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668,031 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1339,697 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,084 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 782221,429 ops/s
[info]                  ·gc.alloc.rate:                   648,310 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668,365 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1344,340 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,042 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 782183,549 ops/s
[info]                  ·gc.alloc.rate:      648,324 MB/sec
[info]                  ·gc.alloc.rate.norm: 1304,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 779484,919 ops/s
[info]                  ·gc.alloc.rate:                   646,058 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668,376 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1349,046 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,042 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala":
[info]   782009,413 ±(99.9%) 6937,580 ops/s [Average]
[info]   (min, avg, max) = (779484,919, 782009,413, 784536,223), stdev = 1801,667
[info]   CI (99.9%): [775071,833, 788946,993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   648,151 ±(99.9%) 5,732 MB/sec [Average]
[info]   (min, avg, max) = (646,058, 648,151, 650,231), stdev = 1,489
[info]   CI (99.9%): [642,419, 653,883] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1304,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1304,001, 1304,001, 1304,001), stdev = 0,001
[info]   CI (99.9%): [1304,000, 1304,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   534,557 ±(99.9%) 1150,674 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 534,557, 668,376), stdev = 298,826
[info]   CI (99.9%): [≈ 0, 1685,231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1075,540 ±(99.9%) 2315,216 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1075,540, 1349,046), stdev = 601,254
[info]   CI (99.9%): [≈ 0, 3390,756] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,448 ±(99.9%) 3,680 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,448, 2,157), stdev = 0,956
[info]   CI (99.9%): [≈ 0, 4,128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,902 ±(99.9%) 7,407 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,902, 4,343), stdev = 1,924
[info]   CI (99.9%): [≈ 0, 8,309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 10,04% complete, ETA 01:58:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1846406,534 ops/s
[info] # Warmup Iteration   2: 1908300,643 ops/s
[info] # Warmup Iteration   3: 1926702,500 ops/s
[info] # Warmup Iteration   4: 1934718,113 ops/s
[info] # Warmup Iteration   5: 1917832,301 ops/s
[info] Iteration   1: 1897632,560 ops/s
[info]                  ·gc.alloc.rate:               366,670 MB/sec
[info]                  ·gc.alloc.rate.norm:          304,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,761 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 424,293 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 1907284,278 ops/s
[info]                  ·gc.alloc.rate:                   368,533 MB/sec
[info]                  ·gc.alloc.rate.norm:              304,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,755 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     422,143 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,026 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 1915969,408 ops/s
[info]                  ·gc.alloc.rate:      370,201 MB/sec
[info]                  ·gc.alloc.rate.norm: 304,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1925343,364 ops/s
[info]                  ·gc.alloc.rate:               372,024 MB/sec
[info]                  ·gc.alloc.rate.norm:          304,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,759 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 418,185 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   5: 1912264,713 ops/s
[info]                  ·gc.alloc.rate:                   369,501 MB/sec
[info]                  ·gc.alloc.rate.norm:              304,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,360 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     553,994 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1,574 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,295 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala":
[info]   1911698,865 ±(99.9%) 39554,924 ops/s [Average]
[info]   (min, avg, max) = (1897632,560, 1911698,865, 1925343,364), stdev = 10272,288
[info]   CI (99.9%): [1872143,941, 1951253,789] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   369,386 ±(99.9%) 7,639 MB/sec [Average]
[info]   (min, avg, max) = (366,670, 369,386, 372,024), stdev = 1,984
[info]   CI (99.9%): [361,747, 377,025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   304,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (304,000, 304,000, 304,000), stdev = 0,001
[info]   CI (99.9%): [304,000, 304,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   441,727 ±(99.9%) 988,292 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 441,727, 673,360), stdev = 256,656
[info]   CI (99.9%): [≈ 0, 1430,019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   363,723 ±(99.9%) 813,537 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 363,723, 553,994), stdev = 211,273
[info]   CI (99.9%): [≈ 0, 1177,260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,321 ±(99.9%) 2,698 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,321, 1,574), stdev = 0,701
[info]   CI (99.9%): [≈ 0, 3,019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,264 ±(99.9%) 2,220 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,264, 1,295), stdev = 0,577
[info]   CI (99.9%): [≈ 0, 2,484] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 2,000), stdev = 0,837
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 10,24% complete, ETA 01:58:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 80263,358 ops/s
[info] # Warmup Iteration   2: 118357,857 ops/s
[info] # Warmup Iteration   3: 119186,663 ops/s
[info] # Warmup Iteration   4: 117699,563 ops/s
[info] # Warmup Iteration   5: 119708,820 ops/s
[info] Iteration   1: 119319,723 ops/s
[info]                  ·gc.alloc.rate:                   4336,152 MB/sec
[info]                  ·gc.alloc.rate.norm:              57176,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4070,786 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     53676,927 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,098 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 118773,798 ops/s
[info]                  ·gc.alloc.rate:                   4316,572 MB/sec
[info]                  ·gc.alloc.rate.norm:              57176,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4758,554 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63030,364 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,379 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   3: 118746,471 ops/s
[info]                  ·gc.alloc.rate:                   4329,183 MB/sec
[info]                  ·gc.alloc.rate.norm:              57356,215 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4084,143 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54109,742 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,828 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 118239,831 ops/s
[info]                  ·gc.alloc.rate:                   4297,053 MB/sec
[info]                  ·gc.alloc.rate.norm:              57176,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4086,006 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54367,849 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,277 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   5: 118478,627 ops/s
[info]                  ·gc.alloc.rate:                   4305,916 MB/sec
[info]                  ·gc.alloc.rate.norm:              57176,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4771,750 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63361,568 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,106 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson":
[info]   118711,690 ±(99.9%) 1554,321 ops/s [Average]
[info]   (min, avg, max) = (118239,831, 118711,690, 119319,723), stdev = 403,652
[info]   CI (99.9%): [117157,369, 120266,011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   4316,975 ±(99.9%) 61,974 MB/sec [Average]
[info]   (min, avg, max) = (4297,053, 4316,975, 4336,152), stdev = 16,095
[info]   CI (99.9%): [4255,001, 4378,949] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   57212,046 ±(99.9%) 310,334 B/op [Average]
[info]   (min, avg, max) = (57176,004, 57212,046, 57356,215), stdev = 80,593
[info]   CI (99.9%): [56901,711, 57522,380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   4354,248 ±(99.9%) 1444,675 MB/sec [Average]
[info]   (min, avg, max) = (4070,786, 4354,248, 4771,750), stdev = 375,177
[info]   CI (99.9%): [2909,573, 5798,923] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   57709,290 ±(99.9%) 19315,116 B/op [Average]
[info]   (min, avg, max) = (53676,927, 57709,290, 63361,568), stdev = 5016,074
[info]   CI (99.9%): [38394,174, 77024,406] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,071 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,071, 0,104), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,938 ±(99.9%) 1,608 B/op [Average]
[info]   (min, avg, max) = (0,277, 0,938, 1,379), stdev = 0,418
[info]   CI (99.9%): [≈ 0, 2,546] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   32,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (6,000, 6,400, 7,000), stdev = 0,548
[info]   CI (99.9%): [32,000, 32,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   18,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 3,600, 4,000), stdev = 0,548
[info]   CI (99.9%): [18,000, 18,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 10,44% complete, ETA 01:58:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 646148,403 ops/s
[info] # Warmup Iteration   2: 703922,544 ops/s
[info] # Warmup Iteration   3: 711157,716 ops/s
[info] # Warmup Iteration   4: 711305,232 ops/s
[info] # Warmup Iteration   5: 709806,277 ops/s
[info] Iteration   1: 675970,156 ops/s
[info]                  ·gc.alloc.rate:                   1766,752 MB/sec
[info]                  ·gc.alloc.rate.norm:              4112,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1349,371 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3140,573 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,048 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 710932,532 ops/s
[info]                  ·gc.alloc.rate:                   1858,109 MB/sec
[info]                  ·gc.alloc.rate.norm:              4112,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2026,325 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4484,264 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,138 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 705193,563 ops/s
[info]                  ·gc.alloc.rate:                   1843,130 MB/sec
[info]                  ·gc.alloc.rate.norm:              4112,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029,690 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4528,214 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,093 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 711691,969 ops/s
[info]                  ·gc.alloc.rate:                   1860,098 MB/sec
[info]                  ·gc.alloc.rate.norm:              4112,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,667 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2994,677 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,138 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 708376,260 ops/s
[info]                  ·gc.alloc.rate:                   1851,437 MB/sec
[info]                  ·gc.alloc.rate.norm:              4112,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2033,789 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4517,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,093 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readUPickle":
[info]   702432,896 ±(99.9%) 57798,015 ops/s [Average]
[info]   (min, avg, max) = (675970,156, 702432,896, 711691,969), stdev = 15009,961
[info]   CI (99.9%): [644634,881, 760230,911] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readUPickle:·gc.alloc.rate":
[info]   1835,905 ±(99.9%) 151,036 MB/sec [Average]
[info]   (min, avg, max) = (1766,752, 1835,905, 1860,098), stdev = 39,223
[info]   CI (99.9%): [1684,870, 1986,941] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   4112,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4112,001, 4112,001, 4112,001), stdev = 0,001
[info]   CI (99.9%): [4112,001, 4112,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1758,769 ±(99.9%) 1429,836 MB/sec [Average]
[info]   (min, avg, max) = (1349,371, 1758,769, 2033,789), stdev = 371,324
[info]   CI (99.9%): [328,932, 3188,605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   3932,946 ±(99.9%) 3048,836 B/op [Average]
[info]   (min, avg, max) = (2994,677, 3932,946, 4528,214), stdev = 791,773
[info]   CI (99.9%): [884,109, 6981,782] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,046 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,046, 0,062), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,102 ±(99.9%) 0,145 B/op [Average]
[info]   (min, avg, max) = (0,048, 0,102, 0,138), stdev = 0,038
[info]   CI (99.9%): [≈ 0, 0,247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readUPickle:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readUPickle:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 10,64% complete, ETA 01:58:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 318506,541 ops/s
[info] # Warmup Iteration   2: 409974,494 ops/s
[info] # Warmup Iteration   3: 409906,843 ops/s
[info] # Warmup Iteration   4: 411794,466 ops/s
[info] # Warmup Iteration   5: 412339,288 ops/s
[info] Iteration   1: 411423,059 ops/s
[info]                  ·gc.alloc.rate:                   1403,774 MB/sec
[info]                  ·gc.alloc.rate.norm:              5368,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341,688 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5130,586 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,159 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 410368,214 ops/s
[info]                  ·gc.alloc.rate:                   1400,178 MB/sec
[info]                  ·gc.alloc.rate.norm:              5368,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,102 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5149,183 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,240 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 412848,868 ops/s
[info]                  ·gc.alloc.rate:               1408,564 MB/sec
[info]                  ·gc.alloc.rate.norm:          5368,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344,638 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5124,382 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   4: 382060,750 ops/s
[info]                  ·gc.alloc.rate:                   1303,563 MB/sec
[info]                  ·gc.alloc.rate.norm:              5368,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,360 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5544,239 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,171 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 412491,087 ops/s
[info]                  ·gc.alloc.rate:               1407,394 MB/sec
[info]                  ·gc.alloc.rate.norm:          5368,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1348,002 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5141,474 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce":
[info]   405838,395 ±(99.9%) 51319,463 ops/s [Average]
[info]   (min, avg, max) = (382060,750, 405838,395, 412848,868), stdev = 13327,502
[info]   CI (99.9%): [354518,932, 457157,858] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   1384,694 ±(99.9%) 175,100 MB/sec [Average]
[info]   (min, avg, max) = (1303,563, 1384,694, 1408,564), stdev = 45,473
[info]   CI (99.9%): [1209,595, 1559,794] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5368,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (5368,001, 5368,001, 5368,001), stdev = 0,001
[info]   CI (99.9%): [5368,001, 5368,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1344,758 ±(99.9%) 9,679 MB/sec [Average]
[info]   (min, avg, max) = (1341,688, 1344,758, 1348,002), stdev = 2,514
[info]   CI (99.9%): [1335,079, 1354,437] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5217,973 ±(99.9%) 703,282 B/op [Average]
[info]   (min, avg, max) = (5124,382, 5217,973, 5544,239), stdev = 182,640
[info]   CI (99.9%): [4514,691, 5921,255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,062), stdev = 0,028
[info]   CI (99.9%): [≈ 0, 0,137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,114 ±(99.9%) 0,418 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,114, 0,240), stdev = 0,109
[info]   CI (99.9%): [≈ 0, 0,532] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 10,84% complete, ETA 01:57:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 224969,753 ops/s
[info] # Warmup Iteration   2: 1700894,518 ops/s
[info] # Warmup Iteration   3: 1676558,968 ops/s
[info] # Warmup Iteration   4: 1675257,429 ops/s
[info] # Warmup Iteration   5: 1679034,877 ops/s
[info] Iteration   1: 1680992,427 ops/s
[info]                  ·gc.alloc.rate:               777,837 MB/sec
[info]                  ·gc.alloc.rate.norm:          728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664,053 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 621,507 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 1671617,103 ops/s
[info]                  ·gc.alloc.rate:               773,509 MB/sec
[info]                  ·gc.alloc.rate.norm:          728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665,354 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 626,208 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 1664643,257 ops/s
[info]                  ·gc.alloc.rate:               770,280 MB/sec
[info]                  ·gc.alloc.rate.norm:          728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665,358 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 628,838 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 1677814,046 ops/s
[info]                  ·gc.alloc.rate:                   776,375 MB/sec
[info]                  ·gc.alloc.rate.norm:              728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666,703 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     625,162 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,029 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 1678571,778 ops/s
[info]                  ·gc.alloc.rate:               776,717 MB/sec
[info]                  ·gc.alloc.rate.norm:          728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666,688 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 624,873 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava":
[info]   1674727,722 ±(99.9%) 25463,872 ops/s [Average]
[info]   (min, avg, max) = (1664643,257, 1674727,722, 1680992,427), stdev = 6612,887
[info]   CI (99.9%): [1649263,850, 1700191,594] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   774,943 ±(99.9%) 11,770 MB/sec [Average]
[info]   (min, avg, max) = (770,280, 774,943, 777,837), stdev = 3,057
[info]   CI (99.9%): [763,173, 786,714] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   728,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (728,000, 728,000, 728,000), stdev = 0,001
[info]   CI (99.9%): [728,000, 728,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   665,631 ±(99.9%) 4,265 MB/sec [Average]
[info]   (min, avg, max) = (664,053, 665,631, 666,703), stdev = 1,108
[info]   CI (99.9%): [661,366, 669,896] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   625,317 ±(99.9%) 10,174 B/op [Average]
[info]   (min, avg, max) = (621,507, 625,317, 628,838), stdev = 2,642
[info]   CI (99.9%): [615,143, 635,492] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,006 ±(99.9%) 0,053 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,006, 0,031), stdev = 0,014
[info]   CI (99.9%): [≈ 0, 0,059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0,006 ±(99.9%) 0,050 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,006, 0,029), stdev = 0,013
[info]   CI (99.9%): [≈ 0, 0,056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.time":
[info]   9,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 11,04% complete, ETA 01:57:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 813761,300 ops/s
[info] # Warmup Iteration   2: 989459,154 ops/s
[info] # Warmup Iteration   3: 944107,061 ops/s
[info] # Warmup Iteration   4: 979271,896 ops/s
[info] # Warmup Iteration   5: 983090,816 ops/s
[info] Iteration   1: 983428,474 ops/s
[info]                  ·gc.alloc.rate:                   695,067 MB/sec
[info]                  ·gc.alloc.rate.norm:              1112,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668,036 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1068,756 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,116 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,385 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 987446,058 ops/s
[info]                  ·gc.alloc.rate:               697,915 MB/sec
[info]                  ·gc.alloc.rate.norm:          1112,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667,999 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1064,335 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 986696,109 ops/s
[info]                  ·gc.alloc.rate:                   697,392 MB/sec
[info]                  ·gc.alloc.rate.norm:              1112,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668,351 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1065,695 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,100 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 987143,793 ops/s
[info]                  ·gc.alloc.rate:               697,712 MB/sec
[info]                  ·gc.alloc.rate.norm:          1112,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668,359 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1065,218 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 991293,630 ops/s
[info]                  ·gc.alloc.rate:                   700,621 MB/sec
[info]                  ·gc.alloc.rate.norm:              1112,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668,354 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1060,787 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,066 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala":
[info]   987201,613 ±(99.9%) 10771,453 ops/s [Average]
[info]   (min, avg, max) = (983428,474, 987201,613, 991293,630), stdev = 2797,312
[info]   CI (99.9%): [976430,160, 997973,065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   697,741 ±(99.9%) 7,604 MB/sec [Average]
[info]   (min, avg, max) = (695,067, 697,741, 700,621), stdev = 1,975
[info]   CI (99.9%): [690,137, 705,346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1112,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1112,000, 1112,000, 1112,000), stdev = 0,001
[info]   CI (99.9%): [1112,000, 1112,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   668,220 ±(99.9%) 0,713 MB/sec [Average]
[info]   (min, avg, max) = (667,999, 668,220, 668,359), stdev = 0,185
[info]   CI (99.9%): [667,507, 668,933] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1064,958 ±(99.9%) 11,030 B/op [Average]
[info]   (min, avg, max) = (1060,787, 1064,958, 1068,756), stdev = 2,864
[info]   CI (99.9%): [1053,928, 1075,988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,444 ±(99.9%) 3,600 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,444, 2,116), stdev = 0,935
[info]   CI (99.9%): [≈ 0, 4,044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,710 ±(99.9%) 5,760 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,710, 3,385), stdev = 1,496
[info]   CI (99.9%): [≈ 0, 6,471] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 11,24% complete, ETA 01:57:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2360624,629 ops/s
[info] # Warmup Iteration   2: 2508092,540 ops/s
[info] # Warmup Iteration   3: 2907034,721 ops/s
[info] # Warmup Iteration   4: 2852288,031 ops/s
[info] # Warmup Iteration   5: 2881256,441 ops/s
[info] Iteration   1: 2865744,847 ops/s
[info]                  ·gc.alloc.rate:                   1326,064 MB/sec
[info]                  ·gc.alloc.rate.norm:              728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,061 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     738,978 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,011 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 2856992,483 ops/s
[info]                  ·gc.alloc.rate:                   1321,988 MB/sec
[info]                  ·gc.alloc.rate.norm:              728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,343 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     741,963 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,046 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 2862564,967 ops/s
[info]                  ·gc.alloc.rate:                   1324,580 MB/sec
[info]                  ·gc.alloc.rate.norm:              728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,017 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     740,882 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,023 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 2881894,141 ops/s
[info]                  ·gc.alloc.rate:                   1333,523 MB/sec
[info]                  ·gc.alloc.rate.norm:              728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1349,382 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     736,657 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,034 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 2853239,433 ops/s
[info]                  ·gc.alloc.rate:                   1320,271 MB/sec
[info]                  ·gc.alloc.rate.norm:              728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350,709 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     744,784 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,011 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala":
[info]   2864087,174 ±(99.9%) 42625,828 ops/s [Average]
[info]   (min, avg, max) = (2853239,433, 2864087,174, 2881894,141), stdev = 11069,792
[info]   CI (99.9%): [2821461,346, 2906713,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1325,285 ±(99.9%) 19,727 MB/sec [Average]
[info]   (min, avg, max) = (1320,271, 1325,285, 1333,523), stdev = 5,123
[info]   CI (99.9%): [1305,559, 1345,012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   728,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (728,000, 728,000, 728,000), stdev = 0,001
[info]   CI (99.9%): [728,000, 728,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1348,302 ±(99.9%) 6,937 MB/sec [Average]
[info]   (min, avg, max) = (1346,061, 1348,302, 1350,709), stdev = 1,802
[info]   CI (99.9%): [1341,365, 1355,240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   740,653 ±(99.9%) 11,806 B/op [Average]
[info]   (min, avg, max) = (736,657, 740,653, 744,784), stdev = 3,066
[info]   CI (99.9%): [728,847, 752,458] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,046 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,046, 0,083), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,025 ±(99.9%) 0,057 B/op [Average]
[info]   (min, avg, max) = (0,011, 0,025, 0,046), stdev = 0,015
[info]   CI (99.9%): [≈ 0, 0,083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 11,45% complete, ETA 01:57:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2327785,754 ops/s
[info] # Warmup Iteration   2: 2491773,601 ops/s
[info] # Warmup Iteration   3: 2480028,437 ops/s
[info] # Warmup Iteration   4: 2479290,929 ops/s
[info] # Warmup Iteration   5: 2480688,428 ops/s
[info] Iteration   1: 2480412,260 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2478380,831 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2484428,802 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2478357,884 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2480975,975 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   2480511,150 ±(99.9%) 9578,095 ops/s [Average]
[info]   (min, avg, max) = (2478357,884, 2480511,150, 2484428,802), stdev = 2487,401
[info]   CI (99.9%): [2470933,056, 2490089,245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 11,65% complete, ETA 01:56:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 451765,940 ops/s
[info] # Warmup Iteration   2: 533790,313 ops/s
[info] # Warmup Iteration   3: 564094,846 ops/s
[info] # Warmup Iteration   4: 556456,884 ops/s
[info] # Warmup Iteration   5: 560522,271 ops/s
[info] Iteration   1: 562904,345 ops/s
[info]                  ·gc.alloc.rate:                   658,331 MB/sec
[info]                  ·gc.alloc.rate.norm:              1840,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670,007 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1872,637 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,022 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,652 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 564555,108 ops/s
[info]                  ·gc.alloc.rate:                   660,239 MB/sec
[info]                  ·gc.alloc.rate.norm:              1840,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670,027 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1867,277 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,116 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 563660,256 ops/s
[info]                  ·gc.alloc.rate:                   659,194 MB/sec
[info]                  ·gc.alloc.rate.norm:              1840,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669,694 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1869,308 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,058 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 564560,592 ops/s
[info]                  ·gc.alloc.rate:               660,271 MB/sec
[info]                  ·gc.alloc.rate.norm:          1840,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669,683 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1866,230 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 564907,484 ops/s
[info]                  ·gc.alloc.rate:                   660,647 MB/sec
[info]                  ·gc.alloc.rate.norm:              1840,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669,663 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1865,113 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,058 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson":
[info]   564117,557 ±(99.9%) 3159,361 ops/s [Average]
[info]   (min, avg, max) = (562904,345, 564117,557, 564907,484), stdev = 820,476
[info]   CI (99.9%): [560958,196, 567276,918] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   659,736 ±(99.9%) 3,672 MB/sec [Average]
[info]   (min, avg, max) = (658,331, 659,736, 660,647), stdev = 0,954
[info]   CI (99.9%): [656,064, 663,408] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   1840,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1840,001, 1840,001, 1840,001), stdev = 0,001
[info]   CI (99.9%): [1840,001, 1840,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   669,815 ±(99.9%) 0,712 MB/sec [Average]
[info]   (min, avg, max) = (669,663, 669,815, 670,027), stdev = 0,185
[info]   CI (99.9%): [669,103, 670,527] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1868,113 ±(99.9%) 11,413 B/op [Average]
[info]   (min, avg, max) = (1865,113, 1868,113, 1872,637), stdev = 2,964
[info]   CI (99.9%): [1856,701, 1879,526] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,421 ±(99.9%) 3,447 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,421, 2,022), stdev = 0,895
[info]   CI (99.9%): [≈ 0, 3,868] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1,177 ±(99.9%) 9,634 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,177, 5,652), stdev = 2,502
[info]   CI (99.9%): [≈ 0, 10,811] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 11,85% complete, ETA 01:56:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 175517,606 ops/s
[info] # Warmup Iteration   2: 184673,427 ops/s
[info] # Warmup Iteration   3: 184586,195 ops/s
[info] # Warmup Iteration   4: 186811,200 ops/s
[info] # Warmup Iteration   5: 186727,776 ops/s
[info] Iteration   1: 186726,974 ops/s
[info]                  ·gc.alloc.rate:                   1095,664 MB/sec
[info]                  ·gc.alloc.rate.norm:              9232,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,352 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11361,131 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,351 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 186861,006 ops/s
[info]                  ·gc.alloc.rate:               1096,465 MB/sec
[info]                  ·gc.alloc.rate.norm:          9232,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,022 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5675,121 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 186302,735 ops/s
[info]                  ·gc.alloc.rate:                   1093,222 MB/sec
[info]                  ·gc.alloc.rate.norm:              9232,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,690 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11389,369 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,528 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 185470,521 ops/s
[info]                  ·gc.alloc.rate:                   1088,329 MB/sec
[info]                  ·gc.alloc.rate.norm:              9232,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1349,342 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11446,102 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,353 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 187246,405 ops/s
[info]                  ·gc.alloc.rate:               1098,634 MB/sec
[info]                  ·gc.alloc.rate.norm:          9232,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,952 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5671,731 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeUPickle":
[info]   186521,528 ±(99.9%) 2608,357 ops/s [Average]
[info]   (min, avg, max) = (185470,521, 186521,528, 187246,405), stdev = 677,382
[info]   CI (99.9%): [183913,171, 189129,885] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeUPickle:·gc.alloc.rate":
[info]   1094,463 ±(99.9%) 15,161 MB/sec [Average]
[info]   (min, avg, max) = (1088,329, 1094,463, 1098,634), stdev = 3,937
[info]   CI (99.9%): [1079,302, 1109,624] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   9232,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (9232,002, 9232,002, 9232,002), stdev = 0,001
[info]   CI (99.9%): [9232,002, 9232,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   1079,071 ±(99.9%) 1422,173 MB/sec [Average]
[info]   (min, avg, max) = (674,022, 1079,071, 1349,342), stdev = 369,334
[info]   CI (99.9%): [≈ 0, 2501,245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   9108,691 ±(99.9%) 12076,016 B/op [Average]
[info]   (min, avg, max) = (5671,731, 9108,691, 11446,102), stdev = 3136,103
[info]   CI (99.9%): [≈ 0, 21184,707] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,062), stdev = 0,028
[info]   CI (99.9%): [≈ 0, 0,137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,246 ±(99.9%) 0,909 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,246, 0,528), stdev = 0,236
[info]   CI (99.9%): [≈ 0, 1,155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeUPickle:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeUPickle:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 12,05% complete, ETA 01:56:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 146504,052 ops/s
[info] # Warmup Iteration   2: 172600,817 ops/s
[info] # Warmup Iteration   3: 173718,993 ops/s
[info] # Warmup Iteration   4: 172462,921 ops/s
[info] # Warmup Iteration   5: 172088,129 ops/s
[info] Iteration   1: 173248,369 ops/s
[info]                  ·gc.alloc.rate:                   2132,921 MB/sec
[info]                  ·gc.alloc.rate.norm:              19368,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2697,736 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24496,809 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,756 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 167796,754 ops/s
[info]                  ·gc.alloc.rate:                   2065,776 MB/sec
[info]                  ·gc.alloc.rate.norm:              19368,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2027,947 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19013,328 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,781 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 173436,451 ops/s
[info]                  ·gc.alloc.rate:                   2135,128 MB/sec
[info]                  ·gc.alloc.rate.norm:              19368,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2030,473 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18418,659 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,322 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 173007,171 ops/s
[info]                  ·gc.alloc.rate:                   2129,885 MB/sec
[info]                  ·gc.alloc.rate.norm:              19368,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2033,425 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18490,844 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,189 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 173471,501 ops/s
[info]                  ·gc.alloc.rate:               2135,539 MB/sec
[info]                  ·gc.alloc.rate.norm:          19368,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2035,334 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 18459,207 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce":
[info]   172192,049 ±(99.9%) 9487,831 ops/s [Average]
[info]   (min, avg, max) = (167796,754, 172192,049, 173471,501), stdev = 2463,960
[info]   CI (99.9%): [162704,218, 181679,880] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate":
[info]   2119,850 ±(99.9%) 116,718 MB/sec [Average]
[info]   (min, avg, max) = (2065,776, 2119,850, 2135,539), stdev = 30,311
[info]   CI (99.9%): [2003,132, 2236,568] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   19368,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (19368,002, 19368,003, 19368,003), stdev = 0,001
[info]   CI (99.9%): [19368,002, 19368,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2164,983 ±(99.9%) 1146,842 MB/sec [Average]
[info]   (min, avg, max) = (2027,947, 2164,983, 2697,736), stdev = 297,831
[info]   CI (99.9%): [1018,141, 3311,825] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   19775,769 ±(99.9%) 10205,233 B/op [Average]
[info]   (min, avg, max) = (18418,659, 19775,769, 24496,809), stdev = 2650,267
[info]   CI (99.9%): [9570,536, 29981,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,067 ±(99.9%) 0,223 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,067, 0,146), stdev = 0,058
[info]   CI (99.9%): [≈ 0, 0,289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,610 ±(99.9%) 2,026 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,610, 1,322), stdev = 0,526
[info]   CI (99.9%): [≈ 0, 2,636] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.count":
[info]   16,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,200, 4,000), stdev = 0,447
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.time":
[info]   9,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 12,25% complete, ETA 01:56:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 346875,416 ops/s
[info] # Warmup Iteration   2: 466930,353 ops/s
[info] # Warmup Iteration   3: 472712,302 ops/s
[info] # Warmup Iteration   4: 474190,643 ops/s
[info] # Warmup Iteration   5: 475619,604 ops/s
[info] Iteration   1: 473858,521 ops/s
[info]                  ·gc.alloc.rate:                   392,768 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,818 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1699,249 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,027 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,089 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 474940,737 ops/s
[info]                  ·gc.alloc.rate:               393,668 MB/sec
[info]                  ·gc.alloc.rate.norm:          1304,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,825 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1695,389 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 473887,549 ops/s
[info]                  ·gc.alloc.rate:                   392,778 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,791 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1699,116 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,138 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 475347,214 ops/s
[info]                  ·gc.alloc.rate:      393,984 MB/sec
[info]                  ·gc.alloc.rate.norm: 1304,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 474165,999 ops/s
[info]                  ·gc.alloc.rate:                   392,984 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668,005 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2216,580 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,126 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7,055 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala":
[info]   474440,004 ±(99.9%) 2577,467 ops/s [Average]
[info]   (min, avg, max) = (473858,521, 474440,004, 475347,214), stdev = 669,360
[info]   CI (99.9%): [471862,537, 477017,471] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   393,236 ±(99.9%) 2,142 MB/sec [Average]
[info]   (min, avg, max) = (392,768, 393,236, 393,984), stdev = 0,556
[info]   CI (99.9%): [391,094, 395,379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1304,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1304,001, 1304,001, 1304,001), stdev = 0,001
[info]   CI (99.9%): [1304,001, 1304,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   440,688 ±(99.9%) 983,714 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 440,688, 668,005), stdev = 255,468
[info]   CI (99.9%): [≈ 0, 1424,402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1462,067 ±(99.9%) 3263,870 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1462,067, 2216,580), stdev = 847,617
[info]   CI (99.9%): [≈ 0, 4725,937] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,439 ±(99.9%) 3,633 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,439, 2,126), stdev = 0,943
[info]   CI (99.9%): [≈ 0, 4,072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1,456 ±(99.9%) 12,054 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,456, 7,055), stdev = 3,130
[info]   CI (99.9%): [≈ 0, 13,510] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,600, 2,000), stdev = 0,894
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 12,45% complete, ETA 01:55:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1057196,251 ops/s
[info] # Warmup Iteration   2: 996136,625 ops/s
[info] # Warmup Iteration   3: 1069367,069 ops/s
[info] # Warmup Iteration   4: 1117282,274 ops/s
[info] # Warmup Iteration   5: 1116520,299 ops/s
[info] Iteration   1: 1118629,139 ops/s
[info]                  ·gc.alloc.rate:      216,147 MB/sec
[info]                  ·gc.alloc.rate.norm: 304,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1116918,319 ops/s
[info]                  ·gc.alloc.rate:      215,818 MB/sec
[info]                  ·gc.alloc.rate.norm: 304,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1115117,513 ops/s
[info]                  ·gc.alloc.rate:               215,471 MB/sec
[info]                  ·gc.alloc.rate.norm:          304,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,770 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 722,038 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 1117416,738 ops/s
[info]                  ·gc.alloc.rate:      215,914 MB/sec
[info]                  ·gc.alloc.rate.norm: 304,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1112599,572 ops/s
[info]                  ·gc.alloc.rate:                   214,974 MB/sec
[info]                  ·gc.alloc.rate.norm:              304,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,765 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     723,701 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,068 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,097 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala":
[info]   1116136,256 ±(99.9%) 9032,961 ops/s [Average]
[info]   (min, avg, max) = (1112599,572, 1116136,256, 1118629,139), stdev = 2345,831
[info]   CI (99.9%): [1107103,295, 1125169,217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   215,665 ±(99.9%) 1,758 MB/sec [Average]
[info]   (min, avg, max) = (214,974, 215,665, 216,147), stdev = 0,456
[info]   CI (99.9%): [213,907, 217,422] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   304,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (304,000, 304,000, 304,000), stdev = 0,001
[info]   CI (99.9%): [304,000, 304,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   204,707 ±(99.9%) 1079,361 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204,707, 511,770), stdev = 280,306
[info]   CI (99.9%): [≈ 0, 1284,067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   289,148 ±(99.9%) 1524,595 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 289,148, 723,701), stdev = 395,932
[info]   CI (99.9%): [≈ 0, 1813,743] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,014 ±(99.9%) 0,118 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,014, 0,068), stdev = 0,031
[info]   CI (99.9%): [≈ 0, 0,131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,019 ±(99.9%) 0,166 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,019, 0,097), stdev = 0,043
[info]   CI (99.9%): [≈ 0, 0,186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.count":
[info]   2,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 2,000), stdev = 0,894
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 12,65% complete, ETA 01:55:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 62763,065 ops/s
[info] # Warmup Iteration   2: 91792,105 ops/s
[info] # Warmup Iteration   3: 92721,487 ops/s
[info] # Warmup Iteration   4: 92471,169 ops/s
[info] # Warmup Iteration   5: 92756,048 ops/s
[info] Iteration   1: 92384,050 ops/s
[info]                  ·gc.alloc.rate:                   3814,041 MB/sec
[info]                  ·gc.alloc.rate.norm:              64952,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3387,424 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     57686,829 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,709 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 92341,505 ops/s
[info]                  ·gc.alloc.rate:                   3812,331 MB/sec
[info]                  ·gc.alloc.rate.norm:              64952,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4073,217 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69396,819 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,838 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   3: 92596,480 ops/s
[info]                  ·gc.alloc.rate:                   3822,618 MB/sec
[info]                  ·gc.alloc.rate.norm:              64952,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4080,048 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69326,122 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,061 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 92576,117 ops/s
[info]                  ·gc.alloc.rate:                   3822,000 MB/sec
[info]                  ·gc.alloc.rate.norm:              64952,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3403,779 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     57844,659 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,123 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 92836,252 ops/s
[info]                  ·gc.alloc.rate:                   3832,671 MB/sec
[info]                  ·gc.alloc.rate.norm:              64952,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4086,114 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69247,076 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,706 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson":
[info]   92546,881 ±(99.9%) 759,816 ops/s [Average]
[info]   (min, avg, max) = (92341,505, 92546,881, 92836,252), stdev = 197,322
[info]   CI (99.9%): [91787,065, 93306,697] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3820,732 ±(99.9%) 31,227 MB/sec [Average]
[info]   (min, avg, max) = (3812,331, 3820,732, 3832,671), stdev = 8,110
[info]   CI (99.9%): [3789,505, 3851,960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   64952,005 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (64952,005, 64952,005, 64952,005), stdev = 0,001
[info]   CI (99.9%): [64952,004, 64952,005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3806,116 ±(99.9%) 1443,297 MB/sec [Average]
[info]   (min, avg, max) = (3387,424, 3806,116, 4086,114), stdev = 374,820
[info]   CI (99.9%): [2362,820, 5249,413] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   64700,301 ±(99.9%) 24377,745 B/op [Average]
[info]   (min, avg, max) = (57686,829, 64700,301, 69396,819), stdev = 6330,823
[info]   CI (99.9%): [40322,556, 89078,047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,087 ±(99.9%) 0,215 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,087, 0,167), stdev = 0,056
[info]   CI (99.9%): [≈ 0, 0,303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1,488 ±(99.9%) 3,667 B/op [Average]
[info]   (min, avg, max) = (0,706, 1,488, 2,838), stdev = 0,952
[info]   CI (99.9%): [≈ 0, 5,154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.count":
[info]   28,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (5,000, 5,600, 6,000), stdev = 0,548
[info]   CI (99.9%): [28,000, 28,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.time":
[info]   17,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 3,400, 4,000), stdev = 0,548
[info]   CI (99.9%): [17,000, 17,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 12,85% complete, ETA 01:55:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 154493,149 ops/s
[info] # Warmup Iteration   2: 168185,004 ops/s
[info] # Warmup Iteration   3: 168970,266 ops/s
[info] # Warmup Iteration   4: 168839,427 ops/s
[info] # Warmup Iteration   5: 169075,869 ops/s
[info] Iteration   1: 168841,314 ops/s
[info]                  ·gc.alloc.rate:                   1320,470 MB/sec
[info]                  ·gc.alloc.rate.norm:              12304,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,102 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12561,477 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,388 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 168529,712 ops/s
[info]                  ·gc.alloc.rate:                   1318,041 MB/sec
[info]                  ·gc.alloc.rate.norm:              12304,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1349,113 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12594,060 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,583 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 168918,989 ops/s
[info]                  ·gc.alloc.rate:               1321,029 MB/sec
[info]                  ·gc.alloc.rate.norm:          12304,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1349,684 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12570,897 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 167924,017 ops/s
[info]                  ·gc.alloc.rate:                   1313,283 MB/sec
[info]                  ·gc.alloc.rate.norm:              12304,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350,758 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12655,109 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,390 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 168912,367 ops/s
[info]                  ·gc.alloc.rate:               1320,960 MB/sec
[info]                  ·gc.alloc.rate.norm:          12304,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,620 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6293,020 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readUPickle":
[info]   168625,280 ±(99.9%) 1629,438 ops/s [Average]
[info]   (min, avg, max) = (167924,017, 168625,280, 168918,989), stdev = 423,160
[info]   CI (99.9%): [166995,842, 170254,718] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readUPickle:·gc.alloc.rate":
[info]   1318,756 ±(99.9%) 12,688 MB/sec [Average]
[info]   (min, avg, max) = (1313,283, 1318,756, 1321,029), stdev = 3,295
[info]   CI (99.9%): [1306,069, 1331,444] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   12304,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (12304,003, 12304,003, 12304,003), stdev = 0,001
[info]   CI (99.9%): [12304,002, 12304,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1214,655 ±(99.9%) 1160,321 MB/sec [Average]
[info]   (min, avg, max) = (675,620, 1214,655, 1350,758), stdev = 301,332
[info]   CI (99.9%): [54,334, 2374,977] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   11334,913 ±(99.9%) 10853,962 B/op [Average]
[info]   (min, avg, max) = (6293,020, 11334,913, 12655,109), stdev = 2818,740
[info]   CI (99.9%): [480,950, 22188,875] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,062), stdev = 0,028
[info]   CI (99.9%): [≈ 0, 0,137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,272 ±(99.9%) 1,005 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,272, 0,583), stdev = 0,261
[info]   CI (99.9%): [≈ 0, 1,277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readUPickle:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readUPickle:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 13,05% complete, ETA 01:55:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 215444,492 ops/s
[info] # Warmup Iteration   2: 272521,884 ops/s
[info] # Warmup Iteration   3: 270498,261 ops/s
[info] # Warmup Iteration   4: 270092,613 ops/s
[info] # Warmup Iteration   5: 271218,694 ops/s
[info] Iteration   1: 268088,002 ops/s
[info]                  ·gc.alloc.rate:               1479,008 MB/sec
[info]                  ·gc.alloc.rate.norm:          8680,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342,008 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7875,974 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 271109,332 ops/s
[info]                  ·gc.alloc.rate:                   1495,600 MB/sec
[info]                  ·gc.alloc.rate.norm:              8680,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,972 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7800,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,363 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 269045,631 ops/s
[info]                  ·gc.alloc.rate:                   1484,306 MB/sec
[info]                  ·gc.alloc.rate.norm:              8680,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,357 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7867,447 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,365 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 270171,573 ops/s
[info]                  ·gc.alloc.rate:                   1490,544 MB/sec
[info]                  ·gc.alloc.rate.norm:              8680,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2021,662 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11772,902 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,364 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 266982,862 ops/s
[info]                  ·gc.alloc.rate:               1472,877 MB/sec
[info]                  ·gc.alloc.rate.norm:          8680,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1349,638 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7953,723 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce":
[info]   269079,480 ±(99.9%) 6295,817 ops/s [Average]
[info]   (min, avg, max) = (266982,862, 269079,480, 271109,332), stdev = 1635,004
[info]   CI (99.9%): [262783,663, 275375,297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1484,467 ±(99.9%) 34,710 MB/sec [Average]
[info]   (min, avg, max) = (1472,877, 1484,467, 1495,600), stdev = 9,014
[info]   CI (99.9%): [1449,757, 1519,177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   8680,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (8680,002, 8680,002, 8680,002), stdev = 0,001
[info]   CI (99.9%): [8680,001, 8680,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1480,527 ±(99.9%) 1164,884 MB/sec [Average]
[info]   (min, avg, max) = (1342,008, 1480,527, 2021,662), stdev = 302,517
[info]   CI (99.9%): [315,643, 2645,411] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   8654,009 ±(99.9%) 6716,931 B/op [Average]
[info]   (min, avg, max) = (7800,000, 8654,009, 11772,902), stdev = 1744,366
[info]   CI (99.9%): [1937,079, 15370,940] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,062), stdev = 0,034
[info]   CI (99.9%): [≈ 0, 0,169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,218 ±(99.9%) 0,767 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,218, 0,365), stdev = 0,199
[info]   CI (99.9%): [≈ 0, 0,986] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 13,25% complete, ETA 01:54:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1363952,113 ops/s
[info] # Warmup Iteration   2: 1784572,513 ops/s
[info] # Warmup Iteration   3: 1785404,726 ops/s
[info] # Warmup Iteration   4: 1798647,796 ops/s
[info] # Warmup Iteration   5: 1792243,262 ops/s
[info] Iteration   1: 1798440,100 ops/s
[info]                  ·gc.alloc.rate:                   923,663 MB/sec
[info]                  ·gc.alloc.rate.norm:              808,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668,424 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     584,723 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,018 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 1791363,061 ops/s
[info]                  ·gc.alloc.rate:               920,029 MB/sec
[info]                  ·gc.alloc.rate.norm:          808,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668,420 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 587,029 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 1799519,618 ops/s
[info]                  ·gc.alloc.rate:                   924,227 MB/sec
[info]                  ·gc.alloc.rate.norm:              808,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336,860 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1168,742 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,055 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 1776279,941 ops/s
[info]                  ·gc.alloc.rate:               912,279 MB/sec
[info]                  ·gc.alloc.rate.norm:          808,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669,418 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 592,900 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 1784368,978 ops/s
[info]                  ·gc.alloc.rate:                   916,427 MB/sec
[info]                  ·gc.alloc.rate.norm:              808,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669,413 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     590,212 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,018 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala":
[info]   1789994,340 ±(99.9%) 37711,971 ops/s [Average]
[info]   (min, avg, max) = (1776279,941, 1789994,340, 1799519,618), stdev = 9793,679
[info]   CI (99.9%): [1752282,368, 1827706,311] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   919,325 ±(99.9%) 19,387 MB/sec [Average]
[info]   (min, avg, max) = (912,279, 919,325, 924,227), stdev = 5,035
[info]   CI (99.9%): [899,938, 938,712] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   808,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (808,000, 808,000, 808,000), stdev = 0,001
[info]   CI (99.9%): [808,000, 808,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   802,507 ±(99.9%) 1150,236 MB/sec [Average]
[info]   (min, avg, max) = (668,420, 802,507, 1336,860), stdev = 298,713
[info]   CI (99.9%): [≈ 0, 1952,743] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   704,721 ±(99.9%) 998,912 B/op [Average]
[info]   (min, avg, max) = (584,723, 704,721, 1168,742), stdev = 259,414
[info]   CI (99.9%): [≈ 0, 1703,633] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,021 ±(99.9%) 0,098 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,062), stdev = 0,026
[info]   CI (99.9%): [≈ 0, 0,119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,018 ±(99.9%) 0,086 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,018, 0,055), stdev = 0,022
[info]   CI (99.9%): [≈ 0, 0,104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 13,45% complete, ETA 01:54:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2042395,999 ops/s
[info] # Warmup Iteration   2: 2114940,894 ops/s
[info] # Warmup Iteration   3: 2174988,002 ops/s
[info] # Warmup Iteration   4: 2186755,828 ops/s
[info] # Warmup Iteration   5: 2182333,275 ops/s
[info] Iteration   1: 2179851,754 ops/s
[info]                  ·gc.alloc.rate:                   587,469 MB/sec
[info]                  ·gc.alloc.rate.norm:              424,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,770 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     369,365 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,005 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,003 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 2182458,689 ops/s
[info]                  ·gc.alloc.rate:                   588,176 MB/sec
[info]                  ·gc.alloc.rate.norm:              424,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,367 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     485,412 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1,564 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,127 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 2185968,281 ops/s
[info]                  ·gc.alloc.rate:                   589,119 MB/sec
[info]                  ·gc.alloc.rate.norm:              424,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,364 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     484,633 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,045 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 2186803,199 ops/s
[info]                  ·gc.alloc.rate:                   589,336 MB/sec
[info]                  ·gc.alloc.rate.norm:              424,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     484,222 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,015 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 2183505,692 ops/s
[info]                  ·gc.alloc.rate:                   588,446 MB/sec
[info]                  ·gc.alloc.rate.norm:              424,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,028 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     484,945 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,030 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala":
[info]   2183717,523 ±(99.9%) 10747,543 ops/s [Average]
[info]   (min, avg, max) = (2179851,754, 2183717,523, 2186803,199), stdev = 2791,103
[info]   CI (99.9%): [2172969,981, 2194465,066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   588,509 ±(99.9%) 2,890 MB/sec [Average]
[info]   (min, avg, max) = (587,469, 588,509, 589,336), stdev = 0,751
[info]   CI (99.9%): [585,619, 591,399] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   424,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (424,000, 424,000, 424,000), stdev = 0,001
[info]   CI (99.9%): [424,000, 424,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   640,914 ±(99.9%) 277,992 MB/sec [Average]
[info]   (min, avg, max) = (511,770, 640,914, 673,367), stdev = 72,194
[info]   CI (99.9%): [362,922, 918,906] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   461,715 ±(99.9%) 198,797 B/op [Average]
[info]   (min, avg, max) = (369,365, 461,715, 485,412), stdev = 51,627
[info]   CI (99.9%): [262,918, 660,513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,339 ±(99.9%) 2,639 MB/sec [Average]
[info]   (min, avg, max) = (0,005, 0,339, 1,564), stdev = 0,685
[info]   CI (99.9%): [≈ 0, 2,978] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,244 ±(99.9%) 1,902 B/op [Average]
[info]   (min, avg, max) = (0,003, 0,244, 1,127), stdev = 0,494
[info]   CI (99.9%): [≈ 0, 2,147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 13,65% complete, ETA 01:54:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2098858,566 ops/s
[info] # Warmup Iteration   2: 2181134,109 ops/s
[info] # Warmup Iteration   3: 2178525,882 ops/s
[info] # Warmup Iteration   4: 2179132,880 ops/s
[info] # Warmup Iteration   5: 2185566,405 ops/s
[info] Iteration   1: 2188394,200 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2185208,084 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2180829,051 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2182853,981 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2182382,846 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc":
[info]   2183933,632 ±(99.9%) 11346,323 ops/s [Average]
[info]   (min, avg, max) = (2180829,051, 2183933,632, 2188394,200), stdev = 2946,604
[info]   CI (99.9%): [2172587,309, 2195279,956] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 13,86% complete, ETA 01:53:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 31717,674 ops/s
[info] # Warmup Iteration   2: 42196,195 ops/s
[info] # Warmup Iteration   3: 42652,142 ops/s
[info] # Warmup Iteration   4: 42667,214 ops/s
[info] # Warmup Iteration   5: 42310,733 ops/s
[info] Iteration   1: 42733,842 ops/s
[info]                  ·gc.alloc.rate:                   1864,935 MB/sec
[info]                  ·gc.alloc.rate.norm:              68656,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014,266 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74153,509 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,767 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 42915,749 ops/s
[info]                  ·gc.alloc.rate:                   1872,867 MB/sec
[info]                  ·gc.alloc.rate.norm:              68656,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018,254 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73985,658 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,817 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 42891,816 ops/s
[info]                  ·gc.alloc.rate:                   1871,707 MB/sec
[info]                  ·gc.alloc.rate.norm:              68656,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022,750 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74196,425 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,055 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 41969,161 ops/s
[info]                  ·gc.alloc.rate:               1831,431 MB/sec
[info]                  ·gc.alloc.rate.norm:          68656,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1350,288 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 50619,102 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 42567,279 ops/s
[info]                  ·gc.alloc.rate:                   1857,557 MB/sec
[info]                  ·gc.alloc.rate.norm:              68656,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2028,400 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74970,413 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,079 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson":
[info]   42615,569 ±(99.9%) 1492,073 ops/s [Average]
[info]   (min, avg, max) = (41969,161, 42615,569, 42915,749), stdev = 387,487
[info]   CI (99.9%): [41123,497, 44107,642] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1859,699 ±(99.9%) 65,253 MB/sec [Average]
[info]   (min, avg, max) = (1831,431, 1859,699, 1872,867), stdev = 16,946
[info]   CI (99.9%): [1794,446, 1924,952] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   68656,010 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (68656,010, 68656,010, 68656,011), stdev = 0,001
[info]   CI (99.9%): [68656,009, 68656,012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1886,792 ±(99.9%) 1155,042 MB/sec [Average]
[info]   (min, avg, max) = (1350,288, 1886,792, 2028,400), stdev = 299,961
[info]   CI (99.9%): [731,749, 3041,834] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   69585,021 ±(99.9%) 40851,788 B/op [Average]
[info]   (min, avg, max) = (50619,102, 69585,021, 74970,413), stdev = 10609,080
[info]   CI (99.9%): [28733,233, 110436,810] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,058 ±(99.9%) 0,174 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,058, 0,104), stdev = 0,045
[info]   CI (99.9%): [≈ 0, 0,232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2,144 ±(99.9%) 6,385 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,144, 3,817), stdev = 1,658
[info]   CI (99.9%): [≈ 0, 8,528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.time":
[info]   9,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 14,06% complete, ETA 01:53:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 122086,851 ops/s
[info] # Warmup Iteration   2: 133735,946 ops/s
[info] # Warmup Iteration   3: 134452,817 ops/s
[info] # Warmup Iteration   4: 134282,776 ops/s
[info] # Warmup Iteration   5: 134272,910 ops/s
[info] Iteration   1: 134690,299 ops/s
[info]                  ·gc.alloc.rate:                   1226,646 MB/sec
[info]                  ·gc.alloc.rate.norm:              14328,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,790 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15754,716 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,243 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 128839,187 ops/s
[info]                  ·gc.alloc.rate:                   1173,393 MB/sec
[info]                  ·gc.alloc.rate.norm:              14328,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,818 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16470,078 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,017 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 134711,070 ops/s
[info]                  ·gc.alloc.rate:               1226,821 MB/sec
[info]                  ·gc.alloc.rate.norm:          14328,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,684 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7879,612 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 134473,134 ops/s
[info]                  ·gc.alloc.rate:                   1224,640 MB/sec
[info]                  ·gc.alloc.rate.norm:              14328,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350,060 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15795,377 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,244 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 134335,968 ops/s
[info]                  ·gc.alloc.rate:                   1223,369 MB/sec
[info]                  ·gc.alloc.rate.norm:              14328,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1351,012 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15822,953 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,244 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeUPickle":
[info]   133409,932 ±(99.9%) 9857,188 ops/s [Average]
[info]   (min, avg, max) = (128839,187, 133409,932, 134711,070), stdev = 2559,881
[info]   CI (99.9%): [123552,743, 143267,120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeUPickle:·gc.alloc.rate":
[info]   1214,974 ±(99.9%) 89,677 MB/sec [Average]
[info]   (min, avg, max) = (1173,393, 1214,974, 1226,821), stdev = 23,289
[info]   CI (99.9%): [1125,297, 1304,651] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   14328,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (14328,003, 14328,003, 14328,004), stdev = 0,001
[info]   CI (99.9%): [14328,003, 14328,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   1214,673 ±(99.9%) 1162,372 MB/sec [Average]
[info]   (min, avg, max) = (674,684, 1214,673, 1351,012), stdev = 301,864
[info]   CI (99.9%): [52,300, 2377,045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   14344,547 ±(99.9%) 13962,558 B/op [Average]
[info]   (min, avg, max) = (7879,612, 14344,547, 16470,078), stdev = 3626,032
[info]   CI (99.9%): [381,989, 28307,106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,083), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,350 ±(99.9%) 1,493 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,350, 1,017), stdev = 0,388
[info]   CI (99.9%): [≈ 0, 1,843] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeUPickle:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeUPickle:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 14,26% complete, ETA 01:53:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 207370,524 ops/s
[info] # Warmup Iteration   2: 240663,651 ops/s
[info] # Warmup Iteration   3: 245052,730 ops/s
[info] # Warmup Iteration   4: 242812,846 ops/s
[info] # Warmup Iteration   5: 243898,008 ops/s
[info] Iteration   1: 243405,793 ops/s
[info]                  ·gc.alloc.rate:                   2591,857 MB/sec
[info]                  ·gc.alloc.rate.norm:              16752,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2704,370 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17479,210 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,404 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 244486,196 ops/s
[info]                  ·gc.alloc.rate:                   2603,274 MB/sec
[info]                  ·gc.alloc.rate.norm:              16752,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2031,830 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13074,770 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,670 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 245057,676 ops/s
[info]                  ·gc.alloc.rate:                   2609,277 MB/sec
[info]                  ·gc.alloc.rate.norm:              16752,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2712,981 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17417,801 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,535 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 243891,938 ops/s
[info]                  ·gc.alloc.rate:                   2596,969 MB/sec
[info]                  ·gc.alloc.rate.norm:              16752,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2716,467 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17522,834 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,403 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 245211,824 ops/s
[info]                  ·gc.alloc.rate:                   2610,658 MB/sec
[info]                  ·gc.alloc.rate.norm:              16752,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2718,797 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17445,911 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,267 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce":
[info]   244410,685 ±(99.9%) 2948,340 ops/s [Average]
[info]   (min, avg, max) = (243405,793, 244410,685, 245211,824), stdev = 765,674
[info]   CI (99.9%): [241462,346, 247359,025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   2602,407 ±(99.9%) 30,859 MB/sec [Average]
[info]   (min, avg, max) = (2591,857, 2602,407, 2610,658), stdev = 8,014
[info]   CI (99.9%): [2571,548, 2633,266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   16752,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (16752,002, 16752,002, 16752,002), stdev = 0,001
[info]   CI (99.9%): [16752,002, 16752,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2576,889 ±(99.9%) 1173,471 MB/sec [Average]
[info]   (min, avg, max) = (2031,830, 2576,889, 2718,797), stdev = 304,747
[info]   CI (99.9%): [1403,418, 3750,360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   16588,105 ±(99.9%) 7564,220 B/op [Average]
[info]   (min, avg, max) = (13074,770, 16588,105, 17522,834), stdev = 1964,404
[info]   CI (99.9%): [9023,885, 24152,326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,071 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,071, 0,104), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,456 ±(99.9%) 0,588 B/op [Average]
[info]   (min, avg, max) = (0,267, 0,456, 0,670), stdev = 0,153
[info]   CI (99.9%): [≈ 0, 1,043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.count":
[info]   19,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,800, 4,000), stdev = 0,447
[info]   CI (99.9%): [19,000, 19,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.time":
[info]   12,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 2,400, 3,000), stdev = 0,894
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 14,46% complete, ETA 01:53:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 257482,200 ops/s
[info] # Warmup Iteration   2: 351946,056 ops/s
[info] # Warmup Iteration   3: 351860,526 ops/s
[info] # Warmup Iteration   4: 353188,873 ops/s
[info] # Warmup Iteration   5: 353444,422 ops/s
[info] Iteration   1: 353592,010 ops/s
[info]                  ·gc.alloc.rate:               1770,979 MB/sec
[info]                  ·gc.alloc.rate.norm:          7880,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340,079 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5962,704 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 353987,963 ops/s
[info]                  ·gc.alloc.rate:                   1773,050 MB/sec
[info]                  ·gc.alloc.rate.norm:              7880,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014,148 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8951,519 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,463 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 354484,581 ops/s
[info]                  ·gc.alloc.rate:                   1775,473 MB/sec
[info]                  ·gc.alloc.rate.norm:              7880,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,097 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5969,884 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,277 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 352681,756 ops/s
[info]                  ·gc.alloc.rate:                   1766,438 MB/sec
[info]                  ·gc.alloc.rate.norm:              7880,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2021,086 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9015,975 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,186 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 351002,138 ops/s
[info]                  ·gc.alloc.rate:                   1757,966 MB/sec
[info]                  ·gc.alloc.rate.norm:              7880,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2025,929 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9081,134 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,187 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala":
[info]   353149,689 ±(99.9%) 5276,654 ops/s [Average]
[info]   (min, avg, max) = (351002,138, 353149,689, 354484,581), stdev = 1370,330
[info]   CI (99.9%): [347873,035, 358426,344] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1768,781 ±(99.9%) 26,560 MB/sec [Average]
[info]   (min, avg, max) = (1757,966, 1768,781, 1775,473), stdev = 6,897
[info]   CI (99.9%): [1742,221, 1795,341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   7880,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (7880,001, 7880,001, 7880,001), stdev = 0,001
[info]   CI (99.9%): [7880,001, 7880,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1749,268 ±(99.9%) 1429,643 MB/sec [Average]
[info]   (min, avg, max) = (1340,079, 1749,268, 2025,929), stdev = 371,274
[info]   CI (99.9%): [319,625, 3178,911] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   7796,243 ±(99.9%) 6434,956 B/op [Average]
[info]   (min, avg, max) = (5962,704, 7796,243, 9081,134), stdev = 1671,138
[info]   CI (99.9%): [1361,287, 14231,199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,050 ±(99.9%) 0,146 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,050, 0,104), stdev = 0,038
[info]   CI (99.9%): [≈ 0, 0,196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,222 ±(99.9%) 0,647 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,222, 0,463), stdev = 0,168
[info]   CI (99.9%): [≈ 0, 0,869] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.time":
[info]   9,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 14,66% complete, ETA 01:52:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1225756,415 ops/s
[info] # Warmup Iteration   2: 1270505,518 ops/s
[info] # Warmup Iteration   3: 1263578,284 ops/s
[info] # Warmup Iteration   4: 1268349,240 ops/s
[info] # Warmup Iteration   5: 1266037,009 ops/s
[info] Iteration   1: 1260665,007 ops/s
[info]                  ·gc.alloc.rate:               435,898 MB/sec
[info]                  ·gc.alloc.rate.norm:          544,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,765 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 638,683 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 1241116,460 ops/s
[info]                  ·gc.alloc.rate:               429,145 MB/sec
[info]                  ·gc.alloc.rate.norm:          544,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,783 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 648,755 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   3: 1243995,185 ops/s
[info]                  ·gc.alloc.rate:      430,143 MB/sec
[info]                  ·gc.alloc.rate.norm: 544,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1256004,084 ops/s
[info]                  ·gc.alloc.rate:                   434,296 MB/sec
[info]                  ·gc.alloc.rate.norm:              544,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,350 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     843,440 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1,606 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,011 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 1268541,204 ops/s
[info]                  ·gc.alloc.rate:                   438,620 MB/sec
[info]                  ·gc.alloc.rate.norm:              544,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,343 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     835,116 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,077 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala":
[info]   1254064,388 ±(99.9%) 44154,416 ops/s [Average]
[info]   (min, avg, max) = (1241116,460, 1254064,388, 1268541,204), stdev = 11466,762
[info]   CI (99.9%): [1209909,972, 1298218,804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   433,620 ±(99.9%) 15,252 MB/sec [Average]
[info]   (min, avg, max) = (429,145, 433,620, 438,620), stdev = 3,961
[info]   CI (99.9%): [418,368, 448,873] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   544,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (544,000, 544,000, 544,000), stdev = 0,001
[info]   CI (99.9%): [544,000, 544,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   474,048 ±(99.9%) 1066,788 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 474,048, 673,350), stdev = 277,041
[info]   CI (99.9%): [≈ 0, 1540,836] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   593,199 ±(99.9%) 1331,378 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 593,199, 843,440), stdev = 345,755
[info]   CI (99.9%): [≈ 0, 1924,576] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,334 ±(99.9%) 2,740 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,334, 1,606), stdev = 0,712
[info]   CI (99.9%): [≈ 0, 3,074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,418 ±(99.9%) 3,433 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,418, 2,011), stdev = 0,891
[info]   CI (99.9%): [≈ 0, 3,850] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 3,000), stdev = 1,095
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 14,86% complete, ETA 01:52:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 47647,117 ops/s
[info] # Warmup Iteration   2: 88644,711 ops/s
[info] # Warmup Iteration   3: 88894,704 ops/s
[info] # Warmup Iteration   4: 89360,513 ops/s
[info] # Warmup Iteration   5: 88967,791 ops/s
[info] Iteration   1: 88995,257 ops/s
[info]                  ·gc.alloc.rate:                   3624,836 MB/sec
[info]                  ·gc.alloc.rate.norm:              64080,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3379,842 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     59748,994 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,736 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   2: 89595,856 ops/s
[info]                  ·gc.alloc.rate:                   3649,338 MB/sec
[info]                  ·gc.alloc.rate.norm:              64080,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3389,159 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     59511,433 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,828 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   3: 88702,928 ops/s
[info]                  ·gc.alloc.rate:                   3612,803 MB/sec
[info]                  ·gc.alloc.rate.norm:              64080,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4074,709 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72272,794 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,477 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   4: 89668,170 ops/s
[info]                  ·gc.alloc.rate:                   3652,322 MB/sec
[info]                  ·gc.alloc.rate.norm:              64080,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3400,764 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     59666,406 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,096 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   5: 88864,394 ops/s
[info]                  ·gc.alloc.rate:                   3619,557 MB/sec
[info]                  ·gc.alloc.rate.norm:              64080,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3403,846 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60261,090 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,212 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson":
[info]   89165,321 ±(99.9%) 1691,112 ops/s [Average]
[info]   (min, avg, max) = (88702,928, 89165,321, 89668,170), stdev = 439,176
[info]   CI (99.9%): [87474,209, 90856,433] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3631,771 ±(99.9%) 69,098 MB/sec [Average]
[info]   (min, avg, max) = (3612,803, 3631,771, 3652,322), stdev = 17,945
[info]   CI (99.9%): [3562,673, 3700,869] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   64080,005 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (64080,005, 64080,005, 64080,005), stdev = 0,001
[info]   CI (99.9%): [64080,005, 64080,005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3529,664 ±(99.9%) 1173,827 MB/sec [Average]
[info]   (min, avg, max) = (3379,842, 3529,664, 4074,709), stdev = 304,839
[info]   CI (99.9%): [2355,837, 4703,490] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   62292,143 ±(99.9%) 21511,371 B/op [Average]
[info]   (min, avg, max) = (59511,433, 62292,143, 72272,794), stdev = 5586,435
[info]   CI (99.9%): [40780,773, 83803,514] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,083 ±(99.9%) 0,127 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,083, 0,125), stdev = 0,033
[info]   CI (99.9%): [≈ 0, 0,210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1,470 ±(99.9%) 2,243 B/op [Average]
[info]   (min, avg, max) = (0,736, 1,470, 2,212), stdev = 0,582
[info]   CI (99.9%): [≈ 0, 3,713] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.count":
[info]   26,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (5,000, 5,200, 6,000), stdev = 0,447
[info]   CI (99.9%): [26,000, 26,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.time":
[info]   19,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 3,800, 4,000), stdev = 0,447
[info]   CI (99.9%): [19,000, 19,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 15,06% complete, ETA 01:52:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 145526,960 ops/s
[info] # Warmup Iteration   2: 159737,793 ops/s
[info] # Warmup Iteration   3: 161386,014 ops/s
[info] # Warmup Iteration   4: 159110,725 ops/s
[info] # Warmup Iteration   5: 159970,111 ops/s
[info] Iteration   1: 161331,212 ops/s
[info]                  ·gc.alloc.rate:                   2234,662 MB/sec
[info]                  ·gc.alloc.rate.norm:              21792,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2702,834 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26357,527 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,812 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 161168,895 ops/s
[info]                  ·gc.alloc.rate:                   2232,443 MB/sec
[info]                  ·gc.alloc.rate.norm:              21792,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2030,530 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19821,029 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,813 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 160577,990 ops/s
[info]                  ·gc.alloc.rate:                   2224,155 MB/sec
[info]                  ·gc.alloc.rate.norm:              21792,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2033,359 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19922,605 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,612 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 160425,789 ops/s
[info]                  ·gc.alloc.rate:                   2222,100 MB/sec
[info]                  ·gc.alloc.rate.norm:              21792,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2034,750 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19954,672 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,204 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 159232,664 ops/s
[info]                  ·gc.alloc.rate:                   2205,661 MB/sec
[info]                  ·gc.alloc.rate.norm:              21792,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2716,962 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26843,683 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,412 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readUPickle":
[info]   160547,310 ±(99.9%) 3189,807 ops/s [Average]
[info]   (min, avg, max) = (159232,664, 160547,310, 161331,212), stdev = 828,383
[info]   CI (99.9%): [157357,503, 163737,117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readUPickle:·gc.alloc.rate":
[info]   2223,804 ±(99.9%) 44,104 MB/sec [Average]
[info]   (min, avg, max) = (2205,661, 2223,804, 2234,662), stdev = 11,454
[info]   CI (99.9%): [2179,700, 2267,908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   21792,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (21792,003, 21792,003, 21792,003), stdev = 0,001
[info]   CI (99.9%): [21792,002, 21792,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   2303,687 ±(99.9%) 1428,032 MB/sec [Average]
[info]   (min, avg, max) = (2030,530, 2303,687, 2716,962), stdev = 370,855
[info]   CI (99.9%): [875,655, 3731,719] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   22579,903 ±(99.9%) 14150,098 B/op [Average]
[info]   (min, avg, max) = (19821,029, 22579,903, 26843,683), stdev = 3674,736
[info]   CI (99.9%): [8429,805, 36730,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,058 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,058, 0,083), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,571 ±(99.9%) 1,016 B/op [Average]
[info]   (min, avg, max) = (0,204, 0,571, 0,813), stdev = 0,264
[info]   CI (99.9%): [≈ 0, 1,587] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readUPickle:·gc.count":
[info]   17,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,400, 4,000), stdev = 0,548
[info]   CI (99.9%): [17,000, 17,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readUPickle:·gc.time":
[info]   9,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 15,26% complete, ETA 01:52:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 183625,053 ops/s
[info] # Warmup Iteration   2: 237506,669 ops/s
[info] # Warmup Iteration   3: 243607,308 ops/s
[info] # Warmup Iteration   4: 245729,353 ops/s
[info] # Warmup Iteration   5: 235296,352 ops/s
[info] Iteration   1: 245549,237 ops/s
[info]                  ·gc.alloc.rate:                   2418,536 MB/sec
[info]                  ·gc.alloc.rate.norm:              15496,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022,073 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12955,793 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,267 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 243688,201 ops/s
[info]                  ·gc.alloc.rate:                   2399,973 MB/sec
[info]                  ·gc.alloc.rate.norm:              15496,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2701,251 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17441,275 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,403 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 243535,461 ops/s
[info]                  ·gc.alloc.rate:                   2398,640 MB/sec
[info]                  ·gc.alloc.rate.norm:              15496,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2707,844 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17493,559 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,538 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 245486,291 ops/s
[info]                  ·gc.alloc.rate:                   2417,927 MB/sec
[info]                  ·gc.alloc.rate.norm:              15496,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2033,794 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13034,171 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,267 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 245469,613 ops/s
[info]                  ·gc.alloc.rate:                   2417,678 MB/sec
[info]                  ·gc.alloc.rate.norm:              15496,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2715,388 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17404,159 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,133 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce":
[info]   244745,761 ±(99.9%) 3992,981 ops/s [Average]
[info]   (min, avg, max) = (243535,461, 244745,761, 245549,237), stdev = 1036,964
[info]   CI (99.9%): [240752,780, 248738,741] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   2410,551 ±(99.9%) 39,585 MB/sec [Average]
[info]   (min, avg, max) = (2398,640, 2410,551, 2418,536), stdev = 10,280
[info]   CI (99.9%): [2370,966, 2450,136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   15496,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (15496,002, 15496,002, 15496,002), stdev = 0,001
[info]   CI (99.9%): [15496,002, 15496,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2436,070 ±(99.9%) 1434,875 MB/sec [Average]
[info]   (min, avg, max) = (2022,073, 2436,070, 2715,388), stdev = 372,633
[info]   CI (99.9%): [1001,195, 3870,945] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   15665,791 ±(99.9%) 9389,674 B/op [Average]
[info]   (min, avg, max) = (12955,793, 15665,791, 17493,559), stdev = 2438,468
[info]   CI (99.9%): [6276,118, 25055,465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,050 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,050, 0,083), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,322 ±(99.9%) 0,593 B/op [Average]
[info]   (min, avg, max) = (0,133, 0,322, 0,538), stdev = 0,154
[info]   CI (99.9%): [≈ 0, 0,915] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.count":
[info]   18,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,600, 4,000), stdev = 0,548
[info]   CI (99.9%): [18,000, 18,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.time":
[info]   11,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 2,200, 3,000), stdev = 0,837
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 15,46% complete, ETA 01:51:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 977064,644 ops/s
[info] # Warmup Iteration   2: 1297424,691 ops/s
[info] # Warmup Iteration   3: 1292441,336 ops/s
[info] # Warmup Iteration   4: 1301673,198 ops/s
[info] # Warmup Iteration   5: 1297726,265 ops/s
[info] Iteration   1: 1293427,924 ops/s
[info]                  ·gc.alloc.rate:                   756,332 MB/sec
[info]                  ·gc.alloc.rate.norm:              920,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336,073 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1625,195 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,158 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,624 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 1300646,853 ops/s
[info]                  ·gc.alloc.rate:               760,542 MB/sec
[info]                  ·gc.alloc.rate.norm:          920,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668,357 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 808,487 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 1297635,183 ops/s
[info]                  ·gc.alloc.rate:               758,800 MB/sec
[info]                  ·gc.alloc.rate.norm:          920,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668,378 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 810,369 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 1302542,219 ops/s
[info]                  ·gc.alloc.rate:                   761,614 MB/sec
[info]                  ·gc.alloc.rate.norm:              920,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668,288 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     807,266 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,050 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 1234886,645 ops/s
[info]                  ·gc.alloc.rate:               722,119 MB/sec
[info]                  ·gc.alloc.rate.norm:          920,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668,383 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 851,539 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala":
[info]   1285827,765 ±(99.9%) 110452,980 ops/s [Average]
[info]   (min, avg, max) = (1234886,645, 1285827,765, 1302542,219), stdev = 28684,288
[info]   CI (99.9%): [1175374,785, 1396280,745] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   751,881 ±(99.9%) 64,526 MB/sec [Average]
[info]   (min, avg, max) = (722,119, 751,881, 761,614), stdev = 16,757
[info]   CI (99.9%): [687,356, 816,407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   920,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (920,000, 920,000, 920,000), stdev = 0,001
[info]   CI (99.9%): [920,000, 920,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   801,896 ±(99.9%) 1149,857 MB/sec [Average]
[info]   (min, avg, max) = (668,288, 801,896, 1336,073), stdev = 298,614
[info]   CI (99.9%): [≈ 0, 1951,753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   980,571 ±(99.9%) 1389,445 B/op [Average]
[info]   (min, avg, max) = (807,266, 980,571, 1625,195), stdev = 360,834
[info]   CI (99.9%): [≈ 0, 2370,016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,440 ±(99.9%) 3,698 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,440, 2,158), stdev = 0,960
[info]   CI (99.9%): [≈ 0, 4,138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,535 ±(99.9%) 4,499 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,535, 2,624), stdev = 1,168
[info]   CI (99.9%): [≈ 0, 5,033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 15,66% complete, ETA 01:51:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2840486,220 ops/s
[info] # Warmup Iteration   2: 2736052,079 ops/s
[info] # Warmup Iteration   3: 2983765,125 ops/s
[info] # Warmup Iteration   4: 3024929,733 ops/s
[info] # Warmup Iteration   5: 3041501,422 ops/s
[info] Iteration   1: 3036581,976 ops/s
[info]                  ·gc.alloc.rate:                   1034,530 MB/sec
[info]                  ·gc.alloc.rate.norm:              536,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     697,408 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,022 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 3037228,500 ops/s
[info]                  ·gc.alloc.rate:                   1034,753 MB/sec
[info]                  ·gc.alloc.rate.norm:              536,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,031 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     697,242 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,043 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 2895385,923 ops/s
[info]                  ·gc.alloc.rate:               986,423 MB/sec
[info]                  ·gc.alloc.rate.norm:          536,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,693 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 366,070 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 3036401,109 ops/s
[info]                  ·gc.alloc.rate:                   1034,487 MB/sec
[info]                  ·gc.alloc.rate.norm:              536,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,716 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     698,294 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,011 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 2996524,311 ops/s
[info]                  ·gc.alloc.rate:               1020,854 MB/sec
[info]                  ·gc.alloc.rate.norm:          536,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 353,895 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala":
[info]   3000424,364 ±(99.9%) 235838,407 ops/s [Average]
[info]   (min, avg, max) = (2895385,923, 3000424,364, 3037228,500), stdev = 61246,485
[info]   CI (99.9%): [2764585,956, 3236262,771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1022,209 ±(99.9%) 80,366 MB/sec [Average]
[info]   (min, avg, max) = (986,423, 1022,209, 1034,753), stdev = 20,871
[info]   CI (99.9%): [941,843, 1102,576] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   536,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (536,000, 536,000, 536,000), stdev = 0,001
[info]   CI (99.9%): [536,000, 536,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1077,505 ±(99.9%) 1418,881 MB/sec [Average]
[info]   (min, avg, max) = (673,693, 1077,505, 1347,716), stdev = 368,479
[info]   CI (99.9%): [≈ 0, 2496,385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   562,582 ±(99.9%) 712,360 B/op [Average]
[info]   (min, avg, max) = (353,895, 562,582, 698,294), stdev = 184,998
[info]   CI (99.9%): [≈ 0, 1274,941] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,134 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,083), stdev = 0,035
[info]   CI (99.9%): [≈ 0, 0,163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,015 ±(99.9%) 0,070 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,015, 0,043), stdev = 0,018
[info]   CI (99.9%): [≈ 0, 0,085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 15,86% complete, ETA 01:51:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2613199,489 ops/s
[info] # Warmup Iteration   2: 2779059,945 ops/s
[info] # Warmup Iteration   3: 2711755,310 ops/s
[info] # Warmup Iteration   4: 2713350,438 ops/s
[info] # Warmup Iteration   5: 2712258,915 ops/s
[info] Iteration   1: 2716214,703 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2713394,553 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2718123,581 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2714466,021 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2694337,692 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   2711307,310 ±(99.9%) 37176,468 ops/s [Average]
[info]   (min, avg, max) = (2694337,692, 2711307,310, 2718123,581), stdev = 9654,611
[info]   CI (99.9%): [2674130,842, 2748483,778] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 16,06% complete, ETA 01:51:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 210254,523 ops/s
[info] # Warmup Iteration   2: 308560,050 ops/s
[info] # Warmup Iteration   3: 309311,254 ops/s
[info] # Warmup Iteration   4: 308861,249 ops/s
[info] # Warmup Iteration   5: 297443,029 ops/s
[info] Iteration   1: 307487,291 ops/s
[info]                  ·gc.alloc.rate:                   2517,350 MB/sec
[info]                  ·gc.alloc.rate.norm:              12880,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016,864 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10319,267 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,213 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 309431,712 ops/s
[info]                  ·gc.alloc.rate:                   2533,227 MB/sec
[info]                  ·gc.alloc.rate.norm:              12880,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2696,030 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13707,762 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,318 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 308801,577 ops/s
[info]                  ·gc.alloc.rate:                   2528,181 MB/sec
[info]                  ·gc.alloc.rate.norm:              12880,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2703,487 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13773,110 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,318 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 308527,646 ops/s
[info]                  ·gc.alloc.rate:                   2525,740 MB/sec
[info]                  ·gc.alloc.rate.norm:              12880,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2709,307 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13816,099 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,106 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 308565,483 ops/s
[info]                  ·gc.alloc.rate:                   2526,200 MB/sec
[info]                  ·gc.alloc.rate.norm:              12880,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2035,824 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10379,788 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,212 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson":
[info]   308562,742 ±(99.9%) 2702,307 ops/s [Average]
[info]   (min, avg, max) = (307487,291, 308562,742, 309431,712), stdev = 701,781
[info]   CI (99.9%): [305860,434, 311265,049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2526,140 ±(99.9%) 22,105 MB/sec [Average]
[info]   (min, avg, max) = (2517,350, 2526,140, 2533,227), stdev = 5,741
[info]   CI (99.9%): [2504,035, 2548,245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   12880,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (12880,001, 12880,001, 12880,002), stdev = 0,001
[info]   CI (99.9%): [12880,001, 12880,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2432,302 ±(99.9%) 1427,349 MB/sec [Average]
[info]   (min, avg, max) = (2016,864, 2432,302, 2709,307), stdev = 370,678
[info]   CI (99.9%): [1004,953, 3859,651] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   12399,205 ±(99.9%) 7206,907 B/op [Average]
[info]   (min, avg, max) = (10319,267, 12399,205, 13816,099), stdev = 1871,611
[info]   CI (99.9%): [5192,298, 19606,112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,046 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,046, 0,062), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,234 ±(99.9%) 0,341 B/op [Average]
[info]   (min, avg, max) = (0,106, 0,234, 0,318), stdev = 0,089
[info]   CI (99.9%): [≈ 0, 0,574] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.count":
[info]   18,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,600, 4,000), stdev = 0,548
[info]   CI (99.9%): [18,000, 18,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.time":
[info]   14,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 16,27% complete, ETA 01:50:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 92734,370 ops/s
[info] # Warmup Iteration   2: 96971,482 ops/s
[info] # Warmup Iteration   3: 96018,436 ops/s
[info] # Warmup Iteration   4: 97316,776 ops/s
[info] # Warmup Iteration   5: 97250,818 ops/s
[info] Iteration   1: 96341,094 ops/s
[info]                  ·gc.alloc.rate:                   916,086 MB/sec
[info]                  ·gc.alloc.rate.norm:              14960,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,375 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11012,785 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,340 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 97013,638 ops/s
[info]                  ·gc.alloc.rate:                   922,485 MB/sec
[info]                  ·gc.alloc.rate.norm:              14960,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,363 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21866,496 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,351 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 97214,940 ops/s
[info]                  ·gc.alloc.rate:               924,414 MB/sec
[info]                  ·gc.alloc.rate.norm:          14960,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,028 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10907,951 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 97519,460 ops/s
[info]                  ·gc.alloc.rate:               927,378 MB/sec
[info]                  ·gc.alloc.rate.norm:          14960,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,435 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10879,664 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 96873,352 ops/s
[info]                  ·gc.alloc.rate:                   921,139 MB/sec
[info]                  ·gc.alloc.rate.norm:              14960,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1349,008 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21908,912 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,015 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeUPickle":
[info]   96992,497 ±(99.9%) 1685,222 ops/s [Average]
[info]   (min, avg, max) = (96341,094, 96992,497, 97519,460), stdev = 437,647
[info]   CI (99.9%): [95307,275, 98677,719] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   922,301 ±(99.9%) 16,137 MB/sec [Average]
[info]   (min, avg, max) = (916,086, 922,301, 927,378), stdev = 4,191
[info]   CI (99.9%): [906,164, 938,437] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   14960,005 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (14960,004, 14960,005, 14960,005), stdev = 0,001
[info]   CI (99.9%): [14960,004, 14960,005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   944,042 ±(99.9%) 1422,379 MB/sec [Average]
[info]   (min, avg, max) = (674,028, 944,042, 1349,008), stdev = 369,387
[info]   CI (99.9%): [≈ 0, 2366,421] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   15315,162 ±(99.9%) 23104,273 B/op [Average]
[info]   (min, avg, max) = (10879,664, 15315,162, 21908,912), stdev = 6000,106
[info]   CI (99.9%): [≈ 0, 38419,435] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,146 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,083), stdev = 0,038
[info]   CI (99.9%): [≈ 0, 0,179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,541 ±(99.9%) 2,363 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,541, 1,351), stdev = 0,614
[info]   CI (99.9%): [≈ 0, 2,904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeUPickle:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeUPickle:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 16,47% complete, ETA 01:50:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 23279,566 ops/s
[info] # Warmup Iteration   2: 28143,523 ops/s
[info] # Warmup Iteration   3: 28233,523 ops/s
[info] # Warmup Iteration   4: 28438,041 ops/s
[info] # Warmup Iteration   5: 28341,770 ops/s
[info] Iteration   1: 28178,579 ops/s
[info]                  ·gc.alloc.rate:                   1775,753 MB/sec
[info]                  ·gc.alloc.rate.norm:              99144,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,727 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     75190,608 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,163 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 27869,564 ops/s
[info]                  ·gc.alloc.rate:                   1756,250 MB/sec
[info]                  ·gc.alloc.rate.norm:              99144,017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022,717 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     114186,635 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7,053 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 28331,706 ops/s
[info]                  ·gc.alloc.rate:                   1785,411 MB/sec
[info]                  ·gc.alloc.rate.norm:              99144,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2025,966 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     112502,041 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,469 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 26447,512 ops/s
[info]                  ·gc.alloc.rate:                   1666,715 MB/sec
[info]                  ·gc.alloc.rate.norm:              99144,016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,744 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     80467,595 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,239 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 28252,466 ops/s
[info]                  ·gc.alloc.rate:                   1780,319 MB/sec
[info]                  ·gc.alloc.rate.norm:              99144,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2031,714 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     113143,937 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6,958 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce":
[info]   27815,965 ±(99.9%) 3021,925 ops/s [Average]
[info]   (min, avg, max) = (26447,512, 27815,965, 28331,706), stdev = 784,784
[info]   CI (99.9%): [24794,040, 30837,890] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate":
[info]   1752,890 ±(99.9%) 190,307 MB/sec [Average]
[info]   (min, avg, max) = (1666,715, 1752,890, 1785,411), stdev = 49,422
[info]   CI (99.9%): [1562,583, 1943,197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   99144,016 ±(99.9%) 0,003 B/op [Average]
[info]   (min, avg, max) = (99144,015, 99144,016, 99144,017), stdev = 0,001
[info]   CI (99.9%): [99144,013, 99144,018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1755,974 ±(99.9%) 1428,061 MB/sec [Average]
[info]   (min, avg, max) = (1346,727, 1755,974, 2031,714), stdev = 370,863
[info]   CI (99.9%): [327,912, 3184,035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   99098,163 ±(99.9%) 75143,788 B/op [Average]
[info]   (min, avg, max) = (75190,608, 99098,163, 114186,635), stdev = 19514,603
[info]   CI (99.9%): [23954,375, 174241,951] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,071 ±(99.9%) 0,201 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,071, 0,125), stdev = 0,052
[info]   CI (99.9%): [≈ 0, 0,272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3,976 ±(99.9%) 11,231 B/op [Average]
[info]   (min, avg, max) = (1,163, 3,976, 7,053), stdev = 2,917
[info]   CI (99.9%): [≈ 0, 15,207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.time":
[info]   9,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 16,67% complete, ETA 01:50:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6069,824 ops/s
[info] # Warmup Iteration   2: 100162,008 ops/s
[info] # Warmup Iteration   3: 100718,388 ops/s
[info] # Warmup Iteration   4: 100318,213 ops/s
[info] # Warmup Iteration   5: 100506,963 ops/s
[info] Iteration   1: 100588,561 ops/s
[info]                  ·gc.alloc.rate:                   948,847 MB/sec
[info]                  ·gc.alloc.rate.norm:              14840,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665,432 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10407,379 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,006 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,099 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 100794,843 ops/s
[info]                  ·gc.alloc.rate:               950,785 MB/sec
[info]                  ·gc.alloc.rate.norm:          14840,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665,422 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10386,009 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 99971,455 ops/s
[info]                  ·gc.alloc.rate:                   943,022 MB/sec
[info]                  ·gc.alloc.rate.norm:              14840,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333,521 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20985,154 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,016 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,257 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 100719,813 ops/s
[info]                  ·gc.alloc.rate:                   950,097 MB/sec
[info]                  ·gc.alloc.rate.norm:              14840,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668,081 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10435,068 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,006 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,098 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 91402,346 ops/s
[info]                  ·gc.alloc.rate:               862,176 MB/sec
[info]                  ·gc.alloc.rate.norm:          14840,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337,146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23015,312 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava":
[info]   98695,403 ±(99.9%) 15748,489 ops/s [Average]
[info]   (min, avg, max) = (91402,346, 98695,403, 100794,843), stdev = 4089,833
[info]   CI (99.9%): [82946,915, 114443,892] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   930,985 ±(99.9%) 148,586 MB/sec [Average]
[info]   (min, avg, max) = (862,176, 930,985, 950,785), stdev = 38,587
[info]   CI (99.9%): [782,399, 1079,572] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   14840,004 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (14840,004, 14840,004, 14840,005), stdev = 0,001
[info]   CI (99.9%): [14840,004, 14840,005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   933,920 ±(99.9%) 1411,038 MB/sec [Average]
[info]   (min, avg, max) = (665,422, 933,920, 1337,146), stdev = 366,442
[info]   CI (99.9%): [≈ 0, 2344,958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   15045,784 ±(99.9%) 24601,705 B/op [Average]
[info]   (min, avg, max) = (10386,009, 15045,784, 23015,312), stdev = 6388,985
[info]   CI (99.9%): [≈ 0, 39647,489] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,006 ±(99.9%) 0,026 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,006, 0,016), stdev = 0,007
[info]   CI (99.9%): [≈ 0, 0,032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0,091 ±(99.9%) 0,405 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,091, 0,257), stdev = 0,105
[info]   CI (99.9%): [≈ 0, 0,496] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.time":
[info]   11,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 2,200, 3,000), stdev = 0,837
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 16,87% complete, ETA 01:50:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 45881,982 ops/s
[info] # Warmup Iteration   2: 64199,193 ops/s
[info] # Warmup Iteration   3: 64369,835 ops/s
[info] # Warmup Iteration   4: 64913,935 ops/s
[info] # Warmup Iteration   5: 64829,546 ops/s
[info] Iteration   1: 64860,985 ops/s
[info]                  ·gc.alloc.rate:                   1137,181 MB/sec
[info]                  ·gc.alloc.rate.norm:              27584,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336,715 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32424,020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,020 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 63571,718 ops/s
[info]                  ·gc.alloc.rate:               1114,574 MB/sec
[info]                  ·gc.alloc.rate.norm:          27584,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668,340 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16540,406 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 64512,098 ops/s
[info]                  ·gc.alloc.rate:                   1131,091 MB/sec
[info]                  ·gc.alloc.rate.norm:              27584,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338,102 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32632,404 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,031 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 64883,895 ops/s
[info]                  ·gc.alloc.rate:                   1137,642 MB/sec
[info]                  ·gc.alloc.rate.norm:              27584,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,178 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32494,820 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,515 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 62473,241 ops/s
[info]                  ·gc.alloc.rate:               1095,345 MB/sec
[info]                  ·gc.alloc.rate.norm:          27584,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670,737 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16891,133 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala":
[info]   64060,387 ±(99.9%) 3983,601 ops/s [Average]
[info]   (min, avg, max) = (62473,241, 64060,387, 64883,895), stdev = 1034,528
[info]   CI (99.9%): [60076,787, 68043,988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1123,167 ±(99.9%) 69,860 MB/sec [Average]
[info]   (min, avg, max) = (1095,345, 1123,167, 1137,642), stdev = 18,142
[info]   CI (99.9%): [1053,307, 1193,026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   27584,007 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (27584,007, 27584,007, 27584,007), stdev = 0,001
[info]   CI (99.9%): [27584,006, 27584,008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1070,815 ±(99.9%) 1410,553 MB/sec [Average]
[info]   (min, avg, max) = (668,340, 1070,815, 1340,178), stdev = 366,316
[info]   CI (99.9%): [≈ 0, 2481,367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   26196,557 ±(99.9%) 33330,972 B/op [Average]
[info]   (min, avg, max) = (16540,406, 26196,557, 32632,404), stdev = 8655,948
[info]   CI (99.9%): [≈ 0, 59527,528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,046 ±(99.9%) 0,164 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,046, 0,083), stdev = 0,043
[info]   CI (99.9%): [≈ 0, 0,210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1,113 ±(99.9%) 3,995 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,113, 2,031), stdev = 1,038
[info]   CI (99.9%): [≈ 0, 5,109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 17,07% complete, ETA 01:49:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 121299,603 ops/s
[info] # Warmup Iteration   2: 130315,258 ops/s
[info] # Warmup Iteration   3: 130174,152 ops/s
[info] # Warmup Iteration   4: 130655,229 ops/s
[info] # Warmup Iteration   5: 130777,075 ops/s
[info] Iteration   1: 130198,525 ops/s
[info]                  ·gc.alloc.rate:                   875,874 MB/sec
[info]                  ·gc.alloc.rate.norm:              10584,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,353 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16281,336 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,510 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 130527,500 ops/s
[info]                  ·gc.alloc.rate:               878,101 MB/sec
[info]                  ·gc.alloc.rate.norm:          10584,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,688 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8120,153 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 130365,017 ops/s
[info]                  ·gc.alloc.rate:                   876,990 MB/sec
[info]                  ·gc.alloc.rate.norm:              10584,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,666 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8130,179 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,251 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 129058,416 ops/s
[info]                  ·gc.alloc.rate:                   868,215 MB/sec
[info]                  ·gc.alloc.rate.norm:              10584,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,377 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16425,251 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,762 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 130447,357 ops/s
[info]                  ·gc.alloc.rate:               877,530 MB/sec
[info]                  ·gc.alloc.rate.norm:          10584,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,683 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8125,381 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala":
[info]   130119,363 ±(99.9%) 2331,450 ops/s [Average]
[info]   (min, avg, max) = (129058,416, 130119,363, 130527,500), stdev = 605,470
[info]   CI (99.9%): [127787,913, 132450,813] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   875,342 ±(99.9%) 15,665 MB/sec [Average]
[info]   (min, avg, max) = (868,215, 875,342, 878,101), stdev = 4,068
[info]   CI (99.9%): [859,677, 891,007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   10584,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (10584,003, 10584,003, 10584,004), stdev = 0,001
[info]   CI (99.9%): [10584,003, 10584,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   943,154 ±(99.9%) 1420,861 MB/sec [Average]
[info]   (min, avg, max) = (673,666, 943,154, 1347,377), stdev = 368,993
[info]   CI (99.9%): [≈ 0, 2364,014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   11416,460 ±(99.9%) 17354,776 B/op [Average]
[info]   (min, avg, max) = (8120,153, 11416,460, 16425,251), stdev = 4506,980
[info]   CI (99.9%): [≈ 0, 28771,236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,204 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,042, 0,125), stdev = 0,053
[info]   CI (99.9%): [≈ 0, 0,246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,505 ±(99.9%) 2,473 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,505, 1,510), stdev = 0,642
[info]   CI (99.9%): [≈ 0, 2,977] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 17,27% complete, ETA 01:49:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24135,472 ops/s
[info] # Warmup Iteration   2: 37690,806 ops/s
[info] # Warmup Iteration   3: 37978,170 ops/s
[info] # Warmup Iteration   4: 37516,426 ops/s
[info] # Warmup Iteration   5: 38017,721 ops/s
[info] Iteration   1: 37943,473 ops/s
[info]                  ·gc.alloc.rate:                   1942,350 MB/sec
[info]                  ·gc.alloc.rate.norm:              80536,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012,711 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     83453,410 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,317 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 38075,982 ops/s
[info]                  ·gc.alloc.rate:                   1949,149 MB/sec
[info]                  ·gc.alloc.rate.norm:              80536,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016,754 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     83329,358 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,442 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 37924,689 ops/s
[info]                  ·gc.alloc.rate:                   1941,499 MB/sec
[info]                  ·gc.alloc.rate.norm:              80536,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2021,114 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     83838,536 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,728 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 36922,844 ops/s
[info]                  ·gc.alloc.rate:                   1890,243 MB/sec
[info]                  ·gc.alloc.rate.norm:              80536,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2025,361 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86292,853 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,887 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 37966,510 ops/s
[info]                  ·gc.alloc.rate:                   1943,517 MB/sec
[info]                  ·gc.alloc.rate.norm:              80536,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029,026 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     84079,366 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,863 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson":
[info]   37766,700 ±(99.9%) 1830,454 ops/s [Average]
[info]   (min, avg, max) = (36922,844, 37766,700, 38075,982), stdev = 475,363
[info]   CI (99.9%): [35936,245, 39597,154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1933,352 ±(99.9%) 93,503 MB/sec [Average]
[info]   (min, avg, max) = (1890,243, 1933,352, 1949,149), stdev = 24,282
[info]   CI (99.9%): [1839,849, 2026,854] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   80536,012 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (80536,011, 80536,012, 80536,012), stdev = 0,001
[info]   CI (99.9%): [80536,010, 80536,013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2020,993 ±(99.9%) 25,117 MB/sec [Average]
[info]   (min, avg, max) = (2012,711, 2020,993, 2029,026), stdev = 6,523
[info]   CI (99.9%): [1995,876, 2046,110] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   84198,704 ±(99.9%) 4653,009 B/op [Average]
[info]   (min, avg, max) = (83329,358, 84198,704, 86292,853), stdev = 1208,372
[info]   CI (99.9%): [79545,696, 88851,713] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,054 ±(99.9%) 0,146 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,054, 0,104), stdev = 0,038
[info]   CI (99.9%): [≈ 0, 0,200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2,247 ±(99.9%) 6,011 B/op [Average]
[info]   (min, avg, max) = (0,863, 2,247, 4,317), stdev = 1,561
[info]   CI (99.9%): [≈ 0, 8,258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.count":
[info]   15,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,000, 3,000), stdev = 0,001
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.time":
[info]   10,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 2,000, 3,000), stdev = 0,707
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 17,47% complete, ETA 01:49:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 52981,320 ops/s
[info] # Warmup Iteration   2: 59121,225 ops/s
[info] # Warmup Iteration   3: 59256,834 ops/s
[info] # Warmup Iteration   4: 59373,026 ops/s
[info] # Warmup Iteration   5: 59464,674 ops/s
[info] Iteration   1: 59452,859 ops/s
[info]                  ·gc.alloc.rate:                   1324,097 MB/sec
[info]                  ·gc.alloc.rate.norm:              35040,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,045 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35673,768 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,551 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 59597,817 ops/s
[info]                  ·gc.alloc.rate:                   1327,352 MB/sec
[info]                  ·gc.alloc.rate.norm:              35040,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,762 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35605,178 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,649 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 57249,838 ops/s
[info]                  ·gc.alloc.rate:               1275,098 MB/sec
[info]                  ·gc.alloc.rate.norm:          35040,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,398 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 18532,613 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 59413,208 ops/s
[info]                  ·gc.alloc.rate:                   1323,238 MB/sec
[info]                  ·gc.alloc.rate.norm:              35040,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350,009 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35748,914 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,103 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 56236,809 ops/s
[info]                  ·gc.alloc.rate:               1252,552 MB/sec
[info]                  ·gc.alloc.rate.norm:          35040,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1351,402 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 37805,332 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readUPickle":
[info]   58390,106 ±(99.9%) 5956,576 ops/s [Average]
[info]   (min, avg, max) = (56236,809, 58390,106, 59597,817), stdev = 1546,904
[info]   CI (99.9%): [52433,530, 64346,682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readUPickle:·gc.alloc.rate":
[info]   1300,467 ±(99.9%) 132,542 MB/sec [Average]
[info]   (min, avg, max) = (1252,552, 1300,467, 1327,352), stdev = 34,421
[info]   CI (99.9%): [1167,925, 1433,010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   35040,007 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (35040,007, 35040,007, 35040,008), stdev = 0,001
[info]   CI (99.9%): [35040,007, 35040,008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1214,523 ±(99.9%) 1162,671 MB/sec [Average]
[info]   (min, avg, max) = (674,398, 1214,523, 1351,402), stdev = 301,942
[info]   CI (99.9%): [51,852, 2377,194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   32673,161 ±(99.9%) 30645,591 B/op [Average]
[info]   (min, avg, max) = (18532,613, 32673,161, 37805,332), stdev = 7958,563
[info]   CI (99.9%): [2027,570, 63318,752] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,661 ±(99.9%) 2,762 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,661, 1,649), stdev = 0,717
[info]   CI (99.9%): [≈ 0, 3,422] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readUPickle:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readUPickle:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 17,67% complete, ETA 01:48:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 32359,816 ops/s
[info] # Warmup Iteration   2: 43609,427 ops/s
[info] # Warmup Iteration   3: 43288,251 ops/s
[info] # Warmup Iteration   4: 43475,253 ops/s
[info] # Warmup Iteration   5: 43401,203 ops/s
[info] Iteration   1: 43386,816 ops/s
[info]                  ·gc.alloc.rate:                   684,546 MB/sec
[info]                  ·gc.alloc.rate.norm:              24824,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670,679 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24321,144 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1,814 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 65,777 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 43590,290 ops/s
[info]                  ·gc.alloc.rate:                   687,746 MB/sec
[info]                  ·gc.alloc.rate.norm:              24824,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670,646 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24206,788 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,752 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 43571,569 ops/s
[info]                  ·gc.alloc.rate:                   687,465 MB/sec
[info]                  ·gc.alloc.rate.norm:              24824,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670,346 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24205,866 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,752 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 43380,138 ops/s
[info]                  ·gc.alloc.rate:               684,445 MB/sec
[info]                  ·gc.alloc.rate.norm:          24824,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670,309 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24311,303 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 43447,522 ops/s
[info]                  ·gc.alloc.rate:                   685,513 MB/sec
[info]                  ·gc.alloc.rate.norm:              24824,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670,684 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24287,004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,508 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce":
[info]   43475,267 ±(99.9%) 385,772 ops/s [Average]
[info]   (min, avg, max) = (43380,138, 43475,267, 43590,290), stdev = 100,184
[info]   CI (99.9%): [43089,495, 43861,039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate":
[info]   685,943 ±(99.9%) 6,073 MB/sec [Average]
[info]   (min, avg, max) = (684,445, 685,943, 687,746), stdev = 1,577
[info]   CI (99.9%): [679,870, 692,015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   24824,010 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (24824,010, 24824,010, 24824,011), stdev = 0,001
[info]   CI (99.9%): [24824,009, 24824,011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   670,533 ±(99.9%) 0,725 MB/sec [Average]
[info]   (min, avg, max) = (670,309, 670,533, 670,684), stdev = 0,188
[info]   CI (99.9%): [669,808, 671,257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   24266,421 ±(99.9%) 216,594 B/op [Average]
[info]   (min, avg, max) = (24205,866, 24266,421, 24321,144), stdev = 56,249
[info]   CI (99.9%): [24049,827, 24483,015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,379 ±(99.9%) 3,088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,379, 1,814), stdev = 0,802
[info]   CI (99.9%): [≈ 0, 3,468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   13,758 ±(99.9%) 111,995 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 13,758, 65,777), stdev = 29,085
[info]   CI (99.9%): [≈ 0, 125,752] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 17,87% complete, ETA 01:48:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 33469,547 ops/s
[info] # Warmup Iteration   2: 45889,204 ops/s
[info] # Warmup Iteration   3: 45889,252 ops/s
[info] # Warmup Iteration   4: 46099,263 ops/s
[info] # Warmup Iteration   5: 45765,555 ops/s
[info] Iteration   1: 46092,167 ops/s
[info]                  ·gc.alloc.rate:               463,576 MB/sec
[info]                  ·gc.alloc.rate.norm:          15824,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,736 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17467,927 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 46143,491 ops/s
[info]                  ·gc.alloc.rate:               464,106 MB/sec
[info]                  ·gc.alloc.rate.norm:          15824,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,744 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17448,246 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 46336,120 ops/s
[info]                  ·gc.alloc.rate:      466,035 MB/sec
[info]                  ·gc.alloc.rate.norm: 15824,010 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 46171,177 ops/s
[info]                  ·gc.alloc.rate:                   464,362 MB/sec
[info]                  ·gc.alloc.rate.norm:              15824,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667,961 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22762,060 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,116 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 72,094 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 46224,776 ops/s
[info]                  ·gc.alloc.rate:                   464,913 MB/sec
[info]                  ·gc.alloc.rate.norm:              15824,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668,031 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22737,442 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,418 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala":
[info]   46193,546 ±(99.9%) 358,060 ops/s [Average]
[info]   (min, avg, max) = (46092,167, 46193,546, 46336,120), stdev = 92,987
[info]   CI (99.9%): [45835,486, 46551,606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   464,599 ±(99.9%) 3,606 MB/sec [Average]
[info]   (min, avg, max) = (463,576, 464,599, 466,035), stdev = 0,936
[info]   CI (99.9%): [460,993, 468,204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   15824,010 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (15824,009, 15824,010, 15824,010), stdev = 0,001
[info]   CI (99.9%): [15824,008, 15824,011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   471,895 ±(99.9%) 1059,402 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 471,895, 668,031), stdev = 275,123
[info]   CI (99.9%): [≈ 0, 1531,297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   16083,135 ±(99.9%) 36088,169 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 16083,135, 22762,060), stdev = 9371,983
[info]   CI (99.9%): [≈ 0, 52171,304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,431 ±(99.9%) 3,626 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,431, 2,116), stdev = 0,942
[info]   CI (99.9%): [≈ 0, 4,057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   14,702 ±(99.9%) 123,563 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 14,702, 72,094), stdev = 32,089
[info]   CI (99.9%): [≈ 0, 138,265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,400, 2,000), stdev = 0,894
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 18,07% complete, ETA 01:48:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 45195,966 ops/s
[info] # Warmup Iteration   2: 49026,001 ops/s
[info] # Warmup Iteration   3: 49230,187 ops/s
[info] # Warmup Iteration   4: 49143,739 ops/s
[info] # Warmup Iteration   5: 49063,321 ops/s
[info] Iteration   1: 49307,429 ops/s
[info]                  ·gc.alloc.rate:               483,905 MB/sec
[info]                  ·gc.alloc.rate.norm:          15440,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,752 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16328,522 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 49217,018 ops/s
[info]                  ·gc.alloc.rate:               482,981 MB/sec
[info]                  ·gc.alloc.rate.norm:          15440,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,729 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16359,038 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 48831,812 ops/s
[info]                  ·gc.alloc.rate:                   479,242 MB/sec
[info]                  ·gc.alloc.rate.norm:              15440,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,364 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21694,158 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1,595 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 51,396 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 49235,420 ops/s
[info]                  ·gc.alloc.rate:      483,193 MB/sec
[info]                  ·gc.alloc.rate.norm: 15440,010 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 49314,091 ops/s
[info]                  ·gc.alloc.rate:                   483,954 MB/sec
[info]                  ·gc.alloc.rate.norm:              15440,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,326 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21481,724 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,657 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala":
[info]   49181,154 ±(99.9%) 769,860 ops/s [Average]
[info]   (min, avg, max) = (48831,812, 49181,154, 49314,091), stdev = 199,930
[info]   CI (99.9%): [48411,294, 49951,014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   482,655 ±(99.9%) 7,530 MB/sec [Average]
[info]   (min, avg, max) = (479,242, 482,655, 483,954), stdev = 1,955
[info]   CI (99.9%): [475,125, 490,185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   15440,009 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (15440,009, 15440,009, 15440,010), stdev = 0,001
[info]   CI (99.9%): [15440,007, 15440,011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   474,034 ±(99.9%) 1066,777 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 474,034, 673,364), stdev = 277,039
[info]   CI (99.9%): [≈ 0, 1540,811] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   15172,688 ±(99.9%) 34186,657 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 15172,688, 21694,158), stdev = 8878,166
[info]   CI (99.9%): [≈ 0, 49359,345] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,336 ±(99.9%) 2,715 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,336, 1,595), stdev = 0,705
[info]   CI (99.9%): [≈ 0, 3,051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   10,811 ±(99.9%) 87,475 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10,811, 51,396), stdev = 22,717
[info]   CI (99.9%): [≈ 0, 98,286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 18,27% complete, ETA 01:48:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 45184,189 ops/s
[info] # Warmup Iteration   2: 49483,690 ops/s
[info] # Warmup Iteration   3: 49303,218 ops/s
[info] # Warmup Iteration   4: 49498,978 ops/s
[info] # Warmup Iteration   5: 49510,584 ops/s
[info] Iteration   1: 49650,301 ops/s
[info]                  ·gc.alloc.rate:               430,467 MB/sec
[info]                  ·gc.alloc.rate.norm:          13640,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,786 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16216,725 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 49628,261 ops/s
[info]                  ·gc.alloc.rate:      430,284 MB/sec
[info]                  ·gc.alloc.rate.norm: 13640,009 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 49392,303 ops/s
[info]                  ·gc.alloc.rate:               428,233 MB/sec
[info]                  ·gc.alloc.rate.norm:          13640,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,778 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16301,088 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   4: 49224,666 ops/s
[info]                  ·gc.alloc.rate:                   426,765 MB/sec
[info]                  ·gc.alloc.rate.norm:              13640,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,384 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21522,304 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1,600 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 51,133 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 49516,343 ops/s
[info]                  ·gc.alloc.rate:      429,276 MB/sec
[info]                  ·gc.alloc.rate.norm: 13640,009 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc":
[info]   49482,375 ±(99.9%) 681,148 ops/s [Average]
[info]   (min, avg, max) = (49224,666, 49482,375, 49650,301), stdev = 176,892
[info]   CI (99.9%): [48801,227, 50163,523] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   429,005 ±(99.9%) 5,922 MB/sec [Average]
[info]   (min, avg, max) = (426,765, 429,005, 430,467), stdev = 1,538
[info]   CI (99.9%): [423,083, 434,927] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   13640,009 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (13640,009, 13640,009, 13640,009), stdev = 0,001
[info]   CI (99.9%): [13640,009, 13640,009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   339,389 ±(99.9%) 1219,750 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 339,389, 673,384), stdev = 316,765
[info]   CI (99.9%): [≈ 0, 1559,140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   10808,023 ±(99.9%) 38882,465 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10808,023, 21522,304), stdev = 10097,653
[info]   CI (99.9%): [≈ 0, 49690,488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0,320 ±(99.9%) 2,755 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,320, 1,600), stdev = 0,715
[info]   CI (99.9%): [≈ 0, 3,075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   10,227 ±(99.9%) 88,053 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10,227, 51,133), stdev = 22,867
[info]   CI (99.9%): [≈ 0, 98,280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 18,47% complete, ETA 01:47:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 33289,753 ops/s
[info] # Warmup Iteration   2: 37438,510 ops/s
[info] # Warmup Iteration   3: 37413,157 ops/s
[info] # Warmup Iteration   4: 37646,760 ops/s
[info] # Warmup Iteration   5: 37777,558 ops/s
[info] Iteration   1: 37737,391 ops/s
[info]                  ·gc.alloc.rate:                   1023,365 MB/sec
[info]                  ·gc.alloc.rate.norm:              42664,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,715 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     56227,787 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,604 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 37907,941 ops/s
[info]                  ·gc.alloc.rate:               1027,945 MB/sec
[info]                  ·gc.alloc.rate.norm:          42664,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,987 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 27973,273 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 37705,106 ops/s
[info]                  ·gc.alloc.rate:                   1022,459 MB/sec
[info]                  ·gc.alloc.rate.norm:              42664,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,294 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     56260,103 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,344 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 37759,220 ops/s
[info]                  ·gc.alloc.rate:               1023,932 MB/sec
[info]                  ·gc.alloc.rate.norm:          42664,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1349,008 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 56208,916 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 37912,033 ops/s
[info]                  ·gc.alloc.rate:               1028,014 MB/sec
[info]                  ·gc.alloc.rate.norm:          42664,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,645 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 27998,713 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeUPickle":
[info]   37804,338 ±(99.9%) 378,737 ops/s [Average]
[info]   (min, avg, max) = (37705,106, 37804,338, 37912,033), stdev = 98,357
[info]   CI (99.9%): [37425,600, 38183,075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeUPickle:·gc.alloc.rate":
[info]   1025,143 ±(99.9%) 10,175 MB/sec [Average]
[info]   (min, avg, max) = (1022,459, 1025,143, 1028,014), stdev = 2,642
[info]   CI (99.9%): [1014,968, 1035,318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   42664,012 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (42664,011, 42664,012, 42664,012), stdev = 0,001
[info]   CI (99.9%): [42664,010, 42664,013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   1078,930 ±(99.9%) 1422,275 MB/sec [Average]
[info]   (min, avg, max) = (673,987, 1078,930, 1349,008), stdev = 369,360
[info]   CI (99.9%): [≈ 0, 2501,204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   44933,758 ±(99.9%) 59573,835 B/op [Average]
[info]   (min, avg, max) = (27973,273, 44933,758, 56260,103), stdev = 15471,136
[info]   CI (99.9%): [≈ 0, 104507,593] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,185 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,104), stdev = 0,048
[info]   CI (99.9%): [≈ 0, 0,218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   1,390 ±(99.9%) 7,701 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,390, 4,344), stdev = 2,000
[info]   CI (99.9%): [≈ 0, 9,091] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeUPickle:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeUPickle:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 18,67% complete, ETA 01:47:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13429,935 ops/s
[info] # Warmup Iteration   2: 17511,806 ops/s
[info] # Warmup Iteration   3: 17477,681 ops/s
[info] # Warmup Iteration   4: 17608,643 ops/s
[info] # Warmup Iteration   5: 17676,664 ops/s
[info] Iteration   1: 17662,405 ops/s
[info]                  ·gc.alloc.rate:                   1261,581 MB/sec
[info]                  ·gc.alloc.rate.norm:              112376,035 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,697 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     119779,597 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7,419 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 17560,168 ops/s
[info]                  ·gc.alloc.rate:                   1254,264 MB/sec
[info]                  ·gc.alloc.rate.norm:              112376,025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,328 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     120534,898 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,866 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 17599,508 ops/s
[info]                  ·gc.alloc.rate:                   1257,083 MB/sec
[info]                  ·gc.alloc.rate.norm:              112376,025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,030 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     120327,417 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,862 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 17636,169 ops/s
[info]                  ·gc.alloc.rate:               1259,702 MB/sec
[info]                  ·gc.alloc.rate.norm:          112376,026 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,964 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 60123,271 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 17462,677 ops/s
[info]                  ·gc.alloc.rate:                   1247,252 MB/sec
[info]                  ·gc.alloc.rate.norm:              112376,027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,567 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     121504,427 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,752 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce":
[info]   17584,185 ±(99.9%) 300,724 ops/s [Average]
[info]   (min, avg, max) = (17462,677, 17584,185, 17662,405), stdev = 78,097
[info]   CI (99.9%): [17283,461, 17884,910] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate":
[info]   1255,976 ±(99.9%) 21,575 MB/sec [Average]
[info]   (min, avg, max) = (1247,252, 1255,976, 1261,581), stdev = 5,603
[info]   CI (99.9%): [1234,402, 1277,551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   112376,027 ±(99.9%) 0,017 B/op [Average]
[info]   (min, avg, max) = (112376,025, 112376,027, 112376,035), stdev = 0,004
[info]   CI (99.9%): [112376,010, 112376,045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1211,717 ±(99.9%) 1157,568 MB/sec [Average]
[info]   (min, avg, max) = (673,964, 1211,717, 1348,567), stdev = 300,617
[info]   CI (99.9%): [54,149, 2369,285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   108453,922 ±(99.9%) 104063,043 B/op [Average]
[info]   (min, avg, max) = (60123,271, 108453,922, 121504,427), stdev = 27024,842
[info]   CI (99.9%): [4390,879, 212516,965] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,083), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2,980 ±(99.9%) 10,836 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,980, 7,419), stdev = 2,814
[info]   CI (99.9%): [≈ 0, 13,816] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 2,000), stdev = 0,837
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 18,88% complete, ETA 01:47:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11544,221 ops/s
[info] # Warmup Iteration   2: 17248,314 ops/s
[info] # Warmup Iteration   3: 17791,011 ops/s
[info] # Warmup Iteration   4: 17704,487 ops/s
[info] # Warmup Iteration   5: 17818,324 ops/s
[info] Iteration   1: 17813,214 ops/s
[info]                  ·gc.alloc.rate:               1081,208 MB/sec
[info]                  ·gc.alloc.rate.norm:          95496,026 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668,329 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 59029,114 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 17767,611 ops/s
[info]                  ·gc.alloc.rate:               1078,328 MB/sec
[info]                  ·gc.alloc.rate.norm:          95483,948 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336,717 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 118363,821 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 17752,817 ops/s
[info]                  ·gc.alloc.rate:               1077,217 MB/sec
[info]                  ·gc.alloc.rate.norm:          95464,024 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669,002 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 59287,622 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 17853,802 ops/s
[info]                  ·gc.alloc.rate:                   1083,356 MB/sec
[info]                  ·gc.alloc.rate.norm:              95464,024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339,094 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     117999,298 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7,340 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 17738,608 ops/s
[info]                  ·gc.alloc.rate:               1076,425 MB/sec
[info]                  ·gc.alloc.rate.norm:          95464,024 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341,150 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 118941,450 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala":
[info]   17785,210 ±(99.9%) 182,854 ops/s [Average]
[info]   (min, avg, max) = (17738,608, 17785,210, 17853,802), stdev = 47,487
[info]   CI (99.9%): [17602,356, 17968,064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1079,307 ±(99.9%) 11,166 MB/sec [Average]
[info]   (min, avg, max) = (1076,425, 1079,307, 1083,356), stdev = 2,900
[info]   CI (99.9%): [1068,140, 1090,473] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   95474,409 ±(99.9%) 57,173 B/op [Average]
[info]   (min, avg, max) = (95464,024, 95474,409, 95496,026), stdev = 14,848
[info]   CI (99.9%): [95417,236, 95531,583] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1070,858 ±(99.9%) 1413,778 MB/sec [Average]
[info]   (min, avg, max) = (668,329, 1070,858, 1341,150), stdev = 367,154
[info]   CI (99.9%): [≈ 0, 2484,636] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   94724,261 ±(99.9%) 125026,312 B/op [Average]
[info]   (min, avg, max) = (59029,114, 94724,261, 118941,450), stdev = 32468,936
[info]   CI (99.9%): [≈ 0, 219750,573] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,017 ±(99.9%) 0,143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,083), stdev = 0,037
[info]   CI (99.9%): [≈ 0, 0,160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1,468 ±(99.9%) 12,640 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,468, 7,340), stdev = 3,283
[info]   CI (99.9%): [≈ 0, 14,108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 19,08% complete, ETA 01:47:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 83999,562 ops/s
[info] # Warmup Iteration   2: 76949,192 ops/s
[info] # Warmup Iteration   3: 87750,070 ops/s
[info] # Warmup Iteration   4: 87838,428 ops/s
[info] # Warmup Iteration   5: 86684,688 ops/s
[info] Iteration   1: 87959,994 ops/s
[info]                  ·gc.alloc.rate:      229,008 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096,005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 87768,369 ops/s
[info]                  ·gc.alloc.rate:                   228,507 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,764 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9173,413 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,015 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,268 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 88059,745 ops/s
[info]                  ·gc.alloc.rate:      229,260 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096,005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 87838,394 ops/s
[info]                  ·gc.alloc.rate:               228,691 MB/sec
[info]                  ·gc.alloc.rate.norm:          4096,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,763 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9165,999 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   5: 87816,877 ops/s
[info]                  ·gc.alloc.rate:      228,624 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096,005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala":
[info]   87888,676 ±(99.9%) 457,676 ops/s [Average]
[info]   (min, avg, max) = (87768,369, 87888,676, 88059,745), stdev = 118,857
[info]   CI (99.9%): [87430,999, 88346,352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   228,818 ±(99.9%) 1,189 MB/sec [Average]
[info]   (min, avg, max) = (228,507, 228,818, 229,260), stdev = 0,309
[info]   CI (99.9%): [227,629, 230,007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096,005 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4096,005, 4096,005, 4096,005), stdev = 0,001
[info]   CI (99.9%): [4096,004, 4096,006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   204,706 ±(99.9%) 1079,353 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204,706, 511,764), stdev = 280,305
[info]   CI (99.9%): [≈ 0, 1284,059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3667,882 ±(99.9%) 19339,688 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3667,882, 9173,413), stdev = 5022,455
[info]   CI (99.9%): [≈ 0, 23007,570] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,003 ±(99.9%) 0,026 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,003, 0,015), stdev = 0,007
[info]   CI (99.9%): [≈ 0, 0,029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,054 ±(99.9%) 0,461 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,054, 0,268), stdev = 0,120
[info]   CI (99.9%): [≈ 0, 0,515] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.count":
[info]   2,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 2,000), stdev = 0,894
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 19,28% complete, ETA 01:46:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8957,101 ops/s
[info] # Warmup Iteration   2: 14898,659 ops/s
[info] # Warmup Iteration   3: 14883,372 ops/s
[info] # Warmup Iteration   4: 14876,485 ops/s
[info] # Warmup Iteration   5: 14767,004 ops/s
[info] Iteration   1: 14687,324 ops/s
[info]                  ·gc.alloc.rate:                   1408,135 MB/sec
[info]                  ·gc.alloc.rate.norm:              150832,029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338,687 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     143393,178 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,230 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 14968,518 ops/s
[info]                  ·gc.alloc.rate:                   1435,063 MB/sec
[info]                  ·gc.alloc.rate.norm:              150832,031 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,348 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     140877,012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,377 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 14978,850 ops/s
[info]                  ·gc.alloc.rate:               1436,064 MB/sec
[info]                  ·gc.alloc.rate.norm:          150830,947 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342,063 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 140957,954 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 15014,882 ops/s
[info]                  ·gc.alloc.rate:                   1439,547 MB/sec
[info]                  ·gc.alloc.rate.norm:              150832,033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,993 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     140820,147 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13,091 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 14997,165 ops/s
[info]                  ·gc.alloc.rate:                   1437,824 MB/sec
[info]                  ·gc.alloc.rate.norm:              150832,029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019,324 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     211833,182 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,369 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson":
[info]   14929,348 ±(99.9%) 525,425 ops/s [Average]
[info]   (min, avg, max) = (14687,324, 14929,348, 15014,882), stdev = 136,451
[info]   CI (99.9%): [14403,923, 15454,772] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1431,327 ±(99.9%) 50,356 MB/sec [Average]
[info]   (min, avg, max) = (1408,135, 1431,327, 1439,547), stdev = 13,077
[info]   CI (99.9%): [1380,971, 1481,682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   150831,814 ±(99.9%) 1,866 B/op [Average]
[info]   (min, avg, max) = (150830,947, 150831,814, 150832,033), stdev = 0,485
[info]   CI (99.9%): [150829,948, 150833,680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1476,883 ±(99.9%) 1167,670 MB/sec [Average]
[info]   (min, avg, max) = (1338,687, 1476,883, 2019,324), stdev = 303,240
[info]   CI (99.9%): [309,213, 2644,553] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   155576,295 ±(99.9%) 121169,529 B/op [Average]
[info]   (min, avg, max) = (140820,147, 155576,295, 211833,182), stdev = 31467,342
[info]   CI (99.9%): [34406,766, 276745,824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,046 ±(99.9%) 0,183 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,046, 0,125), stdev = 0,047
[info]   CI (99.9%): [≈ 0, 0,229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   4,813 ±(99.9%) 19,132 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4,813, 13,091), stdev = 4,968
[info]   CI (99.9%): [≈ 0, 23,945] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 19,48% complete, ETA 01:46:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13507,344 ops/s
[info] # Warmup Iteration   2: 15766,314 ops/s
[info] # Warmup Iteration   3: 15733,005 ops/s
[info] # Warmup Iteration   4: 15772,662 ops/s
[info] # Warmup Iteration   5: 15826,152 ops/s
[info] Iteration   1: 15719,259 ops/s
[info]                  ·gc.alloc.rate:                   1101,263 MB/sec
[info]                  ·gc.alloc.rate.norm:              110216,027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,385 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     134848,354 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,168 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 15761,509 ops/s
[info]                  ·gc.alloc.rate:               1104,141 MB/sec
[info]                  ·gc.alloc.rate.norm:          110216,038 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,654 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 67244,550 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 15576,687 ops/s
[info]                  ·gc.alloc.rate:                   1090,982 MB/sec
[info]                  ·gc.alloc.rate.norm:              110194,281 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,411 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     136094,786 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6,310 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 15761,300 ops/s
[info]                  ·gc.alloc.rate:               1103,964 MB/sec
[info]                  ·gc.alloc.rate.norm:          110192,027 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1348,718 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 134622,126 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 15571,977 ops/s
[info]                  ·gc.alloc.rate:               1090,697 MB/sec
[info]                  ·gc.alloc.rate.norm:          110192,028 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,672 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 68161,479 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readUPickle":
[info]   15678,146 ±(99.9%) 370,943 ops/s [Average]
[info]   (min, avg, max) = (15571,977, 15678,146, 15761,509), stdev = 96,333
[info]   CI (99.9%): [15307,203, 16049,089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1098,209 ±(99.9%) 26,279 MB/sec [Average]
[info]   (min, avg, max) = (1090,697, 1098,209, 1104,141), stdev = 6,824
[info]   CI (99.9%): [1071,931, 1124,488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   110202,080 ±(99.9%) 49,172 B/op [Average]
[info]   (min, avg, max) = (110192,027, 110202,080, 110216,038), stdev = 12,770
[info]   CI (99.9%): [110152,908, 110251,252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1078,368 ±(99.9%) 1420,839 MB/sec [Average]
[info]   (min, avg, max) = (673,654, 1078,368, 1348,718), stdev = 368,987
[info]   CI (99.9%): [≈ 0, 2499,208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   108194,259 ±(99.9%) 142354,281 B/op [Average]
[info]   (min, avg, max) = (67244,550, 108194,259, 136094,786), stdev = 36968,955
[info]   CI (99.9%): [≈ 0, 250548,541] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,021 ±(99.9%) 0,113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,062), stdev = 0,029
[info]   CI (99.9%): [≈ 0, 0,134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   2,096 ±(99.9%) 11,428 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,096, 6,310), stdev = 2,968
[info]   CI (99.9%): [≈ 0, 13,524] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readUPickle:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readUPickle:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 19,68% complete, ETA 01:46:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 47771,149 ops/s
[info] # Warmup Iteration   2: 62197,536 ops/s
[info] # Warmup Iteration   3: 62125,388 ops/s
[info] # Warmup Iteration   4: 58575,783 ops/s
[info] # Warmup Iteration   5: 62422,355 ops/s
[info] Iteration   1: 62187,260 ops/s
[info]                  ·gc.alloc.rate:                   1542,243 MB/sec
[info]                  ·gc.alloc.rate.norm:              39016,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,060 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33951,738 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,580 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 61514,141 ops/s
[info]                  ·gc.alloc.rate:                   1525,576 MB/sec
[info]                  ·gc.alloc.rate.norm:              39016,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,520 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     34359,983 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,130 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 62319,221 ops/s
[info]                  ·gc.alloc.rate:                   1545,447 MB/sec
[info]                  ·gc.alloc.rate.norm:              39016,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018,762 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50965,201 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,577 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 62386,225 ops/s
[info]                  ·gc.alloc.rate:                   1547,010 MB/sec
[info]                  ·gc.alloc.rate.norm:              39016,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,666 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33988,476 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,050 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 62346,219 ops/s
[info]                  ·gc.alloc.rate:                   1546,080 MB/sec
[info]                  ·gc.alloc.rate.norm:              39016,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1349,675 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     34059,634 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,525 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce":
[info]   62150,613 ±(99.9%) 1399,861 ops/s [Average]
[info]   (min, avg, max) = (61514,141, 62150,613, 62386,225), stdev = 363,539
[info]   CI (99.9%): [60750,753, 63550,474] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1541,272 ±(99.9%) 34,483 MB/sec [Average]
[info]   (min, avg, max) = (1525,576, 1541,272, 1547,010), stdev = 8,955
[info]   CI (99.9%): [1506,789, 1575,754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   39016,007 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (39016,007, 39016,007, 39016,007), stdev = 0,001
[info]   CI (99.9%): [39016,006, 39016,008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1480,337 ±(99.9%) 1159,061 MB/sec [Average]
[info]   (min, avg, max) = (1342,060, 1480,337, 2018,762), stdev = 301,005
[info]   CI (99.9%): [321,275, 2639,398] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   37465,007 ±(99.9%) 29066,770 B/op [Average]
[info]   (min, avg, max) = (33951,738, 37465,007, 50965,201), stdev = 7548,548
[info]   CI (99.9%): [8398,236, 66531,777] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,054 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,054, 0,083), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1,373 ±(99.9%) 2,343 B/op [Average]
[info]   (min, avg, max) = (0,525, 1,373, 2,130), stdev = 0,608
[info]   CI (99.9%): [≈ 0, 3,716] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 19,88% complete, ETA 01:46:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 59605,033 ops/s
[info] # Warmup Iteration   2: 85819,249 ops/s
[info] # Warmup Iteration   3: 86505,535 ops/s
[info] # Warmup Iteration   4: 86659,178 ops/s
[info] # Warmup Iteration   5: 86708,898 ops/s
[info] Iteration   1: 85343,307 ops/s
[info]                  ·gc.alloc.rate:                   1292,821 MB/sec
[info]                  ·gc.alloc.rate.norm:              23832,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336,731 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24641,450 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,768 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 86935,681 ops/s
[info]                  ·gc.alloc.rate:                   1316,978 MB/sec
[info]                  ·gc.alloc.rate.norm:              23832,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338,187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24215,812 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,754 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 86661,461 ops/s
[info]                  ·gc.alloc.rate:                   1312,758 MB/sec
[info]                  ·gc.alloc.rate.norm:              23832,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,038 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24327,254 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,756 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 86716,075 ops/s
[info]                  ·gc.alloc.rate:                   1313,574 MB/sec
[info]                  ·gc.alloc.rate.norm:              23832,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,051 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24348,657 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,133 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 86485,644 ops/s
[info]                  ·gc.alloc.rate:                   1310,028 MB/sec
[info]                  ·gc.alloc.rate.norm:              23832,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,955 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24449,197 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,379 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala":
[info]   86428,434 ±(99.9%) 2416,347 ops/s [Average]
[info]   (min, avg, max) = (85343,307, 86428,434, 86935,681), stdev = 627,518
[info]   CI (99.9%): [84012,087, 88844,780] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1309,232 ±(99.9%) 36,594 MB/sec [Average]
[info]   (min, avg, max) = (1292,821, 1309,232, 1316,978), stdev = 9,503
[info]   CI (99.9%): [1272,638, 1345,825] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   23832,005 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (23832,005, 23832,005, 23832,005), stdev = 0,001
[info]   CI (99.9%): [23832,004, 23832,006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1340,192 ±(99.9%) 11,167 MB/sec [Average]
[info]   (min, avg, max) = (1336,731, 1340,192, 1343,955), stdev = 2,900
[info]   CI (99.9%): [1329,025, 1351,359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   24396,474 ±(99.9%) 616,433 B/op [Average]
[info]   (min, avg, max) = (24215,812, 24396,474, 24641,450), stdev = 160,086
[info]   CI (99.9%): [23780,041, 25012,907] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,057 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,042, 0,062), stdev = 0,015
[info]   CI (99.9%): [≈ 0, 0,098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,758 ±(99.9%) 1,028 B/op [Average]
[info]   (min, avg, max) = (0,379, 0,758, 1,133), stdev = 0,267
[info]   CI (99.9%): [≈ 0, 1,786] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 20,08% complete, ETA 01:45:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 221716,369 ops/s
[info] # Warmup Iteration   2: 232623,142 ops/s
[info] # Warmup Iteration   3: 236666,442 ops/s
[info] # Warmup Iteration   4: 224887,970 ops/s
[info] # Warmup Iteration   5: 236900,527 ops/s
[info] Iteration   1: 237525,860 ops/s
[info]                  ·gc.alloc.rate:                   376,816 MB/sec
[info]                  ·gc.alloc.rate.norm:              2496,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,758 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3389,850 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,006 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,039 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 237987,163 ops/s
[info]                  ·gc.alloc.rate:               377,549 MB/sec
[info]                  ·gc.alloc.rate.norm:          2496,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,761 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3383,285 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 236775,147 ops/s
[info]                  ·gc.alloc.rate:      375,629 MB/sec
[info]                  ·gc.alloc.rate.norm: 2496,002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 237034,817 ops/s
[info]                  ·gc.alloc.rate:                   376,037 MB/sec
[info]                  ·gc.alloc.rate.norm:              2496,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,756 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3396,857 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,069 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 237549,455 ops/s
[info]                  ·gc.alloc.rate:                   376,857 MB/sec
[info]                  ·gc.alloc.rate.norm:              2496,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,357 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4459,781 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1,585 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10,497 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala":
[info]   237374,489 ±(99.9%) 1830,052 ops/s [Average]
[info]   (min, avg, max) = (236775,147, 237374,489, 237987,163), stdev = 475,259
[info]   CI (99.9%): [235544,437, 239204,540] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   376,578 ±(99.9%) 2,901 MB/sec [Average]
[info]   (min, avg, max) = (375,629, 376,578, 377,549), stdev = 0,753
[info]   CI (99.9%): [373,677, 379,479] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2496,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (2496,002, 2496,002, 2496,002), stdev = 0,001
[info]   CI (99.9%): [2496,002, 2496,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   441,726 ±(99.9%) 988,289 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 441,726, 673,357), stdev = 256,656
[info]   CI (99.9%): [≈ 0, 1430,016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2925,955 ±(99.9%) 6546,076 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2925,955, 4459,781), stdev = 1699,995
[info]   CI (99.9%): [≈ 0, 9472,030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,320 ±(99.9%) 2,722 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,320, 1,585), stdev = 0,707
[info]   CI (99.9%): [≈ 0, 3,042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2,121 ±(99.9%) 18,030 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,121, 10,497), stdev = 4,682
[info]   CI (99.9%): [≈ 0, 20,150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 2,000), stdev = 0,837
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 20,28% complete, ETA 01:45:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 241841,311 ops/s
[info] # Warmup Iteration   2: 253211,934 ops/s
[info] # Warmup Iteration   3: 256278,908 ops/s
[info] # Warmup Iteration   4: 255598,316 ops/s
[info] # Warmup Iteration   5: 256133,790 ops/s
[info] Iteration   1: 256018,665 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 256592,798 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 256141,939 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 256274,803 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 256088,804 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc":
[info]   256223,402 ±(99.9%) 873,353 ops/s [Average]
[info]   (min, avg, max) = (256018,665, 256223,402, 256592,798), stdev = 226,807
[info]   CI (99.9%): [255350,049, 257096,755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (0,002, 0,002, 0,002), stdev = 0,001
[info]   CI (99.9%): [0,002, 0,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 20,48% complete, ETA 01:45:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 65328,437 ops/s
[info] # Warmup Iteration   2: 82600,205 ops/s
[info] # Warmup Iteration   3: 78599,312 ops/s
[info] # Warmup Iteration   4: 82905,806 ops/s
[info] # Warmup Iteration   5: 80107,912 ops/s
[info] Iteration   1: 81130,773 ops/s
[info]                  ·gc.alloc.rate:                   1532,180 MB/sec
[info]                  ·gc.alloc.rate.norm:              29712,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,738 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25999,568 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,404 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 78216,604 ops/s
[info]                  ·gc.alloc.rate:                   1477,161 MB/sec
[info]                  ·gc.alloc.rate.norm:              29712,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014,725 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     40524,709 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,838 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 80336,283 ops/s
[info]                  ·gc.alloc.rate:                   1517,190 MB/sec
[info]                  ·gc.alloc.rate.norm:              29712,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,055 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26340,983 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,223 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 81251,542 ops/s
[info]                  ·gc.alloc.rate:               1534,510 MB/sec
[info]                  ·gc.alloc.rate.norm:          29712,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1347,158 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 26084,397 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   5: 79963,105 ops/s
[info]                  ·gc.alloc.rate:                   1510,166 MB/sec
[info]                  ·gc.alloc.rate.norm:              29712,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,787 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26536,934 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,229 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson":
[info]   80179,661 ±(99.9%) 4707,624 ops/s [Average]
[info]   (min, avg, max) = (78216,604, 80179,661, 81251,542), stdev = 1222,555
[info]   CI (99.9%): [75472,038, 84887,285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1514,242 ±(99.9%) 88,917 MB/sec [Average]
[info]   (min, avg, max) = (1477,161, 1514,242, 1534,510), stdev = 23,091
[info]   CI (99.9%): [1425,325, 1603,158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   29712,007 ±(99.9%) 0,015 B/op [Average]
[info]   (min, avg, max) = (29712,005, 29712,007, 29712,014), stdev = 0,004
[info]   CI (99.9%): [29711,992, 29712,023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1479,293 ±(99.9%) 1152,617 MB/sec [Average]
[info]   (min, avg, max) = (1340,738, 1479,293, 2014,725), stdev = 299,331
[info]   CI (99.9%): [326,676, 2631,909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   29097,318 ±(99.9%) 24611,908 B/op [Average]
[info]   (min, avg, max) = (25999,568, 29097,318, 40524,709), stdev = 6391,634
[info]   CI (99.9%): [4485,410, 53709,226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,739 ±(99.9%) 2,059 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,739, 1,229), stdev = 0,535
[info]   CI (99.9%): [≈ 0, 2,797] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 20,68% complete, ETA 01:45:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17648,244 ops/s
[info] # Warmup Iteration   2: 19365,402 ops/s
[info] # Warmup Iteration   3: 19333,246 ops/s
[info] # Warmup Iteration   4: 19158,946 ops/s
[info] # Warmup Iteration   5: 19259,729 ops/s
[info] Iteration   1: 19217,785 ops/s
[info]                  ·gc.alloc.rate:                   668,008 MB/sec
[info]                  ·gc.alloc.rate.norm:              54686,754 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,011 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55178,162 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1,683 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 137,781 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 19287,274 ops/s
[info]                  ·gc.alloc.rate:                   670,437 MB/sec
[info]                  ·gc.alloc.rate.norm:              54688,022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,991 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54977,951 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,699 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 19309,896 ops/s
[info]                  ·gc.alloc.rate:               671,243 MB/sec
[info]                  ·gc.alloc.rate.norm:          54688,022 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,699 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 54888,181 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 18647,958 ops/s
[info]                  ·gc.alloc.rate:               648,236 MB/sec
[info]                  ·gc.alloc.rate.norm:          54688,023 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,736 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 56839,330 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 18832,417 ops/s
[info]                  ·gc.alloc.rate:                   654,670 MB/sec
[info]                  ·gc.alloc.rate.norm:              54688,023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,777 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     56284,063 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,219 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeUPickle":
[info]   19059,066 ±(99.9%) 1156,101 ops/s [Average]
[info]   (min, avg, max) = (18647,958, 19059,066, 19309,896), stdev = 300,236
[info]   CI (99.9%): [17902,965, 20215,167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   662,519 ±(99.9%) 40,134 MB/sec [Average]
[info]   (min, avg, max) = (648,236, 662,519, 671,243), stdev = 10,423
[info]   CI (99.9%): [622,385, 702,653] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   54687,769 ±(99.9%) 2,186 B/op [Average]
[info]   (min, avg, max) = (54686,754, 54687,769, 54688,023), stdev = 0,568
[info]   CI (99.9%): [54685,583, 54689,955] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   673,843 ±(99.9%) 0,566 MB/sec [Average]
[info]   (min, avg, max) = (673,699, 673,843, 674,011), stdev = 0,147
[info]   CI (99.9%): [673,276, 674,409] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   55633,537 ±(99.9%) 3373,346 B/op [Average]
[info]   (min, avg, max) = (54888,181, 55633,537, 56839,330), stdev = 876,047
[info]   CI (99.9%): [52260,191, 59006,884] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,353 ±(99.9%) 2,864 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,353, 1,683), stdev = 0,744
[info]   CI (99.9%): [≈ 0, 3,217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   28,940 ±(99.9%) 234,433 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 28,940, 137,781), stdev = 60,882
[info]   CI (99.9%): [≈ 0, 263,373] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeUPickle:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeUPickle:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 20,88% complete, ETA 01:44:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 21409,123 ops/s
[info] # Warmup Iteration   2: 29721,187 ops/s
[info] # Warmup Iteration   3: 29422,580 ops/s
[info] # Warmup Iteration   4: 29847,424 ops/s
[info] # Warmup Iteration   5: 29655,460 ops/s
[info] Iteration   1: 29705,118 ops/s
[info]                  ·gc.alloc.rate:                   660,086 MB/sec
[info]                  ·gc.alloc.rate.norm:              34960,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669,363 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35451,334 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1,824 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 96,622 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 29832,882 ops/s
[info]                  ·gc.alloc.rate:                   662,890 MB/sec
[info]                  ·gc.alloc.rate.norm:              34960,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669,322 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35299,259 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,196 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 29754,495 ops/s
[info]                  ·gc.alloc.rate:               661,176 MB/sec
[info]                  ·gc.alloc.rate.norm:          34960,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669,652 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 35408,201 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 29791,286 ops/s
[info]                  ·gc.alloc.rate:                   661,998 MB/sec
[info]                  ·gc.alloc.rate.norm:              34960,016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669,697 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35366,610 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,100 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 29801,521 ops/s
[info]                  ·gc.alloc.rate:                   662,159 MB/sec
[info]                  ·gc.alloc.rate.norm:              34960,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669,969 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35372,334 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,199 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce":
[info]   29777,060 ±(99.9%) 188,658 ops/s [Average]
[info]   (min, avg, max) = (29705,118, 29777,060, 29832,882), stdev = 48,994
[info]   CI (99.9%): [29588,402, 29965,718] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate":
[info]   661,662 ±(99.9%) 4,123 MB/sec [Average]
[info]   (min, avg, max) = (660,086, 661,662, 662,890), stdev = 1,071
[info]   CI (99.9%): [657,539, 665,785] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   34960,015 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (34960,014, 34960,015, 34960,016), stdev = 0,001
[info]   CI (99.9%): [34960,013, 34960,017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   669,601 ±(99.9%) 1,022 MB/sec [Average]
[info]   (min, avg, max) = (669,322, 669,601, 669,969), stdev = 0,265
[info]   CI (99.9%): [668,579, 670,623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   35379,548 ±(99.9%) 216,460 B/op [Average]
[info]   (min, avg, max) = (35299,259, 35379,548, 35451,334), stdev = 56,214
[info]   CI (99.9%): [35163,088, 35596,007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,386 ±(99.9%) 3,098 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,386, 1,824), stdev = 0,804
[info]   CI (99.9%): [≈ 0, 3,483] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   20,423 ±(99.9%) 164,061 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 20,423, 96,622), stdev = 42,606
[info]   CI (99.9%): [≈ 0, 184,484] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 21,08% complete, ETA 01:44:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22909,035 ops/s
[info] # Warmup Iteration   2: 31234,292 ops/s
[info] # Warmup Iteration   3: 31142,540 ops/s
[info] # Warmup Iteration   4: 31347,046 ops/s
[info] # Warmup Iteration   5: 31321,319 ops/s
[info] Iteration   1: 31427,085 ops/s
[info]                  ·gc.alloc.rate:      433,089 MB/sec
[info]                  ·gc.alloc.rate.norm: 21680,014 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 31386,364 ops/s
[info]                  ·gc.alloc.rate:                   432,519 MB/sec
[info]                  ·gc.alloc.rate.norm:              21680,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,802 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25654,053 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,036 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,793 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 31386,570 ops/s
[info]                  ·gc.alloc.rate:               432,519 MB/sec
[info]                  ·gc.alloc.rate.norm:          21680,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,802 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 25654,053 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   4: 31351,440 ops/s
[info]                  ·gc.alloc.rate:                   432,041 MB/sec
[info]                  ·gc.alloc.rate.norm:              21680,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668,081 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33524,603 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,189 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 109,841 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 31464,208 ops/s
[info]                  ·gc.alloc.rate:      433,584 MB/sec
[info]                  ·gc.alloc.rate.norm: 21680,014 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala":
[info]   31403,133 ±(99.9%) 167,088 ops/s [Average]
[info]   (min, avg, max) = (31351,440, 31403,133, 31464,208), stdev = 43,392
[info]   CI (99.9%): [31236,045, 31570,221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   432,751 ±(99.9%) 2,294 MB/sec [Average]
[info]   (min, avg, max) = (432,041, 432,751, 433,584), stdev = 0,596
[info]   CI (99.9%): [430,457, 435,044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   21680,014 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (21680,014, 21680,014, 21680,015), stdev = 0,001
[info]   CI (99.9%): [21680,012, 21680,016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   338,337 ±(99.9%) 1214,412 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 338,337, 668,081), stdev = 315,379
[info]   CI (99.9%): [≈ 0, 1552,749] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   16966,542 ±(99.9%) 60909,658 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 16966,542, 33524,603), stdev = 15818,045
[info]   CI (99.9%): [≈ 0, 77876,199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,445 ±(99.9%) 3,755 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,445, 2,189), stdev = 0,975
[info]   CI (99.9%): [≈ 0, 4,199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   22,327 ±(99.9%) 188,404 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 22,327, 109,841), stdev = 48,928
[info]   CI (99.9%): [≈ 0, 210,731] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,400, 3,000), stdev = 1,342
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 21,29% complete, ETA 01:44:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 32270,962 ops/s
[info] # Warmup Iteration   2: 33692,455 ops/s
[info] # Warmup Iteration   3: 33806,173 ops/s
[info] # Warmup Iteration   4: 33718,365 ops/s
[info] # Warmup Iteration   5: 33825,191 ops/s
[info] Iteration   1: 33696,437 ops/s
[info]                  ·gc.alloc.rate:      307,066 MB/sec
[info]                  ·gc.alloc.rate.norm: 14336,013 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 33689,496 ops/s
[info]                  ·gc.alloc.rate:               306,973 MB/sec
[info]                  ·gc.alloc.rate.norm:          14336,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,732 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23898,459 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 33718,284 ops/s
[info]                  ·gc.alloc.rate:      307,256 MB/sec
[info]                  ·gc.alloc.rate.norm: 14336,014 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 33723,159 ops/s
[info]                  ·gc.alloc.rate:                   307,302 MB/sec
[info]                  ·gc.alloc.rate.norm:              14336,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,779 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23875,078 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,914 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 33718,070 ops/s
[info]                  ·gc.alloc.rate:               307,236 MB/sec
[info]                  ·gc.alloc.rate.norm:          14336,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,775 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23880,033 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala":
[info]   33709,089 ±(99.9%) 57,987 ops/s [Average]
[info]   (min, avg, max) = (33689,496, 33709,089, 33723,159), stdev = 15,059
[info]   CI (99.9%): [33651,102, 33767,076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   307,167 ±(99.9%) 0,541 MB/sec [Average]
[info]   (min, avg, max) = (306,973, 307,167, 307,302), stdev = 0,140
[info]   CI (99.9%): [306,626, 307,707] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   14336,013 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (14336,013, 14336,013, 14336,014), stdev = 0,001
[info]   CI (99.9%): [14336,011, 14336,015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   307,057 ±(99.9%) 1079,349 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 307,057, 511,779), stdev = 280,304
[info]   CI (99.9%): [≈ 0, 1386,406] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   14330,714 ±(99.9%) 50374,490 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 14330,714, 23898,459), stdev = 13082,095
[info]   CI (99.9%): [≈ 0, 64705,204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,012 ±(99.9%) 0,108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,012, 0,062), stdev = 0,028
[info]   CI (99.9%): [≈ 0, 0,120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,583 ±(99.9%) 5,019 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,583, 2,914), stdev = 1,303
[info]   CI (99.9%): [≈ 0, 5,602] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 3,000), stdev = 1,304
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 21,49% complete, ETA 01:43:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13970,809 ops/s
[info] # Warmup Iteration   2: 24629,204 ops/s
[info] # Warmup Iteration   3: 24629,152 ops/s
[info] # Warmup Iteration   4: 24664,048 ops/s
[info] # Warmup Iteration   5: 24729,856 ops/s
[info] Iteration   1: 24766,309 ops/s
[info]                  ·gc.alloc.rate:                   1384,401 MB/sec
[info]                  ·gc.alloc.rate.norm:              87944,017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334,674 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     84785,150 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,291 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 24801,319 ops/s
[info]                  ·gc.alloc.rate:                   1386,345 MB/sec
[info]                  ·gc.alloc.rate.norm:              87944,019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336,383 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     84774,618 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,963 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 24804,236 ops/s
[info]                  ·gc.alloc.rate:                   1386,548 MB/sec
[info]                  ·gc.alloc.rate.norm:              87944,017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338,695 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     84908,875 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,321 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 24804,746 ops/s
[info]                  ·gc.alloc.rate:               1386,534 MB/sec
[info]                  ·gc.alloc.rate.norm:          87944,017 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340,735 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 85039,095 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 24775,989 ops/s
[info]                  ·gc.alloc.rate:                   1384,896 MB/sec
[info]                  ·gc.alloc.rate.norm:              87944,017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,717 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     85265,563 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,967 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson":
[info]   24790,520 ±(99.9%) 69,536 ops/s [Average]
[info]   (min, avg, max) = (24766,309, 24790,520, 24804,746), stdev = 18,058
[info]   CI (99.9%): [24720,983, 24860,056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1385,745 ±(99.9%) 3,925 MB/sec [Average]
[info]   (min, avg, max) = (1384,401, 1385,745, 1386,548), stdev = 1,019
[info]   CI (99.9%): [1381,820, 1389,670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   87944,018 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (87944,017, 87944,018, 87944,019), stdev = 0,001
[info]   CI (99.9%): [87944,015, 87944,020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1338,641 ±(99.9%) 12,452 MB/sec [Average]
[info]   (min, avg, max) = (1334,674, 1338,641, 1342,717), stdev = 3,234
[info]   CI (99.9%): [1326,188, 1351,093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   84954,660 ±(99.9%) 786,877 B/op [Average]
[info]   (min, avg, max) = (84774,618, 84954,660, 85265,563), stdev = 204,350
[info]   CI (99.9%): [84167,783, 85741,537] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,046 ±(99.9%) 0,132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,046, 0,083), stdev = 0,034
[info]   CI (99.9%): [≈ 0, 0,178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2,908 ±(99.9%) 8,368 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,908, 5,291), stdev = 2,173
[info]   CI (99.9%): [≈ 0, 11,276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 21,69% complete, ETA 01:43:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22303,862 ops/s
[info] # Warmup Iteration   2: 27268,279 ops/s
[info] # Warmup Iteration   3: 27133,251 ops/s
[info] # Warmup Iteration   4: 26960,565 ops/s
[info] # Warmup Iteration   5: 27095,563 ops/s
[info] Iteration   1: 27332,133 ops/s
[info]                  ·gc.alloc.rate:      628,605 MB/sec
[info]                  ·gc.alloc.rate.norm: 36184,016 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 27270,112 ops/s
[info]                  ·gc.alloc.rate:                   627,213 MB/sec
[info]                  ·gc.alloc.rate.norm:              36184,016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,037 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     38827,605 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1,616 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 93,233 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 27369,675 ops/s
[info]                  ·gc.alloc.rate:                   629,484 MB/sec
[info]                  ·gc.alloc.rate.norm:              36184,016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,006 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     38685,774 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,788 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 27405,767 ops/s
[info]                  ·gc.alloc.rate:               630,303 MB/sec
[info]                  ·gc.alloc.rate.norm:          36184,017 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,997 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 38634,969 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 27301,476 ops/s
[info]                  ·gc.alloc.rate:                   627,878 MB/sec
[info]                  ·gc.alloc.rate.norm:              36184,016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,986 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     38783,527 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,400 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readUPickle":
[info]   27335,833 ±(99.9%) 206,909 ops/s [Average]
[info]   (min, avg, max) = (27270,112, 27335,833, 27405,767), stdev = 53,734
[info]   CI (99.9%): [27128,923, 27542,742] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readUPickle:·gc.alloc.rate":
[info]   628,697 ±(99.9%) 4,747 MB/sec [Average]
[info]   (min, avg, max) = (627,213, 628,697, 630,303), stdev = 1,233
[info]   CI (99.9%): [623,949, 633,444] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   36184,016 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (36184,016, 36184,016, 36184,017), stdev = 0,001
[info]   CI (99.9%): [36184,014, 36184,018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   538,405 ±(99.9%) 1158,958 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 538,405, 673,037), stdev = 300,978
[info]   CI (99.9%): [≈ 0, 1697,363] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   30986,375 ±(99.9%) 66701,157 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 30986,375, 38827,605), stdev = 17322,079
[info]   CI (99.9%): [≈ 0, 97687,532] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,348 ±(99.9%) 2,732 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,348, 1,616), stdev = 0,710
[info]   CI (99.9%): [≈ 0, 3,081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   20,084 ±(99.9%) 157,644 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 20,084, 93,233), stdev = 40,940
[info]   CI (99.9%): [≈ 0, 177,728] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readUPickle:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readUPickle:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 21,89% complete, ETA 01:43:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 150978,913 ops/s
[info] # Warmup Iteration   2: 185155,964 ops/s
[info] # Warmup Iteration   3: 186583,096 ops/s
[info] # Warmup Iteration   4: 186713,205 ops/s
[info] # Warmup Iteration   5: 187714,146 ops/s
[info] Iteration   1: 187552,829 ops/s
[info]                  ·gc.alloc.rate:                   1227,424 MB/sec
[info]                  ·gc.alloc.rate.norm:              10296,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,739 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11246,521 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,524 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 186990,874 ops/s
[info]                  ·gc.alloc.rate:               1223,664 MB/sec
[info]                  ·gc.alloc.rate.norm:          10296,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670,990 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5645,764 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 182498,381 ops/s
[info]                  ·gc.alloc.rate:                   1194,342 MB/sec
[info]                  ·gc.alloc.rate.norm:              10296,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,100 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11578,398 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,718 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 175274,172 ops/s
[info]                  ·gc.alloc.rate:               1147,021 MB/sec
[info]                  ·gc.alloc.rate.norm:          10296,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344,736 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12070,749 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 186317,552 ops/s
[info]                  ·gc.alloc.rate:                   1219,248 MB/sec
[info]                  ·gc.alloc.rate.norm:              10296,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,972 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11366,129 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,703 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce":
[info]   183726,762 ±(99.9%) 19724,978 ops/s [Average]
[info]   (min, avg, max) = (175274,172, 183726,762, 187552,829), stdev = 5122,514
[info]   CI (99.9%): [164001,784, 203451,739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1202,340 ±(99.9%) 129,068 MB/sec [Average]
[info]   (min, avg, max) = (1147,021, 1202,340, 1227,424), stdev = 33,519
[info]   CI (99.9%): [1073,272, 1331,408] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   10296,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (10296,002, 10296,002, 10296,002), stdev = 0,001
[info]   CI (99.9%): [10296,002, 10296,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1209,108 ±(99.9%) 1158,362 MB/sec [Average]
[info]   (min, avg, max) = (670,990, 1209,108, 1345,972), stdev = 300,823
[info]   CI (99.9%): [50,745, 2367,470] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   10381,512 ±(99.9%) 10265,970 B/op [Average]
[info]   (min, avg, max) = (5645,764, 10381,512, 12070,749), stdev = 2666,040
[info]   CI (99.9%): [115,542, 20647,482] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,046 ±(99.9%) 0,164 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,046, 0,083), stdev = 0,043
[info]   CI (99.9%): [≈ 0, 0,210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,389 ±(99.9%) 1,399 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,389, 0,718), stdev = 0,363
[info]   CI (99.9%): [≈ 0, 1,788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 22,09% complete, ETA 01:43:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 467740,299 ops/s
[info] # Warmup Iteration   2: 599729,938 ops/s
[info] # Warmup Iteration   3: 602166,146 ops/s
[info] # Warmup Iteration   4: 610695,058 ops/s
[info] # Warmup Iteration   5: 605915,891 ops/s
[info] Iteration   1: 596676,994 ops/s
[info]                  ·gc.alloc.rate:               603,797 MB/sec
[info]                  ·gc.alloc.rate.norm:          1592,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,812 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1349,469 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 613310,710 ops/s
[info]                  ·gc.alloc.rate:                   620,629 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668,088 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1713,739 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,147 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,508 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 614110,700 ops/s
[info]                  ·gc.alloc.rate:                   621,433 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668,080 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1711,502 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,160 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 610755,195 ops/s
[info]                  ·gc.alloc.rate:                   618,030 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667,737 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1720,041 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,054 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 611112,195 ops/s
[info]                  ·gc.alloc.rate:                   618,388 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667,735 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1719,042 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,054 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala":
[info]   609193,159 ±(99.9%) 27493,266 ops/s [Average]
[info]   (min, avg, max) = (596676,994, 609193,159, 614110,700), stdev = 7139,914
[info]   CI (99.9%): [581699,893, 636686,425] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   616,456 ±(99.9%) 27,810 MB/sec [Average]
[info]   (min, avg, max) = (603,797, 616,456, 621,433), stdev = 7,222
[info]   CI (99.9%): [588,645, 644,266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1592,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1592,001, 1592,001, 1592,001), stdev = 0,001
[info]   CI (99.9%): [1592,001, 1592,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   636,691 ±(99.9%) 268,811 MB/sec [Average]
[info]   (min, avg, max) = (511,812, 636,691, 668,088), stdev = 69,809
[info]   CI (99.9%): [367,880, 905,501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1642,758 ±(99.9%) 631,477 B/op [Average]
[info]   (min, avg, max) = (1349,469, 1642,758, 1720,041), stdev = 163,993
[info]   CI (99.9%): [1011,281, 2274,236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,450 ±(99.9%) 3,654 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,450, 2,147), stdev = 0,949
[info]   CI (99.9%): [≈ 0, 4,104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1,155 ±(99.9%) 9,373 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,155, 5,508), stdev = 2,434
[info]   CI (99.9%): [≈ 0, 10,528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 2,000), stdev = 0,837
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 22,29% complete, ETA 01:42:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 620618,533 ops/s
[info] # Warmup Iteration   2: 648623,956 ops/s
[info] # Warmup Iteration   3: 652036,417 ops/s
[info] # Warmup Iteration   4: 648772,498 ops/s
[info] # Warmup Iteration   5: 644129,108 ops/s
[info] Iteration   1: 649582,690 ops/s
[info]                  ·gc.alloc.rate:                   498,762 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,775 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1239,518 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,050 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 651315,907 ops/s
[info]                  ·gc.alloc.rate:               500,096 MB/sec
[info]                  ·gc.alloc.rate.norm:          1208,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,767 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1236,192 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 644961,372 ops/s
[info]                  ·gc.alloc.rate:                   495,210 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,381 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1642,624 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1,579 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,852 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 650704,488 ops/s
[info]                  ·gc.alloc.rate:                   499,618 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,369 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1628,106 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,151 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 650344,013 ops/s
[info]                  ·gc.alloc.rate:      499,326 MB/sec
[info]                  ·gc.alloc.rate.norm: 1208,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala":
[info]   649381,694 ±(99.9%) 9816,626 ops/s [Average]
[info]   (min, avg, max) = (644961,372, 649381,694, 651315,907), stdev = 2549,347
[info]   CI (99.9%): [639565,068, 659198,320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   498,603 ±(99.9%) 7,535 MB/sec [Average]
[info]   (min, avg, max) = (495,210, 498,603, 500,096), stdev = 1,957
[info]   CI (99.9%): [491,067, 506,138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1208,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1208,001, 1208,001, 1208,001), stdev = 0,001
[info]   CI (99.9%): [1208,001, 1208,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   474,059 ±(99.9%) 1066,827 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 474,059, 673,381), stdev = 277,052
[info]   CI (99.9%): [≈ 0, 1540,885] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1149,288 ±(99.9%) 2589,686 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1149,288, 1642,624), stdev = 672,533
[info]   CI (99.9%): [≈ 0, 3738,974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,332 ±(99.9%) 2,685 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,332, 1,579), stdev = 0,697
[info]   CI (99.9%): [≈ 0, 3,018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,811 ±(99.9%) 6,551 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,811, 3,852), stdev = 1,701
[info]   CI (99.9%): [≈ 0, 7,361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 22,49% complete, ETA 01:42:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 638940,364 ops/s
[info] # Warmup Iteration   2: 666621,135 ops/s
[info] # Warmup Iteration   3: 665964,769 ops/s
[info] # Warmup Iteration   4: 665502,766 ops/s
[info] # Warmup Iteration   5: 665908,350 ops/s
[info] Iteration   1: 665331,052 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 665107,495 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 665779,292 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 665022,872 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 665229,152 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc":
[info]   665293,973 ±(99.9%) 1138,028 ops/s [Average]
[info]   (min, avg, max) = (665022,872, 665293,973, 665779,292), stdev = 295,542
[info]   CI (99.9%): [664155,944, 666432,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (0,001, 0,001, 0,001), stdev = 0,001
[info]   CI (99.9%): [0,001, 0,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 22,69% complete, ETA 01:42:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 239032,014 ops/s
[info] # Warmup Iteration   2: 365700,555 ops/s
[info] # Warmup Iteration   3: 365455,337 ops/s
[info] # Warmup Iteration   4: 343237,875 ops/s
[info] # Warmup Iteration   5: 370077,959 ops/s
[info] Iteration   1: 354597,214 ops/s
[info]                  ·gc.alloc.rate:               980,958 MB/sec
[info]                  ·gc.alloc.rate.norm:          4352,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1334,240 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5919,331 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 366047,112 ops/s
[info]                  ·gc.alloc.rate:               1012,588 MB/sec
[info]                  ·gc.alloc.rate.norm:          4352,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667,419 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2868,499 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 370782,214 ops/s
[info]                  ·gc.alloc.rate:                   1025,704 MB/sec
[info]                  ·gc.alloc.rate.norm:              4352,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335,526 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5666,557 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,442 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 347893,745 ops/s
[info]                  ·gc.alloc.rate:               962,390 MB/sec
[info]                  ·gc.alloc.rate.norm:          4352,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668,095 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3021,177 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 356854,814 ops/s
[info]                  ·gc.alloc.rate:               987,130 MB/sec
[info]                  ·gc.alloc.rate.norm:          4352,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669,051 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2949,672 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson":
[info]   359235,020 ±(99.9%) 35267,644 ops/s [Average]
[info]   (min, avg, max) = (347893,745, 359235,020, 370782,214), stdev = 9158,895
[info]   CI (99.9%): [323967,376, 394502,663] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   993,754 ±(99.9%) 97,545 MB/sec [Average]
[info]   (min, avg, max) = (962,390, 993,754, 1025,704), stdev = 25,332
[info]   CI (99.9%): [896,209, 1091,299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4352,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4352,001, 4352,001, 4352,001), stdev = 0,001
[info]   CI (99.9%): [4352,001, 4352,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   934,866 ±(99.9%) 1406,119 MB/sec [Average]
[info]   (min, avg, max) = (667,419, 934,866, 1335,526), stdev = 365,165
[info]   CI (99.9%): [≈ 0, 2340,985] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4085,047 ±(99.9%) 6016,948 B/op [Average]
[info]   (min, avg, max) = (2868,499, 4085,047, 5919,331), stdev = 1562,582
[info]   CI (99.9%): [≈ 0, 10101,995] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,021 ±(99.9%) 0,179 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,104), stdev = 0,047
[info]   CI (99.9%): [≈ 0, 0,200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,088 ±(99.9%) 0,761 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,088, 0,442), stdev = 0,198
[info]   CI (99.9%): [≈ 0, 0,849] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 22,89% complete, ETA 01:42:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 40008,154 ops/s
[info] # Warmup Iteration   2: 45379,228 ops/s
[info] # Warmup Iteration   3: 45020,528 ops/s
[info] # Warmup Iteration   4: 45453,219 ops/s
[info] # Warmup Iteration   5: 44883,231 ops/s
[info] Iteration   1: 45562,733 ops/s
[info]                  ·gc.alloc.rate:                   484,680 MB/sec
[info]                  ·gc.alloc.rate.norm:              16736,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,771 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17671,466 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,358 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 45180,184 ops/s
[info]                  ·gc.alloc.rate:               480,590 MB/sec
[info]                  ·gc.alloc.rate.norm:          16736,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,753 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17821,244 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 45625,768 ops/s
[info]                  ·gc.alloc.rate:                   485,328 MB/sec
[info]                  ·gc.alloc.rate.norm:              16736,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,349 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23219,732 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1,673 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 57,678 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 45726,646 ops/s
[info]                  ·gc.alloc.rate:      486,425 MB/sec
[info]                  ·gc.alloc.rate.norm: 16736,009 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 45649,363 ops/s
[info]                  ·gc.alloc.rate:                   485,552 MB/sec
[info]                  ·gc.alloc.rate.norm:              16736,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,292 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23207,018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,435 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeUPickle":
[info]   45548,939 ±(99.9%) 825,284 ops/s [Average]
[info]   (min, avg, max) = (45180,184, 45548,939, 45726,646), stdev = 214,324
[info]   CI (99.9%): [44723,655, 46374,223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   484,515 ±(99.9%) 8,785 MB/sec [Average]
[info]   (min, avg, max) = (480,590, 484,515, 486,425), stdev = 2,281
[info]   CI (99.9%): [475,730, 493,299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   16736,010 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (16736,009, 16736,010, 16736,010), stdev = 0,001
[info]   CI (99.9%): [16736,008, 16736,011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   474,033 ±(99.9%) 1066,749 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 474,033, 673,349), stdev = 277,031
[info]   CI (99.9%): [≈ 0, 1540,782] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   16383,892 ±(99.9%) 36805,364 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 16383,892, 23219,732), stdev = 9558,236
[info]   CI (99.9%): [≈ 0, 53189,256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,345 ±(99.9%) 2,859 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,345, 1,673), stdev = 0,742
[info]   CI (99.9%): [≈ 0, 3,204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   11,894 ±(99.9%) 98,579 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11,894, 57,678), stdev = 25,601
[info]   CI (99.9%): [≈ 0, 110,474] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeUPickle:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeUPickle:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 2,000), stdev = 0,837
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 23,09% complete, ETA 01:41:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 33411,164 ops/s
[info] # Warmup Iteration   2: 40022,175 ops/s
[info] # Warmup Iteration   3: 40416,337 ops/s
[info] # Warmup Iteration   4: 40559,201 ops/s
[info] # Warmup Iteration   5: 40330,587 ops/s
[info] Iteration   1: 40513,096 ops/s
[info]                  ·gc.alloc.rate:               1910,483 MB/sec
[info]                  ·gc.alloc.rate.norm:          74184,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2021,706 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 78502,808 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 40312,126 ops/s
[info]                  ·gc.alloc.rate:                   1900,780 MB/sec
[info]                  ·gc.alloc.rate.norm:              74184,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1349,321 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52661,551 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,625 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 40178,155 ops/s
[info]                  ·gc.alloc.rate:                   1894,501 MB/sec
[info]                  ·gc.alloc.rate.norm:              74184,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2027,737 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     79401,204 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,631 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 40246,999 ops/s
[info]                  ·gc.alloc.rate:                   1897,743 MB/sec
[info]                  ·gc.alloc.rate.norm:              74184,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2030,340 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     79367,326 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,628 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 40298,026 ops/s
[info]                  ·gc.alloc.rate:                   1900,018 MB/sec
[info]                  ·gc.alloc.rate.norm:              74184,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2033,251 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     79385,939 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,813 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce":
[info]   40309,680 ±(99.9%) 482,282 ops/s [Average]
[info]   (min, avg, max) = (40178,155, 40309,680, 40513,096), stdev = 125,247
[info]   CI (99.9%): [39827,398, 40791,962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate":
[info]   1900,705 ±(99.9%) 23,052 MB/sec [Average]
[info]   (min, avg, max) = (1894,501, 1900,705, 1910,483), stdev = 5,987
[info]   CI (99.9%): [1877,653, 1923,757] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   74184,011 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (74184,011, 74184,011, 74184,012), stdev = 0,001
[info]   CI (99.9%): [74184,010, 74184,012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1892,471 ±(99.9%) 1169,286 MB/sec [Average]
[info]   (min, avg, max) = (1349,321, 1892,471, 2033,251), stdev = 303,660
[info]   CI (99.9%): [723,185, 3061,757] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   73863,766 ±(99.9%) 45663,077 B/op [Average]
[info]   (min, avg, max) = (52661,551, 73863,766, 79401,204), stdev = 11858,556
[info]   CI (99.9%): [28200,688, 119526,843] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,042), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1,139 ±(99.9%) 2,804 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,139, 1,631), stdev = 0,728
[info]   CI (99.9%): [≈ 0, 3,943] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.time":
[info]   9,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 23,29% complete, ETA 01:41:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 53507,012 ops/s
[info] # Warmup Iteration   2: 319646,425 ops/s
[info] # Warmup Iteration   3: 318134,606 ops/s
[info] # Warmup Iteration   4: 318258,455 ops/s
[info] # Warmup Iteration   5: 315092,068 ops/s
[info] Iteration   1: 319180,239 ops/s
[info]                  ·gc.alloc.rate:                   331,104 MB/sec
[info]                  ·gc.alloc.rate.norm:              1632,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,801 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2522,653 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,007 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,036 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 319902,716 ops/s
[info]                  ·gc.alloc.rate:               331,880 MB/sec
[info]                  ·gc.alloc.rate.norm:          1632,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,844 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2516,960 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 320855,752 ops/s
[info]                  ·gc.alloc.rate:      332,871 MB/sec
[info]                  ·gc.alloc.rate.norm: 1632,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 318910,828 ops/s
[info]                  ·gc.alloc.rate:                   330,813 MB/sec
[info]                  ·gc.alloc.rate.norm:              1632,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,753 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2524,630 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,014 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,067 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 319877,784 ops/s
[info]                  ·gc.alloc.rate:      331,816 MB/sec
[info]                  ·gc.alloc.rate.norm: 1632,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava":
[info]   319745,464 ±(99.9%) 2914,224 ops/s [Average]
[info]   (min, avg, max) = (318910,828, 319745,464, 320855,752), stdev = 756,815
[info]   CI (99.9%): [316831,240, 322659,687] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   331,697 ±(99.9%) 3,079 MB/sec [Average]
[info]   (min, avg, max) = (330,813, 331,697, 332,871), stdev = 0,800
[info]   CI (99.9%): [328,618, 334,776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   1632,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1632,001, 1632,001, 1632,001), stdev = 0,001
[info]   CI (99.9%): [1632,001, 1632,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   307,080 ±(99.9%) 1079,428 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 307,080, 511,844), stdev = 280,324
[info]   CI (99.9%): [≈ 0, 1386,507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   1512,848 ±(99.9%) 5317,886 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1512,848, 2524,630), stdev = 1381,038
[info]   CI (99.9%): [≈ 0, 6830,735] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,004 ±(99.9%) 0,024 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,004, 0,014), stdev = 0,006
[info]   CI (99.9%): [≈ 0, 0,028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0,021 ±(99.9%) 0,116 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,067), stdev = 0,030
[info]   CI (99.9%): [≈ 0, 0,137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 23,49% complete, ETA 01:41:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 77160,050 ops/s
[info] # Warmup Iteration   2: 103051,329 ops/s
[info] # Warmup Iteration   3: 105444,722 ops/s
[info] # Warmup Iteration   4: 104346,042 ops/s
[info] # Warmup Iteration   5: 105437,019 ops/s
[info] Iteration   1: 102873,499 ops/s
[info]                  ·gc.alloc.rate:                   1201,052 MB/sec
[info]                  ·gc.alloc.rate.norm:              18368,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336,733 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20443,018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,637 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 105583,243 ops/s
[info]                  ·gc.alloc.rate:               1232,677 MB/sec
[info]                  ·gc.alloc.rate.norm:          18368,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669,028 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9969,133 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 103515,890 ops/s
[info]                  ·gc.alloc.rate:                   1208,564 MB/sec
[info]                  ·gc.alloc.rate.norm:              18368,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339,073 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20351,505 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,266 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 104227,666 ops/s
[info]                  ·gc.alloc.rate:               1216,856 MB/sec
[info]                  ·gc.alloc.rate.norm:          18368,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340,692 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 20237,265 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   5: 105422,062 ops/s
[info]                  ·gc.alloc.rate:                   1230,753 MB/sec
[info]                  ·gc.alloc.rate.norm:              18368,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,660 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20038,131 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,932 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala":
[info]   104324,472 ±(99.9%) 4538,906 ops/s [Average]
[info]   (min, avg, max) = (102873,499, 104324,472, 105583,243), stdev = 1178,739
[info]   CI (99.9%): [99785,566, 108863,378] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1217,980 ±(99.9%) 52,925 MB/sec [Average]
[info]   (min, avg, max) = (1201,052, 1217,980, 1232,677), stdev = 13,744
[info]   CI (99.9%): [1165,055, 1270,905] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   18368,004 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (18368,004, 18368,004, 18368,004), stdev = 0,001
[info]   CI (99.9%): [18368,004, 18368,005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1205,637 ±(99.9%) 1155,122 MB/sec [Average]
[info]   (min, avg, max) = (669,028, 1205,637, 1342,660), stdev = 299,981
[info]   CI (99.9%): [50,516, 2360,759] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   18207,810 ±(99.9%) 17743,924 B/op [Average]
[info]   (min, avg, max) = (9969,133, 18207,810, 20443,018), stdev = 4608,041
[info]   CI (99.9%): [463,887, 35951,734] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,083), stdev = 0,037
[info]   CI (99.9%): [≈ 0, 0,181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,567 ±(99.9%) 2,170 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,567, 1,266), stdev = 0,563
[info]   CI (99.9%): [≈ 0, 2,737] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 23,69% complete, ETA 01:41:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 420553,044 ops/s
[info] # Warmup Iteration   2: 436424,222 ops/s
[info] # Warmup Iteration   3: 436916,919 ops/s
[info] # Warmup Iteration   4: 433145,151 ops/s
[info] # Warmup Iteration   5: 400070,156 ops/s
[info] Iteration   1: 436538,608 ops/s
[info]                  ·gc.alloc.rate:                   284,133 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,795 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1844,482 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,016 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,059 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 437560,103 ops/s
[info]                  ·gc.alloc.rate:      284,792 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 433630,882 ops/s
[info]                  ·gc.alloc.rate:               282,237 MB/sec
[info]                  ·gc.alloc.rate.norm:          1024,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,769 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1856,777 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   4: 433740,219 ops/s
[info]                  ·gc.alloc.rate:                   282,302 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,764 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1856,336 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,077 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,281 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 418220,253 ops/s
[info]                  ·gc.alloc.rate:      272,202 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala":
[info]   431938,013 ±(99.9%) 30262,734 ops/s [Average]
[info]   (min, avg, max) = (418220,253, 431938,013, 437560,103), stdev = 7859,136
[info]   CI (99.9%): [401675,279, 462200,747] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   281,133 ±(99.9%) 19,704 MB/sec [Average]
[info]   (min, avg, max) = (272,202, 281,133, 284,792), stdev = 5,117
[info]   CI (99.9%): [261,429, 300,837] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1024,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1024,001, 1024,001, 1024,001), stdev = 0,001
[info]   CI (99.9%): [1024,001, 1024,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   307,065 ±(99.9%) 1079,378 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 307,065, 511,795), stdev = 280,311
[info]   CI (99.9%): [≈ 0, 1386,444] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1111,519 ±(99.9%) 3907,192 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1111,519, 1856,777), stdev = 1014,685
[info]   CI (99.9%): [≈ 0, 5018,711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,019 ±(99.9%) 0,129 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,019, 0,077), stdev = 0,034
[info]   CI (99.9%): [≈ 0, 0,148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,068 ±(99.9%) 0,469 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,068, 0,281), stdev = 0,122
[info]   CI (99.9%): [≈ 0, 0,537] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 23,90% complete, ETA 01:40:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 28209,548 ops/s
[info] # Warmup Iteration   2: 42670,560 ops/s
[info] # Warmup Iteration   3: 43113,009 ops/s
[info] # Warmup Iteration   4: 43274,330 ops/s
[info] # Warmup Iteration   5: 43363,928 ops/s
[info] Iteration   1: 43318,174 ops/s
[info]                  ·gc.alloc.rate:                   2271,660 MB/sec
[info]                  ·gc.alloc.rate.norm:              82504,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016,695 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73243,982 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,025 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 42779,205 ops/s
[info]                  ·gc.alloc.rate:                   2243,424 MB/sec
[info]                  ·gc.alloc.rate.norm:              82504,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2696,063 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     99150,214 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,595 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 43376,919 ops/s
[info]                  ·gc.alloc.rate:                   2274,730 MB/sec
[info]                  ·gc.alloc.rate.norm:              82504,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2026,716 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73508,595 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,266 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 43383,839 ops/s
[info]                  ·gc.alloc.rate:                   2275,139 MB/sec
[info]                  ·gc.alloc.rate.norm:              82504,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2030,039 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73615,864 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,510 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 42714,066 ops/s
[info]                  ·gc.alloc.rate:               2240,004 MB/sec
[info]                  ·gc.alloc.rate.norm:          82504,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2711,437 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 99867,887 B/op
[info]                  ·gc.count:                    4,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson":
[info]   43114,440 ±(99.9%) 1299,643 ops/s [Average]
[info]   (min, avg, max) = (42714,066, 43114,440, 43383,839), stdev = 337,513
[info]   CI (99.9%): [41814,798, 44414,083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2260,991 ±(99.9%) 68,120 MB/sec [Average]
[info]   (min, avg, max) = (2240,004, 2260,991, 2275,139), stdev = 17,690
[info]   CI (99.9%): [2192,872, 2329,111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   82504,010 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (82504,010, 82504,010, 82504,011), stdev = 0,001
[info]   CI (99.9%): [82504,009, 82504,012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2296,190 ±(99.9%) 1432,909 MB/sec [Average]
[info]   (min, avg, max) = (2016,695, 2296,190, 2711,437), stdev = 372,122
[info]   CI (99.9%): [863,281, 3729,099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   83877,308 ±(99.9%) 54958,933 B/op [Average]
[info]   (min, avg, max) = (73243,982, 83877,308, 99867,887), stdev = 14272,660
[info]   CI (99.9%): [28918,375, 138836,241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,062 ±(99.9%) 0,179 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,062, 0,125), stdev = 0,047
[info]   CI (99.9%): [≈ 0, 0,242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2,279 ±(99.9%) 6,587 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,279, 4,595), stdev = 1,711
[info]   CI (99.9%): [≈ 0, 8,866] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.count":
[info]   17,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,400, 4,000), stdev = 0,548
[info]   CI (99.9%): [17,000, 17,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.time":
[info]   12,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 24,10% complete, ETA 01:40:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 60671,557 ops/s
[info] # Warmup Iteration   2: 65495,277 ops/s
[info] # Warmup Iteration   3: 66216,802 ops/s
[info] # Warmup Iteration   4: 65933,286 ops/s
[info] # Warmup Iteration   5: 65911,374 ops/s
[info] Iteration   1: 65389,757 ops/s
[info]                  ·gc.alloc.rate:                   1451,049 MB/sec
[info]                  ·gc.alloc.rate.norm:              34912,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,777 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32451,343 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,002 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 66241,295 ops/s
[info]                  ·gc.alloc.rate:                   1469,945 MB/sec
[info]                  ·gc.alloc.rate.norm:              34912,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1349,374 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32048,395 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,978 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 66271,061 ops/s
[info]                  ·gc.alloc.rate:                   1470,584 MB/sec
[info]                  ·gc.alloc.rate.norm:              34912,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350,037 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32050,193 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,494 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 66280,189 ops/s
[info]                  ·gc.alloc.rate:                   1470,774 MB/sec
[info]                  ·gc.alloc.rate.norm:              34912,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1351,341 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32076,992 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,989 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 65475,526 ops/s
[info]                  ·gc.alloc.rate:               1452,928 MB/sec
[info]                  ·gc.alloc.rate.norm:          34912,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2029,694 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 48770,977 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readUPickle":
[info]   65931,566 ±(99.9%) 1758,543 ops/s [Average]
[info]   (min, avg, max) = (65389,757, 65931,566, 66280,189), stdev = 456,688
[info]   CI (99.9%): [64173,023, 67690,108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1463,056 ±(99.9%) 39,006 MB/sec [Average]
[info]   (min, avg, max) = (1451,049, 1463,056, 1470,774), stdev = 10,130
[info]   CI (99.9%): [1424,050, 1502,062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   34912,007 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (34912,007, 34912,007, 34912,007), stdev = 0,001
[info]   CI (99.9%): [34912,006, 34912,007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1485,845 ±(99.9%) 1170,683 MB/sec [Average]
[info]   (min, avg, max) = (1348,777, 1485,845, 2029,694), stdev = 304,023
[info]   CI (99.9%): [315,161, 2656,528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   35479,580 ±(99.9%) 28618,263 B/op [Average]
[info]   (min, avg, max) = (32048,395, 35479,580, 48770,977), stdev = 7432,072
[info]   CI (99.9%): [6861,317, 64097,843] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,119 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,083), stdev = 0,031
[info]   CI (99.9%): [≈ 0, 0,156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,893 ±(99.9%) 2,827 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,893, 1,978), stdev = 0,734
[info]   CI (99.9%): [≈ 0, 3,719] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readUPickle:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readUPickle:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 24,30% complete, ETA 01:40:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 75881,714 ops/s
[info] # Warmup Iteration   2: 95551,359 ops/s
[info] # Warmup Iteration   3: 95212,742 ops/s
[info] # Warmup Iteration   4: 95618,667 ops/s
[info] # Warmup Iteration   5: 95351,982 ops/s
[info] Iteration   1: 83117,207 ops/s
[info]                  ·gc.alloc.rate:                   664,427 MB/sec
[info]                  ·gc.alloc.rate.norm:              12576,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670,766 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12695,984 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,788 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 92468,469 ops/s
[info]                  ·gc.alloc.rate:               739,093 MB/sec
[info]                  ·gc.alloc.rate.norm:          12576,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670,336 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11406,069 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 95261,759 ops/s
[info]                  ·gc.alloc.rate:               761,464 MB/sec
[info]                  ·gc.alloc.rate.norm:          12576,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670,330 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11070,888 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 95307,817 ops/s
[info]                  ·gc.alloc.rate:                   761,842 MB/sec
[info]                  ·gc.alloc.rate.norm:              12576,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670,673 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11071,046 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,344 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 95566,010 ops/s
[info]                  ·gc.alloc.rate:                   763,884 MB/sec
[info]                  ·gc.alloc.rate.norm:              12576,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670,628 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11040,702 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,343 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce":
[info]   92344,252 ±(99.9%) 20450,878 ops/s [Average]
[info]   (min, avg, max) = (83117,207, 92344,252, 95566,010), stdev = 5311,028
[info]   CI (99.9%): [71893,374, 112795,131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate":
[info]   738,142 ±(99.9%) 163,404 MB/sec [Average]
[info]   (min, avg, max) = (664,427, 738,142, 763,884), stdev = 42,435
[info]   CI (99.9%): [574,739, 901,546] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   12576,005 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (12576,005, 12576,005, 12576,006), stdev = 0,001
[info]   CI (99.9%): [12576,003, 12576,007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   670,547 ±(99.9%) 0,774 MB/sec [Average]
[info]   (min, avg, max) = (670,330, 670,547, 670,766), stdev = 0,201
[info]   CI (99.9%): [669,773, 671,321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   11456,938 ±(99.9%) 2728,951 B/op [Average]
[info]   (min, avg, max) = (11040,702, 11456,938, 12695,984), stdev = 708,700
[info]   CI (99.9%): [8727,987, 14185,888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,017 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,042), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,295 ±(99.9%) 1,251 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,295, 0,788), stdev = 0,325
[info]   CI (99.9%): [≈ 0, 1,546] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 24,50% complete, ETA 01:39:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16065,175 ops/s
[info] # Warmup Iteration   2: 123030,814 ops/s
[info] # Warmup Iteration   3: 122283,609 ops/s
[info] # Warmup Iteration   4: 121742,673 ops/s
[info] # Warmup Iteration   5: 123459,444 ops/s
[info] Iteration   1: 119357,864 ops/s
[info]                  ·gc.alloc.rate:               441,870 MB/sec
[info]                  ·gc.alloc.rate.norm:          5824,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,807 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6745,796 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 123473,881 ops/s
[info]                  ·gc.alloc.rate:                   457,096 MB/sec
[info]                  ·gc.alloc.rate.norm:              5824,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,821 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6521,280 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,024 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,300 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 123466,959 ops/s
[info]                  ·gc.alloc.rate:               457,073 MB/sec
[info]                  ·gc.alloc.rate.norm:          5824,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664,085 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8461,736 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 123559,124 ops/s
[info]                  ·gc.alloc.rate:      457,408 MB/sec
[info]                  ·gc.alloc.rate.norm: 5824,004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 123466,113 ops/s
[info]                  ·gc.alloc.rate:                   457,066 MB/sec
[info]                  ·gc.alloc.rate.norm:              5824,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664,096 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8462,011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,014 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,173 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava":
[info]   122664,788 ±(99.9%) 7120,000 ops/s [Average]
[info]   (min, avg, max) = (119357,864, 122664,788, 123559,124), stdev = 1849,041
[info]   CI (99.9%): [115544,788, 129784,788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   454,103 ±(99.9%) 26,337 MB/sec [Average]
[info]   (min, avg, max) = (441,870, 454,103, 457,408), stdev = 6,840
[info]   CI (99.9%): [427,766, 480,440] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   5824,004 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (5824,003, 5824,004, 5824,004), stdev = 0,001
[info]   CI (99.9%): [5824,003, 5824,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   470,362 ±(99.9%) 1054,082 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 470,362, 664,096), stdev = 273,742
[info]   CI (99.9%): [≈ 0, 1524,444] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   6038,165 ±(99.9%) 13469,317 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6038,165, 8462,011), stdev = 3497,939
[info]   CI (99.9%): [≈ 0, 19507,481] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,007 ±(99.9%) 0,041 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,007, 0,024), stdev = 0,011
[info]   CI (99.9%): [≈ 0, 0,049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0,095 ±(99.9%) 0,528 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,095, 0,300), stdev = 0,137
[info]   CI (99.9%): [≈ 0, 0,623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,600, 3,000), stdev = 1,140
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 24,70% complete, ETA 01:39:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 83902,384 ops/s
[info] # Warmup Iteration   2: 110418,465 ops/s
[info] # Warmup Iteration   3: 110323,761 ops/s
[info] # Warmup Iteration   4: 109648,653 ops/s
[info] # Warmup Iteration   5: 108912,888 ops/s
[info] Iteration   1: 110626,575 ops/s
[info]                  ·gc.alloc.rate:               436,515 MB/sec
[info]                  ·gc.alloc.rate.norm:          6208,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,790 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7278,553 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 111071,030 ops/s
[info]                  ·gc.alloc.rate:      438,277 MB/sec
[info]                  ·gc.alloc.rate.norm: 6208,004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 108240,267 ops/s
[info]                  ·gc.alloc.rate:                   427,111 MB/sec
[info]                  ·gc.alloc.rate.norm:              6208,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,797 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7438,907 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      ≈ 10⁻⁵ MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 108885,911 ops/s
[info]                  ·gc.alloc.rate:                   429,621 MB/sec
[info]                  ·gc.alloc.rate.norm:              6208,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668,002 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9652,603 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,095 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30,272 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 110613,918 ops/s
[info]                  ·gc.alloc.rate:      436,446 MB/sec
[info]                  ·gc.alloc.rate.norm: 6208,004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala":
[info]   109887,540 ±(99.9%) 4790,617 ops/s [Average]
[info]   (min, avg, max) = (108240,267, 109887,540, 111071,030), stdev = 1244,108
[info]   CI (99.9%): [105096,923, 114678,157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   433,594 ±(99.9%) 18,905 MB/sec [Average]
[info]   (min, avg, max) = (427,111, 433,594, 438,277), stdev = 4,910
[info]   CI (99.9%): [414,689, 452,499] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   6208,004 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (6208,004, 6208,004, 6208,004), stdev = 0,001
[info]   CI (99.9%): [6208,004, 6208,005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   338,318 ±(99.9%) 1214,323 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 338,318, 668,002), stdev = 315,356
[info]   CI (99.9%): [≈ 0, 1552,641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   4874,013 ±(99.9%) 17509,575 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4874,013, 9652,603), stdev = 4547,181
[info]   CI (99.9%): [≈ 0, 22383,588] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,419 ±(99.9%) 3,608 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,419, 2,095), stdev = 0,937
[info]   CI (99.9%): [≈ 0, 4,027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   6,054 ±(99.9%) 52,130 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6,054, 30,272), stdev = 13,538
[info]   CI (99.9%): [≈ 0, 58,184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 3,000), stdev = 1,304
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 24,90% complete, ETA 01:39:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 118331,657 ops/s
[info] # Warmup Iteration   2: 124050,337 ops/s
[info] # Warmup Iteration   3: 124032,882 ops/s
[info] # Warmup Iteration   4: 125016,815 ops/s
[info] # Warmup Iteration   5: 125027,831 ops/s
[info] Iteration   1: 124478,856 ops/s
[info]                  ·gc.alloc.rate:                   460,805 MB/sec
[info]                  ·gc.alloc.rate.norm:              5824,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,768 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6468,116 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,006 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,075 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 124785,116 ops/s
[info]                  ·gc.alloc.rate:               461,923 MB/sec
[info]                  ·gc.alloc.rate.norm:          5824,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,756 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6452,310 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 124769,417 ops/s
[info]                  ·gc.alloc.rate:                   461,885 MB/sec
[info]                  ·gc.alloc.rate.norm:              5824,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,372 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8490,681 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1,585 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19,984 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 125567,594 ops/s
[info]                  ·gc.alloc.rate:      464,836 MB/sec
[info]                  ·gc.alloc.rate.norm: 5824,003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 125233,213 ops/s
[info]                  ·gc.alloc.rate:                   463,581 MB/sec
[info]                  ·gc.alloc.rate.norm:              5824,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,345 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8459,296 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,046 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala":
[info]   124966,839 ±(99.9%) 1658,448 ops/s [Average]
[info]   (min, avg, max) = (124478,856, 124966,839, 125567,594), stdev = 430,694
[info]   CI (99.9%): [123308,391, 126625,287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   462,606 ±(99.9%) 6,135 MB/sec [Average]
[info]   (min, avg, max) = (460,805, 462,606, 464,836), stdev = 1,593
[info]   CI (99.9%): [456,471, 468,741] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   5824,004 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (5824,003, 5824,004, 5824,004), stdev = 0,001
[info]   CI (99.9%): [5824,003, 5824,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   474,048 ±(99.9%) 1066,802 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 474,048, 673,372), stdev = 277,045
[info]   CI (99.9%): [≈ 0, 1540,850] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   5974,081 ±(99.9%) 13432,069 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5974,081, 8490,681), stdev = 3488,266
[info]   CI (99.9%): [≈ 0, 19406,149] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,335 ±(99.9%) 2,694 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,335, 1,585), stdev = 0,700
[info]   CI (99.9%): [≈ 0, 3,029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4,221 ±(99.9%) 33,974 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4,221, 19,984), stdev = 8,823
[info]   CI (99.9%): [≈ 0, 38,195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 25,10% complete, ETA 01:39:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 118398,335 ops/s
[info] # Warmup Iteration   2: 125081,431 ops/s
[info] # Warmup Iteration   3: 125055,692 ops/s
[info] # Warmup Iteration   4: 126017,194 ops/s
[info] # Warmup Iteration   5: 125588,029 ops/s
[info] Iteration   1: 125843,768 ops/s
[info]                  ·gc.alloc.rate:               366,680 MB/sec
[info]                  ·gc.alloc.rate.norm:          4584,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,819 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6398,430 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 125894,858 ops/s
[info]                  ·gc.alloc.rate:                   366,832 MB/sec
[info]                  ·gc.alloc.rate.norm:              4584,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,819 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6395,787 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,015 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,186 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 125825,442 ops/s
[info]                  ·gc.alloc.rate:      366,629 MB/sec
[info]                  ·gc.alloc.rate.norm: 4584,003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 125036,477 ops/s
[info]                  ·gc.alloc.rate:               364,308 MB/sec
[info]                  ·gc.alloc.rate.norm:          4584,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,760 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6439,360 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   5: 125390,699 ops/s
[info]                  ·gc.alloc.rate:      365,335 MB/sec
[info]                  ·gc.alloc.rate.norm: 4584,003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc":
[info]   125598,249 ±(99.9%) 1438,897 ops/s [Average]
[info]   (min, avg, max) = (125036,477, 125598,249, 125894,858), stdev = 373,677
[info]   CI (99.9%): [124159,352, 127037,146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   365,957 ±(99.9%) 4,239 MB/sec [Average]
[info]   (min, avg, max) = (364,308, 365,957, 366,832), stdev = 1,101
[info]   CI (99.9%): [361,718, 370,196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   4584,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4584,003, 4584,003, 4584,003), stdev = 0,001
[info]   CI (99.9%): [4584,003, 4584,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   307,080 ±(99.9%) 1079,428 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 307,080, 511,819), stdev = 280,324
[info]   CI (99.9%): [≈ 0, 1386,508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   3846,715 ±(99.9%) 13521,910 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3846,715, 6439,360), stdev = 3511,597
[info]   CI (99.9%): [≈ 0, 17368,626] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0,003 ±(99.9%) 0,026 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,003, 0,015), stdev = 0,007
[info]   CI (99.9%): [≈ 0, 0,029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   0,037 ±(99.9%) 0,321 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,186), stdev = 0,083
[info]   CI (99.9%): [≈ 0, 0,358] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 25,30% complete, ETA 01:38:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7506,297 ops/s
[info] # Warmup Iteration   2: 10686,541 ops/s
[info] # Warmup Iteration   3: 10717,176 ops/s
[info] # Warmup Iteration   4: 10745,379 ops/s
[info] # Warmup Iteration   5: 10764,342 ops/s
[info] Iteration   1: 10799,558 ops/s
[info]                  ·gc.alloc.rate:                   1793,734 MB/sec
[info]                  ·gc.alloc.rate.norm:              261304,040 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,043 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     196086,236 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9,101 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 10710,172 ops/s
[info]                  ·gc.alloc.rate:                   1778,838 MB/sec
[info]                  ·gc.alloc.rate.norm:              261308,156 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2021,899 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     297013,336 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15,294 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 10705,174 ops/s
[info]                  ·gc.alloc.rate:               1777,978 MB/sec
[info]                  ·gc.alloc.rate.norm:          261304,043 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1349,930 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 198395,123 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 10748,900 ops/s
[info]                  ·gc.alloc.rate:                   1785,342 MB/sec
[info]                  ·gc.alloc.rate.norm:              261304,040 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2027,293 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     296716,190 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6,095 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 10738,307 ops/s
[info]                  ·gc.alloc.rate:                   1783,534 MB/sec
[info]                  ·gc.alloc.rate.norm:              261304,055 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2030,645 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     297508,180 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6,101 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce":
[info]   10740,422 ±(99.9%) 145,751 ops/s [Average]
[info]   (min, avg, max) = (10705,174, 10740,422, 10799,558), stdev = 37,851
[info]   CI (99.9%): [10594,671, 10886,173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate":
[info]   1783,885 ±(99.9%) 24,324 MB/sec [Average]
[info]   (min, avg, max) = (1777,978, 1783,885, 1793,734), stdev = 6,317
[info]   CI (99.9%): [1759,562, 1808,209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   261304,867 ±(99.9%) 7,080 B/op [Average]
[info]   (min, avg, max) = (261304,040, 261304,867, 261308,156), stdev = 1,839
[info]   CI (99.9%): [261297,787, 261311,946] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1755,162 ±(99.9%) 1431,339 MB/sec [Average]
[info]   (min, avg, max) = (1346,043, 1755,162, 2030,645), stdev = 371,714
[info]   CI (99.9%): [323,823, 3186,501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   257143,813 ±(99.9%) 210594,233 B/op [Average]
[info]   (min, avg, max) = (196086,236, 257143,813, 297508,180), stdev = 54690,654
[info]   CI (99.9%): [46549,580, 467738,046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,050 ±(99.9%) 0,146 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,050, 0,104), stdev = 0,038
[info]   CI (99.9%): [≈ 0, 0,196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   7,318 ±(99.9%) 21,380 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7,318, 15,294), stdev = 5,552
[info]   CI (99.9%): [≈ 0, 28,698] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 25,50% complete, ETA 01:38:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6592,418 ops/s
[info] # Warmup Iteration   2: 10894,449 ops/s
[info] # Warmup Iteration   3: 11057,588 ops/s
[info] # Warmup Iteration   4: 11107,330 ops/s
[info] # Warmup Iteration   5: 11087,519 ops/s
[info] Iteration   1: 11115,105 ops/s
[info]                  ·gc.alloc.rate:                   1713,167 MB/sec
[info]                  ·gc.alloc.rate.norm:              242456,652 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339,263 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     189539,756 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,895 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 11064,153 ops/s
[info]                  ·gc.alloc.rate:                   1705,312 MB/sec
[info]                  ·gc.alloc.rate.norm:              242488,872 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011,284 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     285996,806 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14,804 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 10449,158 ops/s
[info]                  ·gc.alloc.rate:               1610,546 MB/sec
[info]                  ·gc.alloc.rate.norm:          242488,044 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344,097 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 202370,854 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 10235,092 ops/s
[info]                  ·gc.alloc.rate:                   1577,624 MB/sec
[info]                  ·gc.alloc.rate.norm:              242488,042 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020,217 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     310516,572 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12,804 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 10693,989 ops/s
[info]                  ·gc.alloc.rate:                   1648,311 MB/sec
[info]                  ·gc.alloc.rate.norm:              242488,055 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1349,103 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     198470,654 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9,191 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala":
[info]   10711,500 ±(99.9%) 1470,517 ops/s [Average]
[info]   (min, avg, max) = (10235,092, 10711,500, 11115,105), stdev = 381,889
[info]   CI (99.9%): [9240,983, 12182,017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1650,992 ±(99.9%) 226,521 MB/sec [Average]
[info]   (min, avg, max) = (1577,624, 1650,992, 1713,167), stdev = 58,827
[info]   CI (99.9%): [1424,471, 1877,513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   242481,933 ±(99.9%) 54,437 B/op [Average]
[info]   (min, avg, max) = (242456,652, 242481,933, 242488,872), stdev = 14,137
[info]   CI (99.9%): [242427,496, 242536,370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1612,793 ±(99.9%) 1416,568 MB/sec [Average]
[info]   (min, avg, max) = (1339,263, 1612,793, 2020,217), stdev = 367,878
[info]   CI (99.9%): [196,225, 3029,361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   237378,928 ±(99.9%) 217321,167 B/op [Average]
[info]   (min, avg, max) = (189539,756, 237378,928, 310516,572), stdev = 56437,617
[info]   CI (99.9%): [20057,761, 454700,095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,058 ±(99.9%) 0,154 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,058, 0,104), stdev = 0,040
[info]   CI (99.9%): [≈ 0, 0,213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   8,539 ±(99.9%) 22,599 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8,539, 14,804), stdev = 5,869
[info]   CI (99.9%): [≈ 0, 31,138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.time":
[info]   10,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 2,000, 3,000), stdev = 0,707
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 25,70% complete, ETA 01:38:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 220564,964 ops/s
[info] # Warmup Iteration   2: 232776,252 ops/s
[info] # Warmup Iteration   3: 232709,895 ops/s
[info] # Warmup Iteration   4: 223369,792 ops/s
[info] # Warmup Iteration   5: 232653,354 ops/s
[info] Iteration   1: 194690,139 ops/s
[info]                  ·gc.alloc.rate:                   506,888 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,821 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4135,863 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,084 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 232801,311 ops/s
[info]                  ·gc.alloc.rate:                   606,113 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,761 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4553,152 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1,554 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10,500 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 232967,053 ops/s
[info]                  ·gc.alloc.rate:                   606,548 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,764 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4549,908 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,563 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 232875,063 ops/s
[info]                  ·gc.alloc.rate:               606,292 MB/sec
[info]                  ·gc.alloc.rate.norm:          4096,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,740 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4551,666 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 228600,860 ops/s
[info]                  ·gc.alloc.rate:                   595,167 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,753 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4636,835 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,430 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala":
[info]   224386,885 ±(99.9%) 64322,045 ops/s [Average]
[info]   (min, avg, max) = (194690,139, 224386,885, 232967,053), stdev = 16704,231
[info]   CI (99.9%): [160064,840, 288708,930] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   584,202 ±(99.9%) 167,460 MB/sec [Average]
[info]   (min, avg, max) = (506,888, 584,202, 606,548), stdev = 43,489
[info]   CI (99.9%): [416,742, 751,662] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4096,002, 4096,002, 4096,002), stdev = 0,001
[info]   CI (99.9%): [4096,001, 4096,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   641,368 ±(99.9%) 278,859 MB/sec [Average]
[info]   (min, avg, max) = (511,821, 641,368, 673,764), stdev = 72,419
[info]   CI (99.9%): [362,509, 920,227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4485,485 ±(99.9%) 765,908 B/op [Average]
[info]   (min, avg, max) = (4135,863, 4485,485, 4636,835), stdev = 198,904
[info]   CI (99.9%): [3719,576, 5251,393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,342 ±(99.9%) 2,612 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,342, 1,554), stdev = 0,678
[info]   CI (99.9%): [≈ 0, 2,954] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2,315 ±(99.9%) 17,641 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,315, 10,500), stdev = 4,581
[info]   CI (99.9%): [≈ 0, 19,957] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 25,90% complete, ETA 01:38:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3577,674 ops/s
[info] # Warmup Iteration   2: 5989,407 ops/s
[info] # Warmup Iteration   3: 6128,906 ops/s
[info] # Warmup Iteration   4: 6131,911 ops/s
[info] # Warmup Iteration   5: 6169,743 ops/s
[info] Iteration   1: 6143,849 ops/s
[info]                  ·gc.alloc.rate:                   1636,542 MB/sec
[info]                  ·gc.alloc.rate.norm:              419048,070 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009,898 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     514648,471 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15,995 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 6113,082 ops/s
[info]                  ·gc.alloc.rate:               1628,337 MB/sec
[info]                  ·gc.alloc.rate.norm:          419048,076 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341,971 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 345352,750 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 6138,348 ops/s
[info]                  ·gc.alloc.rate:                   1635,062 MB/sec
[info]                  ·gc.alloc.rate.norm:              419048,070 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016,706 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     516859,164 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21,347 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 6140,020 ops/s
[info]                  ·gc.alloc.rate:                   1635,488 MB/sec
[info]                  ·gc.alloc.rate.norm:              419048,070 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,604 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     345029,648 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,335 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 6136,817 ops/s
[info]                  ·gc.alloc.rate:                   1634,463 MB/sec
[info]                  ·gc.alloc.rate.norm:              419048,070 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,636 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     345766,996 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10,677 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson":
[info]   6134,424 ±(99.9%) 47,033 ops/s [Average]
[info]   (min, avg, max) = (6113,082, 6134,424, 6143,849), stdev = 12,214
[info]   CI (99.9%): [6087,391, 6181,456] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1633,978 ±(99.9%) 12,491 MB/sec [Average]
[info]   (min, avg, max) = (1628,337, 1633,978, 1636,542), stdev = 3,244
[info]   CI (99.9%): [1621,488, 1646,469] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   419048,071 ±(99.9%) 0,010 B/op [Average]
[info]   (min, avg, max) = (419048,070, 419048,071, 419048,076), stdev = 0,002
[info]   CI (99.9%): [419048,062, 419048,081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1612,763 ±(99.9%) 1408,012 MB/sec [Average]
[info]   (min, avg, max) = (1341,971, 1612,763, 2016,706), stdev = 365,656
[info]   CI (99.9%): [204,751, 3020,775] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   413531,406 ±(99.9%) 359340,193 B/op [Average]
[info]   (min, avg, max) = (345029,648, 413531,406, 516859,164), stdev = 93319,507
[info]   CI (99.9%): [54191,212, 772871,599] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,127 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,042, 0,083), stdev = 0,033
[info]   CI (99.9%): [≈ 0, 0,168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   10,671 ±(99.9%) 32,484 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10,671, 21,347), stdev = 8,436
[info]   CI (99.9%): [≈ 0, 43,155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 26,10% complete, ETA 01:37:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7843,410 ops/s
[info] # Warmup Iteration   2: 10346,160 ops/s
[info] # Warmup Iteration   3: 10459,474 ops/s
[info] # Warmup Iteration   4: 10411,841 ops/s
[info] # Warmup Iteration   5: 10477,701 ops/s
[info] Iteration   1: 10538,952 ops/s
[info]                  ·gc.alloc.rate:                   1723,254 MB/sec
[info]                  ·gc.alloc.rate.norm:              257248,041 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2021,767 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     301810,035 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6,217 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 10549,179 ops/s
[info]                  ·gc.alloc.rate:                   1725,071 MB/sec
[info]                  ·gc.alloc.rate.norm:              257268,962 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1349,303 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     201228,810 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,105 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 10524,428 ops/s
[info]                  ·gc.alloc.rate:                   1721,017 MB/sec
[info]                  ·gc.alloc.rate.norm:              257272,041 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2026,636 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     302958,479 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9,338 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 10433,968 ops/s
[info]                  ·gc.alloc.rate:                   1706,225 MB/sec
[info]                  ·gc.alloc.rate.norm:              257272,041 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,713 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     203967,926 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,140 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 10435,745 ops/s
[info]                  ·gc.alloc.rate:                   1706,510 MB/sec
[info]                  ·gc.alloc.rate.norm:              257272,057 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2030,490 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     306115,084 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,139 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readUPickle":
[info]   10496,455 ±(99.9%) 219,172 ops/s [Average]
[info]   (min, avg, max) = (10433,968, 10496,455, 10549,179), stdev = 56,918
[info]   CI (99.9%): [10277,283, 10715,626] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1716,415 ±(99.9%) 35,752 MB/sec [Average]
[info]   (min, avg, max) = (1706,225, 1716,415, 1725,071), stdev = 9,285
[info]   CI (99.9%): [1680,663, 1752,168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   257266,628 ±(99.9%) 40,340 B/op [Average]
[info]   (min, avg, max) = (257248,041, 257266,628, 257272,057), stdev = 10,476
[info]   CI (99.9%): [257226,288, 257306,969] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1756,182 ±(99.9%) 1424,300 MB/sec [Average]
[info]   (min, avg, max) = (1349,303, 1756,182, 2030,490), stdev = 369,886
[info]   CI (99.9%): [331,882, 3180,481] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   263216,067 ±(99.9%) 213198,801 B/op [Average]
[info]   (min, avg, max) = (201228,810, 263216,067, 306115,084), stdev = 55367,051
[info]   CI (99.9%): [50017,266, 476414,867] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,033, 0,062), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   4,988 ±(99.9%) 10,688 B/op [Average]
[info]   (min, avg, max) = (3,105, 4,988, 9,338), stdev = 2,776
[info]   CI (99.9%): [≈ 0, 15,676] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readUPickle:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readUPickle:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 26,31% complete, ETA 01:37:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19986,680 ops/s
[info] # Warmup Iteration   2: 27988,057 ops/s
[info] # Warmup Iteration   3: 28074,334 ops/s
[info] # Warmup Iteration   4: 28148,620 ops/s
[info] # Warmup Iteration   5: 27961,479 ops/s
[info] Iteration   1: 28131,042 ops/s
[info]                  ·gc.alloc.rate:                   2017,406 MB/sec
[info]                  ·gc.alloc.rate.norm:              112824,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017,095 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     112806,609 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,658 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 28172,954 ops/s
[info]                  ·gc.alloc.rate:                   2020,261 MB/sec
[info]                  ·gc.alloc.rate.norm:              112824,016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020,865 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     112857,736 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,651 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 28110,050 ops/s
[info]                  ·gc.alloc.rate:                   2015,811 MB/sec
[info]                  ·gc.alloc.rate.norm:              112824,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2025,001 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     113338,400 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,331 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 28113,474 ops/s
[info]                  ·gc.alloc.rate:                   2016,125 MB/sec
[info]                  ·gc.alloc.rate.norm:              112824,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2028,694 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     113527,370 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,331 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 28087,121 ops/s
[info]                  ·gc.alloc.rate:                   2014,139 MB/sec
[info]                  ·gc.alloc.rate.norm:              112824,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2031,309 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     113785,781 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,333 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce":
[info]   28122,928 ±(99.9%) 123,367 ops/s [Average]
[info]   (min, avg, max) = (28087,121, 28122,928, 28172,954), stdev = 32,038
[info]   CI (99.9%): [27999,561, 28246,295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate":
[info]   2016,749 ±(99.9%) 8,791 MB/sec [Average]
[info]   (min, avg, max) = (2014,139, 2016,749, 2020,261), stdev = 2,283
[info]   CI (99.9%): [2007,958, 2025,539] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   112824,016 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (112824,015, 112824,016, 112824,016), stdev = 0,001
[info]   CI (99.9%): [112824,014, 112824,017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2024,593 ±(99.9%) 22,138 MB/sec [Average]
[info]   (min, avg, max) = (2017,095, 2024,593, 2031,309), stdev = 5,749
[info]   CI (99.9%): [2002,455, 2046,730] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   113263,179 ±(99.9%) 1635,286 B/op [Average]
[info]   (min, avg, max) = (112806,609, 113263,179, 113785,781), stdev = 424,679
[info]   CI (99.9%): [111627,893, 114898,465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,058 ±(99.9%) 0,088 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,058, 0,083), stdev = 0,023
[info]   CI (99.9%): [≈ 0, 0,146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3,261 ±(99.9%) 4,900 B/op [Average]
[info]   (min, avg, max) = (2,331, 3,261, 4,658), stdev = 1,273
[info]   CI (99.9%): [≈ 0, 8,161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.count":
[info]   15,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,000, 3,000), stdev = 0,001
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.time":
[info]   10,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 26,51% complete, ETA 01:37:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16006,078 ops/s
[info] # Warmup Iteration   2: 31188,967 ops/s
[info] # Warmup Iteration   3: 33467,769 ops/s
[info] # Warmup Iteration   4: 33639,623 ops/s
[info] # Warmup Iteration   5: 33677,940 ops/s
[info] Iteration   1: 33675,463 ops/s
[info]                  ·gc.alloc.rate:                   1952,425 MB/sec
[info]                  ·gc.alloc.rate.norm:              91216,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011,117 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     93958,088 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,946 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 33791,453 ops/s
[info]                  ·gc.alloc.rate:                   1959,162 MB/sec
[info]                  ·gc.alloc.rate.norm:              91216,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015,009 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     93816,202 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,878 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 33657,078 ops/s
[info]                  ·gc.alloc.rate:                   1951,372 MB/sec
[info]                  ·gc.alloc.rate.norm:              91216,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020,043 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94426,038 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,920 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 33708,093 ops/s
[info]                  ·gc.alloc.rate:                   1954,343 MB/sec
[info]                  ·gc.alloc.rate.norm:              91216,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2024,117 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94472,611 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,972 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 33759,345 ops/s
[info]                  ·gc.alloc.rate:                   1957,253 MB/sec
[info]                  ·gc.alloc.rate.norm:              91216,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2028,674 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94544,501 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,941 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala":
[info]   33718,286 ±(99.9%) 217,173 ops/s [Average]
[info]   (min, avg, max) = (33657,078, 33718,286, 33791,453), stdev = 56,399
[info]   CI (99.9%): [33501,114, 33935,459] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1954,911 ±(99.9%) 12,565 MB/sec [Average]
[info]   (min, avg, max) = (1951,372, 1954,911, 1959,162), stdev = 3,263
[info]   CI (99.9%): [1942,346, 1967,475] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   91216,013 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (91216,013, 91216,013, 91216,014), stdev = 0,001
[info]   CI (99.9%): [91216,011, 91216,015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   2019,792 ±(99.9%) 26,940 MB/sec [Average]
[info]   (min, avg, max) = (2011,117, 2019,792, 2028,674), stdev = 6,996
[info]   CI (99.9%): [1992,853, 2046,732] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   94243,488 ±(99.9%) 1277,777 B/op [Average]
[info]   (min, avg, max) = (93816,202, 94243,488, 94544,501), stdev = 331,835
[info]   CI (99.9%): [92965,711, 95521,265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,050 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,050, 0,083), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2,331 ±(99.9%) 4,257 B/op [Average]
[info]   (min, avg, max) = (0,972, 2,331, 3,878), stdev = 1,105
[info]   CI (99.9%): [≈ 0, 6,588] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.count":
[info]   15,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,000, 3,000), stdev = 0,001
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.time":
[info]   11,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 26,71% complete, ETA 01:37:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 360852,724 ops/s
[info] # Warmup Iteration   2: 397838,428 ops/s
[info] # Warmup Iteration   3: 407827,930 ops/s
[info] # Warmup Iteration   4: 409846,981 ops/s
[info] # Warmup Iteration   5: 407885,050 ops/s
[info] Iteration   1: 408795,205 ops/s
[info]                  ·gc.alloc.rate:                   904,189 MB/sec
[info]                  ·gc.alloc.rate.norm:              3480,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2590,292 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,080 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 408520,367 ops/s
[info]                  ·gc.alloc.rate:               903,604 MB/sec
[info]                  ·gc.alloc.rate.norm:          3480,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,014 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2591,941 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 409645,535 ops/s
[info]                  ·gc.alloc.rate:                   906,057 MB/sec
[info]                  ·gc.alloc.rate.norm:              3480,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,011 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5169,786 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,320 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 409027,549 ops/s
[info]                  ·gc.alloc.rate:               904,707 MB/sec
[info]                  ·gc.alloc.rate.norm:          3480,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,686 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2591,368 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 409187,708 ops/s
[info]                  ·gc.alloc.rate:               905,083 MB/sec
[info]                  ·gc.alloc.rate.norm:          3480,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,722 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2590,430 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala":
[info]   409035,273 ±(99.9%) 1631,960 ops/s [Average]
[info]   (min, avg, max) = (408520,367, 409035,273, 409645,535), stdev = 423,815
[info]   CI (99.9%): [407403,313, 410667,233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   904,728 ±(99.9%) 3,574 MB/sec [Average]
[info]   (min, avg, max) = (903,604, 904,728, 906,057), stdev = 0,928
[info]   CI (99.9%): [901,154, 908,302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3480,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (3480,001, 3480,001, 3480,001), stdev = 0,001
[info]   CI (99.9%): [3480,001, 3480,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   807,891 ±(99.9%) 1158,345 MB/sec [Average]
[info]   (min, avg, max) = (673,014, 807,891, 1346,011), stdev = 300,818
[info]   CI (99.9%): [≈ 0, 1966,235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3106,763 ±(99.9%) 4440,813 B/op [Average]
[info]   (min, avg, max) = (2590,292, 3106,763, 5169,786), stdev = 1153,265
[info]   CI (99.9%): [≈ 0, 7547,577] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,021 ±(99.9%) 0,139 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,083), stdev = 0,036
[info]   CI (99.9%): [≈ 0, 0,160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,080 ±(99.9%) 0,533 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,080, 0,320), stdev = 0,139
[info]   CI (99.9%): [≈ 0, 0,613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 26,91% complete, ETA 01:36:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 441786,643 ops/s
[info] # Warmup Iteration   2: 452929,479 ops/s
[info] # Warmup Iteration   3: 472698,286 ops/s
[info] # Warmup Iteration   4: 472452,495 ops/s
[info] # Warmup Iteration   5: 472428,279 ops/s
[info] Iteration   1: 472193,502 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 472826,617 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 471502,341 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 472577,559 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 472560,690 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc":
[info]   472332,142 ±(99.9%) 1986,686 ops/s [Average]
[info]   (min, avg, max) = (471502,341, 472332,142, 472826,617), stdev = 515,936
[info]   CI (99.9%): [470345,456, 474318,828] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (0,001, 0,001, 0,001), stdev = 0,001
[info]   CI (99.9%): [0,001, 0,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 27,11% complete, ETA 01:36:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 23379,370 ops/s
[info] # Warmup Iteration   2: 33231,184 ops/s
[info] # Warmup Iteration   3: 33399,024 ops/s
[info] # Warmup Iteration   4: 33323,775 ops/s
[info] # Warmup Iteration   5: 33111,911 ops/s
[info] Iteration   1: 33577,893 ops/s
[info]                  ·gc.alloc.rate:                   2072,308 MB/sec
[info]                  ·gc.alloc.rate.norm:              97096,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017,005 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94504,840 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,878 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 33591,468 ops/s
[info]                  ·gc.alloc.rate:                   2073,119 MB/sec
[info]                  ·gc.alloc.rate.norm:              97096,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2021,012 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94655,526 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,852 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 33591,491 ops/s
[info]                  ·gc.alloc.rate:                   2073,156 MB/sec
[info]                  ·gc.alloc.rate.norm:              97096,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2024,986 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94839,954 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,851 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 33513,274 ops/s
[info]                  ·gc.alloc.rate:                   2068,358 MB/sec
[info]                  ·gc.alloc.rate.norm:              97096,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2028,392 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     95219,872 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,978 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 33581,459 ops/s
[info]                  ·gc.alloc.rate:                   2072,481 MB/sec
[info]                  ·gc.alloc.rate.norm:              97096,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2031,652 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     95183,192 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,927 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson":
[info]   33571,117 ±(99.9%) 126,662 ops/s [Average]
[info]   (min, avg, max) = (33513,274, 33571,117, 33591,491), stdev = 32,894
[info]   CI (99.9%): [33444,455, 33697,779] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2071,884 ±(99.9%) 7,728 MB/sec [Average]
[info]   (min, avg, max) = (2068,358, 2071,884, 2073,156), stdev = 2,007
[info]   CI (99.9%): [2064,157, 2079,612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   97096,013 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (97096,013, 97096,013, 97096,014), stdev = 0,001
[info]   CI (99.9%): [97096,011, 97096,015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2024,609 ±(99.9%) 22,356 MB/sec [Average]
[info]   (min, avg, max) = (2017,005, 2024,609, 2031,652), stdev = 5,806
[info]   CI (99.9%): [2002,253, 2046,966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   94880,677 ±(99.9%) 1217,945 B/op [Average]
[info]   (min, avg, max) = (94504,840, 94880,677, 95219,872), stdev = 316,296
[info]   CI (99.9%): [93662,732, 96098,622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,087 ±(99.9%) 0,174 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,087, 0,125), stdev = 0,045
[info]   CI (99.9%): [≈ 0, 0,261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   4,097 ±(99.9%) 8,138 B/op [Average]
[info]   (min, avg, max) = (0,978, 4,097, 5,852), stdev = 2,114
[info]   CI (99.9%): [≈ 0, 12,235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.count":
[info]   15,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,000, 3,000), stdev = 0,001
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.time":
[info]   10,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 27,31% complete, ETA 01:36:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10167,033 ops/s
[info] # Warmup Iteration   2: 11380,709 ops/s
[info] # Warmup Iteration   3: 11470,154 ops/s
[info] # Warmup Iteration   4: 11333,386 ops/s
[info] # Warmup Iteration   5: 11471,699 ops/s
[info] Iteration   1: 11543,761 ops/s
[info]                  ·gc.alloc.rate:               965,327 MB/sec
[info]                  ·gc.alloc.rate.norm:          131556,378 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,057 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 91725,425 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 11539,947 ops/s
[info]                  ·gc.alloc.rate:                   965,119 MB/sec
[info]                  ·gc.alloc.rate.norm:              131568,037 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,172 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     183514,427 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11,356 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 11548,390 ops/s
[info]                  ·gc.alloc.rate:               965,743 MB/sec
[info]                  ·gc.alloc.rate.norm:          131568,037 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,055 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 91693,659 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 11449,652 ops/s
[info]                  ·gc.alloc.rate:                   957,551 MB/sec
[info]                  ·gc.alloc.rate.norm:              131568,054 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,445 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     185139,772 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,723 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 11066,690 ops/s
[info]                  ·gc.alloc.rate:               925,493 MB/sec
[info]                  ·gc.alloc.rate.norm:          131565,821 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,043 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 95820,275 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeUPickle":
[info]   11429,688 ±(99.9%) 797,152 ops/s [Average]
[info]   (min, avg, max) = (11066,690, 11429,688, 11548,390), stdev = 207,018
[info]   CI (99.9%): [10632,536, 12226,840] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   955,847 ±(99.9%) 66,640 MB/sec [Average]
[info]   (min, avg, max) = (925,493, 955,847, 965,743), stdev = 17,306
[info]   CI (99.9%): [889,206, 1022,487] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   131565,266 ±(99.9%) 19,486 B/op [Average]
[info]   (min, avg, max) = (131556,378, 131565,266, 131568,054), stdev = 5,061
[info]   CI (99.9%): [131545,779, 131584,752] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   942,755 ±(99.9%) 1420,309 MB/sec [Average]
[info]   (min, avg, max) = (673,055, 942,755, 1347,445), stdev = 368,850
[info]   CI (99.9%): [≈ 0, 2363,064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   129578,712 ±(99.9%) 192569,481 B/op [Average]
[info]   (min, avg, max) = (91693,659, 129578,712, 185139,772), stdev = 50009,683
[info]   CI (99.9%): [≈ 0, 322148,193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,083), stdev = 0,037
[info]   CI (99.9%): [≈ 0, 0,168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   3,416 ±(99.9%) 19,575 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3,416, 11,356), stdev = 5,084
[info]   CI (99.9%): [≈ 0, 22,991] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeUPickle:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeUPickle:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 27,51% complete, ETA 01:36:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 94399,678 ops/s
[info] # Warmup Iteration   2: 107366,633 ops/s
[info] # Warmup Iteration   3: 108522,867 ops/s
[info] # Warmup Iteration   4: 108215,318 ops/s
[info] # Warmup Iteration   5: 107536,141 ops/s
[info] Iteration   1: 108665,067 ops/s
[info]                  ·gc.alloc.rate:               1873,701 MB/sec
[info]                  ·gc.alloc.rate.norm:          27128,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1347,367 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19507,583 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 108831,207 ops/s
[info]                  ·gc.alloc.rate:                   1876,593 MB/sec
[info]                  ·gc.alloc.rate.norm:              27128,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2023,378 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29249,929 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,204 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 108238,129 ops/s
[info]                  ·gc.alloc.rate:                   1866,339 MB/sec
[info]                  ·gc.alloc.rate.norm:              27128,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2027,807 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29475,006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,605 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 108535,322 ops/s
[info]                  ·gc.alloc.rate:                   1871,588 MB/sec
[info]                  ·gc.alloc.rate.norm:              27128,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2030,650 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29433,543 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,906 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 108142,271 ops/s
[info]                  ·gc.alloc.rate:                   1864,678 MB/sec
[info]                  ·gc.alloc.rate.norm:              27128,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1355,396 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19718,786 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,303 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce":
[info]   108482,399 ±(99.9%) 1111,347 ops/s [Average]
[info]   (min, avg, max) = (108142,271, 108482,399, 108831,207), stdev = 288,613
[info]   CI (99.9%): [107371,053, 109593,746] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   1870,580 ±(99.9%) 19,227 MB/sec [Average]
[info]   (min, avg, max) = (1864,678, 1870,580, 1876,593), stdev = 4,993
[info]   CI (99.9%): [1851,353, 1889,807] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   27128,004 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (27128,004, 27128,004, 27128,004), stdev = 0,001
[info]   CI (99.9%): [27128,004, 27128,005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1756,920 ±(99.9%) 1425,600 MB/sec [Average]
[info]   (min, avg, max) = (1347,367, 1756,920, 2030,650), stdev = 370,224
[info]   CI (99.9%): [331,319, 3182,520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   25476,969 ±(99.9%) 20616,616 B/op [Average]
[info]   (min, avg, max) = (19507,583, 25476,969, 29475,006), stdev = 5354,070
[info]   CI (99.9%): [4860,354, 46093,585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,127 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,042, 0,083), stdev = 0,033
[info]   CI (99.9%): [≈ 0, 0,168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,604 ±(99.9%) 1,833 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,604, 1,204), stdev = 0,476
[info]   CI (99.9%): [≈ 0, 2,437] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 27,71% complete, ETA 01:35:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 83323,744 ops/s
[info] # Warmup Iteration   2: 470045,208 ops/s
[info] # Warmup Iteration   3: 471469,504 ops/s
[info] # Warmup Iteration   4: 470782,248 ops/s
[info] # Warmup Iteration   5: 471186,269 ops/s
[info] Iteration   1: 470887,300 ops/s
[info]                  ·gc.alloc.rate:               488,469 MB/sec
[info]                  ·gc.alloc.rate.norm:          1632,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,771 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1709,853 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   2: 472543,268 ops/s
[info]                  ·gc.alloc.rate:      490,185 MB/sec
[info]                  ·gc.alloc.rate.norm: 1632,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 470476,329 ops/s
[info]                  ·gc.alloc.rate:               488,035 MB/sec
[info]                  ·gc.alloc.rate.norm:          1632,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664,025 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2220,516 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 470441,332 ops/s
[info]                  ·gc.alloc.rate:                   488,001 MB/sec
[info]                  ·gc.alloc.rate.norm:              1632,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664,039 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2220,719 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,139 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 452737,619 ops/s
[info]                  ·gc.alloc.rate:               469,635 MB/sec
[info]                  ·gc.alloc.rate.norm:          1632,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665,372 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2312,194 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava":
[info]   467417,170 ±(99.9%) 31771,425 ops/s [Average]
[info]   (min, avg, max) = (452737,619, 467417,170, 472543,268), stdev = 8250,938
[info]   CI (99.9%): [435645,745, 499188,594] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   484,865 ±(99.9%) 32,963 MB/sec [Average]
[info]   (min, avg, max) = (469,635, 484,865, 490,185), stdev = 8,560
[info]   CI (99.9%): [451,902, 517,828] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   1632,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1632,001, 1632,001, 1632,001), stdev = 0,001
[info]   CI (99.9%): [1632,001, 1632,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   501,041 ±(99.9%) 1108,180 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 501,041, 665,372), stdev = 287,791
[info]   CI (99.9%): [≈ 0, 1609,221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   1692,656 ±(99.9%) 3756,448 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1692,656, 2312,194), stdev = 975,538
[info]   CI (99.9%): [≈ 0, 5449,104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,008 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,008, 0,042), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0,028 ±(99.9%) 0,240 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,028, 0,139), stdev = 0,062
[info]   CI (99.9%): [≈ 0, 0,268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,400, 3,000), stdev = 1,140
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 27,91% complete, ETA 01:35:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 250737,938 ops/s
[info] # Warmup Iteration   2: 337512,440 ops/s
[info] # Warmup Iteration   3: 339460,829 ops/s
[info] # Warmup Iteration   4: 340003,675 ops/s
[info] # Warmup Iteration   5: 339332,691 ops/s
[info] Iteration   1: 338636,521 ops/s
[info]                  ·gc.alloc.rate:               478,684 MB/sec
[info]                  ·gc.alloc.rate.norm:          2224,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,745 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2377,604 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   2: 340263,925 ops/s
[info]                  ·gc.alloc.rate:               480,991 MB/sec
[info]                  ·gc.alloc.rate.norm:          2224,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,750 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2366,224 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 340117,952 ops/s
[info]                  ·gc.alloc.rate:                   480,785 MB/sec
[info]                  ·gc.alloc.rate.norm:              2224,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668,004 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3090,030 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,178 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10,076 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 341318,116 ops/s
[info]                  ·gc.alloc.rate:      482,488 MB/sec
[info]                  ·gc.alloc.rate.norm: 2224,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 336087,105 ops/s
[info]                  ·gc.alloc.rate:                   475,092 MB/sec
[info]                  ·gc.alloc.rate.norm:              2224,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668,016 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3127,121 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,292 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala":
[info]   339284,724 ±(99.9%) 7804,734 ops/s [Average]
[info]   (min, avg, max) = (336087,105, 339284,724, 341318,116), stdev = 2026,865
[info]   CI (99.9%): [331479,989, 347089,458] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   479,608 ±(99.9%) 11,034 MB/sec [Average]
[info]   (min, avg, max) = (475,092, 479,608, 482,488), stdev = 2,866
[info]   CI (99.9%): [468,574, 490,642] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   2224,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (2224,001, 2224,001, 2224,001), stdev = 0,001
[info]   CI (99.9%): [2224,001, 2224,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   471,903 ±(99.9%) 1059,423 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 471,903, 668,016), stdev = 275,129
[info]   CI (99.9%): [≈ 0, 1531,326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   2192,196 ±(99.9%) 4927,687 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2192,196, 3127,121), stdev = 1279,705
[info]   CI (99.9%): [≈ 0, 7119,883] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,448 ±(99.9%) 3,726 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,448, 2,178), stdev = 0,968
[info]   CI (99.9%): [≈ 0, 4,174] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2,074 ±(99.9%) 17,233 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,074, 10,076), stdev = 4,475
[info]   CI (99.9%): [≈ 0, 19,306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,600, 3,000), stdev = 1,140
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 28,11% complete, ETA 01:35:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 745521,871 ops/s
[info] # Warmup Iteration   2: 777917,003 ops/s
[info] # Warmup Iteration   3: 778937,724 ops/s
[info] # Warmup Iteration   4: 777246,980 ops/s
[info] # Warmup Iteration   5: 777744,283 ops/s
[info] Iteration   1: 778321,084 ops/s
[info]                  ·gc.alloc.rate:                   506,594 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,785 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1034,494 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,042 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 781285,773 ops/s
[info]                  ·gc.alloc.rate:      508,499 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 776603,453 ops/s
[info]                  ·gc.alloc.rate:                   505,448 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,702 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1364,871 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1,506 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,051 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 773755,873 ops/s
[info]                  ·gc.alloc.rate:                   503,607 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,687 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1369,830 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,169 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 778957,704 ops/s
[info]                  ·gc.alloc.rate:               506,994 MB/sec
[info]                  ·gc.alloc.rate.norm:          1024,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,693 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1360,691 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala":
[info]   777784,777 ±(99.9%) 10814,063 ops/s [Average]
[info]   (min, avg, max) = (773755,873, 777784,777, 781285,773), stdev = 2808,378
[info]   CI (99.9%): [766970,714, 788598,841] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   506,228 ±(99.9%) 7,037 MB/sec [Average]
[info]   (min, avg, max) = (503,607, 506,228, 508,499), stdev = 1,828
[info]   CI (99.9%): [499,191, 513,266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1024,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1024,001, 1024,001, 1024,001), stdev = 0,001
[info]   CI (99.9%): [1024,000, 1024,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   506,573 ±(99.9%) 1123,358 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506,573, 673,702), stdev = 291,733
[info]   CI (99.9%): [≈ 0, 1629,932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1025,977 ±(99.9%) 2276,297 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1025,977, 1369,830), stdev = 591,147
[info]   CI (99.9%): [≈ 0, 3302,274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,322 ±(99.9%) 2,552 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,322, 1,506), stdev = 0,663
[info]   CI (99.9%): [≈ 0, 2,874] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,653 ±(99.9%) 5,170 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,653, 3,051), stdev = 1,343
[info]   CI (99.9%): [≈ 0, 5,823] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 28,31% complete, ETA 01:34:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 53818,402 ops/s
[info] # Warmup Iteration   2: 79104,560 ops/s
[info] # Warmup Iteration   3: 79574,719 ops/s
[info] # Warmup Iteration   4: 80428,542 ops/s
[info] # Warmup Iteration   5: 80312,208 ops/s
[info] Iteration   1: 80207,523 ops/s
[info]                  ·gc.alloc.rate:                   3408,483 MB/sec
[info]                  ·gc.alloc.rate.norm:              66856,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3381,754 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     66331,732 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,408 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   2: 80587,181 ops/s
[info]                  ·gc.alloc.rate:                   3424,603 MB/sec
[info]                  ·gc.alloc.rate.norm:              66856,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3390,307 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     66186,481 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,033 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 79970,360 ops/s
[info]                  ·gc.alloc.rate:                   3398,402 MB/sec
[info]                  ·gc.alloc.rate.norm:              66856,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3396,235 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     66813,372 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,639 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 80147,178 ops/s
[info]                  ·gc.alloc.rate:                   3405,949 MB/sec
[info]                  ·gc.alloc.rate.norm:              66856,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3400,720 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     66753,369 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,409 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 80380,087 ops/s
[info]                  ·gc.alloc.rate:                   3415,863 MB/sec
[info]                  ·gc.alloc.rate.norm:              66856,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3404,023 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     66624,286 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,223 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson":
[info]   80258,466 ±(99.9%) 904,760 ops/s [Average]
[info]   (min, avg, max) = (79970,360, 80258,466, 80587,181), stdev = 234,963
[info]   CI (99.9%): [79353,706, 81163,226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3410,660 ±(99.9%) 38,442 MB/sec [Average]
[info]   (min, avg, max) = (3398,402, 3410,660, 3424,603), stdev = 9,983
[info]   CI (99.9%): [3372,218, 3449,102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   66856,006 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (66856,005, 66856,006, 66856,006), stdev = 0,001
[info]   CI (99.9%): [66856,005, 66856,006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3394,608 ±(99.9%) 34,028 MB/sec [Average]
[info]   (min, avg, max) = (3381,754, 3394,608, 3404,023), stdev = 8,837
[info]   CI (99.9%): [3360,580, 3428,636] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   66541,848 ±(99.9%) 1046,952 B/op [Average]
[info]   (min, avg, max) = (66186,481, 66541,848, 66813,372), stdev = 271,890
[info]   CI (99.9%): [65494,897, 67588,800] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,058 ±(99.9%) 0,143 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,058, 0,104), stdev = 0,037
[info]   CI (99.9%): [≈ 0, 0,202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1,142 ±(99.9%) 2,805 B/op [Average]
[info]   (min, avg, max) = (0,408, 1,142, 2,033), stdev = 0,728
[info]   CI (99.9%): [≈ 0, 3,947] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.count":
[info]   25,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (5,000, 5,000, 5,000), stdev = 0,001
[info]   CI (99.9%): [25,000, 25,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.time":
[info]   16,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 3,200, 4,000), stdev = 0,447
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 28,51% complete, ETA 01:34:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 130748,296 ops/s
[info] # Warmup Iteration   2: 140839,780 ops/s
[info] # Warmup Iteration   3: 143140,276 ops/s
[info] # Warmup Iteration   4: 142999,932 ops/s
[info] # Warmup Iteration   5: 142434,890 ops/s
[info] Iteration   1: 142320,109 ops/s
[info]                  ·gc.alloc.rate:               1599,453 MB/sec
[info]                  ·gc.alloc.rate.norm:          17680,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1348,878 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 14910,200 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 142844,932 ops/s
[info]                  ·gc.alloc.rate:                   1605,526 MB/sec
[info]                  ·gc.alloc.rate.norm:              17680,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2023,891 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22287,027 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,459 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 142893,886 ops/s
[info]                  ·gc.alloc.rate:                   1605,877 MB/sec
[info]                  ·gc.alloc.rate.norm:              17680,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1351,437 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14878,726 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,459 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 142620,148 ops/s
[info]                  ·gc.alloc.rate:                   1602,790 MB/sec
[info]                  ·gc.alloc.rate.norm:              17680,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,866 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14923,157 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,230 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 142265,108 ops/s
[info]                  ·gc.alloc.rate:                   1598,766 MB/sec
[info]                  ·gc.alloc.rate.norm:              17680,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2031,573 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22466,222 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,461 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readUPickle":
[info]   142588,837 ±(99.9%) 1117,077 ops/s [Average]
[info]   (min, avg, max) = (142265,108, 142588,837, 142893,886), stdev = 290,101
[info]   CI (99.9%): [141471,759, 143705,914] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1602,482 ±(99.9%) 12,753 MB/sec [Average]
[info]   (min, avg, max) = (1598,766, 1602,482, 1605,877), stdev = 3,312
[info]   CI (99.9%): [1589,730, 1615,235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   17680,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (17680,003, 17680,003, 17680,003), stdev = 0,001
[info]   CI (99.9%): [17680,003, 17680,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1621,729 ±(99.9%) 1427,208 MB/sec [Average]
[info]   (min, avg, max) = (1348,878, 1621,729, 2031,573), stdev = 370,641
[info]   CI (99.9%): [194,521, 3048,937] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   17893,066 ±(99.9%) 15762,349 B/op [Average]
[info]   (min, avg, max) = (14878,726, 17893,066, 22466,222), stdev = 4093,432
[info]   CI (99.9%): [2130,717, 33655,416] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,042), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,321 ±(99.9%) 0,791 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,321, 0,461), stdev = 0,205
[info]   CI (99.9%): [≈ 0, 1,112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readUPickle:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readUPickle:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 28,71% complete, ETA 01:34:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 189111,751 ops/s
[info] # Warmup Iteration   2: 236723,863 ops/s
[info] # Warmup Iteration   3: 237046,568 ops/s
[info] # Warmup Iteration   4: 236115,915 ops/s
[info] # Warmup Iteration   5: 231454,886 ops/s
[info] Iteration   1: 237173,703 ops/s
[info]                  ·gc.alloc.rate:                   1928,363 MB/sec
[info]                  ·gc.alloc.rate.norm:              12792,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017,410 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13382,700 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,276 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 237628,486 ops/s
[info]                  ·gc.alloc.rate:                   1932,166 MB/sec
[info]                  ·gc.alloc.rate.norm:              12792,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022,209 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13388,132 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,551 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 229212,111 ops/s
[info]                  ·gc.alloc.rate:               1863,716 MB/sec
[info]                  ·gc.alloc.rate.norm:          12792,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1350,146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9267,007 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 237591,559 ops/s
[info]                  ·gc.alloc.rate:                   1931,816 MB/sec
[info]                  ·gc.alloc.rate.norm:              12792,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2027,471 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13425,405 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,689 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 237008,561 ops/s
[info]                  ·gc.alloc.rate:                   1927,020 MB/sec
[info]                  ·gc.alloc.rate.norm:              12792,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2030,700 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13480,257 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,276 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce":
[info]   235722,884 ±(99.9%) 14052,381 ops/s [Average]
[info]   (min, avg, max) = (229212,111, 235722,884, 237628,486), stdev = 3649,359
[info]   CI (99.9%): [221670,503, 249775,264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1916,616 ±(99.9%) 114,187 MB/sec [Average]
[info]   (min, avg, max) = (1863,716, 1916,616, 1932,166), stdev = 29,654
[info]   CI (99.9%): [1802,429, 2030,803] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   12792,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (12792,002, 12792,002, 12792,002), stdev = 0,001
[info]   CI (99.9%): [12792,002, 12792,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1889,587 ±(99.9%) 1161,351 MB/sec [Average]
[info]   (min, avg, max) = (1350,146, 1889,587, 2030,700), stdev = 301,599
[info]   CI (99.9%): [728,236, 3050,938] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   12588,700 ±(99.9%) 7151,767 B/op [Average]
[info]   (min, avg, max) = (9267,007, 12588,700, 13480,257), stdev = 1857,291
[info]   CI (99.9%): [5436,933, 19740,468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,054 ±(99.9%) 0,156 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,054, 0,104), stdev = 0,041
[info]   CI (99.9%): [≈ 0, 0,210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,359 ±(99.9%) 1,035 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,359, 0,689), stdev = 0,269
[info]   CI (99.9%): [≈ 0, 1,393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.time":
[info]   10,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 2,000, 3,000), stdev = 0,707
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 28,92% complete, ETA 01:34:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 201378,324 ops/s
[info] # Warmup Iteration   2: 1043469,820 ops/s
[info] # Warmup Iteration   3: 1039338,203 ops/s
[info] # Warmup Iteration   4: 940171,777 ops/s
[info] # Warmup Iteration   5: 1044936,126 ops/s
[info] Iteration   1: 1044182,101 ops/s
[info]                  ·gc.alloc.rate:               568,122 MB/sec
[info]                  ·gc.alloc.rate.norm:          856,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,771 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 771,095 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 1045555,518 ops/s
[info]                  ·gc.alloc.rate:               568,879 MB/sec
[info]                  ·gc.alloc.rate.norm:          856,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664,030 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 999,177 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 1044215,617 ops/s
[info]                  ·gc.alloc.rate:                   568,151 MB/sec
[info]                  ·gc.alloc.rate.norm:              856,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664,032 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1000,459 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,035 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,053 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 1042127,502 ops/s
[info]                  ·gc.alloc.rate:               567,009 MB/sec
[info]                  ·gc.alloc.rate.norm:          856,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665,399 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1004,537 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   5: 1044374,412 ops/s
[info]                  ·gc.alloc.rate:               568,231 MB/sec
[info]                  ·gc.alloc.rate.norm:          856,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665,373 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1002,339 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava":
[info]   1044091,030 ±(99.9%) 4756,865 ops/s [Average]
[info]   (min, avg, max) = (1042127,502, 1044091,030, 1045555,518), stdev = 1235,343
[info]   CI (99.9%): [1039334,165, 1048847,895] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   568,078 ±(99.9%) 2,593 MB/sec [Average]
[info]   (min, avg, max) = (567,009, 568,078, 568,879), stdev = 0,673
[info]   CI (99.9%): [565,485, 570,672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   856,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (856,000, 856,000, 856,000), stdev = 0,001
[info]   CI (99.9%): [856,000, 856,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   634,121 ±(99.9%) 263,381 MB/sec [Average]
[info]   (min, avg, max) = (511,771, 634,121, 665,399), stdev = 68,399
[info]   CI (99.9%): [370,741, 897,502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   955,521 ±(99.9%) 397,068 B/op [Average]
[info]   (min, avg, max) = (771,095, 955,521, 1004,537), stdev = 103,117
[info]   CI (99.9%): [558,454, 1352,589] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,007 ±(99.9%) 0,061 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,007, 0,035), stdev = 0,016
[info]   CI (99.9%): [≈ 0, 0,068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0,011 ±(99.9%) 0,092 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,011, 0,053), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 29,12% complete, ETA 01:33:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 677008,558 ops/s
[info] # Warmup Iteration   2: 867057,425 ops/s
[info] # Warmup Iteration   3: 867457,817 ops/s
[info] # Warmup Iteration   4: 863692,388 ops/s
[info] # Warmup Iteration   5: 864146,896 ops/s
[info] Iteration   1: 870906,314 ops/s
[info]                  ·gc.alloc.rate:                   686,379 MB/sec
[info]                  ·gc.alloc.rate.norm:              1240,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668,012 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1206,819 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,137 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,860 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 877891,317 ops/s
[info]                  ·gc.alloc.rate:                   691,903 MB/sec
[info]                  ·gc.alloc.rate.norm:              1240,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668,031 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1197,219 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,037 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 881634,861 ops/s
[info]                  ·gc.alloc.rate:                   694,849 MB/sec
[info]                  ·gc.alloc.rate.norm:              1240,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668,356 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1192,723 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,074 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 881195,088 ops/s
[info]                  ·gc.alloc.rate:                   694,471 MB/sec
[info]                  ·gc.alloc.rate.norm:              1240,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668,328 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1193,323 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,037 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 869918,961 ops/s
[info]                  ·gc.alloc.rate:               685,623 MB/sec
[info]                  ·gc.alloc.rate.norm:          1240,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668,345 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1208,751 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala":
[info]   876309,308 ±(99.9%) 21505,424 ops/s [Average]
[info]   (min, avg, max) = (869918,961, 876309,308, 881634,861), stdev = 5584,890
[info]   CI (99.9%): [854803,885, 897814,732] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   690,645 ±(99.9%) 16,928 MB/sec [Average]
[info]   (min, avg, max) = (685,623, 690,645, 694,849), stdev = 4,396
[info]   CI (99.9%): [673,717, 707,573] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1240,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1240,000, 1240,001, 1240,001), stdev = 0,001
[info]   CI (99.9%): [1240,000, 1240,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   668,215 ±(99.9%) 0,680 MB/sec [Average]
[info]   (min, avg, max) = (668,012, 668,215, 668,356), stdev = 0,177
[info]   CI (99.9%): [667,535, 668,894] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1199,767 ±(99.9%) 29,077 B/op [Average]
[info]   (min, avg, max) = (1192,723, 1199,767, 1208,751), stdev = 7,551
[info]   CI (99.9%): [1170,690, 1228,844] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,444 ±(99.9%) 3,644 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,444, 2,137), stdev = 0,946
[info]   CI (99.9%): [≈ 0, 4,088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,802 ±(99.9%) 6,584 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,802, 3,860), stdev = 1,710
[info]   CI (99.9%): [≈ 0, 7,386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 29,32% complete, ETA 01:33:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1062158,591 ops/s
[info] # Warmup Iteration   2: 1118871,483 ops/s
[info] # Warmup Iteration   3: 1118276,118 ops/s
[info] # Warmup Iteration   4: 1103650,453 ops/s
[info] # Warmup Iteration   5: 1113725,725 ops/s
[info] Iteration   1: 1122052,332 ops/s
[info]                  ·gc.alloc.rate:      610,492 MB/sec
[info]                  ·gc.alloc.rate.norm: 856,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1107180,900 ops/s
[info]                  ·gc.alloc.rate:                   602,370 MB/sec
[info]                  ·gc.alloc.rate.norm:              856,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,312 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     956,813 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1,533 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,178 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 1077524,704 ops/s
[info]                  ·gc.alloc.rate:                   586,261 MB/sec
[info]                  ·gc.alloc.rate.norm:              856,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,341 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     983,147 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,122 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 1125111,079 ops/s
[info]                  ·gc.alloc.rate:                   612,151 MB/sec
[info]                  ·gc.alloc.rate.norm:              856,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,011 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     941,104 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,029 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 1127860,945 ops/s
[info]                  ·gc.alloc.rate:                   613,616 MB/sec
[info]                  ·gc.alloc.rate.norm:              856,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,004 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     938,846 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,058 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala":
[info]   1111945,992 ±(99.9%) 80225,525 ops/s [Average]
[info]   (min, avg, max) = (1077524,704, 1111945,992, 1127860,945), stdev = 20834,314
[info]   CI (99.9%): [1031720,467, 1192171,517] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   604,978 ±(99.9%) 43,634 MB/sec [Average]
[info]   (min, avg, max) = (586,261, 604,978, 613,616), stdev = 11,332
[info]   CI (99.9%): [561,344, 648,612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   856,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (856,000, 856,000, 856,000), stdev = 0,001
[info]   CI (99.9%): [856,000, 856,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   538,534 ±(99.9%) 1159,234 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 538,534, 673,341), stdev = 301,050
[info]   CI (99.9%): [≈ 0, 1697,768] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   763,982 ±(99.9%) 1645,937 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 763,982, 983,147), stdev = 427,445
[info]   CI (99.9%): [≈ 0, 2409,919] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,336 ±(99.9%) 2,579 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,336, 1,533), stdev = 0,670
[info]   CI (99.9%): [≈ 0, 2,915] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,477 ±(99.9%) 3,665 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,477, 2,178), stdev = 0,952
[info]   CI (99.9%): [≈ 0, 4,142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 29,52% complete, ETA 01:33:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1061010,207 ops/s
[info] # Warmup Iteration   2: 1116782,484 ops/s
[info] # Warmup Iteration   3: 1107998,791 ops/s
[info] # Warmup Iteration   4: 1107730,306 ops/s
[info] # Warmup Iteration   5: 1107094,662 ops/s
[info] Iteration   1: 1108822,953 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1107764,729 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1109879,870 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1107951,465 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1107773,592 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   1108438,522 ±(99.9%) 3528,451 ops/s [Average]
[info]   (min, avg, max) = (1107764,729, 1108438,522, 1109879,870), stdev = 916,328
[info]   CI (99.9%): [1104910,070, 1111966,973] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 29,72% complete, ETA 01:33:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26207,083 ops/s
[info] # Warmup Iteration   2: 33343,512 ops/s
[info] # Warmup Iteration   3: 33576,980 ops/s
[info] # Warmup Iteration   4: 33478,644 ops/s
[info] # Warmup Iteration   5: 33316,237 ops/s
[info] Iteration   1: 33461,088 ops/s
[info]                  ·gc.alloc.rate:                   1847,800 MB/sec
[info]                  ·gc.alloc.rate.norm:              86872,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014,362 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94702,712 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,937 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 33650,546 ops/s
[info]                  ·gc.alloc.rate:                   1858,140 MB/sec
[info]                  ·gc.alloc.rate.norm:              86872,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018,078 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94349,409 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,921 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 33677,065 ops/s
[info]                  ·gc.alloc.rate:                   1859,629 MB/sec
[info]                  ·gc.alloc.rate.norm:              86872,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022,860 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94497,297 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,919 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 33913,269 ops/s
[info]                  ·gc.alloc.rate:                   1872,548 MB/sec
[info]                  ·gc.alloc.rate.norm:              86872,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350,342 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62645,615 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,966 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 33767,367 ops/s
[info]                  ·gc.alloc.rate:                   1864,469 MB/sec
[info]                  ·gc.alloc.rate.norm:              86872,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2028,324 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94506,583 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,851 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson":
[info]   33693,867 ±(99.9%) 638,222 ops/s [Average]
[info]   (min, avg, max) = (33461,088, 33693,867, 33913,269), stdev = 165,744
[info]   CI (99.9%): [33055,645, 34332,089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1860,517 ±(99.9%) 34,896 MB/sec [Average]
[info]   (min, avg, max) = (1847,800, 1860,517, 1872,548), stdev = 9,062
[info]   CI (99.9%): [1825,621, 1895,414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   86872,013 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (86872,013, 86872,013, 86872,014), stdev = 0,001
[info]   CI (99.9%): [86872,011, 86872,015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1886,793 ±(99.9%) 1154,928 MB/sec [Average]
[info]   (min, avg, max) = (1350,342, 1886,793, 2028,324), stdev = 299,931
[info]   CI (99.9%): [731,865, 3041,721] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   88140,323 ±(99.9%) 54881,410 B/op [Average]
[info]   (min, avg, max) = (62645,615, 88140,323, 94702,712), stdev = 14252,528
[info]   CI (99.9%): [33258,913, 143021,734] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,062 ±(99.9%) 0,113 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,062, 0,104), stdev = 0,029
[info]   CI (99.9%): [≈ 0, 0,176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2,919 ±(99.9%) 5,289 B/op [Average]
[info]   (min, avg, max) = (0,966, 2,919, 4,851), stdev = 1,374
[info]   CI (99.9%): [≈ 0, 8,208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 29,92% complete, ETA 01:32:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 112006,199 ops/s
[info] # Warmup Iteration   2: 119624,320 ops/s
[info] # Warmup Iteration   3: 119554,180 ops/s
[info] # Warmup Iteration   4: 119744,987 ops/s
[info] # Warmup Iteration   5: 120241,543 ops/s
[info] Iteration   1: 120020,723 ops/s
[info]                  ·gc.alloc.rate:                   1530,684 MB/sec
[info]                  ·gc.alloc.rate.norm:              20064,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2023,538 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26524,279 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,273 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 119891,797 ops/s
[info]                  ·gc.alloc.rate:                   1528,993 MB/sec
[info]                  ·gc.alloc.rate.norm:              20064,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350,040 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17715,712 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,547 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 120063,170 ops/s
[info]                  ·gc.alloc.rate:                   1531,163 MB/sec
[info]                  ·gc.alloc.rate.norm:              20064,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1351,019 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17703,435 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,546 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 119889,151 ops/s
[info]                  ·gc.alloc.rate:                   1528,933 MB/sec
[info]                  ·gc.alloc.rate.norm:              20064,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,008 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17742,240 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,273 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 119328,798 ops/s
[info]                  ·gc.alloc.rate:                   1521,727 MB/sec
[info]                  ·gc.alloc.rate.norm:              20064,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2030,393 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26770,770 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,549 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeUPickle":
[info]   119838,728 ±(99.9%) 1137,219 ops/s [Average]
[info]   (min, avg, max) = (119328,798, 119838,728, 120063,170), stdev = 295,332
[info]   CI (99.9%): [118701,509, 120975,946] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   1528,300 ±(99.9%) 14,658 MB/sec [Average]
[info]   (min, avg, max) = (1521,727, 1528,300, 1531,163), stdev = 3,807
[info]   CI (99.9%): [1513,642, 1542,958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   20064,004 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (20064,004, 20064,004, 20064,004), stdev = 0,001
[info]   CI (99.9%): [20064,003, 20064,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   1621,400 ±(99.9%) 1425,655 MB/sec [Average]
[info]   (min, avg, max) = (1350,040, 1621,400, 2030,393), stdev = 370,238
[info]   CI (99.9%): [195,744, 3047,055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   21291,287 ±(99.9%) 18830,997 B/op [Average]
[info]   (min, avg, max) = (17703,435, 21291,287, 26770,770), stdev = 4890,350
[info]   CI (99.9%): [2460,290, 40122,284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,044 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,033, 0,042), stdev = 0,011
[info]   CI (99.9%): [≈ 0, 0,077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,438 ±(99.9%) 0,578 B/op [Average]
[info]   (min, avg, max) = (0,273, 0,438, 0,549), stdev = 0,150
[info]   CI (99.9%): [≈ 0, 1,015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeUPickle:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeUPickle:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 30,12% complete, ETA 01:32:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 105981,496 ops/s
[info] # Warmup Iteration   2: 131971,029 ops/s
[info] # Warmup Iteration   3: 139496,459 ops/s
[info] # Warmup Iteration   4: 138659,721 ops/s
[info] # Warmup Iteration   5: 138246,986 ops/s
[info] Iteration   1: 139616,788 ops/s
[info]                  ·gc.alloc.rate:               1923,243 MB/sec
[info]                  ·gc.alloc.rate.norm:          21672,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344,060 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15145,497 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 139032,393 ops/s
[info]                  ·gc.alloc.rate:                   1915,134 MB/sec
[info]                  ·gc.alloc.rate.norm:              21672,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019,019 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22847,586 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,707 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 139068,623 ops/s
[info]                  ·gc.alloc.rate:                   1915,673 MB/sec
[info]                  ·gc.alloc.rate.norm:              21672,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2023,715 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22894,277 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,707 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 139487,367 ops/s
[info]                  ·gc.alloc.rate:                   1921,455 MB/sec
[info]                  ·gc.alloc.rate.norm:              21672,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2027,160 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22864,247 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,705 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 139505,562 ops/s
[info]                  ·gc.alloc.rate:                   1921,624 MB/sec
[info]                  ·gc.alloc.rate.norm:              21672,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2030,698 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22902,138 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,470 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce":
[info]   139342,147 ±(99.9%) 1043,915 ops/s [Average]
[info]   (min, avg, max) = (139032,393, 139342,147, 139616,788), stdev = 271,102
[info]   CI (99.9%): [138298,231, 140386,062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate":
[info]   1919,426 ±(99.9%) 14,411 MB/sec [Average]
[info]   (min, avg, max) = (1915,134, 1919,426, 1923,243), stdev = 3,743
[info]   CI (99.9%): [1905,014, 1933,837] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   21672,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (21672,003, 21672,003, 21672,003), stdev = 0,001
[info]   CI (99.9%): [21672,003, 21672,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1888,930 ±(99.9%) 1172,992 MB/sec [Average]
[info]   (min, avg, max) = (1344,060, 1888,930, 2030,698), stdev = 304,622
[info]   CI (99.9%): [715,938, 3061,923] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   21330,749 ±(99.9%) 13314,494 B/op [Average]
[info]   (min, avg, max) = (15145,497, 21330,749, 22902,138), stdev = 3457,732
[info]   CI (99.9%): [8016,255, 34645,243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,046 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,046, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,518 ±(99.9%) 1,182 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,518, 0,707), stdev = 0,307
[info]   CI (99.9%): [≈ 0, 1,699] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.time":
[info]   9,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 30,32% complete, ETA 01:32:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 152710,334 ops/s
[info] # Warmup Iteration   2: 213859,238 ops/s
[info] # Warmup Iteration   3: 218083,694 ops/s
[info] # Warmup Iteration   4: 218429,150 ops/s
[info] # Warmup Iteration   5: 218233,176 ops/s
[info] Iteration   1: 216447,017 ops/s
[info]                  ·gc.alloc.rate:               1292,100 MB/sec
[info]                  ·gc.alloc.rate.norm:          9392,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1335,414 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9706,839 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 216445,528 ops/s
[info]                  ·gc.alloc.rate:                   1292,190 MB/sec
[info]                  ·gc.alloc.rate.norm:              9392,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336,827 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9716,437 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,454 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 218855,497 ops/s
[info]                  ·gc.alloc.rate:                   1306,554 MB/sec
[info]                  ·gc.alloc.rate.norm:              9392,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338,859 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9624,226 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,449 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 218592,427 ops/s
[info]                  ·gc.alloc.rate:                   1304,932 MB/sec
[info]                  ·gc.alloc.rate.norm:              9392,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,768 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9649,928 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,300 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 217552,761 ops/s
[info]                  ·gc.alloc.rate:               1298,735 MB/sec
[info]                  ·gc.alloc.rate.norm:          9392,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342,723 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9710,108 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala":
[info]   217578,646 ±(99.9%) 4400,239 ops/s [Average]
[info]   (min, avg, max) = (216445,528, 217578,646, 218855,497), stdev = 1142,728
[info]   CI (99.9%): [213178,407, 221978,885] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1298,902 ±(99.9%) 26,276 MB/sec [Average]
[info]   (min, avg, max) = (1292,100, 1298,902, 1306,554), stdev = 6,824
[info]   CI (99.9%): [1272,626, 1325,178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   9392,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (9392,002, 9392,002, 9392,002), stdev = 0,001
[info]   CI (99.9%): [9392,002, 9392,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1338,918 ±(99.9%) 11,319 MB/sec [Average]
[info]   (min, avg, max) = (1335,414, 1338,918, 1342,723), stdev = 2,939
[info]   CI (99.9%): [1327,600, 1350,237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   9681,508 ±(99.9%) 160,601 B/op [Average]
[info]   (min, avg, max) = (9624,226, 9681,508, 9716,437), stdev = 41,708
[info]   CI (99.9%): [9520,906, 9842,109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,062), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,241 ±(99.9%) 0,879 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,241, 0,454), stdev = 0,228
[info]   CI (99.9%): [≈ 0, 1,119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 30,52% complete, ETA 01:32:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 283058,276 ops/s
[info] # Warmup Iteration   2: 297305,986 ops/s
[info] # Warmup Iteration   3: 297350,265 ops/s
[info] # Warmup Iteration   4: 298550,118 ops/s
[info] # Warmup Iteration   5: 298705,970 ops/s
[info] Iteration   1: 298796,337 ops/s
[info]                  ·gc.alloc.rate:                   972,384 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,060 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7087,557 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,110 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 299655,608 ops/s
[info]                  ·gc.alloc.rate:               975,164 MB/sec
[info]                  ·gc.alloc.rate.norm:          5120,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,330 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3535,253 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 286148,347 ops/s
[info]                  ·gc.alloc.rate:                   931,220 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,358 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3702,231 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,114 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 298494,871 ops/s
[info]                  ·gc.alloc.rate:                   971,408 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,338 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7101,418 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,220 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 298361,594 ops/s
[info]                  ·gc.alloc.rate:               970,942 MB/sec
[info]                  ·gc.alloc.rate.norm:          5120,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,333 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3555,912 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala":
[info]   296291,351 ±(99.9%) 21919,527 ops/s [Average]
[info]   (min, avg, max) = (286148,347, 296291,351, 299655,608), stdev = 5692,431
[info]   CI (99.9%): [274371,825, 318210,878] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   964,224 ±(99.9%) 71,322 MB/sec [Average]
[info]   (min, avg, max) = (931,220, 964,224, 975,164), stdev = 18,522
[info]   CI (99.9%): [892,902, 1035,546] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   5120,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (5120,001, 5120,001, 5120,002), stdev = 0,001
[info]   CI (99.9%): [5120,001, 5120,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   942,884 ±(99.9%) 1419,469 MB/sec [Average]
[info]   (min, avg, max) = (673,330, 942,884, 1347,338), stdev = 368,632
[info]   CI (99.9%): [≈ 0, 2362,353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4996,474 ±(99.9%) 7379,000 B/op [Average]
[info]   (min, avg, max) = (3535,253, 4996,474, 7101,418), stdev = 1916,303
[info]   CI (99.9%): [≈ 0, 12375,474] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,017 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,042), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,089 ±(99.9%) 0,355 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,089, 0,220), stdev = 0,092
[info]   CI (99.9%): [≈ 0, 0,443] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 30,72% complete, ETA 01:31:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 42624,718 ops/s
[info] # Warmup Iteration   2: 74546,674 ops/s
[info] # Warmup Iteration   3: 74384,551 ops/s
[info] # Warmup Iteration   4: 74996,532 ops/s
[info] # Warmup Iteration   5: 75590,166 ops/s
[info] Iteration   1: 75169,248 ops/s
[info]                  ·gc.alloc.rate:                   3125,033 MB/sec
[info]                  ·gc.alloc.rate.norm:              65408,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3370,744 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70550,812 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,615 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   2: 75364,780 ops/s
[info]                  ·gc.alloc.rate:                   3133,370 MB/sec
[info]                  ·gc.alloc.rate.norm:              65408,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3381,611 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70589,938 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,174 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   3: 75636,353 ops/s
[info]                  ·gc.alloc.rate:                   3144,566 MB/sec
[info]                  ·gc.alloc.rate.norm:              65408,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2712,087 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     56412,313 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,299 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 74226,275 ops/s
[info]                  ·gc.alloc.rate:                   3086,245 MB/sec
[info]                  ·gc.alloc.rate.norm:              65408,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3396,410 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71981,455 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,766 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   5: 74761,013 ops/s
[info]                  ·gc.alloc.rate:                   3108,109 MB/sec
[info]                  ·gc.alloc.rate.norm:              65408,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2720,118 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     57242,989 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,629 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson":
[info]   75031,534 ±(99.9%) 2124,363 ops/s [Average]
[info]   (min, avg, max) = (74226,275, 75031,534, 75636,353), stdev = 551,690
[info]   CI (99.9%): [72907,170, 77155,897] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3119,465 ±(99.9%) 87,954 MB/sec [Average]
[info]   (min, avg, max) = (3086,245, 3119,465, 3144,566), stdev = 22,841
[info]   CI (99.9%): [3031,510, 3207,419] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   65408,006 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (65408,006, 65408,006, 65408,006), stdev = 0,001
[info]   CI (99.9%): [65408,005, 65408,006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3116,194 ±(99.9%) 1406,858 MB/sec [Average]
[info]   (min, avg, max) = (2712,087, 3116,194, 3396,410), stdev = 365,356
[info]   CI (99.9%): [1709,336, 4523,052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   65355,501 ±(99.9%) 30079,871 B/op [Average]
[info]   (min, avg, max) = (56412,313, 65355,501, 71981,455), stdev = 7811,647
[info]   CI (99.9%): [35275,630, 95435,372] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,100 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (0,062, 0,100, 0,125), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2,097 ±(99.9%) 2,198 B/op [Average]
[info]   (min, avg, max) = (1,299, 2,097, 2,629), stdev = 0,571
[info]   CI (99.9%): [≈ 0, 4,295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.count":
[info]   23,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,600, 5,000), stdev = 0,548
[info]   CI (99.9%): [23,000, 23,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.time":
[info]   18,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 3,600, 4,000), stdev = 0,548
[info]   CI (99.9%): [18,000, 18,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 30,92% complete, ETA 01:31:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 103901,849 ops/s
[info] # Warmup Iteration   2: 114124,745 ops/s
[info] # Warmup Iteration   3: 119409,033 ops/s
[info] # Warmup Iteration   4: 119471,989 ops/s
[info] # Warmup Iteration   5: 119053,652 ops/s
[info] Iteration   1: 119160,481 ops/s
[info]                  ·gc.alloc.rate:                   1809,849 MB/sec
[info]                  ·gc.alloc.rate.norm:              23896,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022,707 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26706,430 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,825 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 119542,626 ops/s
[info]                  ·gc.alloc.rate:                   1815,678 MB/sec
[info]                  ·gc.alloc.rate.norm:              23896,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350,013 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17767,421 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,822 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 119314,924 ops/s
[info]                  ·gc.alloc.rate:                   1812,244 MB/sec
[info]                  ·gc.alloc.rate.norm:              23896,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2027,469 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26733,921 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,549 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 119106,561 ops/s
[info]                  ·gc.alloc.rate:                   1809,084 MB/sec
[info]                  ·gc.alloc.rate.norm:              23896,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2030,833 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26825,061 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,275 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 119490,394 ops/s
[info]                  ·gc.alloc.rate:               1814,903 MB/sec
[info]                  ·gc.alloc.rate.norm:          23896,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1355,112 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17842,147 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readUPickle":
[info]   119322,997 ±(99.9%) 744,629 ops/s [Average]
[info]   (min, avg, max) = (119106,561, 119322,997, 119542,626), stdev = 193,378
[info]   CI (99.9%): [118578,368, 120067,626] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1812,352 ±(99.9%) 11,313 MB/sec [Average]
[info]   (min, avg, max) = (1809,084, 1812,352, 1815,678), stdev = 2,938
[info]   CI (99.9%): [1801,039, 1823,664] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   23896,004 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (23896,004, 23896,004, 23896,004), stdev = 0,001
[info]   CI (99.9%): [23896,003, 23896,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1757,227 ±(99.9%) 1422,512 MB/sec [Average]
[info]   (min, avg, max) = (1350,013, 1757,227, 2030,833), stdev = 369,422
[info]   CI (99.9%): [334,715, 3179,738] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   23174,996 ±(99.9%) 18878,083 B/op [Average]
[info]   (min, avg, max) = (17767,421, 23174,996, 26825,061), stdev = 4902,578
[info]   CI (99.9%): [4296,913, 42053,079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,494 ±(99.9%) 1,378 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,494, 0,825), stdev = 0,358
[info]   CI (99.9%): [≈ 0, 1,872] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readUPickle:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readUPickle:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 31,12% complete, ETA 01:31:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 150215,216 ops/s
[info] # Warmup Iteration   2: 187559,235 ops/s
[info] # Warmup Iteration   3: 184893,130 ops/s
[info] # Warmup Iteration   4: 185492,369 ops/s
[info] # Warmup Iteration   5: 185612,343 ops/s
[info] Iteration   1: 185691,444 ops/s
[info]                  ·gc.alloc.rate:                   1215,237 MB/sec
[info]                  ·gc.alloc.rate.norm:              10296,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,734 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11359,272 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,706 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 186231,276 ops/s
[info]                  ·gc.alloc.rate:               1218,754 MB/sec
[info]                  ·gc.alloc.rate.norm:          10296,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,057 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5669,074 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 184554,943 ops/s
[info]                  ·gc.alloc.rate:                   1207,807 MB/sec
[info]                  ·gc.alloc.rate.norm:              10296,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,151 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11449,743 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,533 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 184707,247 ops/s
[info]                  ·gc.alloc.rate:               1208,857 MB/sec
[info]                  ·gc.alloc.rate.norm:          10296,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344,878 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11454,512 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 185655,887 ops/s
[info]                  ·gc.alloc.rate:                   1214,978 MB/sec
[info]                  ·gc.alloc.rate.norm:              10296,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,105 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11407,202 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,706 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce":
[info]   185368,160 ±(99.9%) 2743,430 ops/s [Average]
[info]   (min, avg, max) = (184554,943, 185368,160, 186231,276), stdev = 712,460
[info]   CI (99.9%): [182624,729, 188111,590] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1213,127 ±(99.9%) 17,863 MB/sec [Average]
[info]   (min, avg, max) = (1207,807, 1213,127, 1218,754), stdev = 4,639
[info]   CI (99.9%): [1195,264, 1230,990] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   10296,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (10296,002, 10296,002, 10296,003), stdev = 0,001
[info]   CI (99.9%): [10296,002, 10296,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1209,185 ±(99.9%) 1158,387 MB/sec [Average]
[info]   (min, avg, max) = (671,057, 1209,185, 1346,105), stdev = 300,829
[info]   CI (99.9%): [50,799, 2367,572] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   10267,961 ±(99.9%) 9900,556 B/op [Average]
[info]   (min, avg, max) = (5669,074, 10267,961, 11454,512), stdev = 2571,143
[info]   CI (99.9%): [367,405, 20168,517] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,046 ±(99.9%) 0,164 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,046, 0,083), stdev = 0,043
[info]   CI (99.9%): [≈ 0, 0,210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,389 ±(99.9%) 1,394 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,389, 0,706), stdev = 0,362
[info]   CI (99.9%): [≈ 0, 1,783] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 31,33% complete, ETA 01:30:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 446756,157 ops/s
[info] # Warmup Iteration   2: 603893,008 ops/s
[info] # Warmup Iteration   3: 627006,072 ops/s
[info] # Warmup Iteration   4: 613414,990 ops/s
[info] # Warmup Iteration   5: 623465,462 ops/s
[info] Iteration   1: 619128,652 ops/s
[info]                  ·gc.alloc.rate:               626,470 MB/sec
[info]                  ·gc.alloc.rate.norm:          1592,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,761 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1300,501 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   2: 628958,206 ops/s
[info]                  ·gc.alloc.rate:                   636,411 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667,351 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1669,399 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,157 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,397 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 630266,250 ops/s
[info]                  ·gc.alloc.rate:                   637,733 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667,350 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1665,935 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,156 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 629400,327 ops/s
[info]                  ·gc.alloc.rate:                   636,860 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667,694 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1669,078 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,052 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 629398,341 ops/s
[info]                  ·gc.alloc.rate:                   636,855 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667,672 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1669,036 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,104 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala":
[info]   627430,355 ±(99.9%) 17963,229 ops/s [Average]
[info]   (min, avg, max) = (619128,652, 627430,355, 630266,250), stdev = 4664,994
[info]   CI (99.9%): [609467,126, 645393,584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   634,866 ±(99.9%) 18,167 MB/sec [Average]
[info]   (min, avg, max) = (626,470, 634,866, 637,733), stdev = 4,718
[info]   CI (99.9%): [616,698, 653,033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1592,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1592,001, 1592,001, 1592,001), stdev = 0,001
[info]   CI (99.9%): [1592,001, 1592,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   636,366 ±(99.9%) 268,222 MB/sec [Average]
[info]   (min, avg, max) = (511,761, 636,366, 667,694), stdev = 69,656
[info]   CI (99.9%): [368,144, 904,587] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1594,790 ±(99.9%) 633,503 B/op [Average]
[info]   (min, avg, max) = (1300,501, 1594,790, 1669,399), stdev = 164,519
[info]   CI (99.9%): [961,287, 2228,293] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,456 ±(99.9%) 3,663 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,456, 2,157), stdev = 0,951
[info]   CI (99.9%): [≈ 0, 4,119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1,142 ±(99.9%) 9,162 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,142, 5,397), stdev = 2,379
[info]   CI (99.9%): [≈ 0, 10,304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 3,000), stdev = 0,894
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 31,53% complete, ETA 01:30:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 612083,387 ops/s
[info] # Warmup Iteration   2: 622362,193 ops/s
[info] # Warmup Iteration   3: 635388,504 ops/s
[info] # Warmup Iteration   4: 631720,175 ops/s
[info] # Warmup Iteration   5: 534984,669 ops/s
[info] Iteration   1: 616828,879 ops/s
[info]                  ·gc.alloc.rate:               473,635 MB/sec
[info]                  ·gc.alloc.rate.norm:          1208,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,827 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1305,408 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 634153,167 ops/s
[info]                  ·gc.alloc.rate:                   486,947 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,832 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1269,735 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      ≈ 10⁻⁵ MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 628950,626 ops/s
[info]                  ·gc.alloc.rate:                   482,925 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,396 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1684,452 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1,616 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,043 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 627658,515 ops/s
[info]                  ·gc.alloc.rate:      481,921 MB/sec
[info]                  ·gc.alloc.rate.norm: 1208,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 633657,764 ops/s
[info]                  ·gc.alloc.rate:                   486,521 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,368 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1671,928 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,155 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala":
[info]   628249,790 ±(99.9%) 26911,431 ops/s [Average]
[info]   (min, avg, max) = (616828,879, 628249,790, 634153,167), stdev = 6988,813
[info]   CI (99.9%): [601338,360, 655161,221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   482,390 ±(99.9%) 20,645 MB/sec [Average]
[info]   (min, avg, max) = (473,635, 482,390, 486,947), stdev = 5,362
[info]   CI (99.9%): [461,744, 503,035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1208,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1208,001, 1208,001, 1208,001), stdev = 0,001
[info]   CI (99.9%): [1208,001, 1208,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   474,085 ±(99.9%) 1066,852 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 474,085, 673,396), stdev = 277,058
[info]   CI (99.9%): [≈ 0, 1540,936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1186,305 ±(99.9%) 2662,551 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1186,305, 1684,452), stdev = 691,456
[info]   CI (99.9%): [≈ 0, 3848,856] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,336 ±(99.9%) 2,758 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,336, 1,616), stdev = 0,716
[info]   CI (99.9%): [≈ 0, 3,094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,840 ±(99.9%) 6,900 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,840, 4,043), stdev = 1,792
[info]   CI (99.9%): [≈ 0, 7,739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 31,73% complete, ETA 01:30:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 617373,341 ops/s
[info] # Warmup Iteration   2: 648479,084 ops/s
[info] # Warmup Iteration   3: 614930,544 ops/s
[info] # Warmup Iteration   4: 639531,181 ops/s
[info] # Warmup Iteration   5: 639788,758 ops/s
[info] Iteration   1: 640427,491 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 641348,765 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 640508,409 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 639615,914 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 640021,247 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc":
[info]   640384,365 ±(99.9%) 2487,831 ops/s [Average]
[info]   (min, avg, max) = (639615,914, 640384,365, 641348,765), stdev = 646,082
[info]   CI (99.9%): [637896,534, 642872,196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (0,001, 0,001, 0,001), stdev = 0,001
[info]   CI (99.9%): [0,001, 0,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 31,93% complete, ETA 01:30:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 255443,500 ops/s
[info] # Warmup Iteration   2: 390332,564 ops/s
[info] # Warmup Iteration   3: 390019,713 ops/s
[info] # Warmup Iteration   4: 385826,673 ops/s
[info] # Warmup Iteration   5: 390434,473 ops/s
[info] Iteration   1: 390627,295 ops/s
[info]                  ·gc.alloc.rate:                   1076,558 MB/sec
[info]                  ·gc.alloc.rate.norm:              4336,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667,013 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2686,496 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,084 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 390503,322 ops/s
[info]                  ·gc.alloc.rate:                   1076,235 MB/sec
[info]                  ·gc.alloc.rate.norm:              4336,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334,705 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5377,340 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,252 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 390679,024 ops/s
[info]                  ·gc.alloc.rate:               1076,730 MB/sec
[info]                  ·gc.alloc.rate.norm:          4336,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668,023 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2690,136 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 390129,258 ops/s
[info]                  ·gc.alloc.rate:                   1075,188 MB/sec
[info]                  ·gc.alloc.rate.norm:              4336,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337,030 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5391,955 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,420 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 390095,817 ops/s
[info]                  ·gc.alloc.rate:               1075,096 MB/sec
[info]                  ·gc.alloc.rate.norm:          4336,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338,991 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5400,321 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson":
[info]   390406,943 ±(99.9%) 1064,654 ops/s [Average]
[info]   (min, avg, max) = (390095,817, 390406,943, 390679,024), stdev = 276,487
[info]   CI (99.9%): [389342,289, 391471,597] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1075,962 ±(99.9%) 2,963 MB/sec [Average]
[info]   (min, avg, max) = (1075,096, 1075,962, 1076,730), stdev = 0,769
[info]   CI (99.9%): [1072,999, 1078,924] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4336,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4336,001, 4336,001, 4336,001), stdev = 0,001
[info]   CI (99.9%): [4336,001, 4336,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1069,152 ±(99.9%) 1411,814 MB/sec [Average]
[info]   (min, avg, max) = (667,013, 1069,152, 1338,991), stdev = 366,644
[info]   CI (99.9%): [≈ 0, 2480,967] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4309,250 ±(99.9%) 5697,901 B/op [Average]
[info]   (min, avg, max) = (2686,496, 4309,250, 5400,321), stdev = 1479,727
[info]   CI (99.9%): [≈ 0, 10007,151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,174 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,104), stdev = 0,045
[info]   CI (99.9%): [≈ 0, 0,211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,151 ±(99.9%) 0,701 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,151, 0,420), stdev = 0,182
[info]   CI (99.9%): [≈ 0, 0,852] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 32,13% complete, ETA 01:29:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 43688,780 ops/s
[info] # Warmup Iteration   2: 46694,112 ops/s
[info] # Warmup Iteration   3: 46630,170 ops/s
[info] # Warmup Iteration   4: 47053,404 ops/s
[info] # Warmup Iteration   5: 45984,747 ops/s
[info] Iteration   1: 46725,836 ops/s
[info]                  ·gc.alloc.rate:               497,036 MB/sec
[info]                  ·gc.alloc.rate.norm:          16736,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,736 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17230,965 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 46918,149 ops/s
[info]                  ·gc.alloc.rate:               499,079 MB/sec
[info]                  ·gc.alloc.rate.norm:          16736,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,737 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17160,466 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 46785,819 ops/s
[info]                  ·gc.alloc.rate:                   497,701 MB/sec
[info]                  ·gc.alloc.rate.norm:              16736,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,674 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22653,382 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1,668 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 56,092 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 46792,731 ops/s
[info]                  ·gc.alloc.rate:                   497,744 MB/sec
[info]                  ·gc.alloc.rate.norm:              16736,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,646 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22650,478 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,400 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 46825,890 ops/s
[info]                  ·gc.alloc.rate:      498,091 MB/sec
[info]                  ·gc.alloc.rate.norm: 16736,009 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeUPickle":
[info]   46809,685 ±(99.9%) 271,700 ops/s [Average]
[info]   (min, avg, max) = (46725,836, 46809,685, 46918,149), stdev = 70,560
[info]   CI (99.9%): [46537,984, 47081,385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   497,930 ±(99.9%) 2,877 MB/sec [Average]
[info]   (min, avg, max) = (497,036, 497,930, 499,079), stdev = 0,747
[info]   CI (99.9%): [495,053, 500,807] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   16736,009 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (16736,009, 16736,009, 16736,010), stdev = 0,001
[info]   CI (99.9%): [16736,008, 16736,011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   474,158 ±(99.9%) 1067,212 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 474,158, 673,674), stdev = 277,152
[info]   CI (99.9%): [≈ 0, 1541,370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   15939,058 ±(99.9%) 35882,328 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 15939,058, 22653,382), stdev = 9318,527
[info]   CI (99.9%): [≈ 0, 51821,386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,342 ±(99.9%) 2,855 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,342, 1,668), stdev = 0,742
[info]   CI (99.9%): [≈ 0, 3,197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   11,498 ±(99.9%) 96,019 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11,498, 56,092), stdev = 24,936
[info]   CI (99.9%): [≈ 0, 107,517] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 2,000), stdev = 1,095
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 32,33% complete, ETA 01:29:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8053,081 ops/s
[info] # Warmup Iteration   2: 10191,850 ops/s
[info] # Warmup Iteration   3: 10332,783 ops/s
[info] # Warmup Iteration   4: 10384,250 ops/s
[info] # Warmup Iteration   5: 10355,537 ops/s
[info] Iteration   1: 10254,994 ops/s
[info]                  ·gc.alloc.rate:               1343,982 MB/sec
[info]                  ·gc.alloc.rate.norm:          206184,042 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345,075 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 206351,824 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 10425,697 ops/s
[info]                  ·gc.alloc.rate:                   1366,335 MB/sec
[info]                  ·gc.alloc.rate.norm:              206184,044 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,689 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     203068,588 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,142 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 10366,581 ops/s
[info]                  ·gc.alloc.rate:               1358,627 MB/sec
[info]                  ·gc.alloc.rate.norm:          206184,042 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1347,174 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 204446,025 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 9873,350 ops/s
[info]                  ·gc.alloc.rate:                   1293,935 MB/sec
[info]                  ·gc.alloc.rate.norm:              206184,044 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,748 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     214918,261 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9,955 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 10421,167 ops/s
[info]                  ·gc.alloc.rate:                   1365,778 MB/sec
[info]                  ·gc.alloc.rate.norm:              206184,041 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350,117 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     203819,915 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,144 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce":
[info]   10268,358 ±(99.9%) 890,581 ops/s [Average]
[info]   (min, avg, max) = (9873,350, 10268,358, 10425,697), stdev = 231,281
[info]   CI (99.9%): [9377,776, 11158,939] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1345,731 ±(99.9%) 116,773 MB/sec [Average]
[info]   (min, avg, max) = (1293,935, 1345,731, 1366,335), stdev = 30,326
[info]   CI (99.9%): [1228,958, 1462,504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   206184,043 ±(99.9%) 0,005 B/op [Average]
[info]   (min, avg, max) = (206184,041, 206184,043, 206184,044), stdev = 0,001
[info]   CI (99.9%): [206184,037, 206184,048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1347,361 ±(99.9%) 8,071 MB/sec [Average]
[info]   (min, avg, max) = (1345,075, 1347,361, 1350,117), stdev = 2,096
[info]   CI (99.9%): [1339,290, 1355,432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   206520,922 ±(99.9%) 18672,957 B/op [Average]
[info]   (min, avg, max) = (203068,588, 206520,922, 214918,261), stdev = 4849,308
[info]   CI (99.9%): [187847,965, 225193,880] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,021 ±(99.9%) 0,098 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,062), stdev = 0,026
[info]   CI (99.9%): [≈ 0, 0,119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3,248 ±(99.9%) 15,654 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3,248, 9,955), stdev = 4,065
[info]   CI (99.9%): [≈ 0, 18,902] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 32,53% complete, ETA 01:29:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6970,360 ops/s
[info] # Warmup Iteration   2: 10706,725 ops/s
[info] # Warmup Iteration   3: 10780,383 ops/s
[info] # Warmup Iteration   4: 10820,611 ops/s
[info] # Warmup Iteration   5: 10725,030 ops/s
[info] Iteration   1: 10713,867 ops/s
[info]                  ·gc.alloc.rate:                   1284,314 MB/sec
[info]                  ·gc.alloc.rate.norm:              188592,040 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336,737 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     196289,983 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,058 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 10779,347 ops/s
[info]                  ·gc.alloc.rate:                   1292,402 MB/sec
[info]                  ·gc.alloc.rate.norm:              188623,902 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338,028 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     195282,935 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6,078 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 10818,242 ops/s
[info]                  ·gc.alloc.rate:                   1297,088 MB/sec
[info]                  ·gc.alloc.rate.norm:              188624,043 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,038 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     194869,821 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,028 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 10678,998 ops/s
[info]                  ·gc.alloc.rate:               1280,359 MB/sec
[info]                  ·gc.alloc.rate.norm:          188624,040 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341,300 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 197601,899 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   5: 10837,513 ops/s
[info]                  ·gc.alloc.rate:                   1299,396 MB/sec
[info]                  ·gc.alloc.rate.norm:              188624,055 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,943 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     195090,655 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12,090 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala":
[info]   10765,593 ±(99.9%) 260,508 ops/s [Average]
[info]   (min, avg, max) = (10678,998, 10765,593, 10837,513), stdev = 67,653
[info]   CI (99.9%): [10505,085, 11026,102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1290,712 ±(99.9%) 31,462 MB/sec [Average]
[info]   (min, avg, max) = (1280,359, 1290,712, 1299,396), stdev = 8,171
[info]   CI (99.9%): [1259,249, 1322,174] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   188617,616 ±(99.9%) 55,054 B/op [Average]
[info]   (min, avg, max) = (188592,040, 188617,616, 188624,055), stdev = 14,297
[info]   CI (99.9%): [188562,562, 188672,670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1340,009 ±(99.9%) 10,852 MB/sec [Average]
[info]   (min, avg, max) = (1336,737, 1340,009, 1343,943), stdev = 2,818
[info]   CI (99.9%): [1329,157, 1350,861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   195827,059 ±(99.9%) 4356,090 B/op [Average]
[info]   (min, avg, max) = (194869,821, 195827,059, 197601,899), stdev = 1131,263
[info]   CI (99.9%): [191470,969, 200183,149] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,083), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4,851 ±(99.9%) 17,644 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4,851, 12,090), stdev = 4,582
[info]   CI (99.9%): [≈ 0, 22,495] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 32,73% complete, ETA 01:29:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 226917,274 ops/s
[info] # Warmup Iteration   2: 245762,798 ops/s
[info] # Warmup Iteration   3: 248511,402 ops/s
[info] # Warmup Iteration   4: 248674,961 ops/s
[info] # Warmup Iteration   5: 247825,559 ops/s
[info] Iteration   1: 248152,722 ops/s
[info]                  ·gc.alloc.rate:                   1615,159 MB/sec
[info]                  ·gc.alloc.rate.norm:              10240,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,087 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8546,785 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,264 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 247876,839 ops/s
[info]                  ·gc.alloc.rate:                   1613,380 MB/sec
[info]                  ·gc.alloc.rate.norm:              10240,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2023,770 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12844,712 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,397 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 247723,045 ops/s
[info]                  ·gc.alloc.rate:                   1612,358 MB/sec
[info]                  ·gc.alloc.rate.norm:              10240,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350,696 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8578,200 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,529 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 245779,360 ops/s
[info]                  ·gc.alloc.rate:                   1599,646 MB/sec
[info]                  ·gc.alloc.rate.norm:              10240,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1351,966 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8654,496 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,267 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 245944,987 ops/s
[info]                  ·gc.alloc.rate:                   1600,717 MB/sec
[info]                  ·gc.alloc.rate.norm:              10240,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2030,718 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12990,773 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,400 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala":
[info]   247095,391 ±(99.9%) 4381,079 ops/s [Average]
[info]   (min, avg, max) = (245779,360, 247095,391, 248152,722), stdev = 1137,752
[info]   CI (99.9%): [242714,311, 251476,470] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1608,252 ±(99.9%) 28,668 MB/sec [Average]
[info]   (min, avg, max) = (1599,646, 1608,252, 1615,159), stdev = 7,445
[info]   CI (99.9%): [1579,585, 1636,920] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   10240,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (10240,002, 10240,002, 10240,002), stdev = 0,001
[info]   CI (99.9%): [10240,002, 10240,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1621,047 ±(99.9%) 1427,879 MB/sec [Average]
[info]   (min, avg, max) = (1348,087, 1621,047, 2030,718), stdev = 370,816
[info]   CI (99.9%): [193,169, 3048,926] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   10322,993 ±(99.9%) 9124,324 B/op [Average]
[info]   (min, avg, max) = (8546,785, 10322,993, 12990,773), stdev = 2369,558
[info]   CI (99.9%): [1198,669, 19447,317] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,058 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,058, 0,083), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,371 ±(99.9%) 0,425 B/op [Average]
[info]   (min, avg, max) = (0,264, 0,371, 0,529), stdev = 0,110
[info]   CI (99.9%): [≈ 0, 0,796] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 32,93% complete, ETA 01:28:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5580,755 ops/s
[info] # Warmup Iteration   2: 8505,081 ops/s
[info] # Warmup Iteration   3: 8269,031 ops/s
[info] # Warmup Iteration   4: 8721,636 ops/s
[info] # Warmup Iteration   5: 8708,337 ops/s
[info] Iteration   1: 8635,063 ops/s
[info]                  ·gc.alloc.rate:                   1608,648 MB/sec
[info]                  ·gc.alloc.rate.norm:              293080,050 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010,088 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     366218,537 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7,588 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 8726,189 ops/s
[info]                  ·gc.alloc.rate:               1625,618 MB/sec
[info]                  ·gc.alloc.rate.norm:          293080,049 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341,922 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 241932,875 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 8712,727 ops/s
[info]                  ·gc.alloc.rate:                   1623,083 MB/sec
[info]                  ·gc.alloc.rate.norm:              293081,664 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,973 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     242682,478 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11,280 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 8626,567 ops/s
[info]                  ·gc.alloc.rate:                   1607,079 MB/sec
[info]                  ·gc.alloc.rate.norm:              293080,054 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019,317 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     368259,308 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11,392 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 8649,470 ops/s
[info]                  ·gc.alloc.rate:               1611,357 MB/sec
[info]                  ·gc.alloc.rate.norm:          293080,050 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1348,651 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 245297,945 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson":
[info]   8670,003 ±(99.9%) 177,624 ops/s [Average]
[info]   (min, avg, max) = (8626,567, 8670,003, 8726,189), stdev = 46,128
[info]   CI (99.9%): [8492,379, 8847,627] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1615,157 ±(99.9%) 33,031 MB/sec [Average]
[info]   (min, avg, max) = (1607,079, 1615,157, 1625,618), stdev = 8,578
[info]   CI (99.9%): [1582,127, 1648,188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   293080,373 ±(99.9%) 2,778 B/op [Average]
[info]   (min, avg, max) = (293080,049, 293080,373, 293081,664), stdev = 0,722
[info]   CI (99.9%): [293077,595, 293083,152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1612,790 ±(99.9%) 1412,866 MB/sec [Average]
[info]   (min, avg, max) = (1341,922, 1612,790, 2019,317), stdev = 366,917
[info]   CI (99.9%): [199,924, 3025,657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   292878,229 ±(99.9%) 261447,336 B/op [Average]
[info]   (min, avg, max) = (241932,875, 292878,229, 368259,308), stdev = 67897,043
[info]   CI (99.9%): [31430,892, 554325,565] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,062), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   6,052 ±(99.9%) 22,075 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6,052, 11,392), stdev = 5,733
[info]   CI (99.9%): [≈ 0, 28,127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.time":
[info]   9,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 33,13% complete, ETA 01:28:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8179,812 ops/s
[info] # Warmup Iteration   2: 10019,054 ops/s
[info] # Warmup Iteration   3: 10048,960 ops/s
[info] # Warmup Iteration   4: 10035,331 ops/s
[info] # Warmup Iteration   5: 10046,222 ops/s
[info] Iteration   1: 10043,648 ops/s
[info]                  ·gc.alloc.rate:                   1298,232 MB/sec
[info]                  ·gc.alloc.rate.norm:              203352,046 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,052 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     210842,477 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6,524 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 9906,258 ops/s
[info]                  ·gc.alloc.rate:                   1280,512 MB/sec
[info]                  ·gc.alloc.rate.norm:              203368,636 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,394 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     213990,782 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,307 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 10024,370 ops/s
[info]                  ·gc.alloc.rate:                   1295,982 MB/sec
[info]                  ·gc.alloc.rate.norm:              203376,043 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,240 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     211576,825 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13,073 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 10062,604 ops/s
[info]                  ·gc.alloc.rate:                   1300,756 MB/sec
[info]                  ·gc.alloc.rate.norm:              203376,046 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1349,296 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     210965,365 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6,511 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 10016,588 ops/s
[info]                  ·gc.alloc.rate:                   1294,899 MB/sec
[info]                  ·gc.alloc.rate.norm:              203376,043 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350,720 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     212143,283 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,271 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readUPickle":
[info]   10010,694 ±(99.9%) 235,089 ops/s [Average]
[info]   (min, avg, max) = (9906,258, 10010,694, 10062,604), stdev = 61,052
[info]   CI (99.9%): [9775,605, 10245,783] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.alloc.rate":
[info]   1294,076 ±(99.9%) 30,454 MB/sec [Average]
[info]   (min, avg, max) = (1280,512, 1294,076, 1300,756), stdev = 7,909
[info]   CI (99.9%): [1263,623, 1324,530] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   203369,763 ±(99.9%) 40,087 B/op [Average]
[info]   (min, avg, max) = (203352,046, 203369,763, 203376,046), stdev = 10,410
[info]   CI (99.9%): [203329,676, 203409,850] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1348,341 ±(99.9%) 6,867 MB/sec [Average]
[info]   (min, avg, max) = (1346,052, 1348,341, 1350,720), stdev = 1,783
[info]   CI (99.9%): [1341,473, 1355,208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   211903,746 ±(99.9%) 4918,746 B/op [Average]
[info]   (min, avg, max) = (210842,477, 211903,746, 213990,782), stdev = 1277,383
[info]   CI (99.9%): [206985,000, 216822,493] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,098 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,042, 0,083), stdev = 0,026
[info]   CI (99.9%): [≈ 0, 0,140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   6,537 ±(99.9%) 15,381 B/op [Average]
[info]   (min, avg, max) = (3,271, 6,537, 13,073), stdev = 3,994
[info]   CI (99.9%): [≈ 0, 21,919] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 33,33% complete, ETA 01:28:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16380,942 ops/s
[info] # Warmup Iteration   2: 21333,877 ops/s
[info] # Warmup Iteration   3: 21375,899 ops/s
[info] # Warmup Iteration   4: 21574,624 ops/s
[info] # Warmup Iteration   5: 21558,563 ops/s
[info] Iteration   1: 21420,383 ops/s
[info]                  ·gc.alloc.rate:                   1138,166 MB/sec
[info]                  ·gc.alloc.rate.norm:              83597,901 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,656 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     98470,708 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,059 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 21663,476 ops/s
[info]                  ·gc.alloc.rate:                   1150,794 MB/sec
[info]                  ·gc.alloc.rate.norm:              83576,020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341,408 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     97419,278 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,025 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 21671,142 ops/s
[info]                  ·gc.alloc.rate:               1151,179 MB/sec
[info]                  ·gc.alloc.rate.norm:          83576,020 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670,983 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 48713,602 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 21626,543 ops/s
[info]                  ·gc.alloc.rate:                   1148,804 MB/sec
[info]                  ·gc.alloc.rate.norm:              83576,020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,316 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     97726,837 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,545 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 21657,227 ops/s
[info]                  ·gc.alloc.rate:                   1150,412 MB/sec
[info]                  ·gc.alloc.rate.norm:              83576,021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,270 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     97732,201 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,538 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce":
[info]   21607,754 ±(99.9%) 408,566 ops/s [Average]
[info]   (min, avg, max) = (21420,383, 21607,754, 21671,142), stdev = 106,103
[info]   CI (99.9%): [21199,188, 22016,320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1147,871 ±(99.9%) 21,179 MB/sec [Average]
[info]   (min, avg, max) = (1138,166, 1147,871, 1151,179), stdev = 5,500
[info]   CI (99.9%): [1126,692, 1169,050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   83580,396 ±(99.9%) 37,680 B/op [Average]
[info]   (min, avg, max) = (83576,020, 83580,396, 83597,901), stdev = 9,785
[info]   CI (99.9%): [83542,716, 83618,077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1208,326 ±(99.9%) 1156,693 MB/sec [Average]
[info]   (min, avg, max) = (670,983, 1208,326, 1345,270), stdev = 300,390
[info]   CI (99.9%): [51,633, 2365,020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   88012,525 ±(99.9%) 84607,023 B/op [Average]
[info]   (min, avg, max) = (48713,602, 88012,525, 98470,708), stdev = 21972,175
[info]   CI (99.9%): [3405,502, 172619,548] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,098 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,042, 0,062), stdev = 0,026
[info]   CI (99.9%): [≈ 0, 0,140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3,033 ±(99.9%) 7,139 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3,033, 4,545), stdev = 1,854
[info]   CI (99.9%): [≈ 0, 10,173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 33,53% complete, ETA 01:28:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18792,019 ops/s
[info] # Warmup Iteration   2: 25169,573 ops/s
[info] # Warmup Iteration   3: 22749,189 ops/s
[info] # Warmup Iteration   4: 25097,551 ops/s
[info] # Warmup Iteration   5: 25339,224 ops/s
[info] Iteration   1: 25388,013 ops/s
[info]                  ·gc.alloc.rate:               1076,262 MB/sec
[info]                  ·gc.alloc.rate.norm:          66696,018 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668,325 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 41416,151 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 25423,910 ops/s
[info]                  ·gc.alloc.rate:                   1077,767 MB/sec
[info]                  ·gc.alloc.rate.norm:              66696,017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336,625 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     82715,040 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,154 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 25347,371 ops/s
[info]                  ·gc.alloc.rate:               1074,542 MB/sec
[info]                  ·gc.alloc.rate.norm:          66696,017 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669,029 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 41526,124 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 25307,321 ops/s
[info]                  ·gc.alloc.rate:                   1072,828 MB/sec
[info]                  ·gc.alloc.rate.norm:              66696,017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338,981 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     83242,345 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,884 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 25307,969 ops/s
[info]                  ·gc.alloc.rate:               1072,879 MB/sec
[info]                  ·gc.alloc.rate.norm:          66696,017 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340,605 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 83339,321 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala":
[info]   25354,917 ±(99.9%) 196,174 ops/s [Average]
[info]   (min, avg, max) = (25307,321, 25354,917, 25423,910), stdev = 50,946
[info]   CI (99.9%): [25158,743, 25551,091] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1074,856 ±(99.9%) 8,298 MB/sec [Average]
[info]   (min, avg, max) = (1072,828, 1074,856, 1077,767), stdev = 2,155
[info]   CI (99.9%): [1066,558, 1083,153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   66696,017 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (66696,017, 66696,017, 66696,018), stdev = 0,001
[info]   CI (99.9%): [66696,015, 66696,019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1070,713 ±(99.9%) 1413,223 MB/sec [Average]
[info]   (min, avg, max) = (668,325, 1070,713, 1340,605), stdev = 367,010
[info]   CI (99.9%): [≈ 0, 2483,936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   66447,796 ±(99.9%) 87801,367 B/op [Average]
[info]   (min, avg, max) = (41416,151, 66447,796, 83339,321), stdev = 22801,736
[info]   CI (99.9%): [≈ 0, 154249,163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,156 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,083), stdev = 0,041
[info]   CI (99.9%): [≈ 0, 0,185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1,808 ±(99.9%) 9,686 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,808, 5,154), stdev = 2,516
[info]   CI (99.9%): [≈ 0, 11,494] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 33,73% complete, ETA 01:27:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 715760,391 ops/s
[info] # Warmup Iteration   2: 791550,067 ops/s
[info] # Warmup Iteration   3: 795136,510 ops/s
[info] # Warmup Iteration   4: 765428,177 ops/s
[info] # Warmup Iteration   5: 771356,552 ops/s
[info] Iteration   1: 795695,431 ops/s
[info]                  ·gc.alloc.rate:                   1436,339 MB/sec
[info]                  ·gc.alloc.rate.norm:              2840,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,371 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2664,089 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,165 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 794408,684 ops/s
[info]                  ·gc.alloc.rate:                   1434,040 MB/sec
[info]                  ·gc.alloc.rate.norm:              2840,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2021,749 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4003,911 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,206 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 797530,946 ops/s
[info]                  ·gc.alloc.rate:                   1439,651 MB/sec
[info]                  ·gc.alloc.rate.norm:              2840,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1349,372 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2661,908 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,082 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 792928,392 ops/s
[info]                  ·gc.alloc.rate:                   1431,368 MB/sec
[info]                  ·gc.alloc.rate.norm:              2840,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350,776 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2680,096 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,124 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 787671,419 ops/s
[info]                  ·gc.alloc.rate:                   1421,860 MB/sec
[info]                  ·gc.alloc.rate.norm:              2840,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,036 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2700,536 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,042 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala":
[info]   793646,974 ±(99.9%) 14418,751 ops/s [Average]
[info]   (min, avg, max) = (787671,419, 793646,974, 797530,946), stdev = 3744,504
[info]   CI (99.9%): [779228,224, 808065,725] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1432,652 ±(99.9%) 26,018 MB/sec [Average]
[info]   (min, avg, max) = (1421,860, 1432,652, 1439,651), stdev = 6,757
[info]   CI (99.9%): [1406,633, 1458,670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2840,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (2840,001, 2840,001, 2840,001), stdev = 0,001
[info]   CI (99.9%): [2840,000, 2840,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1484,261 ±(99.9%) 1157,004 MB/sec [Average]
[info]   (min, avg, max) = (1347,371, 1484,261, 2021,749), stdev = 300,470
[info]   CI (99.9%): [327,257, 2641,265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2942,108 ±(99.9%) 2286,387 B/op [Average]
[info]   (min, avg, max) = (2661,908, 2942,108, 4003,911), stdev = 593,768
[info]   CI (99.9%): [655,721, 5228,495] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,062 ±(99.9%) 0,127 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,062, 0,104), stdev = 0,033
[info]   CI (99.9%): [≈ 0, 0,189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,124 ±(99.9%) 0,251 B/op [Average]
[info]   (min, avg, max) = (0,042, 0,124, 0,206), stdev = 0,065
[info]   CI (99.9%): [≈ 0, 0,374] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 33,94% complete, ETA 01:27:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 678367,062 ops/s
[info] # Warmup Iteration   2: 712768,394 ops/s
[info] # Warmup Iteration   3: 711082,231 ops/s
[info] # Warmup Iteration   4: 711071,920 ops/s
[info] # Warmup Iteration   5: 710621,646 ops/s
[info] Iteration   1: 707535,623 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 673305,319 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 710690,443 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 710439,750 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 711731,285 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   702740,484 ±(99.9%) 63644,556 ops/s [Average]
[info]   (min, avg, max) = (673305,319, 702740,484, 711731,285), stdev = 16528,289
[info]   CI (99.9%): [639095,928, 766385,040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (0,001, 0,001, 0,001), stdev = 0,001
[info]   CI (99.9%): [0,001, 0,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 34,14% complete, ETA 01:27:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19125,804 ops/s
[info] # Warmup Iteration   2: 23985,544 ops/s
[info] # Warmup Iteration   3: 23806,647 ops/s
[info] # Warmup Iteration   4: 23992,546 ops/s
[info] # Warmup Iteration   5: 23866,840 ops/s
[info] Iteration   1: 23798,413 ops/s
[info]                  ·gc.alloc.rate:               1097,585 MB/sec
[info]                  ·gc.alloc.rate.norm:          72560,018 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339,383 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 88545,047 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 24046,813 ops/s
[info]                  ·gc.alloc.rate:               1109,020 MB/sec
[info]                  ·gc.alloc.rate.norm:          72560,018 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669,663 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 43814,189 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 24016,773 ops/s
[info]                  ·gc.alloc.rate:                   1107,661 MB/sec
[info]                  ·gc.alloc.rate.norm:              72560,018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,633 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     87821,459 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,092 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 23974,520 ops/s
[info]                  ·gc.alloc.rate:               1105,683 MB/sec
[info]                  ·gc.alloc.rate.norm:          72560,018 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342,027 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 88070,064 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 23946,902 ops/s
[info]                  ·gc.alloc.rate:               1104,397 MB/sec
[info]                  ·gc.alloc.rate.norm:          72560,019 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,989 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 44150,338 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson":
[info]   23956,684 ±(99.9%) 371,330 ops/s [Average]
[info]   (min, avg, max) = (23798,413, 23956,684, 24046,813), stdev = 96,433
[info]   CI (99.9%): [23585,355, 24328,014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1104,869 ±(99.9%) 17,109 MB/sec [Average]
[info]   (min, avg, max) = (1097,585, 1104,869, 1109,020), stdev = 4,443
[info]   CI (99.9%): [1087,760, 1121,978] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   72560,018 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (72560,018, 72560,018, 72560,019), stdev = 0,001
[info]   CI (99.9%): [72560,016, 72560,021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1072,739 ±(99.9%) 1412,790 MB/sec [Average]
[info]   (min, avg, max) = (669,663, 1072,739, 1342,027), stdev = 366,897
[info]   CI (99.9%): [≈ 0, 2485,529] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   70480,220 ±(99.9%) 93150,552 B/op [Average]
[info]   (min, avg, max) = (43814,189, 70480,220, 88545,047), stdev = 24190,902
[info]   CI (99.9%): [≈ 0, 163630,771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,012 ±(99.9%) 0,108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,012, 0,062), stdev = 0,028
[info]   CI (99.9%): [≈ 0, 0,120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,818 ±(99.9%) 7,047 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,818, 4,092), stdev = 1,830
[info]   CI (99.9%): [≈ 0, 7,865] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 34,34% complete, ETA 01:27:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13688,839 ops/s
[info] # Warmup Iteration   2: 15179,944 ops/s
[info] # Warmup Iteration   3: 14927,566 ops/s
[info] # Warmup Iteration   4: 14964,380 ops/s
[info] # Warmup Iteration   5: 15130,199 ops/s
[info] Iteration   1: 15163,012 ops/s
[info]                  ·gc.alloc.rate:               907,191 MB/sec
[info]                  ·gc.alloc.rate.norm:          94128,028 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,645 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 69895,849 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 15180,198 ops/s
[info]                  ·gc.alloc.rate:               908,205 MB/sec
[info]                  ·gc.alloc.rate.norm:          94128,039 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,643 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 69817,593 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 15172,793 ops/s
[info]                  ·gc.alloc.rate:                   907,766 MB/sec
[info]                  ·gc.alloc.rate.norm:              94126,411 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,279 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     139699,590 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6,477 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 15165,196 ops/s
[info]                  ·gc.alloc.rate:               907,291 MB/sec
[info]                  ·gc.alloc.rate.norm:          94128,028 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,675 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 69891,241 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 15171,365 ops/s
[info]                  ·gc.alloc.rate:                   907,663 MB/sec
[info]                  ·gc.alloc.rate.norm:              94128,028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,640 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69859,001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,159 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeUPickle":
[info]   15170,513 ±(99.9%) 26,135 ops/s [Average]
[info]   (min, avg, max) = (15163,012, 15170,513, 15180,198), stdev = 6,787
[info]   CI (99.9%): [15144,378, 15196,648] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.alloc.rate":
[info]   907,623 ±(99.9%) 1,562 MB/sec [Average]
[info]   (min, avg, max) = (907,191, 907,623, 908,205), stdev = 0,406
[info]   CI (99.9%): [906,061, 909,184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   94127,707 ±(99.9%) 2,790 B/op [Average]
[info]   (min, avg, max) = (94126,411, 94127,707, 94128,039), stdev = 0,725
[info]   CI (99.9%): [94124,917, 94130,497] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   808,376 ±(99.9%) 1160,028 MB/sec [Average]
[info]   (min, avg, max) = (673,640, 808,376, 1347,279), stdev = 301,256
[info]   CI (99.9%): [≈ 0, 1968,405] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   83832,655 ±(99.9%) 120257,850 B/op [Average]
[info]   (min, avg, max) = (69817,593, 83832,655, 139699,590), stdev = 31230,582
[info]   CI (99.9%): [≈ 0, 204090,505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,017 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   1,727 ±(99.9%) 10,840 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,727, 6,477), stdev = 2,815
[info]   CI (99.9%): [≈ 0, 12,567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 34,54% complete, ETA 01:26:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20173,534 ops/s
[info] # Warmup Iteration   2: 26134,654 ops/s
[info] # Warmup Iteration   3: 26347,405 ops/s
[info] # Warmup Iteration   4: 26240,386 ops/s
[info] # Warmup Iteration   5: 26251,661 ops/s
[info] Iteration   1: 26316,784 ops/s
[info]                  ·gc.alloc.rate:               1474,845 MB/sec
[info]                  ·gc.alloc.rate.norm:          88168,018 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344,738 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 80390,030 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 26406,933 ops/s
[info]                  ·gc.alloc.rate:               1479,930 MB/sec
[info]                  ·gc.alloc.rate.norm:          88168,016 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1346,007 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 80189,427 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 26408,654 ops/s
[info]                  ·gc.alloc.rate:                   1480,001 MB/sec
[info]                  ·gc.alloc.rate.norm:              88168,016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,020 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     80305,480 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,962 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 26477,640 ops/s
[info]                  ·gc.alloc.rate:               1483,805 MB/sec
[info]                  ·gc.alloc.rate.norm:          88168,018 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1349,347 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 80178,469 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 26433,934 ops/s
[info]                  ·gc.alloc.rate:                   1481,798 MB/sec
[info]                  ·gc.alloc.rate.norm:              88168,016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2025,473 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     120517,096 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6,191 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce":
[info]   26408,789 ±(99.9%) 226,512 ops/s [Average]
[info]   (min, avg, max) = (26316,784, 26408,789, 26477,640), stdev = 58,824
[info]   CI (99.9%): [26182,277, 26635,301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate":
[info]   1480,076 ±(99.9%) 12,809 MB/sec [Average]
[info]   (min, avg, max) = (1474,845, 1480,076, 1483,805), stdev = 3,326
[info]   CI (99.9%): [1467,267, 1492,885] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   88168,017 ±(99.9%) 0,003 B/op [Average]
[info]   (min, avg, max) = (88168,016, 88168,017, 88168,018), stdev = 0,001
[info]   CI (99.9%): [88168,014, 88168,019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1482,717 ±(99.9%) 1168,344 MB/sec [Average]
[info]   (min, avg, max) = (1344,738, 1482,717, 2025,473), stdev = 303,415
[info]   CI (99.9%): [314,373, 2651,061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   88316,100 ±(99.9%) 69315,885 B/op [Average]
[info]   (min, avg, max) = (80178,469, 88316,100, 120517,096), stdev = 18001,115
[info]   CI (99.9%): [19000,215, 157631,985] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,200 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,104), stdev = 0,052
[info]   CI (99.9%): [≈ 0, 0,237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2,231 ±(99.9%) 11,880 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,231, 6,191), stdev = 3,085
[info]   CI (99.9%): [≈ 0, 14,111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 34,74% complete, ETA 01:26:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19188,742 ops/s
[info] # Warmup Iteration   2: 28407,136 ops/s
[info] # Warmup Iteration   3: 28290,002 ops/s
[info] # Warmup Iteration   4: 28580,882 ops/s
[info] # Warmup Iteration   5: 28617,018 ops/s
[info] Iteration   1: 28089,935 ops/s
[info]                  ·gc.alloc.rate:                   1301,419 MB/sec
[info]                  ·gc.alloc.rate.norm:              72880,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336,936 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74868,961 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,333 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 28650,311 ops/s
[info]                  ·gc.alloc.rate:                   1327,207 MB/sec
[info]                  ·gc.alloc.rate.norm:              72880,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338,022 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73473,867 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,430 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 28699,915 ops/s
[info]                  ·gc.alloc.rate:                   1329,515 MB/sec
[info]                  ·gc.alloc.rate.norm:              72880,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,059 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73458,034 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,283 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 28673,057 ops/s
[info]                  ·gc.alloc.rate:                   1328,248 MB/sec
[info]                  ·gc.alloc.rate.norm:              72880,016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341,329 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73597,751 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,285 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 28579,089 ops/s
[info]                  ·gc.alloc.rate:               1323,857 MB/sec
[info]                  ·gc.alloc.rate.norm:          72880,016 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344,050 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 73991,666 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala":
[info]   28538,461 ±(99.9%) 980,818 ops/s [Average]
[info]   (min, avg, max) = (28089,935, 28538,461, 28699,915), stdev = 254,715
[info]   CI (99.9%): [27557,643, 29519,279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1322,049 ±(99.9%) 45,137 MB/sec [Average]
[info]   (min, avg, max) = (1301,419, 1322,049, 1329,515), stdev = 11,722
[info]   CI (99.9%): [1276,912, 1367,187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   72880,016 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (72880,015, 72880,016, 72880,016), stdev = 0,001
[info]   CI (99.9%): [72880,013, 72880,018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1340,079 ±(99.9%) 10,797 MB/sec [Average]
[info]   (min, avg, max) = (1336,936, 1340,079, 1344,050), stdev = 2,804
[info]   CI (99.9%): [1329,283, 1350,876] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   73878,056 ±(99.9%) 2288,752 B/op [Average]
[info]   (min, avg, max) = (73458,034, 73878,056, 74868,961), stdev = 594,382
[info]   CI (99.9%): [71589,304, 76166,808] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,062), stdev = 0,023
[info]   CI (99.9%): [≈ 0, 0,125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2,066 ±(99.9%) 4,831 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,066, 3,430), stdev = 1,255
[info]   CI (99.9%): [≈ 0, 6,897] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 34,94% complete, ETA 01:26:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 417694,472 ops/s
[info] # Warmup Iteration   2: 440745,425 ops/s
[info] # Warmup Iteration   3: 437534,583 ops/s
[info] # Warmup Iteration   4: 445539,341 ops/s
[info] # Warmup Iteration   5: 428714,185 ops/s
[info] Iteration   1: 445137,968 ops/s
[info]                  ·gc.alloc.rate:               1158,896 MB/sec
[info]                  ·gc.alloc.rate.norm:          4096,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1347,391 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4762,219 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 444800,856 ops/s
[info]                  ·gc.alloc.rate:                   1157,992 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,385 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4765,912 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,221 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 438936,310 ops/s
[info]                  ·gc.alloc.rate:                   1142,739 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,112 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4832,136 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,149 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 445230,349 ops/s
[info]                  ·gc.alloc.rate:               1159,119 MB/sec
[info]                  ·gc.alloc.rate.norm:          4096,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,365 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2383,015 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 445730,832 ops/s
[info]                  ·gc.alloc.rate:                   1160,391 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1349,361 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4763,036 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,294 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala":
[info]   443967,263 ±(99.9%) 10905,121 ops/s [Average]
[info]   (min, avg, max) = (438936,310, 443967,263, 445730,832), stdev = 2832,025
[info]   CI (99.9%): [433062,142, 454872,384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1155,827 ±(99.9%) 28,367 MB/sec [Average]
[info]   (min, avg, max) = (1142,739, 1155,827, 1160,391), stdev = 7,367
[info]   CI (99.9%): [1127,460, 1184,195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4096,001, 4096,001, 4096,001), stdev = 0,001
[info]   CI (99.9%): [4096,001, 4096,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1213,323 ±(99.9%) 1160,152 MB/sec [Average]
[info]   (min, avg, max) = (674,365, 1213,323, 1349,361), stdev = 301,288
[info]   CI (99.9%): [53,171, 2373,475] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4301,264 ±(99.9%) 4130,754 B/op [Average]
[info]   (min, avg, max) = (2383,015, 4301,264, 4832,136), stdev = 1072,744
[info]   CI (99.9%): [170,510, 8432,017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,083), stdev = 0,037
[info]   CI (99.9%): [≈ 0, 0,181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,133 ±(99.9%) 0,507 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,133, 0,294), stdev = 0,132
[info]   CI (99.9%): [≈ 0, 0,640] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 35,14% complete, ETA 01:25:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11435,060 ops/s
[info] # Warmup Iteration   2: 17785,421 ops/s
[info] # Warmup Iteration   3: 17963,195 ops/s
[info] # Warmup Iteration   4: 17823,390 ops/s
[info] # Warmup Iteration   5: 17920,728 ops/s
[info] Iteration   1: 17921,966 ops/s
[info]                  ·gc.alloc.rate:                   1833,917 MB/sec
[info]                  ·gc.alloc.rate.norm:              160984,024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012,761 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     176683,243 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,828 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 17948,839 ops/s
[info]                  ·gc.alloc.rate:                   1836,671 MB/sec
[info]                  ·gc.alloc.rate.norm:              160984,033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,056 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     117806,372 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,476 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 17984,816 ops/s
[info]                  ·gc.alloc.rate:                   1840,334 MB/sec
[info]                  ·gc.alloc.rate.norm:              160984,024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019,394 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     176647,372 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9,108 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 17932,265 ops/s
[info]                  ·gc.alloc.rate:                   1834,982 MB/sec
[info]                  ·gc.alloc.rate.norm:              160984,024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2024,022 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     177568,690 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,654 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 17981,904 ops/s
[info]                  ·gc.alloc.rate:                   1840,000 MB/sec
[info]                  ·gc.alloc.rate.norm:              160984,024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1351,276 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     118224,947 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7,287 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson":
[info]   17953,958 ±(99.9%) 109,819 ops/s [Average]
[info]   (min, avg, max) = (17921,966, 17953,958, 17984,816), stdev = 28,520
[info]   CI (99.9%): [17844,139, 18063,777] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1837,181 ±(99.9%) 11,167 MB/sec [Average]
[info]   (min, avg, max) = (1833,917, 1837,181, 1840,334), stdev = 2,900
[info]   CI (99.9%): [1826,014, 1848,348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   160984,026 ±(99.9%) 0,015 B/op [Average]
[info]   (min, avg, max) = (160984,024, 160984,026, 160984,033), stdev = 0,004
[info]   CI (99.9%): [160984,010, 160984,041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1750,302 ±(99.9%) 1415,439 MB/sec [Average]
[info]   (min, avg, max) = (1344,056, 1750,302, 2024,022), stdev = 367,585
[info]   CI (99.9%): [334,863, 3165,742] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   153386,125 ±(99.9%) 124341,595 B/op [Average]
[info]   (min, avg, max) = (117806,372, 153386,125, 177568,690), stdev = 32291,117
[info]   CI (99.9%): [29044,530, 277727,719] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,062 ±(99.9%) 0,127 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,062, 0,104), stdev = 0,033
[info]   CI (99.9%): [≈ 0, 0,189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   5,470 ±(99.9%) 11,077 B/op [Average]
[info]   (min, avg, max) = (1,828, 5,470, 9,108), stdev = 2,877
[info]   CI (99.9%): [≈ 0, 16,547] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.time":
[info]   9,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 35,34% complete, ETA 01:25:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20387,640 ops/s
[info] # Warmup Iteration   2: 24664,463 ops/s
[info] # Warmup Iteration   3: 24425,607 ops/s
[info] # Warmup Iteration   4: 24565,092 ops/s
[info] # Warmup Iteration   5: 24552,198 ops/s
[info] Iteration   1: 24690,055 ops/s
[info]                  ·gc.alloc.rate:               1373,399 MB/sec
[info]                  ·gc.alloc.rate.norm:          87512,019 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1347,081 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 85835,043 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 24717,244 ops/s
[info]                  ·gc.alloc.rate:                   1374,927 MB/sec
[info]                  ·gc.alloc.rate.norm:              87512,017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,828 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     85787,183 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,977 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 24566,091 ops/s
[info]                  ·gc.alloc.rate:                   1366,533 MB/sec
[info]                  ·gc.alloc.rate.norm:              87512,019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,831 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86378,422 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,334 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 24661,036 ops/s
[info]                  ·gc.alloc.rate:               1371,786 MB/sec
[info]                  ·gc.alloc.rate.norm:          87512,018 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1350,135 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 86130,751 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   5: 24697,877 ops/s
[info]                  ·gc.alloc.rate:                   1373,776 MB/sec
[info]                  ·gc.alloc.rate.norm:              87512,017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1351,291 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86079,668 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,979 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readUPickle":
[info]   24666,461 ±(99.9%) 229,639 ops/s [Average]
[info]   (min, avg, max) = (24566,091, 24666,461, 24717,244), stdev = 59,637
[info]   CI (99.9%): [24436,821, 24896,100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readUPickle:·gc.alloc.rate":
[info]   1372,084 ±(99.9%) 12,711 MB/sec [Average]
[info]   (min, avg, max) = (1366,533, 1372,084, 1374,927), stdev = 3,301
[info]   CI (99.9%): [1359,374, 1384,795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   87512,018 ±(99.9%) 0,003 B/op [Average]
[info]   (min, avg, max) = (87512,017, 87512,018, 87512,019), stdev = 0,001
[info]   CI (99.9%): [87512,015, 87512,021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1349,033 ±(99.9%) 6,562 MB/sec [Average]
[info]   (min, avg, max) = (1347,081, 1349,033, 1351,291), stdev = 1,704
[info]   CI (99.9%): [1342,472, 1355,595] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   86042,214 ±(99.9%) 923,829 B/op [Average]
[info]   (min, avg, max) = (85787,183, 86042,214, 86378,422), stdev = 239,916
[info]   CI (99.9%): [85118,384, 86966,043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,062), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   1,858 ±(99.9%) 7,741 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,858, 3,979), stdev = 2,010
[info]   CI (99.9%): [≈ 0, 9,599] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readUPickle:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readUPickle:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 35,54% complete, ETA 01:25:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 38432,401 ops/s
[info] # Warmup Iteration   2: 48970,430 ops/s
[info] # Warmup Iteration   3: 49411,199 ops/s
[info] # Warmup Iteration   4: 49684,161 ops/s
[info] # Warmup Iteration   5: 48006,294 ops/s
[info] Iteration   1: 48989,547 ops/s
[info]                  ·gc.alloc.rate:                   1558,190 MB/sec
[info]                  ·gc.alloc.rate.norm:              50040,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013,772 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64670,640 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,344 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 49696,244 ops/s
[info]                  ·gc.alloc.rate:               1580,597 MB/sec
[info]                  ·gc.alloc.rate.norm:          50040,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344,338 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 42560,296 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 49668,069 ops/s
[info]                  ·gc.alloc.rate:                   1579,746 MB/sec
[info]                  ·gc.alloc.rate.norm:              50040,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,010 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42636,195 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,660 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 49436,629 ops/s
[info]                  ·gc.alloc.rate:               1572,412 MB/sec
[info]                  ·gc.alloc.rate.norm:          50040,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2022,028 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 64348,485 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   5: 49632,170 ops/s
[info]                  ·gc.alloc.rate:                   1578,588 MB/sec
[info]                  ·gc.alloc.rate.norm:              50040,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350,664 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42814,970 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,320 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce":
[info]   49484,532 ±(99.9%) 1135,139 ops/s [Average]
[info]   (min, avg, max) = (48989,547, 49484,532, 49696,244), stdev = 294,792
[info]   CI (99.9%): [48349,393, 50619,671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1573,907 ±(99.9%) 36,020 MB/sec [Average]
[info]   (min, avg, max) = (1558,190, 1573,907, 1580,597), stdev = 9,354
[info]   CI (99.9%): [1537,886, 1609,927] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   50040,009 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (50040,009, 50040,009, 50040,010), stdev = 0,001
[info]   CI (99.9%): [50040,007, 50040,012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1615,362 ±(99.9%) 1415,049 MB/sec [Average]
[info]   (min, avg, max) = (1344,338, 1615,362, 2022,028), stdev = 367,484
[info]   CI (99.9%): [200,313, 3030,412] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   51406,117 ±(99.9%) 46063,920 B/op [Average]
[info]   (min, avg, max) = (42560,296, 51406,117, 64670,640), stdev = 11962,654
[info]   CI (99.9%): [5342,197, 97470,037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,166 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,104), stdev = 0,043
[info]   CI (99.9%): [≈ 0, 0,200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1,065 ±(99.9%) 5,339 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,065, 3,344), stdev = 1,387
[info]   CI (99.9%): [≈ 0, 6,404] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 35,74% complete, ETA 01:25:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 103747,633 ops/s
[info] # Warmup Iteration   2: 139078,025 ops/s
[info] # Warmup Iteration   3: 138659,977 ops/s
[info] # Warmup Iteration   4: 139195,558 ops/s
[info] # Warmup Iteration   5: 139139,940 ops/s
[info] Iteration   1: 131141,501 ops/s
[info]                  ·gc.alloc.rate:                   1282,364 MB/sec
[info]                  ·gc.alloc.rate.norm:              15384,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337,451 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16044,860 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,500 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 138903,684 ops/s
[info]                  ·gc.alloc.rate:                   1358,226 MB/sec
[info]                  ·gc.alloc.rate.norm:              15384,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339,024 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15166,509 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,708 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 139242,390 ops/s
[info]                  ·gc.alloc.rate:               1361,539 MB/sec
[info]                  ·gc.alloc.rate.norm:          15384,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341,032 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15152,288 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 138847,541 ops/s
[info]                  ·gc.alloc.rate:                   1357,713 MB/sec
[info]                  ·gc.alloc.rate.norm:              15384,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15218,476 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,472 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 139014,629 ops/s
[info]                  ·gc.alloc.rate:                   1359,294 MB/sec
[info]                  ·gc.alloc.rate.norm:              15384,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,376 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15226,483 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,236 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala":
[info]   137429,949 ±(99.9%) 13548,878 ops/s [Average]
[info]   (min, avg, max) = (131141,501, 137429,949, 139242,390), stdev = 3518,601
[info]   CI (99.9%): [123881,071, 150978,827] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1343,827 ±(99.9%) 132,426 MB/sec [Average]
[info]   (min, avg, max) = (1282,364, 1343,827, 1361,539), stdev = 34,391
[info]   CI (99.9%): [1211,401, 1476,253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   15384,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (15384,003, 15384,003, 15384,003), stdev = 0,001
[info]   CI (99.9%): [15384,003, 15384,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1341,197 ±(99.9%) 12,159 MB/sec [Average]
[info]   (min, avg, max) = (1337,451, 1341,197, 1345,376), stdev = 3,158
[info]   CI (99.9%): [1329,038, 1353,356] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   15361,723 ±(99.9%) 1475,678 B/op [Average]
[info]   (min, avg, max) = (15152,288, 15361,723, 16044,860), stdev = 383,229
[info]   CI (99.9%): [13886,045, 16837,402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,062), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,383 ±(99.9%) 1,046 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,383, 0,708), stdev = 0,272
[info]   CI (99.9%): [≈ 0, 1,429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 35,94% complete, ETA 01:24:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1173823,471 ops/s
[info] # Warmup Iteration   2: 1287080,638 ops/s
[info] # Warmup Iteration   3: 1301937,794 ops/s
[info] # Warmup Iteration   4: 1297008,607 ops/s
[info] # Warmup Iteration   5: 1295770,396 ops/s
[info] Iteration   1: 1296336,328 ops/s
[info]                  ·gc.alloc.rate:                   1390,886 MB/sec
[info]                  ·gc.alloc.rate.norm:              1688,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,131 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1634,898 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,051 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 1287209,432 ops/s
[info]                  ·gc.alloc.rate:               1381,163 MB/sec
[info]                  ·gc.alloc.rate.norm:          1688,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1347,826 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1647,257 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 1288268,601 ops/s
[info]                  ·gc.alloc.rate:                   1382,238 MB/sec
[info]                  ·gc.alloc.rate.norm:              1688,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,764 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1647,122 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,051 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 1105402,644 ops/s
[info]                  ·gc.alloc.rate:                   1186,045 MB/sec
[info]                  ·gc.alloc.rate.norm:              1688,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350,154 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1921,563 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,059 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 1296118,019 ops/s
[info]                  ·gc.alloc.rate:                   1390,755 MB/sec
[info]                  ·gc.alloc.rate.norm:              1688,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1351,555 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1640,422 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,051 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala":
[info]   1254667,005 ±(99.9%) 321721,505 ops/s [Average]
[info]   (min, avg, max) = (1105402,644, 1254667,005, 1296336,328), stdev = 83550,053
[info]   CI (99.9%): [932945,500, 1576388,510] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1346,217 ±(99.9%) 345,233 MB/sec [Average]
[info]   (min, avg, max) = (1186,045, 1346,217, 1390,886), stdev = 89,656
[info]   CI (99.9%): [1000,984, 1691,450] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1688,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1688,000, 1688,000, 1688,000), stdev = 0,001
[info]   CI (99.9%): [1688,000, 1688,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1349,086 ±(99.9%) 6,875 MB/sec [Average]
[info]   (min, avg, max) = (1347,131, 1349,086, 1351,555), stdev = 1,785
[info]   CI (99.9%): [1342,211, 1355,961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1698,253 ±(99.9%) 481,102 B/op [Average]
[info]   (min, avg, max) = (1634,898, 1698,253, 1921,563), stdev = 124,941
[info]   CI (99.9%): [1217,151, 2179,354] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,042), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,042 ±(99.9%) 0,092 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,042, 0,059), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 36,14% complete, ETA 01:24:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 888111,690 ops/s
[info] # Warmup Iteration   2: 934152,956 ops/s
[info] # Warmup Iteration   3: 940092,265 ops/s
[info] # Warmup Iteration   4: 937509,221 ops/s
[info] # Warmup Iteration   5: 937690,934 ops/s
[info] Iteration   1: 936903,192 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 937123,241 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 940813,444 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 939608,652 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 938741,253 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc":
[info]   938637,956 ±(99.9%) 6382,504 ops/s [Average]
[info]   (min, avg, max) = (936903,192, 938637,956, 940813,444), stdev = 1657,516
[info]   CI (99.9%): [932255,452, 945020,461] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 36,35% complete, ETA 01:24:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 44127,855 ops/s
[info] # Warmup Iteration   2: 53713,120 ops/s
[info] # Warmup Iteration   3: 54470,599 ops/s
[info] # Warmup Iteration   4: 53963,089 ops/s
[info] # Warmup Iteration   5: 52811,983 ops/s
[info] Iteration   1: 49274,156 ops/s
[info]                  ·gc.alloc.rate:               1306,945 MB/sec
[info]                  ·gc.alloc.rate.norm:          41728,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340,177 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 42789,033 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 50490,845 ops/s
[info]                  ·gc.alloc.rate:                   1339,254 MB/sec
[info]                  ·gc.alloc.rate.norm:              41728,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341,877 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     41809,731 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,596 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 49619,543 ops/s
[info]                  ·gc.alloc.rate:               1316,128 MB/sec
[info]                  ·gc.alloc.rate.norm:          41728,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343,489 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 42595,495 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   4: 53701,291 ops/s
[info]                  ·gc.alloc.rate:                   1424,409 MB/sec
[info]                  ·gc.alloc.rate.norm:              41728,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,180 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39407,013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,050 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 50013,686 ops/s
[info]                  ·gc.alloc.rate:               1326,588 MB/sec
[info]                  ·gc.alloc.rate.norm:          41728,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1347,139 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 42374,435 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson":
[info]   50619,904 ±(99.9%) 6858,813 ops/s [Average]
[info]   (min, avg, max) = (49274,156, 50619,904, 53701,291), stdev = 1781,212
[info]   CI (99.9%): [43761,091, 57478,717] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1342,665 ±(99.9%) 181,963 MB/sec [Average]
[info]   (min, avg, max) = (1306,945, 1342,665, 1424,409), stdev = 47,255
[info]   CI (99.9%): [1160,701, 1524,628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   41728,009 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (41728,008, 41728,009, 41728,009), stdev = 0,001
[info]   CI (99.9%): [41728,007, 41728,010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1343,572 ±(99.9%) 10,495 MB/sec [Average]
[info]   (min, avg, max) = (1340,177, 1343,572, 1347,139), stdev = 2,726
[info]   CI (99.9%): [1333,077, 1354,067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   41795,141 ±(99.9%) 5331,209 B/op [Average]
[info]   (min, avg, max) = (39407,013, 41795,141, 42789,033), stdev = 1384,498
[info]   CI (99.9%): [36463,932, 47126,350] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,200 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,104), stdev = 0,052
[info]   CI (99.9%): [≈ 0, 0,237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1,129 ±(99.9%) 5,986 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,129, 3,050), stdev = 1,555
[info]   CI (99.9%): [≈ 0, 7,115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 36,55% complete, ETA 01:24:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26495,971 ops/s
[info] # Warmup Iteration   2: 28333,112 ops/s
[info] # Warmup Iteration   3: 27325,480 ops/s
[info] # Warmup Iteration   4: 29045,527 ops/s
[info] # Warmup Iteration   5: 29048,850 ops/s
[info] Iteration   1: 29080,122 ops/s
[info]                  ·gc.alloc.rate:                   665,419 MB/sec
[info]                  ·gc.alloc.rate.norm:              36000,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,666 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36446,190 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1,668 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 90,245 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 29030,220 ops/s
[info]                  ·gc.alloc.rate:                   664,238 MB/sec
[info]                  ·gc.alloc.rate.norm:              36000,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,652 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36510,206 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,257 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 29170,615 ops/s
[info]                  ·gc.alloc.rate:                   667,450 MB/sec
[info]                  ·gc.alloc.rate.norm:              36000,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,661 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36335,013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,123 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 29145,616 ops/s
[info]                  ·gc.alloc.rate:               666,903 MB/sec
[info]                  ·gc.alloc.rate.norm:          36000,016 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,640 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 36363,679 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 28965,939 ops/s
[info]                  ·gc.alloc.rate:                   662,784 MB/sec
[info]                  ·gc.alloc.rate.norm:              36000,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,662 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36590,858 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,131 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeUPickle":
[info]   29078,503 ±(99.9%) 322,130 ops/s [Average]
[info]   (min, avg, max) = (28965,939, 29078,503, 29170,615), stdev = 83,656
[info]   CI (99.9%): [28756,373, 29400,633] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeUPickle:·gc.alloc.rate":
[info]   665,359 ±(99.9%) 7,369 MB/sec [Average]
[info]   (min, avg, max) = (662,784, 665,359, 667,450), stdev = 1,914
[info]   CI (99.9%): [657,990, 672,728] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   36000,015 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (36000,015, 36000,015, 36000,016), stdev = 0,001
[info]   CI (99.9%): [36000,013, 36000,017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   673,656 ±(99.9%) 0,040 MB/sec [Average]
[info]   (min, avg, max) = (673,640, 673,656, 673,666), stdev = 0,011
[info]   CI (99.9%): [673,616, 673,697] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   36449,189 ±(99.9%) 404,548 B/op [Average]
[info]   (min, avg, max) = (36335,013, 36449,189, 36590,858), stdev = 105,060
[info]   CI (99.9%): [36044,641, 36853,737] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,350 ±(99.9%) 2,837 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,350, 1,668), stdev = 0,737
[info]   CI (99.9%): [≈ 0, 3,188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   18,951 ±(99.9%) 153,496 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 18,951, 90,245), stdev = 39,862
[info]   CI (99.9%): [≈ 0, 172,447] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeUPickle:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeUPickle:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 36,75% complete, ETA 01:23:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13108,824 ops/s
[info] # Warmup Iteration   2: 16334,604 ops/s
[info] # Warmup Iteration   3: 16443,261 ops/s
[info] # Warmup Iteration   4: 16460,669 ops/s
[info] # Warmup Iteration   5: 16376,926 ops/s
[info] Iteration   1: 16258,664 ops/s
[info]                  ·gc.alloc.rate:                   1477,341 MB/sec
[info]                  ·gc.alloc.rate.norm:              142952,027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,404 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     130185,398 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,015 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 16477,899 ops/s
[info]                  ·gc.alloc.rate:                   1497,198 MB/sec
[info]                  ·gc.alloc.rate.norm:              142951,043 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,630 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     128574,936 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11,929 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 16453,368 ops/s
[info]                  ·gc.alloc.rate:                   1494,977 MB/sec
[info]                  ·gc.alloc.rate.norm:              142952,026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,916 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     128889,856 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9,955 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 16312,839 ops/s
[info]                  ·gc.alloc.rate:                   1482,277 MB/sec
[info]                  ·gc.alloc.rate.norm:              142952,028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2024,687 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     195262,498 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,016 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 16473,369 ops/s
[info]                  ·gc.alloc.rate:                   1496,642 MB/sec
[info]                  ·gc.alloc.rate.norm:              142952,026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1351,193 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     129059,424 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,989 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce":
[info]   16395,228 ±(99.9%) 393,438 ops/s [Average]
[info]   (min, avg, max) = (16258,664, 16395,228, 16477,899), stdev = 102,174
[info]   CI (99.9%): [16001,790, 16788,665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1489,687 ±(99.9%) 35,507 MB/sec [Average]
[info]   (min, avg, max) = (1477,341, 1489,687, 1497,198), stdev = 9,221
[info]   CI (99.9%): [1454,180, 1525,194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   142951,830 ±(99.9%) 1,695 B/op [Average]
[info]   (min, avg, max) = (142951,043, 142951,830, 142952,028), stdev = 0,440
[info]   CI (99.9%): [142950,135, 142953,525] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1483,166 ±(99.9%) 1165,695 MB/sec [Average]
[info]   (min, avg, max) = (1345,404, 1483,166, 2024,687), stdev = 302,727
[info]   CI (99.9%): [317,471, 2648,861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   142394,422 ±(99.9%) 113826,548 B/op [Average]
[info]   (min, avg, max) = (128574,936, 142394,422, 195262,498), stdev = 29560,393
[info]   CI (99.9%): [28567,874, 256220,971] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,062 ±(99.9%) 0,188 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,062, 0,125), stdev = 0,049
[info]   CI (99.9%): [≈ 0, 0,251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5,981 ±(99.9%) 17,927 B/op [Average]
[info]   (min, avg, max) = (1,989, 5,981, 11,929), stdev = 4,655
[info]   CI (99.9%): [≈ 0, 23,907] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 36,95% complete, ETA 01:23:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12156,883 ops/s
[info] # Warmup Iteration   2: 17529,813 ops/s
[info] # Warmup Iteration   3: 17844,230 ops/s
[info] # Warmup Iteration   4: 17996,716 ops/s
[info] # Warmup Iteration   5: 17962,939 ops/s
[info] Iteration   1: 17799,430 ops/s
[info]                  ·gc.alloc.rate:                   1450,534 MB/sec
[info]                  ·gc.alloc.rate.norm:              128208,024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337,417 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     118209,966 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,681 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 17931,489 ops/s
[info]                  ·gc.alloc.rate:                   1461,082 MB/sec
[info]                  ·gc.alloc.rate.norm:              128193,320 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009,070 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     176273,021 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,481 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 17967,563 ops/s
[info]                  ·gc.alloc.rate:                   1463,768 MB/sec
[info]                  ·gc.alloc.rate.norm:              128176,026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,001 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     117513,331 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9,117 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 17778,919 ops/s
[info]                  ·gc.alloc.rate:               1448,410 MB/sec
[info]                  ·gc.alloc.rate.norm:          128176,026 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343,958 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 118932,564 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 17935,661 ops/s
[info]                  ·gc.alloc.rate:                   1461,248 MB/sec
[info]                  ·gc.alloc.rate.norm:              128176,024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,928 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     118060,505 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,826 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala":
[info]   17882,613 ±(99.9%) 333,982 ops/s [Average]
[info]   (min, avg, max) = (17778,919, 17882,613, 17967,563), stdev = 86,734
[info]   CI (99.9%): [17548,631, 18216,594] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1457,009 ±(99.9%) 26,962 MB/sec [Average]
[info]   (min, avg, max) = (1448,410, 1457,009, 1463,768), stdev = 7,002
[info]   CI (99.9%): [1430,046, 1483,971] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   128185,884 ±(99.9%) 55,704 B/op [Average]
[info]   (min, avg, max) = (128176,024, 128185,884, 128208,024), stdev = 14,466
[info]   CI (99.9%): [128130,181, 128241,588] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1475,675 ±(99.9%) 1148,238 MB/sec [Average]
[info]   (min, avg, max) = (1337,417, 1475,675, 2009,070), stdev = 298,194
[info]   CI (99.9%): [327,437, 2623,912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   129797,878 ±(99.9%) 100060,257 B/op [Average]
[info]   (min, avg, max) = (117513,331, 129797,878, 176273,021), stdev = 25985,331
[info]   CI (99.9%): [29737,620, 229858,135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,046 ±(99.9%) 0,154 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,046, 0,104), stdev = 0,040
[info]   CI (99.9%): [≈ 0, 0,200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4,021 ±(99.9%) 13,505 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4,021, 9,117), stdev = 3,507
[info]   CI (99.9%): [≈ 0, 17,526] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 3,000), stdev = 0,894
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 37,15% complete, ETA 01:23:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 476202,255 ops/s
[info] # Warmup Iteration   2: 500977,917 ops/s
[info] # Warmup Iteration   3: 495743,131 ops/s
[info] # Warmup Iteration   4: 492416,334 ops/s
[info] # Warmup Iteration   5: 481616,572 ops/s
[info] Iteration   1: 454414,336 ops/s
[info]                  ·gc.alloc.rate:               1183,061 MB/sec
[info]                  ·gc.alloc.rate.norm:          4096,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,691 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2332,455 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   2: 501362,867 ops/s
[info]                  ·gc.alloc.rate:                   1305,271 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,336 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4228,003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,065 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 457545,564 ops/s
[info]                  ·gc.alloc.rate:                   1191,210 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,704 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4637,547 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,215 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 500920,386 ops/s
[info]                  ·gc.alloc.rate:                   1304,131 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1349,372 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4238,096 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,131 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 499401,830 ops/s
[info]                  ·gc.alloc.rate:                   1300,241 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350,829 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4255,361 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,066 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala":
[info]   482728,997 ±(99.9%) 94164,906 ops/s [Average]
[info]   (min, avg, max) = (454414,336, 482728,997, 501362,867), stdev = 24454,327
[info]   CI (99.9%): [388564,091, 576893,902] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1256,783 ±(99.9%) 245,176 MB/sec [Average]
[info]   (min, avg, max) = (1183,061, 1256,783, 1305,271), stdev = 63,672
[info]   CI (99.9%): [1011,606, 1501,959] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4096,001, 4096,001, 4096,001), stdev = 0,001
[info]   CI (99.9%): [4096,001, 4096,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1213,986 ±(99.9%) 1163,037 MB/sec [Average]
[info]   (min, avg, max) = (673,691, 1213,986, 1350,829), stdev = 302,037
[info]   CI (99.9%): [50,949, 2377,023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3938,292 ±(99.9%) 3519,716 B/op [Average]
[info]   (min, avg, max) = (2332,455, 3938,292, 4637,547), stdev = 914,059
[info]   CI (99.9%): [418,576, 7458,008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,062), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,095 ±(99.9%) 0,313 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,095, 0,215), stdev = 0,081
[info]   CI (99.9%): [≈ 0, 0,408] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 37,35% complete, ETA 01:23:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8408,695 ops/s
[info] # Warmup Iteration   2: 12791,066 ops/s
[info] # Warmup Iteration   3: 12910,203 ops/s
[info] # Warmup Iteration   4: 12833,290 ops/s
[info] # Warmup Iteration   5: 12958,618 ops/s
[info] Iteration   1: 12819,580 ops/s
[info]                  ·gc.alloc.rate:                   1762,351 MB/sec
[info]                  ·gc.alloc.rate.norm:              216281,204 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010,959 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     246791,107 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,555 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 12923,600 ops/s
[info]                  ·gc.alloc.rate:                   1776,729 MB/sec
[info]                  ·gc.alloc.rate.norm:              216280,033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015,396 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     245332,878 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12,674 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 12925,468 ops/s
[info]                  ·gc.alloc.rate:                   1776,865 MB/sec
[info]                  ·gc.alloc.rate.norm:              216280,033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,936 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     163827,328 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,534 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 12917,631 ops/s
[info]                  ·gc.alloc.rate:                   1775,830 MB/sec
[info]                  ·gc.alloc.rate.norm:              216280,046 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2021,976 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     246258,329 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,072 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 12915,032 ops/s
[info]                  ·gc.alloc.rate:                   1775,338 MB/sec
[info]                  ·gc.alloc.rate.norm:              216280,036 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2026,549 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     246883,721 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,537 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson":
[info]   12900,262 ±(99.9%) 174,446 ops/s [Average]
[info]   (min, avg, max) = (12819,580, 12900,262, 12925,468), stdev = 45,303
[info]   CI (99.9%): [12725,817, 13074,708] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1773,423 ±(99.9%) 23,956 MB/sec [Average]
[info]   (min, avg, max) = (1762,351, 1773,423, 1776,865), stdev = 6,221
[info]   CI (99.9%): [1749,466, 1797,379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   216280,271 ±(99.9%) 2,010 B/op [Average]
[info]   (min, avg, max) = (216280,033, 216280,271, 216281,204), stdev = 0,522
[info]   CI (99.9%): [216278,261, 216282,280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1884,163 ±(99.9%) 1158,803 MB/sec [Average]
[info]   (min, avg, max) = (1345,936, 1884,163, 2026,549), stdev = 300,938
[info]   CI (99.9%): [725,360, 3042,967] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   229818,673 ±(99.9%) 142071,149 B/op [Average]
[info]   (min, avg, max) = (163827,328, 229818,673, 246883,721), stdev = 36895,426
[info]   CI (99.9%): [87747,524, 371889,821] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,139 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,042, 0,104), stdev = 0,036
[info]   CI (99.9%): [≈ 0, 0,181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   5,075 ±(99.9%) 16,894 B/op [Average]
[info]   (min, avg, max) = (2,534, 5,075, 12,674), stdev = 4,387
[info]   CI (99.9%): [≈ 0, 21,969] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.time":
[info]   9,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 37,55% complete, ETA 01:22:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13706,038 ops/s
[info] # Warmup Iteration   2: 16507,154 ops/s
[info] # Warmup Iteration   3: 16481,087 ops/s
[info] # Warmup Iteration   4: 16533,440 ops/s
[info] # Warmup Iteration   5: 16510,770 ops/s
[info] Iteration   1: 16554,586 ops/s
[info]                  ·gc.alloc.rate:                   1448,425 MB/sec
[info]                  ·gc.alloc.rate.norm:              137648,026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020,658 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     192028,910 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,958 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 16546,449 ops/s
[info]                  ·gc.alloc.rate:                   1447,652 MB/sec
[info]                  ·gc.alloc.rate.norm:              137643,257 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,972 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     128165,624 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9,899 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 16554,276 ops/s
[info]                  ·gc.alloc.rate:                   1448,106 MB/sec
[info]                  ·gc.alloc.rate.norm:              137624,026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1349,345 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     128238,096 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7,916 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 16550,637 ops/s
[info]                  ·gc.alloc.rate:               1447,770 MB/sec
[info]                  ·gc.alloc.rate.norm:          137624,026 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1350,609 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 128388,013 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 16558,957 ops/s
[info]                  ·gc.alloc.rate:                   1448,513 MB/sec
[info]                  ·gc.alloc.rate.norm:              137624,026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1351,982 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     128452,618 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,978 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readUPickle":
[info]   16552,981 ±(99.9%) 18,074 ops/s [Average]
[info]   (min, avg, max) = (16546,449, 16552,981, 16558,957), stdev = 4,694
[info]   CI (99.9%): [16534,907, 16571,055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readUPickle:·gc.alloc.rate":
[info]   1448,093 ±(99.9%) 1,473 MB/sec [Average]
[info]   (min, avg, max) = (1447,652, 1448,093, 1448,513), stdev = 0,383
[info]   CI (99.9%): [1446,620, 1449,566] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   137632,672 ±(99.9%) 46,049 B/op [Average]
[info]   (min, avg, max) = (137624,026, 137632,672, 137648,026), stdev = 11,959
[info]   CI (99.9%): [137586,624, 137678,721] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1484,113 ±(99.9%) 1154,967 MB/sec [Average]
[info]   (min, avg, max) = (1347,972, 1484,113, 2020,658), stdev = 299,941
[info]   CI (99.9%): [329,147, 2639,080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   141054,652 ±(99.9%) 109726,819 B/op [Average]
[info]   (min, avg, max) = (128165,624, 141054,652, 192028,910), stdev = 28495,706
[info]   CI (99.9%): [31327,833, 250781,471] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,050 ±(99.9%) 0,166 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,050, 0,104), stdev = 0,043
[info]   CI (99.9%): [≈ 0, 0,216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   4,750 ±(99.9%) 15,807 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4,750, 9,899), stdev = 4,105
[info]   CI (99.9%): [≈ 0, 20,558] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readUPickle:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readUPickle:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 37,75% complete, ETA 01:22:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 29360,201 ops/s
[info] # Warmup Iteration   2: 38012,587 ops/s
[info] # Warmup Iteration   3: 37901,948 ops/s
[info] # Warmup Iteration   4: 37714,221 ops/s
[info] # Warmup Iteration   5: 37966,858 ops/s
[info] Iteration   1: 38043,527 ops/s
[info]                  ·gc.alloc.rate:                   1445,215 MB/sec
[info]                  ·gc.alloc.rate.norm:              59768,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341,312 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55471,026 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,445 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 38113,487 ops/s
[info]                  ·gc.alloc.rate:                   1447,895 MB/sec
[info]                  ·gc.alloc.rate.norm:              59768,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014,383 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     83152,206 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,719 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 38099,385 ops/s
[info]                  ·gc.alloc.rate:                   1447,411 MB/sec
[info]                  ·gc.alloc.rate.norm:              59768,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,374 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55554,606 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,580 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 37980,417 ops/s
[info]                  ·gc.alloc.rate:                   1442,875 MB/sec
[info]                  ·gc.alloc.rate.norm:              59768,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,692 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55783,835 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,725 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 37958,464 ops/s
[info]                  ·gc.alloc.rate:                   1441,996 MB/sec
[info]                  ·gc.alloc.rate.norm:              59768,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,615 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55897,541 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,726 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce":
[info]   38039,056 ±(99.9%) 266,316 ops/s [Average]
[info]   (min, avg, max) = (37958,464, 38039,056, 38113,487), stdev = 69,161
[info]   CI (99.9%): [37772,740, 38305,372] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1445,078 ±(99.9%) 10,142 MB/sec [Average]
[info]   (min, avg, max) = (1441,996, 1445,078, 1447,895), stdev = 2,634
[info]   CI (99.9%): [1434,936, 1455,220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   59768,012 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (59768,011, 59768,012, 59768,012), stdev = 0,001
[info]   CI (99.9%): [59768,010, 59768,013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1479,275 ±(99.9%) 1151,907 MB/sec [Average]
[info]   (min, avg, max) = (1341,312, 1479,275, 2014,383), stdev = 299,147
[info]   CI (99.9%): [327,368, 2631,182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   61171,843 ±(99.9%) 47318,990 B/op [Average]
[info]   (min, avg, max) = (55471,026, 61171,843, 83152,206), stdev = 12288,591
[info]   CI (99.9%): [13852,853, 108490,833] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,054 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,054, 0,083), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2,239 ±(99.9%) 2,962 B/op [Average]
[info]   (min, avg, max) = (1,719, 2,239, 3,445), stdev = 0,769
[info]   CI (99.9%): [≈ 0, 5,201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 37,95% complete, ETA 01:22:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 33003,666 ops/s
[info] # Warmup Iteration   2: 44273,580 ops/s
[info] # Warmup Iteration   3: 43900,880 ops/s
[info] # Warmup Iteration   4: 44036,567 ops/s
[info] # Warmup Iteration   5: 44444,661 ops/s
[info] Iteration   1: 44402,146 ops/s
[info]                  ·gc.alloc.rate:                   1322,806 MB/sec
[info]                  ·gc.alloc.rate.norm:              46872,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336,666 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     47363,119 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,476 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 43837,647 ops/s
[info]                  ·gc.alloc.rate:                   1305,970 MB/sec
[info]                  ·gc.alloc.rate.norm:              46872,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338,022 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48022,365 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,495 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 41463,391 ops/s
[info]                  ·gc.alloc.rate:                   1235,224 MB/sec
[info]                  ·gc.alloc.rate.norm:              46872,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339,984 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50847,251 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,790 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 44139,906 ops/s
[info]                  ·gc.alloc.rate:                   1315,058 MB/sec
[info]                  ·gc.alloc.rate.norm:              46872,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,023 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     47833,116 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,227 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 44314,521 ops/s
[info]                  ·gc.alloc.rate:                   1320,182 MB/sec
[info]                  ·gc.alloc.rate.norm:              46872,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,932 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     47715,235 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,479 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala":
[info]   43631,522 ±(99.9%) 4740,392 ops/s [Average]
[info]   (min, avg, max) = (41463,391, 43631,522, 44402,146), stdev = 1231,065
[info]   CI (99.9%): [38891,130, 48371,915] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1299,848 ±(99.9%) 141,292 MB/sec [Average]
[info]   (min, avg, max) = (1235,224, 1299,848, 1322,806), stdev = 36,693
[info]   CI (99.9%): [1158,556, 1441,140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   46872,010 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (46872,010, 46872,010, 46872,011), stdev = 0,001
[info]   CI (99.9%): [46872,009, 46872,012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1340,125 ±(99.9%) 11,309 MB/sec [Average]
[info]   (min, avg, max) = (1336,666, 1340,125, 1343,932), stdev = 2,937
[info]   CI (99.9%): [1328,816, 1351,434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   48356,217 ±(99.9%) 5441,358 B/op [Average]
[info]   (min, avg, max) = (47363,119, 48356,217, 50847,251), stdev = 1413,103
[info]   CI (99.9%): [42914,860, 53797,575] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,057 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,042, 0,062), stdev = 0,015
[info]   CI (99.9%): [≈ 0, 0,098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1,493 ±(99.9%) 1,957 B/op [Average]
[info]   (min, avg, max) = (0,790, 1,493, 2,227), stdev = 0,508
[info]   CI (99.9%): [≈ 0, 3,450] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 38,15% complete, ETA 01:21:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1366779,976 ops/s
[info] # Warmup Iteration   2: 1427775,738 ops/s
[info] # Warmup Iteration   3: 1429844,128 ops/s
[info] # Warmup Iteration   4: 1425566,628 ops/s
[info] # Warmup Iteration   5: 1428416,373 ops/s
[info] Iteration   1: 1384315,294 ops/s
[info]                  ·gc.alloc.rate:                   1259,975 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,398 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1531,358 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,095 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 1430018,804 ops/s
[info]                  ·gc.alloc.rate:               1301,588 MB/sec
[info]                  ·gc.alloc.rate.norm:          1432,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,721 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 741,225 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 1426913,731 ops/s
[info]                  ·gc.alloc.rate:                   1298,816 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,837 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1487,151 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,092 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 1425172,159 ops/s
[info]                  ·gc.alloc.rate:                   1297,201 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1349,444 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1489,672 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,069 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 1416608,689 ops/s
[info]                  ·gc.alloc.rate:                   1289,336 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350,671 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1500,122 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,023 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala":
[info]   1416605,736 ±(99.9%) 72096,081 ops/s [Average]
[info]   (min, avg, max) = (1384315,294, 1416605,736, 1430018,804), stdev = 18723,123
[info]   CI (99.9%): [1344509,655, 1488701,816] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1289,383 ±(99.9%) 65,683 MB/sec [Average]
[info]   (min, avg, max) = (1259,975, 1289,383, 1301,588), stdev = 17,058
[info]   CI (99.9%): [1223,700, 1355,067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1432,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1432,000, 1432,000, 1432,000), stdev = 0,001
[info]   CI (99.9%): [1432,000, 1432,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1214,014 ±(99.9%) 1163,030 MB/sec [Average]
[info]   (min, avg, max) = (673,721, 1214,014, 1350,671), stdev = 302,035
[info]   CI (99.9%): [50,984, 2377,044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1349,906 ±(99.9%) 1311,981 B/op [Average]
[info]   (min, avg, max) = (741,225, 1349,906, 1531,358), stdev = 340,717
[info]   CI (99.9%): [37,925, 2661,887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,050 ±(99.9%) 0,146 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,050, 0,083), stdev = 0,038
[info]   CI (99.9%): [≈ 0, 0,196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,056 ±(99.9%) 0,163 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,056, 0,095), stdev = 0,042
[info]   CI (99.9%): [≈ 0, 0,219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 38,35% complete, ETA 01:21:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1347203,507 ops/s
[info] # Warmup Iteration   2: 1394523,245 ops/s
[info] # Warmup Iteration   3: 1341854,959 ops/s
[info] # Warmup Iteration   4: 1393202,400 ops/s
[info] # Warmup Iteration   5: 1389933,428 ops/s
[info] Iteration   1: 1378149,805 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1390326,246 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1392034,267 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1390411,779 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1388840,699 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   1387952,559 ±(99.9%) 21545,142 ops/s [Average]
[info]   (min, avg, max) = (1378149,805, 1387952,559, 1392034,267), stdev = 5595,205
[info]   CI (99.9%): [1366407,417, 1409497,701] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 38,55% complete, ETA 01:21:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3144,819 ops/s
[info] # Warmup Iteration   2: 3270,052 ops/s
[info] # Warmup Iteration   3: 3780,831 ops/s
[info] # Warmup Iteration   4: 3949,742 ops/s
[info] # Warmup Iteration   5: 3951,962 ops/s
[info] Iteration   1: 3945,800 ops/s
[info]                  ·gc.alloc.rate:                   538,086 MB/sec
[info]                  ·gc.alloc.rate.norm:              214544,109 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1023,432 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     408059,979 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,005 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,800 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   2: 3980,221 ops/s
[info]                  ·gc.alloc.rate:      542,744 MB/sec
[info]                  ·gc.alloc.rate.norm: 214544,109 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 3948,768 ops/s
[info]                  ·gc.alloc.rate:                   538,476 MB/sec
[info]                  ·gc.alloc.rate.norm:              214544,109 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669,939 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     266922,321 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1,991 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 793,134 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 3929,304 ops/s
[info]                  ·gc.alloc.rate:                   535,824 MB/sec
[info]                  ·gc.alloc.rate.norm:              214544,118 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670,032 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     268280,704 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 41,690 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 3968,767 ops/s
[info]                  ·gc.alloc.rate:               541,252 MB/sec
[info]                  ·gc.alloc.rate.norm:          214544,109 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669,666 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 265445,562 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson":
[info]   3954,572 ±(99.9%) 77,216 ops/s [Average]
[info]   (min, avg, max) = (3929,304, 3954,572, 3980,221), stdev = 20,053
[info]   CI (99.9%): [3877,356, 4031,788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   539,277 ±(99.9%) 10,528 MB/sec [Average]
[info]   (min, avg, max) = (535,824, 539,277, 542,744), stdev = 2,734
[info]   CI (99.9%): [528,748, 549,805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   214544,111 ±(99.9%) 0,016 B/op [Average]
[info]   (min, avg, max) = (214544,109, 214544,111, 214544,118), stdev = 0,004
[info]   CI (99.9%): [214544,095, 214544,126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   606,614 ±(99.9%) 1432,684 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 606,614, 1023,432), stdev = 372,064
[info]   CI (99.9%): [≈ 0, 2039,298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   241741,713 ±(99.9%) 571146,282 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 241741,713, 408059,979), stdev = 148324,876
[info]   CI (99.9%): [≈ 0, 812887,995] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,420 ±(99.9%) 3,386 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,420, 1,991), stdev = 0,879
[info]   CI (99.9%): [≈ 0, 3,805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   167,325 ±(99.9%) 1348,846 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 167,325, 793,134), stdev = 350,291
[info]   CI (99.9%): [≈ 0, 1516,171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,600, 4,000), stdev = 1,517
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 38,76% complete, ETA 01:21:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 30188,340 ops/s
[info] # Warmup Iteration   2: 32883,932 ops/s
[info] # Warmup Iteration   3: 32153,201 ops/s
[info] # Warmup Iteration   4: 32577,789 ops/s
[info] # Warmup Iteration   5: 32707,755 ops/s
[info] Iteration   1: 32729,689 ops/s
[info]                  ·gc.alloc.rate:                   738,271 MB/sec
[info]                  ·gc.alloc.rate.norm:              35488,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,377 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64767,249 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1,704 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 81,905 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 32911,152 ops/s
[info]                  ·gc.alloc.rate:               742,344 MB/sec
[info]                  ·gc.alloc.rate.norm:          35488,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,660 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 32204,579 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 32912,476 ops/s
[info]                  ·gc.alloc.rate:                   742,409 MB/sec
[info]                  ·gc.alloc.rate.norm:              35488,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,699 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32203,601 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,995 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 32525,413 ops/s
[info]                  ·gc.alloc.rate:               733,643 MB/sec
[info]                  ·gc.alloc.rate.norm:          35488,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,331 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 32570,578 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 32443,113 ops/s
[info]                  ·gc.alloc.rate:                   731,761 MB/sec
[info]                  ·gc.alloc.rate.norm:              35488,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,321 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32653,889 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,020 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeUPickle":
[info]   32704,368 ±(99.9%) 832,552 ops/s [Average]
[info]   (min, avg, max) = (32443,113, 32704,368, 32912,476), stdev = 216,211
[info]   CI (99.9%): [31871,817, 33536,920] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeUPickle:·gc.alloc.rate":
[info]   737,685 ±(99.9%) 18,844 MB/sec [Average]
[info]   (min, avg, max) = (731,761, 737,685, 742,409), stdev = 4,894
[info]   CI (99.9%): [718,841, 756,529] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   35488,014 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (35488,013, 35488,014, 35488,014), stdev = 0,001
[info]   CI (99.9%): [35488,011, 35488,016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   808,278 ±(99.9%) 1160,453 MB/sec [Average]
[info]   (min, avg, max) = (673,321, 808,278, 1347,377), stdev = 301,366
[info]   CI (99.9%): [≈ 0, 1968,731] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   38879,979 ±(99.9%) 55729,956 B/op [Average]
[info]   (min, avg, max) = (32203,601, 38879,979, 64767,249), stdev = 14472,893
[info]   CI (99.9%): [≈ 0, 94609,935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,353 ±(99.9%) 2,908 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,353, 1,704), stdev = 0,755
[info]   CI (99.9%): [≈ 0, 3,261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   16,984 ±(99.9%) 139,784 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 16,984, 81,905), stdev = 36,301
[info]   CI (99.9%): [≈ 0, 156,768] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeUPickle:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeUPickle:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 38,96% complete, ETA 01:20:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 75862,802 ops/s
[info] # Warmup Iteration   2: 86222,348 ops/s
[info] # Warmup Iteration   3: 87222,170 ops/s
[info] # Warmup Iteration   4: 87108,210 ops/s
[info] # Warmup Iteration   5: 87279,567 ops/s
[info] Iteration   1: 86597,393 ops/s
[info]                  ·gc.alloc.rate:                   1610,812 MB/sec
[info]                  ·gc.alloc.rate.norm:              29264,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,424 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24460,801 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,757 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 86476,483 ops/s
[info]                  ·gc.alloc.rate:                   1608,487 MB/sec
[info]                  ·gc.alloc.rate.norm:              29264,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2021,444 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36777,145 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,137 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 87262,027 ops/s
[info]                  ·gc.alloc.rate:                   1623,046 MB/sec
[info]                  ·gc.alloc.rate.norm:              29264,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350,055 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24341,900 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,375 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 86874,207 ops/s
[info]                  ·gc.alloc.rate:               1615,981 MB/sec
[info]                  ·gc.alloc.rate.norm:          29264,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1351,514 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24474,738 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 87210,714 ops/s
[info]                  ·gc.alloc.rate:                   1622,263 MB/sec
[info]                  ·gc.alloc.rate.norm:              29264,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029,815 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36615,833 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,751 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce":
[info]   86884,165 ±(99.9%) 1358,622 ops/s [Average]
[info]   (min, avg, max) = (86476,483, 86884,165, 87262,027), stdev = 352,830
[info]   CI (99.9%): [85525,543, 88242,786] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate":
[info]   1616,118 ±(99.9%) 25,262 MB/sec [Average]
[info]   (min, avg, max) = (1608,487, 1616,118, 1623,046), stdev = 6,560
[info]   CI (99.9%): [1590,856, 1641,380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   29264,005 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (29264,005, 29264,005, 29264,005), stdev = 0,001
[info]   CI (99.9%): [29264,004, 29264,006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1619,850 ±(99.9%) 1426,435 MB/sec [Average]
[info]   (min, avg, max) = (1346,424, 1619,850, 2029,815), stdev = 370,441
[info]   CI (99.9%): [193,416, 3046,285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   29334,084 ±(99.9%) 25881,588 B/op [Average]
[info]   (min, avg, max) = (24341,900, 29334,084, 36777,145), stdev = 6721,366
[info]   CI (99.9%): [3452,495, 55215,672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,062), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,604 ±(99.9%) 1,663 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,604, 1,137), stdev = 0,432
[info]   CI (99.9%): [≈ 0, 2,267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 39,16% complete, ETA 01:20:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 56274,014 ops/s
[info] # Warmup Iteration   2: 369927,439 ops/s
[info] # Warmup Iteration   3: 368515,599 ops/s
[info] # Warmup Iteration   4: 371093,179 ops/s
[info] # Warmup Iteration   5: 373663,159 ops/s
[info] Iteration   1: 371452,321 ops/s
[info]                  ·gc.alloc.rate:                   744,175 MB/sec
[info]                  ·gc.alloc.rate.norm:              3152,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328,076 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5625,153 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,029 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,122 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 371323,777 ops/s
[info]                  ·gc.alloc.rate:               743,914 MB/sec
[info]                  ·gc.alloc.rate.norm:          3152,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665,370 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2819,208 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 370808,373 ops/s
[info]                  ·gc.alloc.rate:                   742,904 MB/sec
[info]                  ·gc.alloc.rate.norm:              3152,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665,358 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2822,986 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,011 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,047 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 371160,468 ops/s
[info]                  ·gc.alloc.rate:               743,577 MB/sec
[info]                  ·gc.alloc.rate.norm:          3152,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666,705 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2826,141 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 370376,988 ops/s
[info]                  ·gc.alloc.rate:               742,001 MB/sec
[info]                  ·gc.alloc.rate.norm:          3152,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666,691 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2832,084 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava":
[info]   371024,385 ±(99.9%) 1675,215 ops/s [Average]
[info]   (min, avg, max) = (370376,988, 371024,385, 371452,321), stdev = 435,048
[info]   CI (99.9%): [369349,170, 372699,601] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   743,314 ±(99.9%) 3,368 MB/sec [Average]
[info]   (min, avg, max) = (742,001, 743,314, 744,175), stdev = 0,875
[info]   CI (99.9%): [739,946, 746,682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   3152,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (3152,001, 3152,001, 3152,001), stdev = 0,001
[info]   CI (99.9%): [3152,001, 3152,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   798,440 ±(99.9%) 1140,084 MB/sec [Average]
[info]   (min, avg, max) = (665,358, 798,440, 1328,076), stdev = 296,076
[info]   CI (99.9%): [≈ 0, 1938,524] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   3385,115 ±(99.9%) 4821,887 B/op [Average]
[info]   (min, avg, max) = (2819,208, 3385,115, 5625,153), stdev = 1252,229
[info]   CI (99.9%): [≈ 0, 8207,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,008 ±(99.9%) 0,048 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,008, 0,029), stdev = 0,013
[info]   CI (99.9%): [≈ 0, 0,056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0,034 ±(99.9%) 0,205 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,034, 0,122), stdev = 0,053
[info]   CI (99.9%): [≈ 0, 0,239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.time":
[info]   10,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 2,000, 3,000), stdev = 0,707
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 39,36% complete, ETA 01:20:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 199214,897 ops/s
[info] # Warmup Iteration   2: 277273,510 ops/s
[info] # Warmup Iteration   3: 279578,330 ops/s
[info] # Warmup Iteration   4: 279538,372 ops/s
[info] # Warmup Iteration   5: 266225,225 ops/s
[info] Iteration   1: 275910,928 ops/s
[info]                  ·gc.alloc.rate:               606,094 MB/sec
[info]                  ·gc.alloc.rate.norm:          3456,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,759 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2918,094 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   2: 280221,137 ops/s
[info]                  ·gc.alloc.rate:                   615,531 MB/sec
[info]                  ·gc.alloc.rate.norm:              3456,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668,020 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3750,713 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,116 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11,880 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 280713,667 ops/s
[info]                  ·gc.alloc.rate:                   616,609 MB/sec
[info]                  ·gc.alloc.rate.norm:              3456,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668,022 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3744,167 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,350 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 279499,024 ops/s
[info]                  ·gc.alloc.rate:                   613,970 MB/sec
[info]                  ·gc.alloc.rate.norm:              3456,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667,671 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3758,283 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,117 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 280679,164 ops/s
[info]                  ·gc.alloc.rate:                   616,532 MB/sec
[info]                  ·gc.alloc.rate.norm:              3456,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667,646 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3742,527 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,233 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala":
[info]   279404,784 ±(99.9%) 7753,948 ops/s [Average]
[info]   (min, avg, max) = (275910,928, 279404,784, 280713,667), stdev = 2013,676
[info]   CI (99.9%): [271650,836, 287158,733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   613,747 ±(99.9%) 16,976 MB/sec [Average]
[info]   (min, avg, max) = (606,094, 613,747, 616,609), stdev = 4,409
[info]   CI (99.9%): [596,771, 630,723] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   3456,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (3456,002, 3456,002, 3456,002), stdev = 0,001
[info]   CI (99.9%): [3456,001, 3456,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   636,624 ±(99.9%) 268,782 MB/sec [Average]
[info]   (min, avg, max) = (511,759, 636,624, 668,022), stdev = 69,802
[info]   CI (99.9%): [367,842, 905,406] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   3582,757 ±(99.9%) 1430,937 B/op [Average]
[info]   (min, avg, max) = (2918,094, 3582,757, 3758,283), stdev = 371,610
[info]   CI (99.9%): [2151,820, 5013,694] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,448 ±(99.9%) 3,591 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,448, 2,116), stdev = 0,933
[info]   CI (99.9%): [≈ 0, 4,039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2,516 ±(99.9%) 20,162 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,516, 11,880), stdev = 5,236
[info]   CI (99.9%): [≈ 0, 22,678] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,400, 3,000), stdev = 1,140
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 39,56% complete, ETA 01:20:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 524161,755 ops/s
[info] # Warmup Iteration   2: 537121,703 ops/s
[info] # Warmup Iteration   3: 538090,989 ops/s
[info] # Warmup Iteration   4: 545115,954 ops/s
[info] # Warmup Iteration   5: 542997,209 ops/s
[info] Iteration   1: 545314,855 ops/s
[info]                  ·gc.alloc.rate:                   687,678 MB/sec
[info]                  ·gc.alloc.rate.norm:              1984,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,696 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1943,662 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1,589 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,585 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 545440,228 ops/s
[info]                  ·gc.alloc.rate:                   687,821 MB/sec
[info]                  ·gc.alloc.rate.norm:              1984,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,665 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1943,167 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,120 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 546004,319 ops/s
[info]                  ·gc.alloc.rate:                   688,552 MB/sec
[info]                  ·gc.alloc.rate.norm:              1984,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,701 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1941,210 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,120 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 541251,050 ops/s
[info]                  ·gc.alloc.rate:               682,564 MB/sec
[info]                  ·gc.alloc.rate.norm:          1984,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,740 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1958,351 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 544184,830 ops/s
[info]                  ·gc.alloc.rate:                   686,233 MB/sec
[info]                  ·gc.alloc.rate.norm:              1984,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,701 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1947,769 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,060 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala":
[info]   544439,056 ±(99.9%) 7318,106 ops/s [Average]
[info]   (min, avg, max) = (541251,050, 544439,056, 546004,319), stdev = 1900,489
[info]   CI (99.9%): [537120,951, 551757,162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   686,570 ±(99.9%) 9,209 MB/sec [Average]
[info]   (min, avg, max) = (682,564, 686,570, 688,552), stdev = 2,392
[info]   CI (99.9%): [677,360, 695,779] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1984,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1984,001, 1984,001, 1984,001), stdev = 0,001
[info]   CI (99.9%): [1984,001, 1984,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   673,701 ±(99.9%) 0,102 MB/sec [Average]
[info]   (min, avg, max) = (673,665, 673,701, 673,740), stdev = 0,027
[info]   CI (99.9%): [673,598, 673,803] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1946,832 ±(99.9%) 26,445 B/op [Average]
[info]   (min, avg, max) = (1941,210, 1946,832, 1958,351), stdev = 6,868
[info]   CI (99.9%): [1920,387, 1973,277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,339 ±(99.9%) 2,693 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,339, 1,589), stdev = 0,699
[info]   CI (99.9%): [≈ 0, 3,032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,977 ±(99.9%) 7,769 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,977, 4,585), stdev = 2,018
[info]   CI (99.9%): [≈ 0, 8,747] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 39,76% complete, ETA 01:19:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 53810,141 ops/s
[info] # Warmup Iteration   2: 77760,619 ops/s
[info] # Warmup Iteration   3: 77489,435 ops/s
[info] # Warmup Iteration   4: 78387,735 ops/s
[info] # Warmup Iteration   5: 78790,101 ops/s
[info] Iteration   1: 78855,360 ops/s
[info]                  ·gc.alloc.rate:                   3416,632 MB/sec
[info]                  ·gc.alloc.rate.norm:              68168,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3381,333 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67463,725 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,077 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 78713,098 ops/s
[info]                  ·gc.alloc.rate:                   3410,505 MB/sec
[info]                  ·gc.alloc.rate.norm:              68168,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3390,772 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67773,587 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,746 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 78788,968 ops/s
[info]                  ·gc.alloc.rate:                   3413,847 MB/sec
[info]                  ·gc.alloc.rate.norm:              68168,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3396,066 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67812,953 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,495 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 77406,575 ops/s
[info]                  ·gc.alloc.rate:                   3353,978 MB/sec
[info]                  ·gc.alloc.rate.norm:              68168,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3400,440 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69112,322 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,846 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   5: 78847,425 ops/s
[info]                  ·gc.alloc.rate:                   3416,371 MB/sec
[info]                  ·gc.alloc.rate.norm:              68168,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3403,740 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67915,985 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,247 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson":
[info]   78522,285 ±(99.9%) 2411,647 ops/s [Average]
[info]   (min, avg, max) = (77406,575, 78522,285, 78855,360), stdev = 626,297
[info]   CI (99.9%): [76110,638, 80933,932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3402,267 ±(99.9%) 104,378 MB/sec [Average]
[info]   (min, avg, max) = (3353,978, 3402,267, 3416,632), stdev = 27,107
[info]   CI (99.9%): [3297,889, 3506,644] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   68168,006 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (68168,005, 68168,006, 68168,006), stdev = 0,001
[info]   CI (99.9%): [68168,005, 68168,007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3394,470 ±(99.9%) 33,920 MB/sec [Average]
[info]   (min, avg, max) = (3381,333, 3394,470, 3403,740), stdev = 8,809
[info]   CI (99.9%): [3360,550, 3428,391] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   68015,714 ±(99.9%) 2448,208 B/op [Average]
[info]   (min, avg, max) = (67463,725, 68015,714, 69112,322), stdev = 635,792
[info]   CI (99.9%): [65567,507, 70463,922] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,104 ±(99.9%) 0,220 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,104, 0,187), stdev = 0,057
[info]   CI (99.9%): [≈ 0, 0,324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2,082 ±(99.9%) 4,375 B/op [Average]
[info]   (min, avg, max) = (0,846, 2,082, 3,746), stdev = 1,136
[info]   CI (99.9%): [≈ 0, 6,457] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.count":
[info]   25,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (5,000, 5,000, 5,000), stdev = 0,001
[info]   CI (99.9%): [25,000, 25,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.time":
[info]   15,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 3,000, 4,000), stdev = 0,707
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 39,96% complete, ETA 01:19:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 161473,756 ops/s
[info] # Warmup Iteration   2: 201367,401 ops/s
[info] # Warmup Iteration   3: 202370,300 ops/s
[info] # Warmup Iteration   4: 202754,974 ops/s
[info] # Warmup Iteration   5: 203570,640 ops/s
[info] Iteration   1: 203139,145 ops/s
[info]                  ·gc.alloc.rate:                   2073,124 MB/sec
[info]                  ·gc.alloc.rate.norm:              16056,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019,051 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15637,216 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,323 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 203025,317 ops/s
[info]                  ·gc.alloc.rate:                   2071,892 MB/sec
[info]                  ·gc.alloc.rate.norm:              16056,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2023,052 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15677,518 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,484 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 203894,961 ops/s
[info]                  ·gc.alloc.rate:                   2080,729 MB/sec
[info]                  ·gc.alloc.rate.norm:              16056,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2026,707 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15639,145 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,321 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 203612,736 ops/s
[info]                  ·gc.alloc.rate:                   2077,954 MB/sec
[info]                  ·gc.alloc.rate.norm:              16056,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029,393 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15680,782 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,483 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 203437,034 ops/s
[info]                  ·gc.alloc.rate:                   2076,121 MB/sec
[info]                  ·gc.alloc.rate.norm:              16056,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2032,719 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15720,343 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,322 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce":
[info]   203421,839 ±(99.9%) 1358,222 ops/s [Average]
[info]   (min, avg, max) = (203025,317, 203421,839, 203894,961), stdev = 352,726
[info]   CI (99.9%): [202063,616, 204780,061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate":
[info]   2075,964 ±(99.9%) 13,795 MB/sec [Average]
[info]   (min, avg, max) = (2071,892, 2075,964, 2080,729), stdev = 3,583
[info]   CI (99.9%): [2062,169, 2089,759] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   16056,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (16056,002, 16056,002, 16056,002), stdev = 0,001
[info]   CI (99.9%): [16056,002, 16056,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2026,184 ±(99.9%) 20,554 MB/sec [Average]
[info]   (min, avg, max) = (2019,051, 2026,184, 2032,719), stdev = 5,338
[info]   CI (99.9%): [2005,630, 2046,738] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   15671,001 ±(99.9%) 132,400 B/op [Average]
[info]   (min, avg, max) = (15637,216, 15671,001, 15720,343), stdev = 34,384
[info]   CI (99.9%): [15538,601, 15803,400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,050 ±(99.9%) 0,044 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,050, 0,062), stdev = 0,011
[info]   CI (99.9%): [0,006, 0,094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,387 ±(99.9%) 0,340 B/op [Average]
[info]   (min, avg, max) = (0,321, 0,387, 0,484), stdev = 0,088
[info]   CI (99.9%): [0,046, 0,727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.count":
[info]   15,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,000, 3,000), stdev = 0,001
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.time":
[info]   10,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 40,16% complete, ETA 01:19:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 141053,777 ops/s
[info] # Warmup Iteration   2: 807746,824 ops/s
[info] # Warmup Iteration   3: 834778,297 ops/s
[info] # Warmup Iteration   4: 842663,401 ops/s
[info] # Warmup Iteration   5: 843907,396 ops/s
[info] Iteration   1: 844536,191 ops/s
[info]                  ·gc.alloc.rate:                   661,349 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664,048 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1237,029 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,007 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,014 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 845553,841 ops/s
[info]                  ·gc.alloc.rate:               662,133 MB/sec
[info]                  ·gc.alloc.rate.norm:          1232,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664,036 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1235,541 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 844739,922 ops/s
[info]                  ·gc.alloc.rate:                   661,504 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665,362 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1239,186 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,027 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,051 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 844685,154 ops/s
[info]                  ·gc.alloc.rate:                   661,453 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665,387 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1239,327 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,018 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 844284,336 ops/s
[info]                  ·gc.alloc.rate:               661,142 MB/sec
[info]                  ·gc.alloc.rate.norm:          1232,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666,726 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1242,406 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava":
[info]   844759,889 ±(99.9%) 1839,198 ops/s [Average]
[info]   (min, avg, max) = (844284,336, 844759,889, 845553,841), stdev = 477,634
[info]   CI (99.9%): [842920,691, 846599,087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   661,516 ±(99.9%) 1,431 MB/sec [Average]
[info]   (min, avg, max) = (661,142, 661,516, 662,133), stdev = 0,372
[info]   CI (99.9%): [660,085, 662,947] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   1232,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1232,001, 1232,001, 1232,001), stdev = 0,001
[info]   CI (99.9%): [1232,000, 1232,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   665,112 ±(99.9%) 4,320 MB/sec [Average]
[info]   (min, avg, max) = (664,036, 665,112, 666,726), stdev = 1,122
[info]   CI (99.9%): [660,792, 669,431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   1238,698 ±(99.9%) 10,029 B/op [Average]
[info]   (min, avg, max) = (1235,541, 1238,698, 1242,406), stdev = 2,605
[info]   CI (99.9%): [1228,669, 1248,727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,009 ±(99.9%) 0,043 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,009, 0,027), stdev = 0,011
[info]   CI (99.9%): [≈ 0, 0,052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0,016 ±(99.9%) 0,080 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,016, 0,051), stdev = 0,021
[info]   CI (99.9%): [≈ 0, 0,096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 40,36% complete, ETA 01:19:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 410897,726 ops/s
[info] # Warmup Iteration   2: 513721,135 ops/s
[info] # Warmup Iteration   3: 465304,284 ops/s
[info] # Warmup Iteration   4: 517481,610 ops/s
[info] # Warmup Iteration   5: 514494,892 ops/s
[info] Iteration   1: 524484,119 ops/s
[info]                  ·gc.alloc.rate:                   538,745 MB/sec
[info]                  ·gc.alloc.rate.norm:              1616,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,812 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1535,212 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,006 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,018 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 516637,895 ops/s
[info]                  ·gc.alloc.rate:      530,683 MB/sec
[info]                  ·gc.alloc.rate.norm: 1616,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 525817,867 ops/s
[info]                  ·gc.alloc.rate:                   540,106 MB/sec
[info]                  ·gc.alloc.rate.norm:              1616,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668,081 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1998,904 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,068 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6,189 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 520892,647 ops/s
[info]                  ·gc.alloc.rate:                   535,062 MB/sec
[info]                  ·gc.alloc.rate.norm:              1616,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668,098 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2017,801 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,314 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 519963,228 ops/s
[info]                  ·gc.alloc.rate:               534,088 MB/sec
[info]                  ·gc.alloc.rate.norm:          1616,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668,403 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2022,402 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala":
[info]   521559,151 ±(99.9%) 14135,333 ops/s [Average]
[info]   (min, avg, max) = (516637,895, 521559,151, 525817,867), stdev = 3670,901
[info]   CI (99.9%): [507423,819, 535694,484] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   535,737 ±(99.9%) 14,518 MB/sec [Average]
[info]   (min, avg, max) = (530,683, 535,737, 540,106), stdev = 3,770
[info]   CI (99.9%): [521,219, 550,254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1616,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1616,001, 1616,001, 1616,001), stdev = 0,001
[info]   CI (99.9%): [1616,001, 1616,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   503,279 ±(99.9%) 1114,284 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 503,279, 668,403), stdev = 289,376
[info]   CI (99.9%): [≈ 0, 1617,563] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1514,864 ±(99.9%) 3356,947 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1514,864, 2022,402), stdev = 871,789
[info]   CI (99.9%): [≈ 0, 4871,811] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,436 ±(99.9%) 3,519 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,436, 2,068), stdev = 0,914
[info]   CI (99.9%): [≈ 0, 3,955] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1,304 ±(99.9%) 10,527 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,304, 6,189), stdev = 2,734
[info]   CI (99.9%): [≈ 0, 11,831] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 3,000), stdev = 1,304
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 40,56% complete, ETA 01:18:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 710883,218 ops/s
[info] # Warmup Iteration   2: 738619,680 ops/s
[info] # Warmup Iteration   3: 686507,993 ops/s
[info] # Warmup Iteration   4: 681770,363 ops/s
[info] # Warmup Iteration   5: 686147,473 ops/s
[info] Iteration   1: 685339,758 ops/s
[info]                  ·gc.alloc.rate:                   536,671 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,766 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1174,829 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,006 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,014 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 685932,923 ops/s
[info]                  ·gc.alloc.rate:                   537,140 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,359 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1544,437 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1,516 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,478 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 686714,688 ops/s
[info]                  ·gc.alloc.rate:                   537,742 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,349 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1542,684 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,191 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 687312,232 ops/s
[info]                  ·gc.alloc.rate:      538,214 MB/sec
[info]                  ·gc.alloc.rate.norm: 1232,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 685246,412 ops/s
[info]                  ·gc.alloc.rate:               536,580 MB/sec
[info]                  ·gc.alloc.rate.norm:          1232,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,003 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1545,232 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala":
[info]   686109,203 ±(99.9%) 3434,108 ops/s [Average]
[info]   (min, avg, max) = (685246,412, 686109,203, 687312,232), stdev = 891,827
[info]   CI (99.9%): [682675,095, 689543,310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   537,269 ±(99.9%) 2,700 MB/sec [Average]
[info]   (min, avg, max) = (536,580, 537,269, 538,214), stdev = 0,701
[info]   CI (99.9%): [534,569, 539,969] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1232,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1232,001, 1232,001, 1232,001), stdev = 0,001
[info]   CI (99.9%): [1232,001, 1232,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   506,295 ±(99.9%) 1122,602 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506,295, 673,359), stdev = 291,536
[info]   CI (99.9%): [≈ 0, 1628,898] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1161,436 ±(99.9%) 2574,791 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1161,436, 1545,232), stdev = 668,665
[info]   CI (99.9%): [≈ 0, 3736,228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,321 ±(99.9%) 2,577 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,321, 1,516), stdev = 0,669
[info]   CI (99.9%): [≈ 0, 2,898] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,737 ±(99.9%) 5,910 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,737, 3,478), stdev = 1,535
[info]   CI (99.9%): [≈ 0, 6,646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 40,76% complete, ETA 01:18:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 733179,231 ops/s
[info] # Warmup Iteration   2: 747529,206 ops/s
[info] # Warmup Iteration   3: 769837,923 ops/s
[info] # Warmup Iteration   4: 769951,284 ops/s
[info] # Warmup Iteration   5: 770039,691 ops/s
[info] Iteration   1: 771141,405 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 767727,381 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 769034,759 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 769739,214 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 768491,907 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc":
[info]   769226,933 ±(99.9%) 5003,425 ops/s [Average]
[info]   (min, avg, max) = (767727,381, 769226,933, 771141,405), stdev = 1299,374
[info]   CI (99.9%): [764223,509, 774230,358] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (0,001, 0,001, 0,001), stdev = 0,001
[info]   CI (99.9%): [0,001, 0,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 40,96% complete, ETA 01:18:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20725,882 ops/s
[info] # Warmup Iteration   2: 25949,135 ops/s
[info] # Warmup Iteration   3: 26219,736 ops/s
[info] # Warmup Iteration   4: 26785,952 ops/s
[info] # Warmup Iteration   5: 26716,471 ops/s
[info] Iteration   1: 26859,649 ops/s
[info]                  ·gc.alloc.rate:                   1722,859 MB/sec
[info]                  ·gc.alloc.rate.norm:              100912,016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012,458 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     117874,540 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,439 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 26933,005 ops/s
[info]                  ·gc.alloc.rate:                   1727,526 MB/sec
[info]                  ·gc.alloc.rate.norm:              100912,017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     78509,885 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8,515 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 26903,446 ops/s
[info]                  ·gc.alloc.rate:                   1725,638 MB/sec
[info]                  ·gc.alloc.rate.norm:              100912,016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020,072 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     118129,925 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,653 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 26734,371 ops/s
[info]                  ·gc.alloc.rate:               1714,819 MB/sec
[info]                  ·gc.alloc.rate.norm:          100912,016 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1348,678 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 79365,687 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 26741,426 ops/s
[info]                  ·gc.alloc.rate:                   1715,183 MB/sec
[info]                  ·gc.alloc.rate.norm:              100912,016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2025,991 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     119198,240 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,675 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson":
[info]   26834,379 ±(99.9%) 353,851 ops/s [Average]
[info]   (min, avg, max) = (26734,371, 26834,379, 26933,005), stdev = 91,894
[info]   CI (99.9%): [26480,529, 27188,230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1721,205 ±(99.9%) 22,731 MB/sec [Average]
[info]   (min, avg, max) = (1714,819, 1721,205, 1727,526), stdev = 5,903
[info]   CI (99.9%): [1698,474, 1743,936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   100912,016 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (100912,016, 100912,016, 100912,017), stdev = 0,001
[info]   CI (99.9%): [100912,014, 100912,018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1750,244 ±(99.9%) 1419,880 MB/sec [Average]
[info]   (min, avg, max) = (1344,021, 1750,244, 2025,991), stdev = 368,738
[info]   CI (99.9%): [330,364, 3170,124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   102615,655 ±(99.9%) 83261,159 B/op [Average]
[info]   (min, avg, max) = (78509,885, 102615,655, 119198,240), stdev = 21622,659
[info]   CI (99.9%): [19354,496, 185876,814] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,062 ±(99.9%) 0,204 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,062, 0,146), stdev = 0,053
[info]   CI (99.9%): [≈ 0, 0,267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   3,657 ±(99.9%) 11,939 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3,657, 8,515), stdev = 3,101
[info]   CI (99.9%): [≈ 0, 15,596] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 41,16% complete, ETA 01:17:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5377,808 ops/s
[info] # Warmup Iteration   2: 7926,332 ops/s
[info] # Warmup Iteration   3: 7982,187 ops/s
[info] # Warmup Iteration   4: 7950,936 ops/s
[info] # Warmup Iteration   5: 8041,149 ops/s
[info] Iteration   1: 8048,709 ops/s
[info]                  ·gc.alloc.rate:                   1273,258 MB/sec
[info]                  ·gc.alloc.rate.norm:              248880,054 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,947 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     262697,527 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12,210 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 7965,509 ops/s
[info]                  ·gc.alloc.rate:                   1260,123 MB/sec
[info]                  ·gc.alloc.rate.norm:              248880,058 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,605 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     265565,558 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,112 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 8041,922 ops/s
[info]                  ·gc.alloc.rate:                   1272,223 MB/sec
[info]                  ·gc.alloc.rate.norm:              248880,054 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,023 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     263317,195 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,074 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 8056,535 ops/s
[info]                  ·gc.alloc.rate:               1274,444 MB/sec
[info]                  ·gc.alloc.rate.norm:          248885,492 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,666 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 131559,982 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 8039,374 ops/s
[info]                  ·gc.alloc.rate:                   1271,717 MB/sec
[info]                  ·gc.alloc.rate.norm:              248880,054 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,321 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     263871,849 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,075 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce":
[info]   8030,410 ±(99.9%) 142,037 ops/s [Average]
[info]   (min, avg, max) = (7965,509, 8030,410, 8056,535), stdev = 36,887
[info]   CI (99.9%): [7888,373, 8172,447] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1270,353 ±(99.9%) 22,385 MB/sec [Average]
[info]   (min, avg, max) = (1260,123, 1270,353, 1274,444), stdev = 5,813
[info]   CI (99.9%): [1247,968, 1292,738] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   248881,142 ±(99.9%) 9,363 B/op [Average]
[info]   (min, avg, max) = (248880,054, 248881,142, 248885,492), stdev = 2,432
[info]   CI (99.9%): [248871,779, 248890,506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1211,312 ±(99.9%) 1157,342 MB/sec [Average]
[info]   (min, avg, max) = (673,666, 1211,312, 1348,321), stdev = 300,558
[info]   CI (99.9%): [53,971, 2368,654] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   237402,422 ±(99.9%) 227870,885 B/op [Average]
[info]   (min, avg, max) = (131559,982, 237402,422, 265565,558), stdev = 59177,345
[info]   CI (99.9%): [9531,538, 465273,307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,023
[info]   CI (99.9%): [≈ 0, 0,113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   4,894 ±(99.9%) 17,159 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4,894, 12,210), stdev = 4,456
[info]   CI (99.9%): [≈ 0, 22,054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 41,37% complete, ETA 01:17:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5162,796 ops/s
[info] # Warmup Iteration   2: 8171,966 ops/s
[info] # Warmup Iteration   3: 8317,035 ops/s
[info] # Warmup Iteration   4: 8348,853 ops/s
[info] # Warmup Iteration   5: 8346,661 ops/s
[info] Iteration   1: 8357,824 ops/s
[info]                  ·gc.alloc.rate:                   1221,009 MB/sec
[info]                  ·gc.alloc.rate.norm:              229848,052 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336,764 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     251638,169 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7,840 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 8347,346 ops/s
[info]                  ·gc.alloc.rate:                   1219,598 MB/sec
[info]                  ·gc.alloc.rate.norm:              229848,052 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337,324 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     252034,974 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15,697 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 8350,260 ops/s
[info]                  ·gc.alloc.rate:                   1220,020 MB/sec
[info]                  ·gc.alloc.rate.norm:              229856,175 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338,925 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     252258,287 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7,846 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 8353,292 ops/s
[info]                  ·gc.alloc.rate:               1220,656 MB/sec
[info]                  ·gc.alloc.rate.norm:          229880,366 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340,667 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 252481,440 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 8366,314 ops/s
[info]                  ·gc.alloc.rate:                   1222,425 MB/sec
[info]                  ·gc.alloc.rate.norm:              229880,052 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,685 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     252495,296 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19,579 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala":
[info]   8355,007 ±(99.9%) 28,554 ops/s [Average]
[info]   (min, avg, max) = (8347,346, 8355,007, 8366,314), stdev = 7,415
[info]   CI (99.9%): [8326,453, 8383,561] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1220,742 ±(99.9%) 4,192 MB/sec [Average]
[info]   (min, avg, max) = (1219,598, 1220,742, 1222,425), stdev = 1,089
[info]   CI (99.9%): [1216,550, 1224,934] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   229862,539 ±(99.9%) 63,411 B/op [Average]
[info]   (min, avg, max) = (229848,052, 229862,539, 229880,366), stdev = 16,468
[info]   CI (99.9%): [229799,128, 229925,951] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1339,273 ±(99.9%) 9,393 MB/sec [Average]
[info]   (min, avg, max) = (1336,764, 1339,273, 1342,685), stdev = 2,439
[info]   CI (99.9%): [1329,880, 1348,667] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   252181,633 ±(99.9%) 1376,311 B/op [Average]
[info]   (min, avg, max) = (251638,169, 252181,633, 252495,296), stdev = 357,424
[info]   CI (99.9%): [250805,322, 253557,944] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,054 ±(99.9%) 0,156 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,054, 0,104), stdev = 0,041
[info]   CI (99.9%): [≈ 0, 0,210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   10,193 ±(99.9%) 29,410 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10,193, 19,579), stdev = 7,638
[info]   CI (99.9%): [≈ 0, 39,603] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 41,57% complete, ETA 01:17:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 172124,277 ops/s
[info] # Warmup Iteration   2: 181423,418 ops/s
[info] # Warmup Iteration   3: 184524,050 ops/s
[info] # Warmup Iteration   4: 184399,333 ops/s
[info] # Warmup Iteration   5: 181771,446 ops/s
[info] Iteration   1: 182228,771 ops/s
[info]                  ·gc.alloc.rate:                   1766,051 MB/sec
[info]                  ·gc.alloc.rate.norm:              15248,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022,644 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17463,418 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,180 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 184514,912 ops/s
[info]                  ·gc.alloc.rate:                   1788,302 MB/sec
[info]                  ·gc.alloc.rate.norm:              15248,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350,053 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11511,262 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,355 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 184074,219 ops/s
[info]                  ·gc.alloc.rate:                   1784,074 MB/sec
[info]                  ·gc.alloc.rate.norm:              15248,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2027,452 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17328,093 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,534 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 184007,179 ops/s
[info]                  ·gc.alloc.rate:                   1783,413 MB/sec
[info]                  ·gc.alloc.rate.norm:              15248,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2030,694 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17362,228 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,534 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 184501,879 ops/s
[info]                  ·gc.alloc.rate:               1787,943 MB/sec
[info]                  ·gc.alloc.rate.norm:          15248,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1354,852 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11554,502 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala":
[info]   183865,392 ±(99.9%) 3637,398 ops/s [Average]
[info]   (min, avg, max) = (182228,771, 183865,392, 184514,912), stdev = 944,621
[info]   CI (99.9%): [180227,994, 187502,790] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1781,956 ±(99.9%) 35,276 MB/sec [Average]
[info]   (min, avg, max) = (1766,051, 1781,956, 1788,302), stdev = 9,161
[info]   CI (99.9%): [1746,681, 1817,232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   15248,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (15248,002, 15248,002, 15248,003), stdev = 0,001
[info]   CI (99.9%): [15248,002, 15248,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1757,139 ±(99.9%) 1422,588 MB/sec [Average]
[info]   (min, avg, max) = (1350,053, 1757,139, 2030,694), stdev = 369,442
[info]   CI (99.9%): [334,551, 3179,727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   15043,901 ±(99.9%) 12343,353 B/op [Average]
[info]   (min, avg, max) = (11511,262, 15043,901, 17463,418), stdev = 3205,529
[info]   CI (99.9%): [2700,548, 27387,253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,321 ±(99.9%) 0,893 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,321, 0,534), stdev = 0,232
[info]   CI (99.9%): [≈ 0, 1,213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 41,77% complete, ETA 01:17:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4462,872 ops/s
[info] # Warmup Iteration   2: 7737,188 ops/s
[info] # Warmup Iteration   3: 7791,942 ops/s
[info] # Warmup Iteration   4: 7867,469 ops/s
[info] # Warmup Iteration   5: 7871,816 ops/s
[info] Iteration   1: 7854,650 ops/s
[info]                  ·gc.alloc.rate:                   1434,059 MB/sec
[info]                  ·gc.alloc.rate.norm:              287232,055 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338,620 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     268116,226 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,171 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 7639,092 ops/s
[info]                  ·gc.alloc.rate:                   1394,731 MB/sec
[info]                  ·gc.alloc.rate.norm:              287232,057 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,045 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     275969,943 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17,154 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 7863,458 ops/s
[info]                  ·gc.alloc.rate:                   1435,661 MB/sec
[info]                  ·gc.alloc.rate.norm:              287232,059 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341,751 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     268443,455 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,166 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 7365,826 ops/s
[info]                  ·gc.alloc.rate:                   1344,804 MB/sec
[info]                  ·gc.alloc.rate.norm:              287233,972 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,606 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     286977,946 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,447 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 7874,254 ops/s
[info]                  ·gc.alloc.rate:                   1437,553 MB/sec
[info]                  ·gc.alloc.rate.norm:              287232,055 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,640 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     268867,348 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8,321 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson":
[info]   7719,456 ±(99.9%) 849,084 ops/s [Average]
[info]   (min, avg, max) = (7365,826, 7719,456, 7874,254), stdev = 220,504
[info]   CI (99.9%): [6870,372, 8568,540] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1409,362 ±(99.9%) 154,962 MB/sec [Average]
[info]   (min, avg, max) = (1344,804, 1409,362, 1437,553), stdev = 40,243
[info]   CI (99.9%): [1254,400, 1564,324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   287232,439 ±(99.9%) 3,298 B/op [Average]
[info]   (min, avg, max) = (287232,055, 287232,439, 287233,972), stdev = 0,857
[info]   CI (99.9%): [287229,141, 287235,738] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1341,932 ±(99.9%) 10,739 MB/sec [Average]
[info]   (min, avg, max) = (1338,620, 1341,932, 1345,640), stdev = 2,789
[info]   CI (99.9%): [1331,193, 1352,672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   273674,984 ±(99.9%) 31260,119 B/op [Average]
[info]   (min, avg, max) = (268116,226, 273674,984, 286977,946), stdev = 8118,154
[info]   CI (99.9%): [242414,864, 304935,103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,037, 0,083), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   7,652 ±(99.9%) 21,549 B/op [Average]
[info]   (min, avg, max) = (4,166, 7,652, 17,154), stdev = 5,596
[info]   CI (99.9%): [≈ 0, 29,201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 41,97% complete, ETA 01:16:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6190,785 ops/s
[info] # Warmup Iteration   2: 8432,013 ops/s
[info] # Warmup Iteration   3: 8495,693 ops/s
[info] # Warmup Iteration   4: 8509,409 ops/s
[info] # Warmup Iteration   5: 8474,851 ops/s
[info] Iteration   1: 8489,086 ops/s
[info]                  ·gc.alloc.rate:               1220,629 MB/sec
[info]                  ·gc.alloc.rate.norm:          226208,055 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,036 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 124727,566 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 8481,210 ops/s
[info]                  ·gc.alloc.rate:               1219,435 MB/sec
[info]                  ·gc.alloc.rate.norm:          226208,051 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1346,690 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 249813,992 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 8042,164 ops/s
[info]                  ·gc.alloc.rate:                   1156,419 MB/sec
[info]                  ·gc.alloc.rate.norm:              226219,048 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,728 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     263643,083 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12,221 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 8491,228 ops/s
[info]                  ·gc.alloc.rate:               1221,166 MB/sec
[info]                  ·gc.alloc.rate.norm:          226232,055 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1348,869 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 249890,242 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 8470,528 ops/s
[info]                  ·gc.alloc.rate:                   1218,003 MB/sec
[info]                  ·gc.alloc.rate.norm:              226232,055 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350,043 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     250757,197 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11,603 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readUPickle":
[info]   8394,843 ±(99.9%) 759,811 ops/s [Average]
[info]   (min, avg, max) = (8042,164, 8394,843, 8491,228), stdev = 197,321
[info]   CI (99.9%): [7635,031, 9154,654] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.alloc.rate":
[info]   1207,130 ±(99.9%) 109,261 MB/sec [Average]
[info]   (min, avg, max) = (1156,419, 1207,130, 1221,166), stdev = 28,375
[info]   CI (99.9%): [1097,869, 1316,392] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   226219,853 ±(99.9%) 46,244 B/op [Average]
[info]   (min, avg, max) = (226208,051, 226219,853, 226232,055), stdev = 12,009
[info]   CI (99.9%): [226173,609, 226266,096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1213,273 ±(99.9%) 1162,912 MB/sec [Average]
[info]   (min, avg, max) = (673,036, 1213,273, 1350,043), stdev = 302,005
[info]   CI (99.9%): [50,361, 2376,185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   227766,416 ±(99.9%) 222940,938 B/op [Average]
[info]   (min, avg, max) = (124727,566, 227766,416, 263643,083), stdev = 57897,054
[info]   CI (99.9%): [4825,478, 450707,354] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,034
[info]   CI (99.9%): [≈ 0, 0,157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   4,765 ±(99.9%) 25,138 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4,765, 12,221), stdev = 6,528
[info]   CI (99.9%): [≈ 0, 29,903] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 42,17% complete, ETA 01:16:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13638,655 ops/s
[info] # Warmup Iteration   2: 18497,292 ops/s
[info] # Warmup Iteration   3: 18644,675 ops/s
[info] # Warmup Iteration   4: 18672,716 ops/s
[info] # Warmup Iteration   5: 18581,036 ops/s
[info] Iteration   1: 18510,480 ops/s
[info]                  ·gc.alloc.rate:               1092,688 MB/sec
[info]                  ·gc.alloc.rate.norm:          92872,032 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670,325 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 56973,668 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 18436,778 ops/s
[info]                  ·gc.alloc.rate:                   1087,654 MB/sec
[info]                  ·gc.alloc.rate.norm:              92818,449 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,602 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     114404,583 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,554 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 18546,650 ops/s
[info]                  ·gc.alloc.rate:               1094,082 MB/sec
[info]                  ·gc.alloc.rate.norm:          92808,025 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342,012 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 113839,257 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 18455,703 ops/s
[info]                  ·gc.alloc.rate:               1088,744 MB/sec
[info]                  ·gc.alloc.rate.norm:          92808,023 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,690 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 57257,021 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 18573,524 ops/s
[info]                  ·gc.alloc.rate:                   1095,603 MB/sec
[info]                  ·gc.alloc.rate.norm:              92808,023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,256 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     113871,358 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,291 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce":
[info]   18504,627 ±(99.9%) 224,066 ops/s [Average]
[info]   (min, avg, max) = (18436,778, 18504,627, 18573,524), stdev = 58,189
[info]   CI (99.9%): [18280,561, 18728,693] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1091,754 ±(99.9%) 13,196 MB/sec [Average]
[info]   (min, avg, max) = (1087,654, 1091,754, 1095,603), stdev = 3,427
[info]   CI (99.9%): [1078,558, 1104,950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   92822,911 ±(99.9%) 107,157 B/op [Average]
[info]   (min, avg, max) = (92808,023, 92822,911, 92872,032), stdev = 27,828
[info]   CI (99.9%): [92715,754, 92930,067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1073,777 ±(99.9%) 1415,802 MB/sec [Average]
[info]   (min, avg, max) = (670,325, 1073,777, 1344,256), stdev = 367,679
[info]   CI (99.9%): [≈ 0, 2489,579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   91269,177 ±(99.9%) 120059,268 B/op [Average]
[info]   (min, avg, max) = (56973,668, 91269,177, 114404,583), stdev = 31179,011
[info]   CI (99.9%): [≈ 0, 211328,445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,021 ±(99.9%) 0,113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,062), stdev = 0,029
[info]   CI (99.9%): [≈ 0, 0,134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1,769 ±(99.9%) 9,623 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,769, 5,291), stdev = 2,499
[info]   CI (99.9%): [≈ 0, 11,392] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 42,37% complete, ETA 01:16:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14880,005 ops/s
[info] # Warmup Iteration   2: 20687,575 ops/s
[info] # Warmup Iteration   3: 20450,758 ops/s
[info] # Warmup Iteration   4: 20669,197 ops/s
[info] # Warmup Iteration   5: 20497,935 ops/s
[info] Iteration   1: 20462,257 ops/s
[info]                  ·gc.alloc.rate:               959,953 MB/sec
[info]                  ·gc.alloc.rate.norm:          73808,029 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668,366 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 51388,729 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 20549,801 ops/s
[info]                  ·gc.alloc.rate:                   964,059 MB/sec
[info]                  ·gc.alloc.rate.norm:              73808,021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336,637 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     102332,447 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7,971 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 20642,600 ops/s
[info]                  ·gc.alloc.rate:               968,375 MB/sec
[info]                  ·gc.alloc.rate.norm:          73808,022 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668,319 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 50938,235 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 20592,555 ops/s
[info]                  ·gc.alloc.rate:                   966,056 MB/sec
[info]                  ·gc.alloc.rate.norm:              73808,021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338,073 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     102230,560 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,182 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 20430,635 ops/s
[info]                  ·gc.alloc.rate:               958,488 MB/sec
[info]                  ·gc.alloc.rate.norm:          73808,021 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670,057 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 51597,493 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala":
[info]   20535,569 ±(99.9%) 340,576 ops/s [Average]
[info]   (min, avg, max) = (20430,635, 20535,569, 20642,600), stdev = 88,447
[info]   CI (99.9%): [20194,993, 20876,146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   963,386 ±(99.9%) 15,907 MB/sec [Average]
[info]   (min, avg, max) = (958,488, 963,386, 968,375), stdev = 4,131
[info]   CI (99.9%): [947,479, 979,293] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   73808,023 ±(99.9%) 0,013 B/op [Average]
[info]   (min, avg, max) = (73808,021, 73808,023, 73808,029), stdev = 0,003
[info]   CI (99.9%): [73808,010, 73808,036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   936,290 ±(99.9%) 1409,803 MB/sec [Average]
[info]   (min, avg, max) = (668,319, 936,290, 1338,073), stdev = 366,121
[info]   CI (99.9%): [≈ 0, 2346,093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   71697,493 ±(99.9%) 107511,111 B/op [Average]
[info]   (min, avg, max) = (50938,235, 71697,493, 102332,447), stdev = 27920,294
[info]   CI (99.9%): [≈ 0, 179208,604] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,176 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,104), stdev = 0,046
[info]   CI (99.9%): [≈ 0, 0,205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2,231 ±(99.9%) 13,447 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,231, 7,971), stdev = 3,492
[info]   CI (99.9%): [≈ 0, 15,678] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 42,57% complete, ETA 01:16:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 500264,703 ops/s
[info] # Warmup Iteration   2: 538221,380 ops/s
[info] # Warmup Iteration   3: 538680,029 ops/s
[info] # Warmup Iteration   4: 536050,032 ops/s
[info] # Warmup Iteration   5: 532250,185 ops/s
[info] Iteration   1: 535998,818 ops/s
[info]                  ·gc.alloc.rate:                   1215,590 MB/sec
[info]                  ·gc.alloc.rate.norm:              3568,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,719 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3952,890 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,061 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 536869,360 ops/s
[info]                  ·gc.alloc.rate:                   1217,531 MB/sec
[info]                  ·gc.alloc.rate.norm:              3568,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,345 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3948,424 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,244 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 529102,514 ops/s
[info]                  ·gc.alloc.rate:               1199,946 MB/sec
[info]                  ·gc.alloc.rate.norm:          3568,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,014 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2004,158 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 531404,326 ops/s
[info]                  ·gc.alloc.rate:               1205,177 MB/sec
[info]                  ·gc.alloc.rate.norm:          3568,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1348,777 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3993,140 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   5: 526456,107 ops/s
[info]                  ·gc.alloc.rate:                   1193,910 MB/sec
[info]                  ·gc.alloc.rate.norm:              3568,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350,073 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4034,693 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,249 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala":
[info]   531966,225 ±(99.9%) 17132,175 ops/s [Average]
[info]   (min, avg, max) = (526456,107, 531966,225, 536869,360), stdev = 4449,171
[info]   CI (99.9%): [514834,050, 549098,400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1206,431 ±(99.9%) 38,866 MB/sec [Average]
[info]   (min, avg, max) = (1193,910, 1206,431, 1217,531), stdev = 10,093
[info]   CI (99.9%): [1167,565, 1245,297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3568,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (3568,001, 3568,001, 3568,001), stdev = 0,001
[info]   CI (99.9%): [3568,001, 3568,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1213,386 ±(99.9%) 1161,049 MB/sec [Average]
[info]   (min, avg, max) = (674,014, 1213,386, 1350,073), stdev = 301,521
[info]   CI (99.9%): [52,336, 2374,435] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3586,661 ±(99.9%) 3409,108 B/op [Average]
[info]   (min, avg, max) = (2004,158, 3586,661, 4034,693), stdev = 885,334
[info]   CI (99.9%): [177,553, 6995,769] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,164 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,083), stdev = 0,043
[info]   CI (99.9%): [≈ 0, 0,202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,111 ±(99.9%) 0,487 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,111, 0,249), stdev = 0,126
[info]   CI (99.9%): [≈ 0, 0,597] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 42,77% complete, ETA 01:15:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 576159,223 ops/s
[info] # Warmup Iteration   2: 640544,750 ops/s
[info] # Warmup Iteration   3: 648530,226 ops/s
[info] # Warmup Iteration   4: 645145,858 ops/s
[info] # Warmup Iteration   5: 644069,839 ops/s
[info] Iteration   1: 647244,594 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 648979,197 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 644788,805 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 648884,709 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 648111,230 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   647601,707 ±(99.9%) 6625,775 ops/s [Average]
[info]   (min, avg, max) = (644788,805, 647601,707, 648979,197), stdev = 1720,693
[info]   CI (99.9%): [640975,932, 654227,481] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (0,001, 0,001, 0,001), stdev = 0,001
[info]   CI (99.9%): [0,001, 0,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 42,97% complete, ETA 01:15:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15815,955 ops/s
[info] # Warmup Iteration   2: 19254,704 ops/s
[info] # Warmup Iteration   3: 19094,779 ops/s
[info] # Warmup Iteration   4: 19790,769 ops/s
[info] # Warmup Iteration   5: 19761,113 ops/s
[info] Iteration   1: 19561,956 ops/s
[info]                  ·gc.alloc.rate:                   990,841 MB/sec
[info]                  ·gc.alloc.rate.norm:              79685,796 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339,352 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     107713,894 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,024 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 19774,887 ops/s
[info]                  ·gc.alloc.rate:               1001,444 MB/sec
[info]                  ·gc.alloc.rate.norm:          79672,022 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669,670 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 53276,991 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 19845,661 ops/s
[info]                  ·gc.alloc.rate:                   1005,031 MB/sec
[info]                  ·gc.alloc.rate.norm:              79672,022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339,996 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     106225,698 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6,603 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 19914,922 ops/s
[info]                  ·gc.alloc.rate:               1008,482 MB/sec
[info]                  ·gc.alloc.rate.norm:          79672,022 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670,336 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 52957,852 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 19877,325 ops/s
[info]                  ·gc.alloc.rate:                   1006,574 MB/sec
[info]                  ·gc.alloc.rate.norm:              79672,022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341,959 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     106218,291 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,296 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson":
[info]   19794,950 ±(99.9%) 539,226 ops/s [Average]
[info]   (min, avg, max) = (19561,956, 19794,950, 19914,922), stdev = 140,035
[info]   CI (99.9%): [19255,725, 20334,176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1002,474 ±(99.9%) 26,943 MB/sec [Average]
[info]   (min, avg, max) = (990,841, 1002,474, 1008,482), stdev = 6,997
[info]   CI (99.9%): [975,531, 1029,418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   79674,777 ±(99.9%) 23,721 B/op [Average]
[info]   (min, avg, max) = (79672,022, 79674,777, 79685,796), stdev = 6,160
[info]   CI (99.9%): [79651,056, 79698,497] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1072,262 ±(99.9%) 1414,004 MB/sec [Average]
[info]   (min, avg, max) = (669,670, 1072,262, 1341,959), stdev = 367,212
[info]   CI (99.9%): [≈ 0, 2486,267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   85278,545 ±(99.9%) 113076,041 B/op [Average]
[info]   (min, avg, max) = (52957,852, 85278,545, 107713,894), stdev = 29365,489
[info]   CI (99.9%): [≈ 0, 198354,586] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,083), stdev = 0,037
[info]   CI (99.9%): [≈ 0, 0,181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2,985 ±(99.9%) 11,417 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,985, 6,603), stdev = 2,965
[info]   CI (99.9%): [≈ 0, 14,401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 43,17% complete, ETA 01:15:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10568,597 ops/s
[info] # Warmup Iteration   2: 11347,515 ops/s
[info] # Warmup Iteration   3: 11292,394 ops/s
[info] # Warmup Iteration   4: 11374,990 ops/s
[info] # Warmup Iteration   5: 11423,597 ops/s
[info] Iteration   1: 11457,388 ops/s
[info]                  ·gc.alloc.rate:               955,192 MB/sec
[info]                  ·gc.alloc.rate.norm:          131164,683 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,993 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 92413,766 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 11472,381 ops/s
[info]                  ·gc.alloc.rate:                   956,517 MB/sec
[info]                  ·gc.alloc.rate.norm:              131176,038 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,307 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     184631,617 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8,567 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 11459,928 ops/s
[info]                  ·gc.alloc.rate:               955,439 MB/sec
[info]                  ·gc.alloc.rate.norm:          131176,040 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,325 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 92443,382 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 11412,261 ops/s
[info]                  ·gc.alloc.rate:                   951,510 MB/sec
[info]                  ·gc.alloc.rate.norm:              131176,052 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,298 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     185739,875 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,871 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 11399,826 ops/s
[info]                  ·gc.alloc.rate:               950,459 MB/sec
[info]                  ·gc.alloc.rate.norm:          131173,885 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,958 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 93013,648 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeUPickle":
[info]   11440,357 ±(99.9%) 123,743 ops/s [Average]
[info]   (min, avg, max) = (11399,826, 11440,357, 11472,381), stdev = 32,136
[info]   CI (99.9%): [11316,614, 11564,100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.alloc.rate":
[info]   953,823 ±(99.9%) 10,262 MB/sec [Average]
[info]   (min, avg, max) = (950,459, 953,823, 956,517), stdev = 2,665
[info]   CI (99.9%): [943,561, 964,085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   131173,339 ±(99.9%) 18,979 B/op [Average]
[info]   (min, avg, max) = (131164,683, 131173,339, 131176,052), stdev = 4,929
[info]   CI (99.9%): [131154,361, 131192,318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   942,776 ±(99.9%) 1420,212 MB/sec [Average]
[info]   (min, avg, max) = (672,993, 942,776, 1347,298), stdev = 368,824
[info]   CI (99.9%): [≈ 0, 2362,988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   129648,458 ±(99.9%) 195229,395 B/op [Average]
[info]   (min, avg, max) = (92413,766, 129648,458, 185739,875), stdev = 50700,454
[info]   CI (99.9%): [≈ 0, 324877,853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,017 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   2,287 ±(99.9%) 14,339 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,287, 8,567), stdev = 3,724
[info]   CI (99.9%): [≈ 0, 16,627] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 43,37% complete, ETA 01:15:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10408,873 ops/s
[info] # Warmup Iteration   2: 13506,701 ops/s
[info] # Warmup Iteration   3: 13493,759 ops/s
[info] # Warmup Iteration   4: 13531,934 ops/s
[info] # Warmup Iteration   5: 13523,389 ops/s
[info] Iteration   1: 13586,701 ops/s
[info]                  ·gc.alloc.rate:               1401,286 MB/sec
[info]                  ·gc.alloc.rate.norm:          162264,032 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344,739 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 155716,121 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 13460,747 ops/s
[info]                  ·gc.alloc.rate:                   1388,307 MB/sec
[info]                  ·gc.alloc.rate.norm:              162264,032 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,319 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     157239,672 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7,301 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 13569,172 ops/s
[info]                  ·gc.alloc.rate:               1399,455 MB/sec
[info]                  ·gc.alloc.rate.norm:          162264,044 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1346,664 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 156142,948 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 13573,747 ops/s
[info]                  ·gc.alloc.rate:                   1400,053 MB/sec
[info]                  ·gc.alloc.rate.norm:              162264,032 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,508 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     156290,037 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,414 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 12697,147 ops/s
[info]                  ·gc.alloc.rate:               1309,705 MB/sec
[info]                  ·gc.alloc.rate.norm:          162264,037 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1350,271 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 167289,942 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce":
[info]   13377,503 ±(99.9%) 1477,396 ops/s [Average]
[info]   (min, avg, max) = (12697,147, 13377,503, 13586,701), stdev = 383,675
[info]   CI (99.9%): [11900,107, 14854,899] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1379,761 ±(99.9%) 152,135 MB/sec [Average]
[info]   (min, avg, max) = (1309,705, 1379,761, 1401,286), stdev = 39,509
[info]   CI (99.9%): [1227,627, 1531,896] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   162264,035 ±(99.9%) 0,020 B/op [Average]
[info]   (min, avg, max) = (162264,032, 162264,035, 162264,044), stdev = 0,005
[info]   CI (99.9%): [162264,015, 162264,055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1347,100 ±(99.9%) 8,818 MB/sec [Average]
[info]   (min, avg, max) = (1344,739, 1347,100, 1350,271), stdev = 2,290
[info]   CI (99.9%): [1338,283, 1355,918] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   158535,744 ±(99.9%) 18965,617 B/op [Average]
[info]   (min, avg, max) = (155716,121, 158535,744, 167289,942), stdev = 4925,311
[info]   CI (99.9%): [139570,127, 177501,361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,017 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1,943 ±(99.9%) 12,216 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,943, 7,301), stdev = 3,172
[info]   CI (99.9%): [≈ 0, 14,159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 43,57% complete, ETA 01:14:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9484,524 ops/s
[info] # Warmup Iteration   2: 13665,682 ops/s
[info] # Warmup Iteration   3: 13864,135 ops/s
[info] # Warmup Iteration   4: 13830,551 ops/s
[info] # Warmup Iteration   5: 13737,957 ops/s
[info] Iteration   1: 14104,597 ops/s
[info]                  ·gc.alloc.rate:                   1309,690 MB/sec
[info]                  ·gc.alloc.rate.norm:              146080,031 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336,728 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     149095,794 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9,291 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 14122,807 ops/s
[info]                  ·gc.alloc.rate:                   1311,316 MB/sec
[info]                  ·gc.alloc.rate.norm:              146080,031 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337,349 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     148980,039 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9,279 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 14104,805 ops/s
[info]                  ·gc.alloc.rate:               1309,675 MB/sec
[info]                  ·gc.alloc.rate.norm:          146080,044 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339,378 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 149393,093 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   4: 13783,334 ops/s
[info]                  ·gc.alloc.rate:               1279,568 MB/sec
[info]                  ·gc.alloc.rate.norm:          146057,452 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341,359 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 153110,655 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 14149,109 ops/s
[info]                  ·gc.alloc.rate:                   1313,516 MB/sec
[info]                  ·gc.alloc.rate.norm:              146048,031 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,088 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     149447,272 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9,262 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala":
[info]   14052,930 ±(99.9%) 584,536 ops/s [Average]
[info]   (min, avg, max) = (13783,334, 14052,930, 14149,109), stdev = 151,802
[info]   CI (99.9%): [13468,394, 14637,467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1304,753 ±(99.9%) 54,550 MB/sec [Average]
[info]   (min, avg, max) = (1279,568, 1304,753, 1313,516), stdev = 14,166
[info]   CI (99.9%): [1250,203, 1359,303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   146069,118 ±(99.9%) 58,976 B/op [Average]
[info]   (min, avg, max) = (146048,031, 146069,118, 146080,044), stdev = 15,316
[info]   CI (99.9%): [146010,141, 146128,094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1339,780 ±(99.9%) 11,623 MB/sec [Average]
[info]   (min, avg, max) = (1336,728, 1339,780, 1344,088), stdev = 3,018
[info]   CI (99.9%): [1328,157, 1351,403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   150005,371 ±(99.9%) 6727,005 B/op [Average]
[info]   (min, avg, max) = (148980,039, 150005,371, 153110,655), stdev = 1746,982
[info]   CI (99.9%): [143278,365, 156732,376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,050 ±(99.9%) 0,176 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,050, 0,083), stdev = 0,046
[info]   CI (99.9%): [≈ 0, 0,226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   5,566 ±(99.9%) 19,566 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5,566, 9,291), stdev = 5,081
[info]   CI (99.9%): [≈ 0, 25,132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 43,78% complete, ETA 01:14:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 291043,923 ops/s
[info] # Warmup Iteration   2: 304733,530 ops/s
[info] # Warmup Iteration   3: 307333,841 ops/s
[info] # Warmup Iteration   4: 308241,878 ops/s
[info] # Warmup Iteration   5: 306563,848 ops/s
[info] Iteration   1: 304173,234 ops/s
[info]                  ·gc.alloc.rate:                   1760,182 MB/sec
[info]                  ·gc.alloc.rate.norm:              9104,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022,835 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10462,495 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,108 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 307075,548 ops/s
[info]                  ·gc.alloc.rate:                   1776,884 MB/sec
[info]                  ·gc.alloc.rate.norm:              9104,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350,067 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6917,170 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,427 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 304001,608 ops/s
[info]                  ·gc.alloc.rate:                   1759,135 MB/sec
[info]                  ·gc.alloc.rate.norm:              9104,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2027,521 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10492,968 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,216 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 307108,973 ops/s
[info]                  ·gc.alloc.rate:                   1777,111 MB/sec
[info]                  ·gc.alloc.rate.norm:              9104,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2030,679 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10403,014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,320 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 306821,714 ops/s
[info]                  ·gc.alloc.rate:               1775,501 MB/sec
[info]                  ·gc.alloc.rate.norm:          9104,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1355,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6948,387 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala":
[info]   305836,215 ±(99.9%) 6166,550 ops/s [Average]
[info]   (min, avg, max) = (304001,608, 305836,215, 307108,973), stdev = 1601,434
[info]   CI (99.9%): [299669,665, 312002,766] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1769,763 ±(99.9%) 35,624 MB/sec [Average]
[info]   (min, avg, max) = (1759,135, 1769,763, 1777,111), stdev = 9,252
[info]   CI (99.9%): [1734,138, 1805,387] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   9104,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (9104,001, 9104,001, 9104,002), stdev = 0,001
[info]   CI (99.9%): [9104,001, 9104,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1757,241 ±(99.9%) 1422,480 MB/sec [Average]
[info]   (min, avg, max) = (1350,067, 1757,241, 2030,679), stdev = 369,413
[info]   CI (99.9%): [334,761, 3179,721] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   9044,807 ±(99.9%) 7425,244 B/op [Average]
[info]   (min, avg, max) = (6917,170, 9044,807, 10492,968), stdev = 1928,312
[info]   CI (99.9%): [1619,563, 16470,050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,127 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,042, 0,083), stdev = 0,033
[info]   CI (99.9%): [≈ 0, 0,168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,214 ±(99.9%) 0,649 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,214, 0,427), stdev = 0,169
[info]   CI (99.9%): [≈ 0, 0,863] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 43,98% complete, ETA 01:14:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6379,641 ops/s
[info] # Warmup Iteration   2: 11883,561 ops/s
[info] # Warmup Iteration   3: 11945,997 ops/s
[info] # Warmup Iteration   4: 12093,576 ops/s
[info] # Warmup Iteration   5: 12069,625 ops/s
[info] Iteration   1: 11960,102 ops/s
[info]                  ·gc.alloc.rate:                   1535,918 MB/sec
[info]                  ·gc.alloc.rate.norm:              202040,065 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335,328 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     175653,791 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,739 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 12122,020 ops/s
[info]                  ·gc.alloc.rate:                   1556,691 MB/sec
[info]                  ·gc.alloc.rate.norm:              202040,036 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337,305 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     173566,353 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8,108 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 12070,449 ops/s
[info]                  ·gc.alloc.rate:                   1550,034 MB/sec
[info]                  ·gc.alloc.rate.norm:              202040,036 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339,987 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     174661,338 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10,857 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 12072,171 ops/s
[info]                  ·gc.alloc.rate:                   1550,286 MB/sec
[info]                  ·gc.alloc.rate.norm:              202040,052 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013,306 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     262382,806 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,427 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 11935,892 ops/s
[info]                  ·gc.alloc.rate:                   1532,825 MB/sec
[info]                  ·gc.alloc.rate.norm:              202040,036 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,314 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     177324,311 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,489 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson":
[info]   12032,127 ±(99.9%) 308,062 ops/s [Average]
[info]   (min, avg, max) = (11935,892, 12032,127, 12122,020), stdev = 80,003
[info]   CI (99.9%): [11724,065, 12340,189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1545,151 ±(99.9%) 39,483 MB/sec [Average]
[info]   (min, avg, max) = (1532,825, 1545,151, 1556,691), stdev = 10,254
[info]   CI (99.9%): [1505,667, 1584,634] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   202040,045 ±(99.9%) 0,051 B/op [Average]
[info]   (min, avg, max) = (202040,036, 202040,045, 202040,065), stdev = 0,013
[info]   CI (99.9%): [202039,994, 202040,095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1474,248 ±(99.9%) 1160,453 MB/sec [Average]
[info]   (min, avg, max) = (1335,328, 1474,248, 2013,306), stdev = 301,366
[info]   CI (99.9%): [313,795, 2634,700] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   192717,720 ±(99.9%) 150053,704 B/op [Average]
[info]   (min, avg, max) = (173566,353, 192717,720, 262382,806), stdev = 38968,470
[info]   CI (99.9%): [42664,016, 342771,424] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,050 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,050, 0,083), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   6,524 ±(99.9%) 11,849 B/op [Average]
[info]   (min, avg, max) = (2,739, 6,524, 10,857), stdev = 3,077
[info]   CI (99.9%): [≈ 0, 18,373] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 3,000), stdev = 0,894
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 44,18% complete, ETA 01:13:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10372,309 ops/s
[info] # Warmup Iteration   2: 12591,666 ops/s
[info] # Warmup Iteration   3: 12664,590 ops/s
[info] # Warmup Iteration   4: 12595,618 ops/s
[info] # Warmup Iteration   5: 12589,903 ops/s
[info] Iteration   1: 12596,415 ops/s
[info]                  ·gc.alloc.rate:               1287,192 MB/sec
[info]                  ·gc.alloc.rate.norm:          160766,863 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1346,053 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 168118,384 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 12600,237 ops/s
[info]                  ·gc.alloc.rate:                   1287,624 MB/sec
[info]                  ·gc.alloc.rate.norm:              160768,034 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,627 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     168134,885 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10,399 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 12613,172 ops/s
[info]                  ·gc.alloc.rate:                   1288,920 MB/sec
[info]                  ·gc.alloc.rate.norm:              160768,037 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,033 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     168141,190 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,597 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 12448,747 ops/s
[info]                  ·gc.alloc.rate:                   1272,093 MB/sec
[info]                  ·gc.alloc.rate.norm:              160765,106 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,756 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     170453,604 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,632 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 12539,513 ops/s
[info]                  ·gc.alloc.rate:                   1281,231 MB/sec
[info]                  ·gc.alloc.rate.norm:              160744,034 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350,098 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     169384,068 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,225 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readUPickle":
[info]   12559,617 ±(99.9%) 262,357 ops/s [Average]
[info]   (min, avg, max) = (12448,747, 12559,617, 12613,172), stdev = 68,133
[info]   CI (99.9%): [12297,260, 12821,973] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readUPickle:·gc.alloc.rate":
[info]   1283,412 ±(99.9%) 26,903 MB/sec [Average]
[info]   (min, avg, max) = (1272,093, 1283,412, 1288,920), stdev = 6,987
[info]   CI (99.9%): [1256,510, 1310,315] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   160762,415 ±(99.9%) 39,834 B/op [Average]
[info]   (min, avg, max) = (160744,034, 160762,415, 160768,037), stdev = 10,345
[info]   CI (99.9%): [160722,581, 160802,249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1347,913 ±(99.9%) 6,272 MB/sec [Average]
[info]   (min, avg, max) = (1346,053, 1347,913, 1350,098), stdev = 1,629
[info]   CI (99.9%): [1341,641, 1354,185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   168846,426 ±(99.9%) 4041,238 B/op [Average]
[info]   (min, avg, max) = (168118,384, 168846,426, 170453,604), stdev = 1049,497
[info]   CI (99.9%): [164805,188, 172887,664] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,083), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   4,171 ±(99.9%) 15,178 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4,171, 10,399), stdev = 3,942
[info]   CI (99.9%): [≈ 0, 19,349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readUPickle:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readUPickle:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 44,38% complete, ETA 01:13:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22594,704 ops/s
[info] # Warmup Iteration   2: 29607,871 ops/s
[info] # Warmup Iteration   3: 29488,208 ops/s
[info] # Warmup Iteration   4: 29532,629 ops/s
[info] # Warmup Iteration   5: 29582,887 ops/s
[info] Iteration   1: 29598,634 ops/s
[info]                  ·gc.alloc.rate:                   1299,148 MB/sec
[info]                  ·gc.alloc.rate.norm:              69056,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,618 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71260,383 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,320 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 29525,370 ops/s
[info]                  ·gc.alloc.rate:                   1295,941 MB/sec
[info]                  ·gc.alloc.rate.norm:              69056,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341,993 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71509,957 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,219 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 29682,002 ops/s
[info]                  ·gc.alloc.rate:                   1302,825 MB/sec
[info]                  ·gc.alloc.rate.norm:              69056,016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,320 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71202,439 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,311 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 29581,150 ops/s
[info]                  ·gc.alloc.rate:                   1298,360 MB/sec
[info]                  ·gc.alloc.rate.norm:              69056,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,376 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71556,647 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,215 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 29542,544 ops/s
[info]                  ·gc.alloc.rate:               1296,680 MB/sec
[info]                  ·gc.alloc.rate.norm:          69056,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1346,695 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 71719,646 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce":
[info]   29585,940 ±(99.9%) 235,520 ops/s [Average]
[info]   (min, avg, max) = (29525,370, 29585,940, 29682,002), stdev = 61,164
[info]   CI (99.9%): [29350,420, 29821,460] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1298,591 ±(99.9%) 10,363 MB/sec [Average]
[info]   (min, avg, max) = (1295,941, 1298,591, 1302,825), stdev = 2,691
[info]   CI (99.9%): [1288,228, 1308,953] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   69056,015 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (69056,015, 69056,015, 69056,016), stdev = 0,001
[info]   CI (99.9%): [69056,013, 69056,017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1343,600 ±(99.9%) 9,489 MB/sec [Average]
[info]   (min, avg, max) = (1340,618, 1343,600, 1346,695), stdev = 2,464
[info]   CI (99.9%): [1334,112, 1353,089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   71449,814 ±(99.9%) 827,929 B/op [Average]
[info]   (min, avg, max) = (71202,439, 71449,814, 71719,646), stdev = 215,010
[info]   CI (99.9%): [70621,886, 72277,743] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,098 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,042, 0,062), stdev = 0,026
[info]   CI (99.9%): [≈ 0, 0,140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2,213 ±(99.9%) 5,212 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,213, 3,320), stdev = 1,354
[info]   CI (99.9%): [≈ 0, 7,426] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 44,58% complete, ETA 01:13:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 64933,575 ops/s
[info] # Warmup Iteration   2: 88772,981 ops/s
[info] # Warmup Iteration   3: 88958,704 ops/s
[info] # Warmup Iteration   4: 89224,112 ops/s
[info] # Warmup Iteration   5: 89444,882 ops/s
[info] Iteration   1: 89196,188 ops/s
[info]                  ·gc.alloc.rate:               1823,615 MB/sec
[info]                  ·gc.alloc.rate.norm:          32168,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2010,634 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 35466,956 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 89631,218 ops/s
[info]                  ·gc.alloc.rate:                   1832,635 MB/sec
[info]                  ·gc.alloc.rate.norm:              32168,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,677 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23567,842 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,462 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 89817,316 ops/s
[info]                  ·gc.alloc.rate:                   1836,371 MB/sec
[info]                  ·gc.alloc.rate.norm:              32168,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018,032 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35350,177 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,094 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 89688,224 ops/s
[info]                  ·gc.alloc.rate:                   1833,697 MB/sec
[info]                  ·gc.alloc.rate.norm:              32168,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022,988 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35488,682 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,731 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 89323,748 ops/s
[info]                  ·gc.alloc.rate:                   1826,432 MB/sec
[info]                  ·gc.alloc.rate.norm:              32168,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2027,181 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35703,696 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,734 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala":
[info]   89531,339 ±(99.9%) 1003,741 ops/s [Average]
[info]   (min, avg, max) = (89196,188, 89531,339, 89817,316), stdev = 260,668
[info]   CI (99.9%): [88527,598, 90535,080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1830,550 ±(99.9%) 20,484 MB/sec [Average]
[info]   (min, avg, max) = (1823,615, 1830,550, 1836,371), stdev = 5,320
[info]   CI (99.9%): [1810,067, 1851,034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   32168,005 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (32168,005, 32168,005, 32168,005), stdev = 0,001
[info]   CI (99.9%): [32168,004, 32168,006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1884,302 ±(99.9%) 1166,130 MB/sec [Average]
[info]   (min, avg, max) = (1342,677, 1884,302, 2027,181), stdev = 302,840
[info]   CI (99.9%): [718,173, 3050,432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   33115,471 ±(99.9%) 20557,863 B/op [Average]
[info]   (min, avg, max) = (23567,842, 33115,471, 35703,696), stdev = 5338,812
[info]   CI (99.9%): [12557,608, 53673,333] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,046 ±(99.9%) 0,119 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,046, 0,083), stdev = 0,031
[info]   CI (99.9%): [≈ 0, 0,165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,804 ±(99.9%) 2,086 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,804, 1,462), stdev = 0,542
[info]   CI (99.9%): [≈ 0, 2,890] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.time":
[info]   10,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 44,78% complete, ETA 01:13:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 663833,821 ops/s
[info] # Warmup Iteration   2: 770647,318 ops/s
[info] # Warmup Iteration   3: 759411,201 ops/s
[info] # Warmup Iteration   4: 767717,872 ops/s
[info] # Warmup Iteration   5: 769285,293 ops/s
[info] Iteration   1: 769873,226 ops/s
[info]                  ·gc.alloc.rate:                   1056,956 MB/sec
[info]                  ·gc.alloc.rate.norm:              2160,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,033 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1375,414 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,043 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 771311,857 ops/s
[info]                  ·gc.alloc.rate:                   1058,924 MB/sec
[info]                  ·gc.alloc.rate.norm:              2160,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,078 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2745,739 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,170 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 771126,133 ops/s
[info]                  ·gc.alloc.rate:               1058,645 MB/sec
[info]                  ·gc.alloc.rate.norm:          2160,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,672 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1374,523 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 766429,513 ops/s
[info]                  ·gc.alloc.rate:                   1052,214 MB/sec
[info]                  ·gc.alloc.rate.norm:              2160,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,696 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2766,570 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,085 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 768120,324 ops/s
[info]                  ·gc.alloc.rate:               1054,526 MB/sec
[info]                  ·gc.alloc.rate.norm:          2160,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1348,698 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2762,557 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala":
[info]   769372,211 ±(99.9%) 8011,787 ops/s [Average]
[info]   (min, avg, max) = (766429,513, 769372,211, 771311,857), stdev = 2080,636
[info]   CI (99.9%): [761360,424, 777383,998] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1056,253 ±(99.9%) 11,000 MB/sec [Average]
[info]   (min, avg, max) = (1052,214, 1056,253, 1058,924), stdev = 2,857
[info]   CI (99.9%): [1045,253, 1067,253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2160,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (2160,001, 2160,001, 2160,001), stdev = 0,001
[info]   CI (99.9%): [2160,001, 2160,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1077,835 ±(99.9%) 1421,820 MB/sec [Average]
[info]   (min, avg, max) = (673,033, 1077,835, 1348,698), stdev = 369,242
[info]   CI (99.9%): [≈ 0, 2499,655] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2204,961 ±(99.9%) 2917,695 B/op [Average]
[info]   (min, avg, max) = (1374,523, 2204,961, 2766,570), stdev = 757,716
[info]   CI (99.9%): [≈ 0, 5122,656] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,134 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,083), stdev = 0,035
[info]   CI (99.9%): [≈ 0, 0,163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,060 ±(99.9%) 0,274 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,060, 0,170), stdev = 0,071
[info]   CI (99.9%): [≈ 0, 0,333] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 44,98% complete, ETA 01:12:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 815019,464 ops/s
[info] # Warmup Iteration   2: 850470,884 ops/s
[info] # Warmup Iteration   3: 843567,557 ops/s
[info] # Warmup Iteration   4: 844631,754 ops/s
[info] # Warmup Iteration   5: 844809,184 ops/s
[info] Iteration   1: 591475,372 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 847378,218 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 843427,196 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 837328,982 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 844036,664 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   792729,286 ±(99.9%) 433439,117 ops/s [Average]
[info]   (min, avg, max) = (591475,372, 792729,286, 847378,218), stdev = 112562,762
[info]   CI (99.9%): [359290,170, 1226168,403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (0,001, 0,001, 0,001), stdev = 0,001
[info]   CI (99.9%): [≈ 10⁻⁴, 0,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 45,18% complete, ETA 01:12:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 54657,585 ops/s
[info] # Warmup Iteration   2: 81933,138 ops/s
[info] # Warmup Iteration   3: 78974,400 ops/s
[info] # Warmup Iteration   4: 81957,872 ops/s
[info] # Warmup Iteration   5: 82410,900 ops/s
[info] Iteration   1: 82512,006 ops/s
[info]                  ·gc.alloc.rate:                   1992,105 MB/sec
[info]                  ·gc.alloc.rate.norm:              37984,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009,129 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     38308,614 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,794 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 82438,691 ops/s
[info]                  ·gc.alloc.rate:                   1990,264 MB/sec
[info]                  ·gc.alloc.rate.norm:              37984,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015,356 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     38462,878 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,987 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 82701,231 ops/s
[info]                  ·gc.alloc.rate:                   1996,648 MB/sec
[info]                  ·gc.alloc.rate.norm:              37984,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019,316 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     38415,251 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,792 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 82710,115 ops/s
[info]                  ·gc.alloc.rate:                   1996,830 MB/sec
[info]                  ·gc.alloc.rate.norm:              37984,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2024,661 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     38513,402 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,792 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 78579,471 ops/s
[info]                  ·gc.alloc.rate:                   1897,022 MB/sec
[info]                  ·gc.alloc.rate.norm:              37984,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1351,628 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27063,598 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,417 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson":
[info]   81788,303 ±(99.9%) 6922,203 ops/s [Average]
[info]   (min, avg, max) = (78579,471, 81788,303, 82710,115), stdev = 1797,674
[info]   CI (99.9%): [74866,100, 88710,506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1974,574 ±(99.9%) 167,297 MB/sec [Average]
[info]   (min, avg, max) = (1897,022, 1974,574, 1996,830), stdev = 43,447
[info]   CI (99.9%): [1807,277, 2141,871] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   37984,005 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (37984,005, 37984,005, 37984,006), stdev = 0,001
[info]   CI (99.9%): [37984,004, 37984,007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1884,018 ±(99.9%) 1146,218 MB/sec [Average]
[info]   (min, avg, max) = (1351,628, 1884,018, 2024,661), stdev = 297,669
[info]   CI (99.9%): [737,800, 3030,236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   36152,748 ±(99.9%) 19567,250 B/op [Average]
[info]   (min, avg, max) = (27063,598, 36152,748, 38513,402), stdev = 5081,553
[info]   CI (99.9%): [16585,498, 55719,998] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,050 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,050, 0,104), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,957 ±(99.9%) 2,305 B/op [Average]
[info]   (min, avg, max) = (0,417, 0,957, 1,987), stdev = 0,599
[info]   CI (99.9%): [≈ 0, 3,262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.time":
[info]   11,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 2,200, 3,000), stdev = 0,837
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 45,38% complete, ETA 01:12:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20194,232 ops/s
[info] # Warmup Iteration   2: 22183,315 ops/s
[info] # Warmup Iteration   3: 22103,744 ops/s
[info] # Warmup Iteration   4: 22188,295 ops/s
[info] # Warmup Iteration   5: 21949,680 ops/s
[info] Iteration   1: 22069,027 ops/s
[info]                  ·gc.alloc.rate:                   730,948 MB/sec
[info]                  ·gc.alloc.rate.norm:              52110,907 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,640 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48025,294 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1,647 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 117,432 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 22244,260 ops/s
[info]                  ·gc.alloc.rate:                   736,774 MB/sec
[info]                  ·gc.alloc.rate.norm:              52112,019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,643 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     95247,971 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,418 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 22226,433 ops/s
[info]                  ·gc.alloc.rate:                   736,182 MB/sec
[info]                  ·gc.alloc.rate.norm:              52112,021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,022 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     47641,105 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,474 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 22212,943 ops/s
[info]                  ·gc.alloc.rate:                   735,758 MB/sec
[info]                  ·gc.alloc.rate.norm:              52112,019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,967 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     47664,691 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,475 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 22177,171 ops/s
[info]                  ·gc.alloc.rate:               734,469 MB/sec
[info]                  ·gc.alloc.rate.norm:          52112,019 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,909 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 47744,196 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeUPickle":
[info]   22185,967 ±(99.9%) 268,965 ops/s [Average]
[info]   (min, avg, max) = (22069,027, 22185,967, 22244,260), stdev = 69,849
[info]   CI (99.9%): [21917,002, 22454,931] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.alloc.rate":
[info]   734,826 ±(99.9%) 8,963 MB/sec [Average]
[info]   (min, avg, max) = (730,948, 734,826, 736,774), stdev = 2,328
[info]   CI (99.9%): [725,863, 743,790] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   52111,797 ±(99.9%) 1,916 B/op [Average]
[info]   (min, avg, max) = (52110,907, 52111,797, 52112,021), stdev = 0,498
[info]   CI (99.9%): [52109,882, 52113,713] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   807,836 ±(99.9%) 1159,822 MB/sec [Average]
[info]   (min, avg, max) = (672,909, 807,836, 1346,643), stdev = 301,202
[info]   CI (99.9%): [≈ 0, 1967,658] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   57264,651 ±(99.9%) 81764,079 B/op [Average]
[info]   (min, avg, max) = (47641,105, 57264,651, 95247,971), stdev = 21233,872
[info]   CI (99.9%): [≈ 0, 139028,730] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,350 ±(99.9%) 2,793 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,350, 1,647), stdev = 0,725
[info]   CI (99.9%): [≈ 0, 3,143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   24,960 ±(99.9%) 199,149 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 24,960, 117,432), stdev = 51,718
[info]   CI (99.9%): [≈ 0, 224,109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 45,58% complete, ETA 01:12:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7204,538 ops/s
[info] # Warmup Iteration   2: 16050,932 ops/s
[info] # Warmup Iteration   3: 16323,741 ops/s
[info] # Warmup Iteration   4: 15855,874 ops/s
[info] # Warmup Iteration   5: 16169,495 ops/s
[info] Iteration   1: 16398,556 ops/s
[info]                  ·gc.alloc.rate:                   865,126 MB/sec
[info]                  ·gc.alloc.rate.norm:              83000,026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,017 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64473,168 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,996 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 16400,810 ops/s
[info]                  ·gc.alloc.rate:               865,265 MB/sec
[info]                  ·gc.alloc.rate.norm:          83000,036 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,669 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 64429,418 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 16362,097 ops/s
[info]                  ·gc.alloc.rate:                   863,245 MB/sec
[info]                  ·gc.alloc.rate.norm:              83000,026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,061 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     129229,976 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6,007 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 16385,732 ops/s
[info]                  ·gc.alloc.rate:                   864,441 MB/sec
[info]                  ·gc.alloc.rate.norm:              83000,028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,309 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64552,360 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,999 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 16339,561 ops/s
[info]                  ·gc.alloc.rate:               861,973 MB/sec
[info]                  ·gc.alloc.rate.norm:          83000,026 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,318 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 64738,003 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce":
[info]   16377,351 ±(99.9%) 100,616 ops/s [Average]
[info]   (min, avg, max) = (16339,561, 16377,351, 16400,810), stdev = 26,130
[info]   CI (99.9%): [16276,736, 16477,967] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate":
[info]   864,010 ±(99.9%) 5,357 MB/sec [Average]
[info]   (min, avg, max) = (861,973, 864,010, 865,265), stdev = 1,391
[info]   CI (99.9%): [858,653, 869,367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   83000,029 ±(99.9%) 0,016 B/op [Average]
[info]   (min, avg, max) = (83000,026, 83000,029, 83000,036), stdev = 0,004
[info]   CI (99.9%): [83000,013, 83000,045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   806,475 ±(99.9%) 1157,196 MB/sec [Average]
[info]   (min, avg, max) = (671,669, 806,475, 1344,061), stdev = 300,520
[info]   CI (99.9%): [≈ 0, 1963,671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   77484,585 ±(99.9%) 111386,784 B/op [Average]
[info]   (min, avg, max) = (64429,418, 77484,585, 129229,976), stdev = 28926,794
[info]   CI (99.9%): [≈ 0, 188871,369] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,062), stdev = 0,028
[info]   CI (99.9%): [≈ 0, 0,137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2,800 ±(99.9%) 10,337 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,800, 6,007), stdev = 2,685
[info]   CI (99.9%): [≈ 0, 13,138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 45,78% complete, ETA 01:11:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5326,145 ops/s
[info] # Warmup Iteration   2: 18591,886 ops/s
[info] # Warmup Iteration   3: 19061,685 ops/s
[info] # Warmup Iteration   4: 18879,124 ops/s
[info] # Warmup Iteration   5: 19003,091 ops/s
[info] Iteration   1: 19041,444 ops/s
[info]                  ·gc.alloc.rate:                   812,771 MB/sec
[info]                  ·gc.alloc.rate.norm:              67152,024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668,020 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55192,557 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,147 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 177,393 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 18911,281 ops/s
[info]                  ·gc.alloc.rate:                   807,023 MB/sec
[info]                  ·gc.alloc.rate.norm:              67137,580 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336,400 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     111177,328 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,465 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 18879,135 ops/s
[info]                  ·gc.alloc.rate:                   805,422 MB/sec
[info]                  ·gc.alloc.rate.norm:              67120,023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668,346 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55696,750 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,735 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 19124,630 ops/s
[info]                  ·gc.alloc.rate:                   815,914 MB/sec
[info]                  ·gc.alloc.rate.norm:              67120,024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668,345 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54980,487 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,713 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 19050,743 ops/s
[info]                  ·gc.alloc.rate:               812,741 MB/sec
[info]                  ·gc.alloc.rate.norm:          67120,023 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668,366 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 55196,900 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala":
[info]   19001,447 ±(99.9%) 395,952 ops/s [Average]
[info]   (min, avg, max) = (18879,135, 19001,447, 19124,630), stdev = 102,827
[info]   CI (99.9%): [18605,495, 19397,399] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   810,774 ±(99.9%) 16,893 MB/sec [Average]
[info]   (min, avg, max) = (805,422, 810,774, 815,914), stdev = 4,387
[info]   CI (99.9%): [793,881, 827,667] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   67129,935 ±(99.9%) 55,838 B/op [Average]
[info]   (min, avg, max) = (67120,023, 67129,935, 67152,024), stdev = 14,501
[info]   CI (99.9%): [67074,097, 67185,773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   801,896 ±(99.9%) 1150,561 MB/sec [Average]
[info]   (min, avg, max) = (668,020, 801,896, 1336,400), stdev = 298,797
[info]   CI (99.9%): [≈ 0, 1952,457] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   66448,804 ±(99.9%) 96286,857 B/op [Average]
[info]   (min, avg, max) = (54980,487, 66448,804, 111177,328), stdev = 25005,391
[info]   CI (99.9%): [≈ 0, 162735,661] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,446 ±(99.9%) 3,662 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,446, 2,147), stdev = 0,951
[info]   CI (99.9%): [≈ 0, 4,108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   36,861 ±(99.9%) 302,542 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 36,861, 177,393), stdev = 78,569
[info]   CI (99.9%): [≈ 0, 339,403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 2,000), stdev = 0,837
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 45,98% complete, ETA 01:11:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 105426,426 ops/s
[info] # Warmup Iteration   2: 109696,331 ops/s
[info] # Warmup Iteration   3: 109938,374 ops/s
[info] # Warmup Iteration   4: 109189,128 ops/s
[info] # Warmup Iteration   5: 110591,930 ops/s
[info] Iteration   1: 110079,681 ops/s
[info]                  ·gc.alloc.rate:               276,524 MB/sec
[info]                  ·gc.alloc.rate.norm:          3952,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,815 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7314,716 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 110495,487 ops/s
[info]                  ·gc.alloc.rate:      277,568 MB/sec
[info]                  ·gc.alloc.rate.norm: 3952,004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 110023,251 ops/s
[info]                  ·gc.alloc.rate:               276,378 MB/sec
[info]                  ·gc.alloc.rate.norm:          3952,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,806 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7318,439 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 110424,986 ops/s
[info]                  ·gc.alloc.rate:      277,369 MB/sec
[info]                  ·gc.alloc.rate.norm: 3952,004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 109222,391 ops/s
[info]                  ·gc.alloc.rate:                   274,351 MB/sec
[info]                  ·gc.alloc.rate.norm:              3952,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,754 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7371,765 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,016 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,235 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala":
[info]   110049,159 ±(99.9%) 1949,813 ops/s [Average]
[info]   (min, avg, max) = (109222,391, 110049,159, 110495,487), stdev = 506,360
[info]   CI (99.9%): [108099,347, 111998,972] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   276,438 ±(99.9%) 4,912 MB/sec [Average]
[info]   (min, avg, max) = (274,351, 276,438, 277,568), stdev = 1,276
[info]   CI (99.9%): [271,526, 281,351] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   3952,004 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (3952,004, 3952,004, 3952,004), stdev = 0,001
[info]   CI (99.9%): [3952,004, 3952,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   307,075 ±(99.9%) 1079,412 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 307,075, 511,815), stdev = 280,320
[info]   CI (99.9%): [≈ 0, 1386,487] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4400,984 ±(99.9%) 15470,323 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4400,984, 7371,765), stdev = 4017,594
[info]   CI (99.9%): [≈ 0, 19871,307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,003 ±(99.9%) 0,028 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,003, 0,016), stdev = 0,007
[info]   CI (99.9%): [≈ 0, 0,031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,047 ±(99.9%) 0,404 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,047, 0,235), stdev = 0,105
[info]   CI (99.9%): [≈ 0, 0,451] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 46,18% complete, ETA 01:11:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3441,714 ops/s
[info] # Warmup Iteration   2: 15294,404 ops/s
[info] # Warmup Iteration   3: 15719,198 ops/s
[info] # Warmup Iteration   4: 15772,955 ops/s
[info] # Warmup Iteration   5: 15864,566 ops/s
[info] Iteration   1: 15721,602 ops/s
[info]                  ·gc.alloc.rate:               1223,674 MB/sec
[info]                  ·gc.alloc.rate.norm:          122456,030 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338,092 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 133906,169 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 15995,309 ops/s
[info]                  ·gc.alloc.rate:               1244,985 MB/sec
[info]                  ·gc.alloc.rate.norm:          122456,027 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668,998 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 65802,257 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 15892,726 ops/s
[info]                  ·gc.alloc.rate:                   1237,048 MB/sec
[info]                  ·gc.alloc.rate.norm:              122456,037 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339,328 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     132580,849 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10,306 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 15905,941 ops/s
[info]                  ·gc.alloc.rate:               1238,032 MB/sec
[info]                  ·gc.alloc.rate.norm:          122456,027 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340,632 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 132604,331 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   5: 15925,879 ops/s
[info]                  ·gc.alloc.rate:                   1239,553 MB/sec
[info]                  ·gc.alloc.rate.norm:              122456,027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,593 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     132635,320 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,057 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson":
[info]   15888,291 ±(99.9%) 389,764 ops/s [Average]
[info]   (min, avg, max) = (15721,602, 15888,291, 15995,309), stdev = 101,220
[info]   CI (99.9%): [15498,528, 16278,055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1236,658 ±(99.9%) 30,341 MB/sec [Average]
[info]   (min, avg, max) = (1223,674, 1236,658, 1244,985), stdev = 7,880
[info]   CI (99.9%): [1206,317, 1267,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   122456,030 ±(99.9%) 0,017 B/op [Average]
[info]   (min, avg, max) = (122456,027, 122456,030, 122456,037), stdev = 0,004
[info]   CI (99.9%): [122456,013, 122456,047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1205,929 ±(99.9%) 1155,802 MB/sec [Average]
[info]   (min, avg, max) = (668,998, 1205,929, 1342,593), stdev = 300,158
[info]   CI (99.9%): [50,127, 2361,730] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   119505,785 ±(99.9%) 115621,218 B/op [Average]
[info]   (min, avg, max) = (65802,257, 119505,785, 133906,169), stdev = 30026,463
[info]   CI (99.9%): [3884,568, 235127,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,174 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,104), stdev = 0,045
[info]   CI (99.9%): [≈ 0, 0,199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2,473 ±(99.9%) 17,208 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,473, 10,306), stdev = 4,469
[info]   CI (99.9%): [≈ 0, 19,681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 46,39% complete, ETA 01:11:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6579,579 ops/s
[info] # Warmup Iteration   2: 16677,427 ops/s
[info] # Warmup Iteration   3: 16845,656 ops/s
[info] # Warmup Iteration   4: 16974,198 ops/s
[info] # Warmup Iteration   5: 16853,152 ops/s
[info] Iteration   1: 16904,401 ops/s
[info]                  ·gc.alloc.rate:                   847,418 MB/sec
[info]                  ·gc.alloc.rate.norm:              78864,026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,677 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62695,034 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,876 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 16794,949 ops/s
[info]                  ·gc.alloc.rate:               841,906 MB/sec
[info]                  ·gc.alloc.rate.norm:          78864,035 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,011 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 63043,143 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 16936,024 ops/s
[info]                  ·gc.alloc.rate:               848,735 MB/sec
[info]                  ·gc.alloc.rate.norm:          78842,744 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,005 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 62518,404 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 16942,127 ops/s
[info]                  ·gc.alloc.rate:                   849,043 MB/sec
[info]                  ·gc.alloc.rate.norm:              78840,025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,814 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     125061,794 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,801 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 16978,917 ops/s
[info]                  ·gc.alloc.rate:               850,708 MB/sec
[info]                  ·gc.alloc.rate.norm:          78840,027 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,551 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 62421,853 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readUPickle":
[info]   16911,284 ±(99.9%) 270,359 ops/s [Average]
[info]   (min, avg, max) = (16794,949, 16911,284, 16978,917), stdev = 70,211
[info]   CI (99.9%): [16640,924, 17181,643] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readUPickle:·gc.alloc.rate":
[info]   847,562 ±(99.9%) 12,984 MB/sec [Average]
[info]   (min, avg, max) = (841,906, 847,562, 850,708), stdev = 3,372
[info]   CI (99.9%): [834,578, 860,546] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   78850,172 ±(99.9%) 48,903 B/op [Average]
[info]   (min, avg, max) = (78840,025, 78850,172, 78864,035), stdev = 12,700
[info]   CI (99.9%): [78801,269, 78899,074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   808,012 ±(99.9%) 1159,813 MB/sec [Average]
[info]   (min, avg, max) = (673,005, 808,012, 1346,814), stdev = 301,200
[info]   CI (99.9%): [≈ 0, 1967,825] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   75148,046 ±(99.9%) 107446,977 B/op [Average]
[info]   (min, avg, max) = (62421,853, 75148,046, 125061,794), stdev = 27903,639
[info]   CI (99.9%): [≈ 0, 182595,023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,021 ±(99.9%) 0,113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,062), stdev = 0,029
[info]   CI (99.9%): [≈ 0, 0,134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   1,935 ±(99.9%) 10,536 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,935, 5,801), stdev = 2,736
[info]   CI (99.9%): [≈ 0, 12,472] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readUPickle:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readUPickle:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 46,59% complete, ETA 01:10:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 42753,244 ops/s
[info] # Warmup Iteration   2: 53819,195 ops/s
[info] # Warmup Iteration   3: 53668,278 ops/s
[info] # Warmup Iteration   4: 54026,402 ops/s
[info] # Warmup Iteration   5: 54405,187 ops/s
[info] Iteration   1: 51578,774 ops/s
[info]                  ·gc.alloc.rate:                   1546,594 MB/sec
[info]                  ·gc.alloc.rate.norm:              47176,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,681 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     40956,030 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,635 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 47562,824 ops/s
[info]                  ·gc.alloc.rate:                   1426,163 MB/sec
[info]                  ·gc.alloc.rate.norm:              47176,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,371 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     44470,414 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,689 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         123,000 ms
[info] Iteration   3: 51960,446 ops/s
[info]                  ·gc.alloc.rate:                   1558,100 MB/sec
[info]                  ·gc.alloc.rate.norm:              47176,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,034 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     40755,090 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,261 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 53917,196 ops/s
[info]                  ·gc.alloc.rate:                   1616,865 MB/sec
[info]                  ·gc.alloc.rate.norm:              47176,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022,131 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     59000,628 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,608 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 54467,931 ops/s
[info]                  ·gc.alloc.rate:                   1633,402 MB/sec
[info]                  ·gc.alloc.rate.norm:              47176,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350,916 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39017,229 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,203 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce":
[info]   51897,434 ±(99.9%) 10471,566 ops/s [Average]
[info]   (min, avg, max) = (47562,824, 51897,434, 54467,931), stdev = 2719,432
[info]   CI (99.9%): [41425,869, 62369,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1556,225 ±(99.9%) 314,283 MB/sec [Average]
[info]   (min, avg, max) = (1426,163, 1556,225, 1633,402), stdev = 81,618
[info]   CI (99.9%): [1241,942, 1870,507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   47176,008 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (47176,008, 47176,008, 47176,009), stdev = 0,001
[info]   CI (99.9%): [47176,006, 47176,010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1481,227 ±(99.9%) 1164,398 MB/sec [Average]
[info]   (min, avg, max) = (1342,681, 1481,227, 2022,131), stdev = 302,390
[info]   CI (99.9%): [316,829, 2645,625] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   44839,878 ±(99.9%) 31420,898 B/op [Average]
[info]   (min, avg, max) = (39017,229, 44839,878, 59000,628), stdev = 8159,907
[info]   CI (99.9%): [13418,980, 76260,776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,044 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,029, 0,042), stdev = 0,011
[info]   CI (99.9%): [≈ 0, 0,073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,879 ±(99.9%) 1,248 B/op [Average]
[info]   (min, avg, max) = (0,608, 0,879, 1,261), stdev = 0,324
[info]   CI (99.9%): [≈ 0, 2,127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.time":
[info]   130,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 26,000, 123,000), stdev = 54,226
[info]   CI (99.9%): [130,000, 130,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 46,79% complete, ETA 01:10:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 59477,457 ops/s
[info] # Warmup Iteration   2: 80712,946 ops/s
[info] # Warmup Iteration   3: 80654,457 ops/s
[info] # Warmup Iteration   4: 80725,476 ops/s
[info] # Warmup Iteration   5: 81371,807 ops/s
[info] Iteration   1: 81013,925 ops/s
[info]                  ·gc.alloc.rate:                   1671,840 MB/sec
[info]                  ·gc.alloc.rate.norm:              32464,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339,216 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26005,078 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,404 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 81271,837 ops/s
[info]                  ·gc.alloc.rate:                   1677,051 MB/sec
[info]                  ·gc.alloc.rate.norm:              32464,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012,089 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     38949,615 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,209 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 81509,880 ops/s
[info]                  ·gc.alloc.rate:                   1681,945 MB/sec
[info]                  ·gc.alloc.rate.norm:              32464,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,128 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25943,645 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,804 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 81174,173 ops/s
[info]                  ·gc.alloc.rate:                   1675,062 MB/sec
[info]                  ·gc.alloc.rate.norm:              32464,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020,892 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39166,452 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,211 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 81376,832 ops/s
[info]                  ·gc.alloc.rate:                   1679,134 MB/sec
[info]                  ·gc.alloc.rate.norm:              32464,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1349,056 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26082,346 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,805 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala":
[info]   81269,329 ±(99.9%) 729,883 ops/s [Average]
[info]   (min, avg, max) = (81013,925, 81269,329, 81509,880), stdev = 189,548
[info]   CI (99.9%): [80539,447, 81999,212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1677,006 ±(99.9%) 14,838 MB/sec [Average]
[info]   (min, avg, max) = (1671,840, 1677,006, 1681,945), stdev = 3,853
[info]   CI (99.9%): [1662,168, 1691,844] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   32464,005 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (32464,005, 32464,005, 32464,005), stdev = 0,001
[info]   CI (99.9%): [32464,005, 32464,005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1613,076 ±(99.9%) 1418,172 MB/sec [Average]
[info]   (min, avg, max) = (1339,216, 1613,076, 2020,892), stdev = 368,295
[info]   CI (99.9%): [194,904, 3031,248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   31229,427 ±(99.9%) 27520,888 B/op [Average]
[info]   (min, avg, max) = (25943,645, 31229,427, 39166,452), stdev = 7147,087
[info]   CI (99.9%): [3708,539, 58750,315] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,046 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,046, 0,062), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,887 ±(99.9%) 1,299 B/op [Average]
[info]   (min, avg, max) = (0,404, 0,887, 1,211), stdev = 0,337
[info]   CI (99.9%): [≈ 0, 2,186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.time":
[info]   9,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 46,99% complete, ETA 01:10:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 281516,519 ops/s
[info] # Warmup Iteration   2: 303969,661 ops/s
[info] # Warmup Iteration   3: 301901,236 ops/s
[info] # Warmup Iteration   4: 302663,267 ops/s
[info] # Warmup Iteration   5: 302572,685 ops/s
[info] Iteration   1: 297489,234 ops/s
[info]                  ·gc.alloc.rate:                   570,292 MB/sec
[info]                  ·gc.alloc.rate.norm:              3016,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,788 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2706,603 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,055 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 303058,487 ops/s
[info]                  ·gc.alloc.rate:                   580,965 MB/sec
[info]                  ·gc.alloc.rate.norm:              3016,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,673 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3497,283 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1,543 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8,011 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 302444,523 ops/s
[info]                  ·gc.alloc.rate:                   579,794 MB/sec
[info]                  ·gc.alloc.rate.norm:              3016,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,696 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3504,462 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,433 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 303805,484 ops/s
[info]                  ·gc.alloc.rate:               582,389 MB/sec
[info]                  ·gc.alloc.rate.norm:          3016,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,045 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3485,476 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 302864,727 ops/s
[info]                  ·gc.alloc.rate:                   580,565 MB/sec
[info]                  ·gc.alloc.rate.norm:              3016,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,010 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3496,246 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,216 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala":
[info]   301932,491 ±(99.9%) 9750,904 ops/s [Average]
[info]   (min, avg, max) = (297489,234, 301932,491, 303805,484), stdev = 2532,279
[info]   CI (99.9%): [292181,586, 311683,395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   578,801 ±(99.9%) 18,673 MB/sec [Average]
[info]   (min, avg, max) = (570,292, 578,801, 582,389), stdev = 4,849
[info]   CI (99.9%): [560,129, 597,474] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3016,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (3016,001, 3016,001, 3016,002), stdev = 0,001
[info]   CI (99.9%): [3016,001, 3016,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   641,042 ±(99.9%) 278,232 MB/sec [Average]
[info]   (min, avg, max) = (511,788, 641,042, 673,696), stdev = 72,256
[info]   CI (99.9%): [362,810, 919,274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3338,014 ±(99.9%) 1359,411 B/op [Average]
[info]   (min, avg, max) = (2706,603, 3338,014, 3504,462), stdev = 353,035
[info]   CI (99.9%): [1978,603, 4697,424] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,336 ±(99.9%) 2,602 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,336, 1,543), stdev = 0,676
[info]   CI (99.9%): [≈ 0, 2,938] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1,743 ±(99.9%) 13,508 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,743, 8,011), stdev = 3,508
[info]   CI (99.9%): [≈ 0, 15,251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 3,000), stdev = 1,095
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 47,19% complete, ETA 01:09:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 282546,793 ops/s
[info] # Warmup Iteration   2: 294918,156 ops/s
[info] # Warmup Iteration   3: 303584,909 ops/s
[info] # Warmup Iteration   4: 303679,028 ops/s
[info] # Warmup Iteration   5: 267330,365 ops/s
[info] Iteration   1: 304928,346 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 304099,462 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 303774,637 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 303855,793 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 253247,230 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc":
[info]   293981,093 ±(99.9%) 87700,361 ops/s [Average]
[info]   (min, avg, max) = (253247,230, 293981,093, 304928,346), stdev = 22775,505
[info]   CI (99.9%): [206280,733, 381681,454] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (0,001, 0,001, 0,002), stdev = 0,001
[info]   CI (99.9%): [0,001, 0,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 47,39% complete, ETA 01:09:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 61342,193 ops/s
[info] # Warmup Iteration   2: 75612,249 ops/s
[info] # Warmup Iteration   3: 74693,574 ops/s
[info] # Warmup Iteration   4: 74995,615 ops/s
[info] # Warmup Iteration   5: 75736,844 ops/s
[info] Iteration   1: 75046,058 ops/s
[info]                  ·gc.alloc.rate:               1682,516 MB/sec
[info]                  ·gc.alloc.rate.norm:          35272,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2013,126 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 42202,879 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 73805,857 ops/s
[info]                  ·gc.alloc.rate:                   1654,791 MB/sec
[info]                  ·gc.alloc.rate.norm:              35272,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,213 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28652,024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,776 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 76428,419 ops/s
[info]                  ·gc.alloc.rate:                   1713,451 MB/sec
[info]                  ·gc.alloc.rate.norm:              35272,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020,125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     41585,010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,286 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 76043,407 ops/s
[info]                  ·gc.alloc.rate:               1704,863 MB/sec
[info]                  ·gc.alloc.rate.norm:          35272,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1348,747 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 27904,306 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   5: 74907,193 ops/s
[info]                  ·gc.alloc.rate:                   1679,387 MB/sec
[info]                  ·gc.alloc.rate.norm:              35272,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2026,051 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42552,959 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,312 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson":
[info]   75246,187 ±(99.9%) 3975,103 ops/s [Average]
[info]   (min, avg, max) = (73805,857, 75246,187, 76428,419), stdev = 1032,322
[info]   CI (99.9%): [71271,084, 79221,290] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1687,001 ±(99.9%) 88,946 MB/sec [Average]
[info]   (min, avg, max) = (1654,791, 1687,001, 1713,451), stdev = 23,099
[info]   CI (99.9%): [1598,055, 1775,948] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   35272,006 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (35272,006, 35272,006, 35272,006), stdev = 0,001
[info]   CI (99.9%): [35272,005, 35272,007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1750,453 ±(99.9%) 1420,142 MB/sec [Average]
[info]   (min, avg, max) = (1344,213, 1750,453, 2026,051), stdev = 368,806
[info]   CI (99.9%): [330,311, 3170,595] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   36579,436 ±(99.9%) 29228,365 B/op [Average]
[info]   (min, avg, max) = (27904,306, 36579,436, 42552,959), stdev = 7590,514
[info]   CI (99.9%): [7351,070, 65807,801] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,150 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,042, 0,083), stdev = 0,039
[info]   CI (99.9%): [≈ 0, 0,192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,875 ±(99.9%) 3,165 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,875, 1,776), stdev = 0,822
[info]   CI (99.9%): [≈ 0, 4,040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.time":
[info]   9,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 47,59% complete, ETA 01:09:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15063,046 ops/s
[info] # Warmup Iteration   2: 16456,167 ops/s
[info] # Warmup Iteration   3: 16391,017 ops/s
[info] # Warmup Iteration   4: 16340,175 ops/s
[info] # Warmup Iteration   5: 16354,647 ops/s
[info] Iteration   1: 16339,232 ops/s
[info]                  ·gc.alloc.rate:                   652,733 MB/sec
[info]                  ·gc.alloc.rate.norm:              62848,028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,736 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64870,293 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1,637 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 157,620 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 16300,085 ops/s
[info]                  ·gc.alloc.rate:                   651,148 MB/sec
[info]                  ·gc.alloc.rate.norm:              62846,530 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,724 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     65025,476 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,020 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 16320,136 ops/s
[info]                  ·gc.alloc.rate:                   651,921 MB/sec
[info]                  ·gc.alloc.rate.norm:              62848,026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,681 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64945,803 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,007 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 16433,440 ops/s
[info]                  ·gc.alloc.rate:               656,437 MB/sec
[info]                  ·gc.alloc.rate.norm:          62848,026 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,643 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 64495,366 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 16393,081 ops/s
[info]                  ·gc.alloc.rate:                   654,834 MB/sec
[info]                  ·gc.alloc.rate.norm:              62848,028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,679 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64656,644 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,997 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeUPickle":
[info]   16357,195 ±(99.9%) 211,424 ops/s [Average]
[info]   (min, avg, max) = (16300,085, 16357,195, 16433,440), stdev = 54,906
[info]   CI (99.9%): [16145,770, 16568,619] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   653,414 ±(99.9%) 8,388 MB/sec [Average]
[info]   (min, avg, max) = (651,148, 653,414, 656,437), stdev = 2,178
[info]   CI (99.9%): [645,026, 661,803] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   62847,728 ±(99.9%) 2,578 B/op [Average]
[info]   (min, avg, max) = (62846,530, 62847,728, 62848,028), stdev = 0,669
[info]   CI (99.9%): [62845,150, 62850,306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   673,692 ±(99.9%) 0,145 MB/sec [Average]
[info]   (min, avg, max) = (673,643, 673,692, 673,736), stdev = 0,038
[info]   CI (99.9%): [673,548, 673,837] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   64798,717 ±(99.9%) 840,075 B/op [Average]
[info]   (min, avg, max) = (64495,366, 64798,717, 65025,476), stdev = 218,165
[info]   CI (99.9%): [63958,642, 65638,791] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,348 ±(99.9%) 2,775 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,348, 1,637), stdev = 0,721
[info]   CI (99.9%): [≈ 0, 3,123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   33,529 ±(99.9%) 267,192 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 33,529, 157,620), stdev = 69,389
[info]   CI (99.9%): [≈ 0, 300,721] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeUPickle:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeUPickle:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 47,79% complete, ETA 01:09:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 122864,615 ops/s
[info] # Warmup Iteration   2: 140432,361 ops/s
[info] # Warmup Iteration   3: 141698,769 ops/s
[info] # Warmup Iteration   4: 142705,777 ops/s
[info] # Warmup Iteration   5: 141270,339 ops/s
[info] Iteration   1: 141673,996 ops/s
[info]                  ·gc.alloc.rate:                   2121,615 MB/sec
[info]                  ·gc.alloc.rate.norm:              23560,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2697,464 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29954,663 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,156 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 142793,523 ops/s
[info]                  ·gc.alloc.rate:                   2138,334 MB/sec
[info]                  ·gc.alloc.rate.norm:              23560,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2027,701 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22341,057 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,147 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 142077,262 ops/s
[info]                  ·gc.alloc.rate:                   2127,619 MB/sec
[info]                  ·gc.alloc.rate.norm:              23560,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2030,356 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22482,978 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,692 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 142924,526 ops/s
[info]                  ·gc.alloc.rate:                   2140,277 MB/sec
[info]                  ·gc.alloc.rate.norm:              23560,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2033,319 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22382,619 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,458 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 142991,562 ops/s
[info]                  ·gc.alloc.rate:                   2141,174 MB/sec
[info]                  ·gc.alloc.rate.norm:              23560,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2035,217 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22394,128 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,458 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce":
[info]   142492,174 ±(99.9%) 2252,458 ops/s [Average]
[info]   (min, avg, max) = (141673,996, 142492,174, 142991,562), stdev = 584,956
[info]   CI (99.9%): [140239,715, 144744,632] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate":
[info]   2133,804 ±(99.9%) 33,545 MB/sec [Average]
[info]   (min, avg, max) = (2121,615, 2133,804, 2141,174), stdev = 8,712
[info]   CI (99.9%): [2100,259, 2167,349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   23560,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (23560,003, 23560,003, 23560,003), stdev = 0,001
[info]   CI (99.9%): [23560,003, 23560,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2164,812 ±(99.9%) 1146,628 MB/sec [Average]
[info]   (min, avg, max) = (2027,701, 2164,812, 2697,464), stdev = 297,776
[info]   CI (99.9%): [1018,184, 3311,440] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   23911,089 ±(99.9%) 13010,772 B/op [Average]
[info]   (min, avg, max) = (22341,057, 23911,089, 29954,663), stdev = 3378,856
[info]   CI (99.9%): [10900,317, 36921,861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,071 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,071, 0,104), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,782 ±(99.9%) 1,349 B/op [Average]
[info]   (min, avg, max) = (0,458, 0,782, 1,156), stdev = 0,350
[info]   CI (99.9%): [≈ 0, 2,132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.count":
[info]   16,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,200, 4,000), stdev = 0,447
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.time":
[info]   10,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 47,99% complete, ETA 01:08:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 85721,324 ops/s
[info] # Warmup Iteration   2: 612133,631 ops/s
[info] # Warmup Iteration   3: 612706,444 ops/s
[info] # Warmup Iteration   4: 613428,505 ops/s
[info] # Warmup Iteration   5: 616083,607 ops/s
[info] Iteration   1: 613125,916 ops/s
[info]                  ·gc.alloc.rate:                   339,834 MB/sec
[info]                  ·gc.alloc.rate.norm:              872,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,770 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1313,180 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,034 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,088 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 615268,638 ops/s
[info]                  ·gc.alloc.rate:                   341,022 MB/sec
[info]                  ·gc.alloc.rate.norm:              872,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,777 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1308,624 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,003 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,007 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 614741,935 ops/s
[info]                  ·gc.alloc.rate:      340,731 MB/sec
[info]                  ·gc.alloc.rate.norm: 872,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 612932,247 ops/s
[info]                  ·gc.alloc.rate:               339,715 MB/sec
[info]                  ·gc.alloc.rate.norm:          872,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,767 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1313,632 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   5: 614757,966 ops/s
[info]                  ·gc.alloc.rate:      340,724 MB/sec
[info]                  ·gc.alloc.rate.norm: 872,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava":
[info]   614165,340 ±(99.9%) 4085,066 ops/s [Average]
[info]   (min, avg, max) = (612932,247, 614165,340, 615268,638), stdev = 1060,879
[info]   CI (99.9%): [610080,274, 618250,406] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   340,405 ±(99.9%) 2,270 MB/sec [Average]
[info]   (min, avg, max) = (339,715, 340,405, 341,022), stdev = 0,590
[info]   CI (99.9%): [338,135, 342,676] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   872,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (872,001, 872,001, 872,001), stdev = 0,001
[info]   CI (99.9%): [872,001, 872,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   307,063 ±(99.9%) 1079,369 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 307,063, 511,777), stdev = 280,309
[info]   CI (99.9%): [≈ 0, 1386,431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   787,087 ±(99.9%) 2766,733 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 787,087, 1313,632), stdev = 718,512
[info]   CI (99.9%): [≈ 0, 3553,820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,007 ±(99.9%) 0,058 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,007, 0,034), stdev = 0,015
[info]   CI (99.9%): [≈ 0, 0,066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0,019 ±(99.9%) 0,150 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,019, 0,088), stdev = 0,039
[info]   CI (99.9%): [≈ 0, 0,169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 48,19% complete, ETA 01:08:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 321112,043 ops/s
[info] # Warmup Iteration   2: 437438,742 ops/s
[info] # Warmup Iteration   3: 438692,591 ops/s
[info] # Warmup Iteration   4: 437711,814 ops/s
[info] # Warmup Iteration   5: 438281,618 ops/s
[info] Iteration   1: 433833,249 ops/s
[info]                  ·gc.alloc.rate:               443,408 MB/sec
[info]                  ·gc.alloc.rate.norm:          1608,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,758 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1855,870 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   2: 436844,314 ops/s
[info]                  ·gc.alloc.rate:                   446,483 MB/sec
[info]                  ·gc.alloc.rate.norm:              1608,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,759 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1843,089 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,006 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,021 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 439486,204 ops/s
[info]                  ·gc.alloc.rate:      449,183 MB/sec
[info]                  ·gc.alloc.rate.norm: 1608,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 438567,691 ops/s
[info]                  ·gc.alloc.rate:                   448,236 MB/sec
[info]                  ·gc.alloc.rate.norm:              1608,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668,004 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2396,394 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,172 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7,793 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 439392,729 ops/s
[info]                  ·gc.alloc.rate:                   449,077 MB/sec
[info]                  ·gc.alloc.rate.norm:              1608,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668,014 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2391,945 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,075 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala":
[info]   437624,837 ±(99.9%) 9125,387 ops/s [Average]
[info]   (min, avg, max) = (433833,249, 437624,837, 439486,204), stdev = 2369,834
[info]   CI (99.9%): [428499,450, 446750,225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   447,278 ±(99.9%) 9,313 MB/sec [Average]
[info]   (min, avg, max) = (443,408, 447,278, 449,183), stdev = 2,418
[info]   CI (99.9%): [437,965, 456,590] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1608,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1608,001, 1608,001, 1608,001), stdev = 0,001
[info]   CI (99.9%): [1608,001, 1608,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   471,907 ±(99.9%) 1059,425 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 471,907, 668,014), stdev = 275,129
[info]   CI (99.9%): [≈ 0, 1531,332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1697,459 ±(99.9%) 3801,470 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1697,459, 2396,394), stdev = 987,230
[info]   CI (99.9%): [≈ 0, 5498,929] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,440 ±(99.9%) 3,730 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,440, 2,172), stdev = 0,969
[info]   CI (99.9%): [≈ 0, 4,169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1,578 ±(99.9%) 13,380 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,578, 7,793), stdev = 3,475
[info]   CI (99.9%): [≈ 0, 14,957] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,400, 3,000), stdev = 1,342
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 48,39% complete, ETA 01:08:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 979980,319 ops/s
[info] # Warmup Iteration   2: 1027381,417 ops/s
[info] # Warmup Iteration   3: 1029794,374 ops/s
[info] # Warmup Iteration   4: 1033055,447 ops/s
[info] # Warmup Iteration   5: 1029728,403 ops/s
[info] Iteration   1: 1028241,771 ops/s
[info]                  ·gc.alloc.rate:                   355,539 MB/sec
[info]                  ·gc.alloc.rate.norm:              544,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,767 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     783,041 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,016 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 1034069,338 ops/s
[info]                  ·gc.alloc.rate:      357,552 MB/sec
[info]                  ·gc.alloc.rate.norm: 544,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1027970,723 ops/s
[info]                  ·gc.alloc.rate:               355,444 MB/sec
[info]                  ·gc.alloc.rate.norm:          544,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,767 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 783,249 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 1018382,101 ops/s
[info]                  ·gc.alloc.rate:                   352,119 MB/sec
[info]                  ·gc.alloc.rate.norm:              544,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,765 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     790,642 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,048 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 1031549,856 ops/s
[info]                  ·gc.alloc.rate:      356,663 MB/sec
[info]                  ·gc.alloc.rate.norm: 544,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala":
[info]   1028042,758 ±(99.9%) 22942,254 ops/s [Average]
[info]   (min, avg, max) = (1018382,101, 1028042,758, 1034069,338), stdev = 5958,030
[info]   CI (99.9%): [1005100,504, 1050985,011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   355,464 ±(99.9%) 7,937 MB/sec [Average]
[info]   (min, avg, max) = (352,119, 355,464, 357,552), stdev = 2,061
[info]   CI (99.9%): [347,527, 363,400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   544,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (544,000, 544,000, 544,000), stdev = 0,001
[info]   CI (99.9%): [544,000, 544,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   307,060 ±(99.9%) 1079,358 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 307,060, 511,767), stdev = 280,306
[info]   CI (99.9%): [≈ 0, 1386,417] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   471,386 ±(99.9%) 1657,031 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 471,386, 790,642), stdev = 430,326
[info]   CI (99.9%): [≈ 0, 2128,417] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,008 ±(99.9%) 0,052 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,008, 0,031), stdev = 0,014
[info]   CI (99.9%): [≈ 0, 0,061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,013 ±(99.9%) 0,081 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,013, 0,048), stdev = 0,021
[info]   CI (99.9%): [≈ 0, 0,094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 48,59% complete, ETA 01:08:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 57094,380 ops/s
[info] # Warmup Iteration   2: 84071,264 ops/s
[info] # Warmup Iteration   3: 83507,353 ops/s
[info] # Warmup Iteration   4: 84532,103 ops/s
[info] # Warmup Iteration   5: 84606,235 ops/s
[info] Iteration   1: 84222,119 ops/s
[info]                  ·gc.alloc.rate:                   3501,575 MB/sec
[info]                  ·gc.alloc.rate.norm:              65408,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4059,228 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     75824,745 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,167 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   2: 84170,604 ops/s
[info]                  ·gc.alloc.rate:                   3499,424 MB/sec
[info]                  ·gc.alloc.rate.norm:              65408,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3391,783 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63396,071 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,168 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 83488,553 ops/s
[info]                  ·gc.alloc.rate:                   3470,995 MB/sec
[info]                  ·gc.alloc.rate.norm:              65408,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3397,116 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64015,813 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,177 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 82257,913 ops/s
[info]                  ·gc.alloc.rate:                   3419,894 MB/sec
[info]                  ·gc.alloc.rate.norm:              65408,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3401,098 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     65048,518 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,593 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 84649,444 ops/s
[info]                  ·gc.alloc.rate:                   3519,005 MB/sec
[info]                  ·gc.alloc.rate.norm:              65408,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3404,205 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63274,216 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,161 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson":
[info]   83757,727 ±(99.9%) 3603,584 ops/s [Average]
[info]   (min, avg, max) = (82257,913, 83757,727, 84649,444), stdev = 935,839
[info]   CI (99.9%): [80154,142, 87361,311] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3482,179 ±(99.9%) 149,561 MB/sec [Average]
[info]   (min, avg, max) = (3419,894, 3482,179, 3519,005), stdev = 38,840
[info]   CI (99.9%): [3332,618, 3631,739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   65408,005 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (65408,005, 65408,005, 65408,006), stdev = 0,001
[info]   CI (99.9%): [65408,005, 65408,006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3530,686 ±(99.9%) 1137,868 MB/sec [Average]
[info]   (min, avg, max) = (3391,783, 3530,686, 4059,228), stdev = 295,501
[info]   CI (99.9%): [2392,818, 4668,554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   66311,873 ±(99.9%) 20655,031 B/op [Average]
[info]   (min, avg, max) = (63274,216, 66311,873, 75824,745), stdev = 5364,046
[info]   CI (99.9%): [45656,842, 86966,903] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,067 ±(99.9%) 0,036 MB/sec [Average]
[info]   (min, avg, max) = (0,062, 0,067, 0,083), stdev = 0,009
[info]   CI (99.9%): [0,031, 0,102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1,253 ±(99.9%) 0,732 B/op [Average]
[info]   (min, avg, max) = (1,161, 1,253, 1,593), stdev = 0,190
[info]   CI (99.9%): [0,521, 1,985] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.count":
[info]   26,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (5,000, 5,200, 6,000), stdev = 0,447
[info]   CI (99.9%): [26,000, 26,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.time":
[info]   16,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 3,200, 4,000), stdev = 0,447
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 48,80% complete, ETA 01:07:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 144911,932 ops/s
[info] # Warmup Iteration   2: 156262,370 ops/s
[info] # Warmup Iteration   3: 157901,963 ops/s
[info] # Warmup Iteration   4: 158181,220 ops/s
[info] # Warmup Iteration   5: 158418,928 ops/s
[info] Iteration   1: 157851,358 ops/s
[info]                  ·gc.alloc.rate:                   1531,401 MB/sec
[info]                  ·gc.alloc.rate.norm:              15264,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022,381 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20157,770 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,208 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 157913,993 ops/s
[info]                  ·gc.alloc.rate:                   1532,180 MB/sec
[info]                  ·gc.alloc.rate.norm:              15264,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1349,470 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13443,793 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,207 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 158026,703 ops/s
[info]                  ·gc.alloc.rate:                   1533,127 MB/sec
[info]                  ·gc.alloc.rate.norm:              15264,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350,714 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13447,875 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,415 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 158133,490 ops/s
[info]                  ·gc.alloc.rate:               1534,229 MB/sec
[info]                  ·gc.alloc.rate.norm:          15264,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1352,043 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13451,442 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 157294,396 ops/s
[info]                  ·gc.alloc.rate:                   1526,095 MB/sec
[info]                  ·gc.alloc.rate.norm:              15264,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2030,338 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20307,446 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,208 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readUPickle":
[info]   157843,988 ±(99.9%) 1253,979 ops/s [Average]
[info]   (min, avg, max) = (157294,396, 157843,988, 158133,490), stdev = 325,654
[info]   CI (99.9%): [156590,009, 159097,967] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1531,406 ±(99.9%) 12,137 MB/sec [Average]
[info]   (min, avg, max) = (1526,095, 1531,406, 1534,229), stdev = 3,152
[info]   CI (99.9%): [1519,269, 1543,543] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   15264,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (15264,003, 15264,003, 15264,003), stdev = 0,001
[info]   CI (99.9%): [15264,002, 15264,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1620,989 ±(99.9%) 1424,980 MB/sec [Average]
[info]   (min, avg, max) = (1349,470, 1620,989, 2030,338), stdev = 370,063
[info]   CI (99.9%): [196,010, 3045,969] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   16161,665 ±(99.9%) 14311,393 B/op [Average]
[info]   (min, avg, max) = (13443,793, 16161,665, 20307,446), stdev = 3716,623
[info]   CI (99.9%): [1850,272, 30473,058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,021 ±(99.9%) 0,057 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,042), stdev = 0,015
[info]   CI (99.9%): [≈ 0, 0,078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,208 ±(99.9%) 0,565 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,208, 0,415), stdev = 0,147
[info]   CI (99.9%): [≈ 0, 0,772] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readUPickle:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readUPickle:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 49,00% complete, ETA 01:07:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 224765,706 ops/s
[info] # Warmup Iteration   2: 280097,143 ops/s
[info] # Warmup Iteration   3: 283431,816 ops/s
[info] # Warmup Iteration   4: 283584,406 ops/s
[info] # Warmup Iteration   5: 281273,742 ops/s
[info] Iteration   1: 281809,457 ops/s
[info]                  ·gc.alloc.rate:                   1859,953 MB/sec
[info]                  ·gc.alloc.rate.norm:              10384,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016,685 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11259,030 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,349 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 283444,042 ops/s
[info]                  ·gc.alloc.rate:                   1870,783 MB/sec
[info]                  ·gc.alloc.rate.norm:              10384,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020,026 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11212,393 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,578 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 281221,202 ops/s
[info]                  ·gc.alloc.rate:                   1856,101 MB/sec
[info]                  ·gc.alloc.rate.norm:              10384,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2024,670 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11327,060 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,466 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 283815,401 ops/s
[info]                  ·gc.alloc.rate:                   1873,196 MB/sec
[info]                  ·gc.alloc.rate.norm:              10384,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1351,390 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7491,385 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,231 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 283824,550 ops/s
[info]                  ·gc.alloc.rate:                   1873,229 MB/sec
[info]                  ·gc.alloc.rate.norm:              10384,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2030,076 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11253,463 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,231 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce":
[info]   282822,931 ±(99.9%) 4702,945 ops/s [Average]
[info]   (min, avg, max) = (281221,202, 282822,931, 283824,550), stdev = 1221,340
[info]   CI (99.9%): [278119,986, 287525,875] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1866,652 ±(99.9%) 31,005 MB/sec [Average]
[info]   (min, avg, max) = (1856,101, 1866,652, 1873,229), stdev = 8,052
[info]   CI (99.9%): [1835,647, 1897,658] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   10384,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (10384,002, 10384,002, 10384,002), stdev = 0,001
[info]   CI (99.9%): [10384,001, 10384,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1888,569 ±(99.9%) 1156,483 MB/sec [Average]
[info]   (min, avg, max) = (1351,390, 1888,569, 2030,076), stdev = 300,335
[info]   CI (99.9%): [732,087, 3045,052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   10508,666 ±(99.9%) 6496,857 B/op [Average]
[info]   (min, avg, max) = (7491,385, 10508,666, 11327,060), stdev = 1687,213
[info]   CI (99.9%): [4011,809, 17005,523] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,067 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,067, 0,104), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,371 ±(99.9%) 0,583 B/op [Average]
[info]   (min, avg, max) = (0,231, 0,371, 0,578), stdev = 0,151
[info]   CI (99.9%): [≈ 0, 0,954] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.time":
[info]   9,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 49,20% complete, ETA 01:07:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 233528,653 ops/s
[info] # Warmup Iteration   2: 1529235,998 ops/s
[info] # Warmup Iteration   3: 1560011,603 ops/s
[info] # Warmup Iteration   4: 1556947,039 ops/s
[info] # Warmup Iteration   5: 1559372,866 ops/s
[info] Iteration   1: 1557035,195 ops/s
[info]                  ·gc.alloc.rate:               530,474 MB/sec
[info]                  ·gc.alloc.rate.norm:          536,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,765 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 517,096 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 1562670,393 ops/s
[info]                  ·gc.alloc.rate:               532,384 MB/sec
[info]                  ·gc.alloc.rate.norm:          536,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664,020 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 668,530 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 1560192,094 ops/s
[info]                  ·gc.alloc.rate:                   531,645 MB/sec
[info]                  ·gc.alloc.rate.norm:              536,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663,797 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     669,235 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,003 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,003 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 1564895,666 ops/s
[info]                  ·gc.alloc.rate:      533,121 MB/sec
[info]                  ·gc.alloc.rate.norm: 536,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1536208,995 ops/s
[info]                  ·gc.alloc.rate:                   523,371 MB/sec
[info]                  ·gc.alloc.rate.norm:              536,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665,397 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     681,454 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,012 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,012 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava":
[info]   1556200,469 ±(99.9%) 44480,989 ops/s [Average]
[info]   (min, avg, max) = (1536208,995, 1556200,469, 1564895,666), stdev = 11551,572
[info]   CI (99.9%): [1511719,479, 1600681,458] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   530,199 ±(99.9%) 15,173 MB/sec [Average]
[info]   (min, avg, max) = (523,371, 530,199, 533,121), stdev = 3,940
[info]   CI (99.9%): [515,026, 545,372] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   536,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (536,000, 536,000, 536,000), stdev = 0,001
[info]   CI (99.9%): [536,000, 536,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   500,996 ±(99.9%) 1108,059 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 500,996, 665,397), stdev = 287,759
[info]   CI (99.9%): [≈ 0, 1609,054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   507,263 ±(99.9%) 1122,641 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 507,263, 681,454), stdev = 291,546
[info]   CI (99.9%): [≈ 0, 1629,904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,003 ±(99.9%) 0,020 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,003, 0,012), stdev = 0,005
[info]   CI (99.9%): [≈ 0, 0,022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0,003 ±(99.9%) 0,020 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,003, 0,012), stdev = 0,005
[info]   CI (99.9%): [≈ 0, 0,023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,400, 2,000), stdev = 0,894
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 49,40% complete, ETA 01:07:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1123119,873 ops/s
[info] # Warmup Iteration   2: 1452308,086 ops/s
[info] # Warmup Iteration   3: 1471693,668 ops/s
[info] # Warmup Iteration   4: 1447476,140 ops/s
[info] # Warmup Iteration   5: 1469480,279 ops/s
[info] Iteration   1: 1477776,013 ops/s
[info]                  ·gc.alloc.rate:                   864,125 MB/sec
[info]                  ·gc.alloc.rate.norm:              920,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668,004 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     711,198 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,089 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 1479230,487 ops/s
[info]                  ·gc.alloc.rate:                   864,983 MB/sec
[info]                  ·gc.alloc.rate.norm:              920,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336,669 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1421,687 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,044 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 1479351,894 ops/s
[info]                  ·gc.alloc.rate:               865,062 MB/sec
[info]                  ·gc.alloc.rate.norm:          920,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668,339 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 710,785 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 1476810,633 ops/s
[info]                  ·gc.alloc.rate:                   863,571 MB/sec
[info]                  ·gc.alloc.rate.norm:              920,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668,351 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     712,024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,044 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 1469533,901 ops/s
[info]                  ·gc.alloc.rate:                   859,288 MB/sec
[info]                  ·gc.alloc.rate.norm:              920,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338,679 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1433,263 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,022 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala":
[info]   1476540,586 ±(99.9%) 15621,452 ops/s [Average]
[info]   (min, avg, max) = (1469533,901, 1476540,586, 1479351,894), stdev = 4056,842
[info]   CI (99.9%): [1460919,133, 1492162,038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   863,406 ±(99.9%) 9,180 MB/sec [Average]
[info]   (min, avg, max) = (859,288, 863,406, 865,062), stdev = 2,384
[info]   CI (99.9%): [854,226, 872,585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   920,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (920,000, 920,000, 920,000), stdev = 0,001
[info]   CI (99.9%): [920,000, 920,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   936,009 ±(99.9%) 1411,913 MB/sec [Average]
[info]   (min, avg, max) = (668,004, 936,009, 1338,679), stdev = 366,669
[info]   CI (99.9%): [≈ 0, 2347,922] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   997,791 ±(99.9%) 1510,482 B/op [Average]
[info]   (min, avg, max) = (710,785, 997,791, 1433,263), stdev = 392,267
[info]   CI (99.9%): [≈ 0, 2508,273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,119 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,083), stdev = 0,031
[info]   CI (99.9%): [≈ 0, 0,156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,040 ±(99.9%) 0,127 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,040, 0,089), stdev = 0,033
[info]   CI (99.9%): [≈ 0, 0,166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 49,60% complete, ETA 01:06:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1448735,567 ops/s
[info] # Warmup Iteration   2: 1258012,491 ops/s
[info] # Warmup Iteration   3: 1521685,444 ops/s
[info] # Warmup Iteration   4: 1523891,038 ops/s
[info] # Warmup Iteration   5: 1287010,230 ops/s
[info] Iteration   1: 1523607,497 ops/s
[info]                  ·gc.alloc.rate:                   519,072 MB/sec
[info]                  ·gc.alloc.rate.norm:              536,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,752 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     528,442 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,011 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 1522916,579 ops/s
[info]                  ·gc.alloc.rate:               518,846 MB/sec
[info]                  ·gc.alloc.rate.norm:          536,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,769 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 528,689 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 1521671,416 ops/s
[info]                  ·gc.alloc.rate:                   518,433 MB/sec
[info]                  ·gc.alloc.rate.norm:              536,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,720 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     696,549 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1,616 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,671 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 1526615,839 ops/s
[info]                  ·gc.alloc.rate:                   520,120 MB/sec
[info]                  ·gc.alloc.rate.norm:              536,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,757 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     694,329 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,064 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 1527887,770 ops/s
[info]                  ·gc.alloc.rate:      520,537 MB/sec
[info]                  ·gc.alloc.rate.norm: 536,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala":
[info]   1524539,820 ±(99.9%) 10050,569 ops/s [Average]
[info]   (min, avg, max) = (1521671,416, 1524539,820, 1527887,770), stdev = 2610,101
[info]   CI (99.9%): [1514489,251, 1534590,389] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   519,402 ±(99.9%) 3,423 MB/sec [Average]
[info]   (min, avg, max) = (518,433, 519,402, 520,537), stdev = 0,889
[info]   CI (99.9%): [515,979, 522,825] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   536,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (536,000, 536,000, 536,000), stdev = 0,001
[info]   CI (99.9%): [536,000, 536,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   474,200 ±(99.9%) 1067,328 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 474,200, 673,757), stdev = 277,182
[info]   CI (99.9%): [≈ 0, 1541,527] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   489,602 ±(99.9%) 1101,793 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 489,602, 696,549), stdev = 286,132
[info]   CI (99.9%): [≈ 0, 1591,395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,338 ±(99.9%) 2,754 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,338, 1,616), stdev = 0,715
[info]   CI (99.9%): [≈ 0, 3,091] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,349 ±(99.9%) 2,847 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,349, 1,671), stdev = 0,739
[info]   CI (99.9%): [≈ 0, 3,196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 49,80% complete, ETA 01:06:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1474089,413 ops/s
[info] # Warmup Iteration   2: 1567612,605 ops/s
[info] # Warmup Iteration   3: 1542338,598 ops/s
[info] # Warmup Iteration   4: 1541193,713 ops/s
[info] # Warmup Iteration   5: 1532544,263 ops/s
[info] Iteration   1: 1543957,918 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1541655,826 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1542237,468 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1542262,154 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1257007,746 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc":
[info]   1485424,223 ±(99.9%) 491694,847 ops/s [Average]
[info]   (min, avg, max) = (1257007,746, 1485424,223, 1543957,918), stdev = 127691,590
[info]   CI (99.9%): [993729,376, 1977119,069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 50,00% complete, ETA 01:06:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 30312,689 ops/s
[info] # Warmup Iteration   2: 38706,831 ops/s
[info] # Warmup Iteration   3: 38284,739 ops/s
[info] # Warmup Iteration   4: 38941,606 ops/s
[info] # Warmup Iteration   5: 39024,634 ops/s
[info] Iteration   1: 38791,182 ops/s
[info]                  ·gc.alloc.rate:                   1872,494 MB/sec
[info]                  ·gc.alloc.rate.norm:              75944,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014,727 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     81712,661 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,845 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 38989,261 ops/s
[info]                  ·gc.alloc.rate:                   1882,062 MB/sec
[info]                  ·gc.alloc.rate.norm:              75944,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018,020 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     81430,135 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,201 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 38957,543 ops/s
[info]                  ·gc.alloc.rate:                   1880,523 MB/sec
[info]                  ·gc.alloc.rate.norm:              75944,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022,742 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     81687,475 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,682 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 38956,133 ops/s
[info]                  ·gc.alloc.rate:                   1880,479 MB/sec
[info]                  ·gc.alloc.rate.norm:              75944,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2026,079 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     81824,128 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,205 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 38556,002 ops/s
[info]                  ·gc.alloc.rate:                   1861,068 MB/sec
[info]                  ·gc.alloc.rate.norm:              75944,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,676 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55198,228 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,699 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson":
[info]   38850,024 ±(99.9%) 699,816 ops/s [Average]
[info]   (min, avg, max) = (38556,002, 38850,024, 38989,261), stdev = 181,740
[info]   CI (99.9%): [38150,208, 39549,840] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1875,325 ±(99.9%) 33,912 MB/sec [Average]
[info]   (min, avg, max) = (1861,068, 1875,325, 1882,062), stdev = 8,807
[info]   CI (99.9%): [1841,413, 1909,237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   75944,011 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (75944,011, 75944,011, 75944,011), stdev = 0,001
[info]   CI (99.9%): [75944,011, 75944,011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1886,849 ±(99.9%) 1149,969 MB/sec [Average]
[info]   (min, avg, max) = (1352,676, 1886,849, 2026,079), stdev = 298,643
[info]   CI (99.9%): [736,880, 3036,818] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   76370,525 ±(99.9%) 45578,351 B/op [Average]
[info]   (min, avg, max) = (55198,228, 76370,525, 81824,128), stdev = 11836,553
[info]   CI (99.9%): [30792,174, 121948,877] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,062 ±(99.9%) 0,150 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,062, 0,104), stdev = 0,039
[info]   CI (99.9%): [≈ 0, 0,212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2,526 ±(99.9%) 6,042 B/op [Average]
[info]   (min, avg, max) = (0,845, 2,526, 4,205), stdev = 1,569
[info]   CI (99.9%): [≈ 0, 8,568] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.time":
[info]   9,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 50,20% complete, ETA 01:06:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 125612,349 ops/s
[info] # Warmup Iteration   2: 133222,889 ops/s
[info] # Warmup Iteration   3: 134370,475 ops/s
[info] # Warmup Iteration   4: 133778,323 ops/s
[info] # Warmup Iteration   5: 132129,507 ops/s
[info] Iteration   1: 134056,374 ops/s
[info]                  ·gc.alloc.rate:                   1205,206 MB/sec
[info]                  ·gc.alloc.rate.norm:              14144,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,782 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15828,979 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,244 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 134207,797 ops/s
[info]                  ·gc.alloc.rate:               1206,476 MB/sec
[info]                  ·gc.alloc.rate.norm:          14144,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,342 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7905,586 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 133086,099 ops/s
[info]                  ·gc.alloc.rate:                   1196,421 MB/sec
[info]                  ·gc.alloc.rate.norm:              14144,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1349,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15948,268 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,985 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 133495,029 ops/s
[info]                  ·gc.alloc.rate:               1200,150 MB/sec
[info]                  ·gc.alloc.rate.norm:          14144,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1350,100 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15911,195 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 134373,963 ops/s
[info]                  ·gc.alloc.rate:                   1207,986 MB/sec
[info]                  ·gc.alloc.rate.norm:              14144,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350,997 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15818,480 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,731 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeUPickle":
[info]   133843,852 ±(99.9%) 2068,719 ops/s [Average]
[info]   (min, avg, max) = (133086,099, 133843,852, 134373,963), stdev = 537,240
[info]   CI (99.9%): [131775,133, 135912,571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   1203,248 ±(99.9%) 18,557 MB/sec [Average]
[info]   (min, avg, max) = (1196,421, 1203,248, 1207,986), stdev = 4,819
[info]   CI (99.9%): [1184,691, 1221,805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   14144,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (14144,003, 14144,003, 14144,003), stdev = 0,001
[info]   CI (99.9%): [14144,003, 14144,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   1214,653 ±(99.9%) 1163,064 MB/sec [Average]
[info]   (min, avg, max) = (674,342, 1214,653, 1350,997), stdev = 302,044
[info]   CI (99.9%): [51,589, 2377,716] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   14282,502 ±(99.9%) 13728,409 B/op [Average]
[info]   (min, avg, max) = (7905,586, 14282,502, 15948,268), stdev = 3565,224
[info]   CI (99.9%): [554,093, 28010,910] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,146 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,083), stdev = 0,038
[info]   CI (99.9%): [≈ 0, 0,179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,392 ±(99.9%) 1,717 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,392, 0,985), stdev = 0,446
[info]   CI (99.9%): [≈ 0, 2,109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeUPickle:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeUPickle:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 50,40% complete, ETA 01:05:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16910,343 ops/s
[info] # Warmup Iteration   2: 19904,364 ops/s
[info] # Warmup Iteration   3: 19696,467 ops/s
[info] # Warmup Iteration   4: 19981,271 ops/s
[info] # Warmup Iteration   5: 19845,768 ops/s
[info] Iteration   1: 20080,697 ops/s
[info]                  ·gc.alloc.rate:                   2108,361 MB/sec
[info]                  ·gc.alloc.rate.norm:              165183,052 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022,831 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     158481,998 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,263 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 19584,679 ops/s
[info]                  ·gc.alloc.rate:                   2056,457 MB/sec
[info]                  ·gc.alloc.rate.norm:              165200,022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2026,013 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     162754,369 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,018 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 20089,726 ops/s
[info]                  ·gc.alloc.rate:                   2109,472 MB/sec
[info]                  ·gc.alloc.rate.norm:              165200,021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029,576 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     158943,145 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,892 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 20122,157 ops/s
[info]                  ·gc.alloc.rate:               2112,984 MB/sec
[info]                  ·gc.alloc.rate.norm:          165200,021 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2710,407 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 211908,525 B/op
[info]                  ·gc.count:                    4,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   5: 19977,808 ops/s
[info]                  ·gc.alloc.rate:                   2097,696 MB/sec
[info]                  ·gc.alloc.rate.norm:              165200,022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2035,324 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     160288,029 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,640 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce":
[info]   19971,013 ±(99.9%) 857,294 ops/s [Average]
[info]   (min, avg, max) = (19584,679, 19971,013, 20122,157), stdev = 222,637
[info]   CI (99.9%): [19113,719, 20828,308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate":
[info]   2096,994 ±(99.9%) 89,983 MB/sec [Average]
[info]   (min, avg, max) = (2056,457, 2096,994, 2112,984), stdev = 23,368
[info]   CI (99.9%): [2007,011, 2186,977] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   165196,628 ±(99.9%) 29,223 B/op [Average]
[info]   (min, avg, max) = (165183,052, 165196,628, 165200,022), stdev = 7,589
[info]   CI (99.9%): [165167,404, 165225,851] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2164,830 ±(99.9%) 1174,531 MB/sec [Average]
[info]   (min, avg, max) = (2022,831, 2164,830, 2710,407), stdev = 305,022
[info]   CI (99.9%): [990,300, 3339,361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   170475,213 ±(99.9%) 89417,377 B/op [Average]
[info]   (min, avg, max) = (158481,998, 170475,213, 211908,525), stdev = 23221,409
[info]   CI (99.9%): [81057,837, 259892,590] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2,963 ±(99.9%) 8,296 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,963, 5,018), stdev = 2,154
[info]   CI (99.9%): [≈ 0, 11,258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.count":
[info]   16,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,200, 4,000), stdev = 0,447
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.time":
[info]   10,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 50,60% complete, ETA 01:05:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 74757,205 ops/s
[info] # Warmup Iteration   2: 106761,389 ops/s
[info] # Warmup Iteration   3: 101090,492 ops/s
[info] # Warmup Iteration   4: 106610,356 ops/s
[info] # Warmup Iteration   5: 106832,624 ops/s
[info] Iteration   1: 107345,141 ops/s
[info]                  ·gc.alloc.rate:                   1409,430 MB/sec
[info]                  ·gc.alloc.rate.norm:              20656,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337,525 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19602,199 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,916 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 107032,300 ops/s
[info]                  ·gc.alloc.rate:                   1405,363 MB/sec
[info]                  ·gc.alloc.rate.norm:              20656,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339,244 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19684,187 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,224 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 106941,849 ops/s
[info]                  ·gc.alloc.rate:                   1404,039 MB/sec
[info]                  ·gc.alloc.rate.norm:              20656,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,749 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19724,891 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,306 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 96322,665 ops/s
[info]                  ·gc.alloc.rate:                   1264,676 MB/sec
[info]                  ·gc.alloc.rate.norm:              20656,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,713 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21930,589 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,360 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 107321,819 ops/s
[info]                  ·gc.alloc.rate:               1409,009 MB/sec
[info]                  ·gc.alloc.rate.norm:          20656,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345,026 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19718,008 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala":
[info]   104992,755 ±(99.9%) 18675,369 ops/s [Average]
[info]   (min, avg, max) = (96322,665, 104992,755, 107345,141), stdev = 4849,934
[info]   CI (99.9%): [86317,386, 123668,123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1378,504 ±(99.9%) 245,184 MB/sec [Average]
[info]   (min, avg, max) = (1264,676, 1378,504, 1409,430), stdev = 63,673
[info]   CI (99.9%): [1133,320, 1623,687] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   20656,004 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (20656,004, 20656,004, 20656,004), stdev = 0,001
[info]   CI (99.9%): [20656,003, 20656,005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1341,051 ±(99.9%) 11,284 MB/sec [Average]
[info]   (min, avg, max) = (1337,525, 1341,051, 1345,026), stdev = 2,930
[info]   CI (99.9%): [1329,768, 1352,335] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   20131,975 ±(99.9%) 3876,202 B/op [Average]
[info]   (min, avg, max) = (19602,199, 20131,975, 21930,589), stdev = 1006,637
[info]   CI (99.9%): [16255,773, 24008,177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,050 ±(99.9%) 0,146 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,050, 0,083), stdev = 0,038
[info]   CI (99.9%): [≈ 0, 0,196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,761 ±(99.9%) 2,265 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,761, 1,360), stdev = 0,588
[info]   CI (99.9%): [≈ 0, 3,026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 50,80% complete, ETA 01:05:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 295236,528 ops/s
[info] # Warmup Iteration   2: 313615,094 ops/s
[info] # Warmup Iteration   3: 311793,808 ops/s
[info] # Warmup Iteration   4: 313593,675 ops/s
[info] # Warmup Iteration   5: 310391,527 ops/s
[info] Iteration   1: 313704,002 ops/s
[info]                  ·gc.alloc.rate:               1020,869 MB/sec
[info]                  ·gc.alloc.rate.norm:          5120,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,022 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3375,431 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   2: 313219,024 ops/s
[info]                  ·gc.alloc.rate:                   1019,286 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,708 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6764,683 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,314 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 306317,548 ops/s
[info]                  ·gc.alloc.rate:               996,863 MB/sec
[info]                  ·gc.alloc.rate.norm:          5120,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,688 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3460,139 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 309094,060 ops/s
[info]                  ·gc.alloc.rate:                   1005,846 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,016 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6861,729 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,212 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 313057,579 ops/s
[info]                  ·gc.alloc.rate:               1018,762 MB/sec
[info]                  ·gc.alloc.rate.norm:          5120,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,351 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3389,093 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala":
[info]   311078,443 ±(99.9%) 12476,995 ops/s [Average]
[info]   (min, avg, max) = (306317,548, 311078,443, 313704,002), stdev = 3240,236
[info]   CI (99.9%): [298601,447, 323555,438] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1012,325 ±(99.9%) 40,567 MB/sec [Average]
[info]   (min, avg, max) = (996,863, 1012,325, 1020,869), stdev = 10,535
[info]   CI (99.9%): [971,759, 1052,892] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   5120,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (5120,001, 5120,001, 5120,001), stdev = 0,001
[info]   CI (99.9%): [5120,001, 5120,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   943,157 ±(99.9%) 1420,839 MB/sec [Average]
[info]   (min, avg, max) = (673,022, 943,157, 1348,016), stdev = 368,987
[info]   CI (99.9%): [≈ 0, 2363,996] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4770,215 ±(99.9%) 7183,684 B/op [Average]
[info]   (min, avg, max) = (3375,431, 4770,215, 6861,729), stdev = 1865,580
[info]   CI (99.9%): [≈ 0, 11953,898] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,021 ±(99.9%) 0,113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,062), stdev = 0,029
[info]   CI (99.9%): [≈ 0, 0,134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,105 ±(99.9%) 0,572 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,105, 0,314), stdev = 0,148
[info]   CI (99.9%): [≈ 0, 0,677] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 51,00% complete, ETA 01:04:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12515,848 ops/s
[info] # Warmup Iteration   2: 18610,692 ops/s
[info] # Warmup Iteration   3: 18881,895 ops/s
[info] # Warmup Iteration   4: 19093,518 ops/s
[info] # Warmup Iteration   5: 19138,217 ops/s
[info] Iteration   1: 18401,740 ops/s
[info]                  ·gc.alloc.rate:                   2346,971 MB/sec
[info]                  ·gc.alloc.rate.norm:              200640,032 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018,838 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     172588,340 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,561 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 18999,069 ops/s
[info]                  ·gc.alloc.rate:                   2423,170 MB/sec
[info]                  ·gc.alloc.rate.norm:              200640,024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2697,786 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     223378,363 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6,898 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 18995,129 ops/s
[info]                  ·gc.alloc.rate:                   2422,430 MB/sec
[info]                  ·gc.alloc.rate.norm:              200640,023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2704,242 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     223981,352 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,449 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 19055,141 ops/s
[info]                  ·gc.alloc.rate:                   2430,105 MB/sec
[info]                  ·gc.alloc.rate.norm:              200640,023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2032,390 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     167802,970 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,158 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 19130,186 ops/s
[info]                  ·gc.alloc.rate:                   2439,745 MB/sec
[info]                  ·gc.alloc.rate.norm:              200640,023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2713,352 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     223140,918 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,137 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson":
[info]   18916,253 ±(99.9%) 1127,360 ops/s [Average]
[info]   (min, avg, max) = (18401,740, 18916,253, 19130,186), stdev = 292,772
[info]   CI (99.9%): [17788,893, 20043,613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2412,484 ±(99.9%) 143,546 MB/sec [Average]
[info]   (min, avg, max) = (2346,971, 2412,484, 2439,745), stdev = 37,279
[info]   CI (99.9%): [2268,938, 2556,031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   200640,025 ±(99.9%) 0,016 B/op [Average]
[info]   (min, avg, max) = (200640,023, 200640,025, 200640,032), stdev = 0,004
[info]   CI (99.9%): [200640,009, 200640,041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2433,322 ±(99.9%) 1433,426 MB/sec [Average]
[info]   (min, avg, max) = (2018,838, 2433,322, 2713,352), stdev = 372,256
[info]   CI (99.9%): [999,896, 3866,747] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   202178,389 ±(99.9%) 112618,600 B/op [Average]
[info]   (min, avg, max) = (167802,970, 202178,389, 223981,352), stdev = 29246,693
[info]   CI (99.9%): [89559,789, 314796,989] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,058 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,058, 0,083), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   4,841 ±(99.9%) 5,444 B/op [Average]
[info]   (min, avg, max) = (3,449, 4,841, 6,898), stdev = 1,414
[info]   CI (99.9%): [≈ 0, 10,285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.count":
[info]   18,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,600, 4,000), stdev = 0,548
[info]   CI (99.9%): [18,000, 18,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.time":
[info]   11,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 51,20% complete, ETA 01:04:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15436,569 ops/s
[info] # Warmup Iteration   2: 17281,888 ops/s
[info] # Warmup Iteration   3: 17156,535 ops/s
[info] # Warmup Iteration   4: 17327,973 ops/s
[info] # Warmup Iteration   5: 16641,879 ops/s
[info] Iteration   1: 17192,142 ops/s
[info]                  ·gc.alloc.rate:               1750,170 MB/sec
[info]                  ·gc.alloc.rate.norm:          160152,025 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1348,827 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 123426,451 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 16853,266 ops/s
[info]                  ·gc.alloc.rate:                   1715,535 MB/sec
[info]                  ·gc.alloc.rate.norm:              160140,161 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2025,901 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     189111,951 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9,720 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 17357,315 ops/s
[info]                  ·gc.alloc.rate:                   1766,642 MB/sec
[info]                  ·gc.alloc.rate.norm:              160128,025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,115 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     122555,340 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,663 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 17121,005 ops/s
[info]                  ·gc.alloc.rate:               1742,610 MB/sec
[info]                  ·gc.alloc.rate.norm:          160128,025 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2030,368 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 186569,990 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   5: 17315,787 ops/s
[info]                  ·gc.alloc.rate:                   1762,416 MB/sec
[info]                  ·gc.alloc.rate.norm:              160128,025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2033,441 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     184752,564 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,676 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readUPickle":
[info]   17167,903 ±(99.9%) 768,997 ops/s [Average]
[info]   (min, avg, max) = (16853,266, 17167,903, 17357,315), stdev = 199,706
[info]   CI (99.9%): [16398,906, 17936,900] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1747,475 ±(99.9%) 78,011 MB/sec [Average]
[info]   (min, avg, max) = (1715,535, 1747,475, 1766,642), stdev = 20,259
[info]   CI (99.9%): [1669,464, 1825,485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   160135,252 ±(99.9%) 41,389 B/op [Average]
[info]   (min, avg, max) = (160128,025, 160135,252, 160152,025), stdev = 10,749
[info]   CI (99.9%): [160093,863, 160176,641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1758,130 ±(99.9%) 1433,025 MB/sec [Average]
[info]   (min, avg, max) = (1348,827, 1758,130, 2033,441), stdev = 372,152
[info]   CI (99.9%): [325,105, 3191,155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   161283,259 ±(99.9%) 134740,253 B/op [Average]
[info]   (min, avg, max) = (122555,340, 161283,259, 189111,951), stdev = 34991,616
[info]   CI (99.9%): [26543,006, 296023,513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,046 ±(99.9%) 0,174 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,046, 0,104), stdev = 0,045
[info]   CI (99.9%): [≈ 0, 0,220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   4,212 ±(99.9%) 16,116 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4,212, 9,720), stdev = 4,185
[info]   CI (99.9%): [≈ 0, 20,328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readUPickle:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readUPickle:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 51,41% complete, ETA 01:04:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17369,176 ops/s
[info] # Warmup Iteration   2: 22530,470 ops/s
[info] # Warmup Iteration   3: 22640,413 ops/s
[info] # Warmup Iteration   4: 22597,370 ops/s
[info] # Warmup Iteration   5: 22484,501 ops/s
[info] Iteration   1: 22622,317 ops/s
[info]                  ·gc.alloc.rate:                   1831,266 MB/sec
[info]                  ·gc.alloc.rate.norm:              127355,539 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016,639 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     140247,272 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,344 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 22489,240 ops/s
[info]                  ·gc.alloc.rate:                   1820,432 MB/sec
[info]                  ·gc.alloc.rate.norm:              127352,021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019,371 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     141269,208 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,827 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 22452,234 ops/s
[info]                  ·gc.alloc.rate:                   1817,464 MB/sec
[info]                  ·gc.alloc.rate.norm:              127352,019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,711 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94505,848 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,918 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 22581,853 ops/s
[info]                  ·gc.alloc.rate:               1827,824 MB/sec
[info]                  ·gc.alloc.rate.norm:          127352,019 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2026,642 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 141204,459 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   5: 22685,976 ops/s
[info]                  ·gc.alloc.rate:                   1836,271 MB/sec
[info]                  ·gc.alloc.rate.norm:              127352,019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029,252 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     140735,896 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,888 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce":
[info]   22566,324 ±(99.9%) 368,595 ops/s [Average]
[info]   (min, avg, max) = (22452,234, 22566,324, 22685,976), stdev = 95,723
[info]   CI (99.9%): [22197,729, 22934,919] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1826,652 ±(99.9%) 29,721 MB/sec [Average]
[info]   (min, avg, max) = (1817,464, 1826,652, 1836,271), stdev = 7,718
[info]   CI (99.9%): [1796,930, 1856,373] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   127352,723 ±(99.9%) 6,061 B/op [Average]
[info]   (min, avg, max) = (127352,019, 127352,723, 127355,539), stdev = 1,574
[info]   CI (99.9%): [127346,663, 127358,784] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1888,123 ±(99.9%) 1161,294 MB/sec [Average]
[info]   (min, avg, max) = (1348,711, 1888,123, 2029,252), stdev = 301,584
[info]   CI (99.9%): [726,828, 3049,417] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   131592,536 ±(99.9%) 79847,607 B/op [Average]
[info]   (min, avg, max) = (94505,848, 131592,536, 141269,208), stdev = 20736,170
[info]   CI (99.9%): [51744,930, 211440,143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,046 ±(99.9%) 0,119 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,046, 0,083), stdev = 0,031
[info]   CI (99.9%): [≈ 0, 0,165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3,196 ±(99.9%) 8,310 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3,196, 5,827), stdev = 2,158
[info]   CI (99.9%): [≈ 0, 11,505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.time":
[info]   9,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 51,61% complete, ETA 01:04:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 71216,623 ops/s
[info] # Warmup Iteration   2: 98108,655 ops/s
[info] # Warmup Iteration   3: 98018,286 ops/s
[info] # Warmup Iteration   4: 98392,299 ops/s
[info] # Warmup Iteration   5: 98290,169 ops/s
[info] Iteration   1: 98310,093 ops/s
[info]                  ·gc.alloc.rate:                   1347,237 MB/sec
[info]                  ·gc.alloc.rate.norm:              21560,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336,691 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21391,240 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,666 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 95102,511 ops/s
[info]                  ·gc.alloc.rate:               1303,257 MB/sec
[info]                  ·gc.alloc.rate.norm:          21559,984 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338,011 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 22134,926 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 98036,744 ops/s
[info]                  ·gc.alloc.rate:                   1343,482 MB/sec
[info]                  ·gc.alloc.rate.norm:              21560,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,022 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21504,480 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,334 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 98339,076 ops/s
[info]                  ·gc.alloc.rate:               1347,595 MB/sec
[info]                  ·gc.alloc.rate.norm:          21560,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342,385 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21476,639 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 98331,585 ops/s
[info]                  ·gc.alloc.rate:                   1347,433 MB/sec
[info]                  ·gc.alloc.rate.norm:              21560,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,303 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21509,935 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,666 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala":
[info]   97624,002 ±(99.9%) 5449,375 ops/s [Average]
[info]   (min, avg, max) = (95102,511, 97624,002, 98339,076), stdev = 1415,185
[info]   CI (99.9%): [92174,627, 103073,377] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1337,801 ±(99.9%) 74,650 MB/sec [Average]
[info]   (min, avg, max) = (1303,257, 1337,801, 1347,595), stdev = 19,386
[info]   CI (99.9%): [1263,151, 1412,451] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   21560,000 ±(99.9%) 0,036 B/op [Average]
[info]   (min, avg, max) = (21559,984, 21560,000, 21560,005), stdev = 0,009
[info]   CI (99.9%): [21559,964, 21560,036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1340,282 ±(99.9%) 11,979 MB/sec [Average]
[info]   (min, avg, max) = (1336,691, 1340,282, 1344,303), stdev = 3,111
[info]   CI (99.9%): [1328,303, 1352,262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   21603,444 ±(99.9%) 1158,591 B/op [Average]
[info]   (min, avg, max) = (21391,240, 21603,444, 22134,926), stdev = 300,882
[info]   CI (99.9%): [20444,853, 22762,036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,021 ±(99.9%) 0,080 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,042), stdev = 0,021
[info]   CI (99.9%): [≈ 0, 0,101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,333 ±(99.9%) 1,283 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,333, 0,666), stdev = 0,333
[info]   CI (99.9%): [≈ 0, 1,616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 51,81% complete, ETA 01:03:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 353305,088 ops/s
[info] # Warmup Iteration   2: 365606,298 ops/s
[info] # Warmup Iteration   3: 356700,890 ops/s
[info] # Warmup Iteration   4: 352324,021 ops/s
[info] # Warmup Iteration   5: 357131,319 ops/s
[info] Iteration   1: 354920,451 ops/s
[info]                  ·gc.alloc.rate:               1131,541 MB/sec
[info]                  ·gc.alloc.rate.norm:          5016,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,362 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2984,943 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 356093,538 ops/s
[info]                  ·gc.alloc.rate:                   1135,327 MB/sec
[info]                  ·gc.alloc.rate.norm:              5016,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,068 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5951,495 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,368 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 356534,666 ops/s
[info]                  ·gc.alloc.rate:                   1136,748 MB/sec
[info]                  ·gc.alloc.rate.norm:              5016,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,759 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5947,109 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,184 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 357303,934 ops/s
[info]                  ·gc.alloc.rate:               1139,145 MB/sec
[info]                  ·gc.alloc.rate.norm:          5016,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,041 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2968,006 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 357015,365 ops/s
[info]                  ·gc.alloc.rate:                   1138,283 MB/sec
[info]                  ·gc.alloc.rate.norm:              5016,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1349,503 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5946,772 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,275 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala":
[info]   356373,591 ±(99.9%) 3598,551 ops/s [Average]
[info]   (min, avg, max) = (354920,451, 356373,591, 357303,934), stdev = 934,532
[info]   CI (99.9%): [352775,039, 359972,142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1136,209 ±(99.9%) 11,517 MB/sec [Average]
[info]   (min, avg, max) = (1131,541, 1136,209, 1139,145), stdev = 2,991
[info]   CI (99.9%): [1124,692, 1147,725] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   5016,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (5016,001, 5016,001, 5016,001), stdev = 0,001
[info]   CI (99.9%): [5016,001, 5016,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1078,347 ±(99.9%) 1422,389 MB/sec [Average]
[info]   (min, avg, max) = (673,362, 1078,347, 1349,503), stdev = 369,390
[info]   CI (99.9%): [≈ 0, 2500,736] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4759,665 ±(99.9%) 6268,213 B/op [Average]
[info]   (min, avg, max) = (2968,006, 4759,665, 5951,495), stdev = 1627,835
[info]   CI (99.9%): [≈ 0, 11027,878] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,083), stdev = 0,037
[info]   CI (99.9%): [≈ 0, 0,181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,165 ±(99.9%) 0,633 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,165, 0,368), stdev = 0,164
[info]   CI (99.9%): [≈ 0, 0,799] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 52,01% complete, ETA 01:03:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 388411,030 ops/s
[info] # Warmup Iteration   2: 407500,276 ops/s
[info] # Warmup Iteration   3: 419256,999 ops/s
[info] # Warmup Iteration   4: 419206,323 ops/s
[info] # Warmup Iteration   5: 419267,321 ops/s
[info] Iteration   1: 419738,907 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 418829,474 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 419092,713 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 419094,528 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 419395,157 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc":
[info]   419230,156 ±(99.9%) 1339,289 ops/s [Average]
[info]   (min, avg, max) = (418829,474, 419230,156, 419738,907), stdev = 347,809
[info]   CI (99.9%): [417890,867, 420569,445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (0,001, 0,001, 0,001), stdev = 0,001
[info]   CI (99.9%): [0,001, 0,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 52,21% complete, ETA 01:03:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22042,579 ops/s
[info] # Warmup Iteration   2: 28529,929 ops/s
[info] # Warmup Iteration   3: 28535,752 ops/s
[info] # Warmup Iteration   4: 28700,170 ops/s
[info] # Warmup Iteration   5: 28962,043 ops/s
[info] Iteration   1: 28735,501 ops/s
[info]                  ·gc.alloc.rate:                   1959,568 MB/sec
[info]                  ·gc.alloc.rate.norm:              107288,016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015,328 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     110340,899 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,420 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 28917,495 ops/s
[info]                  ·gc.alloc.rate:                   1971,973 MB/sec
[info]                  ·gc.alloc.rate.norm:              107288,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019,988 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     109900,365 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,133 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 28819,891 ops/s
[info]                  ·gc.alloc.rate:                   1965,413 MB/sec
[info]                  ·gc.alloc.rate.norm:              107288,084 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2023,374 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     110452,042 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,547 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 28780,700 ops/s
[info]                  ·gc.alloc.rate:                   1962,586 MB/sec
[info]                  ·gc.alloc.rate.norm:              107287,946 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2027,604 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     110842,282 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,277 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 28747,555 ops/s
[info]                  ·gc.alloc.rate:                   1960,365 MB/sec
[info]                  ·gc.alloc.rate.norm:              107288,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2030,298 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     111115,360 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,140 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson":
[info]   28800,228 ±(99.9%) 282,201 ops/s [Average]
[info]   (min, avg, max) = (28735,501, 28800,228, 28917,495), stdev = 73,287
[info]   CI (99.9%): [28518,028, 29082,429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1963,981 ±(99.9%) 19,293 MB/sec [Average]
[info]   (min, avg, max) = (1959,568, 1963,981, 1971,973), stdev = 5,010
[info]   CI (99.9%): [1944,688, 1983,274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   107288,015 ±(99.9%) 0,189 B/op [Average]
[info]   (min, avg, max) = (107287,946, 107288,015, 107288,084), stdev = 0,049
[info]   CI (99.9%): [107287,826, 107288,204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2023,318 ±(99.9%) 22,945 MB/sec [Average]
[info]   (min, avg, max) = (2015,328, 2023,318, 2030,298), stdev = 5,959
[info]   CI (99.9%): [2000,373, 2046,264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   110530,190 ±(99.9%) 1804,515 B/op [Average]
[info]   (min, avg, max) = (109900,365, 110530,190, 111115,360), stdev = 468,627
[info]   CI (99.9%): [108725,675, 112334,704] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,046 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,046, 0,083), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2,503 ±(99.9%) 5,713 B/op [Average]
[info]   (min, avg, max) = (1,133, 2,503, 4,547), stdev = 1,484
[info]   CI (99.9%): [≈ 0, 8,217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.count":
[info]   15,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,000, 3,000), stdev = 0,001
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.time":
[info]   9,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 52,41% complete, ETA 01:03:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8125,864 ops/s
[info] # Warmup Iteration   2: 8646,211 ops/s
[info] # Warmup Iteration   3: 8382,867 ops/s
[info] # Warmup Iteration   4: 8473,639 ops/s
[info] # Warmup Iteration   5: 8456,375 ops/s
[info] Iteration   1: 8447,238 ops/s
[info]                  ·gc.alloc.rate:                   866,868 MB/sec
[info]                  ·gc.alloc.rate.norm:              161448,051 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,905 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     251223,919 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23,267 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 8399,481 ops/s
[info]                  ·gc.alloc.rate:               861,999 MB/sec
[info]                  ·gc.alloc.rate.norm:          161448,051 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,329 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 126298,371 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 8640,835 ops/s
[info]                  ·gc.alloc.rate:                   886,785 MB/sec
[info]                  ·gc.alloc.rate.norm:              161469,667 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,285 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     122776,688 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,791 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 8445,045 ops/s
[info]                  ·gc.alloc.rate:                   866,803 MB/sec
[info]                  ·gc.alloc.rate.norm:              161472,051 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,748 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     251251,074 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7,758 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 8554,923 ops/s
[info]                  ·gc.alloc.rate:               878,004 MB/sec
[info]                  ·gc.alloc.rate.norm:          161472,050 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,308 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 124010,624 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeUPickle":
[info]   8497,504 ±(99.9%) 378,892 ops/s [Average]
[info]   (min, avg, max) = (8399,481, 8497,504, 8640,835), stdev = 98,397
[info]   CI (99.9%): [8118,613, 8876,396] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   872,092 ±(99.9%) 38,888 MB/sec [Average]
[info]   (min, avg, max) = (861,999, 872,092, 886,785), stdev = 10,099
[info]   CI (99.9%): [833,204, 910,980] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   161461,974 ±(99.9%) 49,085 B/op [Average]
[info]   (min, avg, max) = (161448,051, 161461,974, 161472,051), stdev = 12,747
[info]   CI (99.9%): [161412,890, 161511,059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   944,115 ±(99.9%) 1422,619 MB/sec [Average]
[info]   (min, avg, max) = (674,285, 944,115, 1348,905), stdev = 369,450
[info]   CI (99.9%): [≈ 0, 2366,734] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   175112,135 ±(99.9%) 267635,603 B/op [Average]
[info]   (min, avg, max) = (122776,688, 175112,135, 251251,074), stdev = 69504,116
[info]   CI (99.9%): [≈ 0, 442747,738] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,200 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,125), stdev = 0,052
[info]   CI (99.9%): [≈ 0, 0,237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   6,963 ±(99.9%) 37,208 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6,963, 23,267), stdev = 9,663
[info]   CI (99.9%): [≈ 0, 44,172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeUPickle:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeUPickle:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 52,61% complete, ETA 01:02:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20478,938 ops/s
[info] # Warmup Iteration   2: 26612,728 ops/s
[info] # Warmup Iteration   3: 26756,651 ops/s
[info] # Warmup Iteration   4: 26776,807 ops/s
[info] # Warmup Iteration   5: 26761,576 ops/s
[info] Iteration   1: 26433,360 ops/s
[info]                  ·gc.alloc.rate:                   1416,466 MB/sec
[info]                  ·gc.alloc.rate.norm:              84304,018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,778 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     80037,309 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,239 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 26648,700 ops/s
[info]                  ·gc.alloc.rate:                   1428,038 MB/sec
[info]                  ·gc.alloc.rate.norm:              84304,016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,494 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     79431,019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,459 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 26578,314 ops/s
[info]                  ·gc.alloc.rate:                   1424,214 MB/sec
[info]                  ·gc.alloc.rate.norm:              84304,016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2021,060 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     119633,276 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7,396 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 26658,527 ops/s
[info]                  ·gc.alloc.rate:               1428,500 MB/sec
[info]                  ·gc.alloc.rate.norm:          84304,016 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1349,372 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 79634,203 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 26841,796 ops/s
[info]                  ·gc.alloc.rate:                   1438,349 MB/sec
[info]                  ·gc.alloc.rate.norm:              84304,016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350,746 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     79169,499 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,221 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce":
[info]   26632,139 ±(99.9%) 568,987 ops/s [Average]
[info]   (min, avg, max) = (26433,360, 26632,139, 26841,796), stdev = 147,764
[info]   CI (99.9%): [26063,152, 27201,126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.alloc.rate":
[info]   1427,114 ±(99.9%) 30,489 MB/sec [Average]
[info]   (min, avg, max) = (1416,466, 1427,114, 1438,349), stdev = 7,918
[info]   CI (99.9%): [1396,624, 1457,603] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   84304,016 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (84304,016, 84304,016, 84304,018), stdev = 0,001
[info]   CI (99.9%): [84304,014, 84304,019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1482,290 ±(99.9%) 1159,783 MB/sec [Average]
[info]   (min, avg, max) = (1344,778, 1482,290, 2021,060), stdev = 301,192
[info]   CI (99.9%): [322,507, 2642,073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   87581,061 ±(99.9%) 69005,612 B/op [Average]
[info]   (min, avg, max) = (79169,499, 87581,061, 119633,276), stdev = 17920,538
[info]   CI (99.9%): [18575,449, 156586,674] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,188 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,042, 0,125), stdev = 0,049
[info]   CI (99.9%): [≈ 0, 0,230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2,463 ±(99.9%) 11,133 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,463, 7,396), stdev = 2,891
[info]   CI (99.9%): [≈ 0, 13,596] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 52,81% complete, ETA 01:02:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20904,808 ops/s
[info] # Warmup Iteration   2: 30857,855 ops/s
[info] # Warmup Iteration   3: 30724,044 ops/s
[info] # Warmup Iteration   4: 30856,614 ops/s
[info] # Warmup Iteration   5: 31064,917 ops/s
[info] Iteration   1: 30984,023 ops/s
[info]                  ·gc.alloc.rate:                   1233,637 MB/sec
[info]                  ·gc.alloc.rate.norm:              62640,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336,734 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67874,910 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,057 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 31043,580 ops/s
[info]                  ·gc.alloc.rate:               1236,026 MB/sec
[info]                  ·gc.alloc.rate.norm:          62640,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669,033 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 33905,646 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 31013,665 ops/s
[info]                  ·gc.alloc.rate:                   1234,852 MB/sec
[info]                  ·gc.alloc.rate.norm:              62640,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339,045 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67925,388 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,169 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 31020,784 ops/s
[info]                  ·gc.alloc.rate:               1235,089 MB/sec
[info]                  ·gc.alloc.rate.norm:          62640,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340,752 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 67998,934 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   5: 31034,678 ops/s
[info]                  ·gc.alloc.rate:                   1235,655 MB/sec
[info]                  ·gc.alloc.rate.norm:              62640,016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,718 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68067,415 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,111 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala":
[info]   31019,346 ±(99.9%) 88,322 ops/s [Average]
[info]   (min, avg, max) = (30984,023, 31019,346, 31043,580), stdev = 22,937
[info]   CI (99.9%): [30931,024, 31107,668] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1235,052 ±(99.9%) 3,527 MB/sec [Average]
[info]   (min, avg, max) = (1233,637, 1235,052, 1236,026), stdev = 0,916
[info]   CI (99.9%): [1231,525, 1238,579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   62640,015 ±(99.9%) 0,004 B/op [Average]
[info]   (min, avg, max) = (62640,014, 62640,015, 62640,016), stdev = 0,001
[info]   CI (99.9%): [62640,011, 62640,018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1205,656 ±(99.9%) 1155,152 MB/sec [Average]
[info]   (min, avg, max) = (669,033, 1205,656, 1342,718), stdev = 299,989
[info]   CI (99.9%): [50,504, 2360,809] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   61154,459 ±(99.9%) 58655,797 B/op [Average]
[info]   (min, avg, max) = (33905,646, 61154,459, 68067,415), stdev = 15232,724
[info]   CI (99.9%): [2498,661, 119810,256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1,268 ±(99.9%) 5,302 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,268, 3,169), stdev = 1,377
[info]   CI (99.9%): [≈ 0, 6,570] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 53,01% complete, ETA 01:02:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 546864,204 ops/s
[info] # Warmup Iteration   2: 566492,617 ops/s
[info] # Warmup Iteration   3: 565228,330 ops/s
[info] # Warmup Iteration   4: 571632,639 ops/s
[info] # Warmup Iteration   5: 571198,027 ops/s
[info] Iteration   1: 570200,426 ops/s
[info]                  ·gc.alloc.rate:                   1484,450 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,380 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3717,787 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,115 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 568061,892 ops/s
[info]                  ·gc.alloc.rate:                   1478,939 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,027 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3733,433 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,058 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 569392,107 ops/s
[info]                  ·gc.alloc.rate:                   1482,357 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2024,735 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5594,681 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,173 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 571105,300 ops/s
[info]                  ·gc.alloc.rate:                   1486,897 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1351,461 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3722,911 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,057 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 569880,007 ops/s
[info]                  ·gc.alloc.rate:                   1483,594 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,726 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3734,691 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,057 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala":
[info]   569727,947 ±(99.9%) 4318,900 ops/s [Average]
[info]   (min, avg, max) = (568061,892, 569727,947, 571105,300), stdev = 1121,605
[info]   CI (99.9%): [565409,047, 574046,846] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1483,247 ±(99.9%) 11,266 MB/sec [Average]
[info]   (min, avg, max) = (1478,939, 1483,247, 1486,897), stdev = 2,926
[info]   CI (99.9%): [1471,981, 1494,514] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4096,001, 4096,001, 4096,001), stdev = 0,001
[info]   CI (99.9%): [4096,001, 4096,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1484,866 ±(99.9%) 1162,142 MB/sec [Average]
[info]   (min, avg, max) = (1347,380, 1484,866, 2024,735), stdev = 301,805
[info]   CI (99.9%): [322,724, 2647,008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4100,701 ±(99.9%) 3216,022 B/op [Average]
[info]   (min, avg, max) = (3717,787, 4100,701, 5594,681), stdev = 835,191
[info]   CI (99.9%): [884,679, 7316,723] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,033, 0,062), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,092 ±(99.9%) 0,198 B/op [Average]
[info]   (min, avg, max) = (0,057, 0,092, 0,173), stdev = 0,051
[info]   CI (99.9%): [≈ 0, 0,290] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 53,21% complete, ETA 01:02:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12806,894 ops/s
[info] # Warmup Iteration   2: 23469,705 ops/s
[info] # Warmup Iteration   3: 23675,830 ops/s
[info] # Warmup Iteration   4: 23659,213 ops/s
[info] # Warmup Iteration   5: 23659,109 ops/s
[info] Iteration   1: 23611,298 ops/s
[info]                  ·gc.alloc.rate:                   1780,782 MB/sec
[info]                  ·gc.alloc.rate.norm:              118656,018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005,437 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     133625,062 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,775 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 23784,893 ops/s
[info]                  ·gc.alloc.rate:                   1793,809 MB/sec
[info]                  ·gc.alloc.rate.norm:              118656,018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011,329 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     133044,416 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,132 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 23776,264 ops/s
[info]                  ·gc.alloc.rate:                   1793,183 MB/sec
[info]                  ·gc.alloc.rate.norm:              118656,018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,312 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     88887,781 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,378 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 23545,448 ops/s
[info]                  ·gc.alloc.rate:                   1775,788 MB/sec
[info]                  ·gc.alloc.rate.norm:              118656,018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018,744 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     134890,063 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,391 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 23631,264 ops/s
[info]                  ·gc.alloc.rate:                   1782,235 MB/sec
[info]                  ·gc.alloc.rate.norm:              118656,020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2024,118 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     134759,873 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,159 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson":
[info]   23669,833 ±(99.9%) 408,204 ops/s [Average]
[info]   (min, avg, max) = (23545,448, 23669,833, 23784,893), stdev = 106,009
[info]   CI (99.9%): [23261,629, 24078,038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1785,159 ±(99.9%) 30,728 MB/sec [Average]
[info]   (min, avg, max) = (1775,788, 1785,159, 1793,809), stdev = 7,980
[info]   CI (99.9%): [1754,431, 1815,888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   118656,019 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (118656,018, 118656,019, 118656,020), stdev = 0,001
[info]   CI (99.9%): [118656,016, 118656,021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1880,588 ±(99.9%) 1156,851 MB/sec [Average]
[info]   (min, avg, max) = (1343,312, 1880,588, 2024,118), stdev = 300,431
[info]   CI (99.9%): [723,737, 3037,439] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   125041,439 ±(99.9%) 77880,560 B/op [Average]
[info]   (min, avg, max) = (88887,781, 125041,439, 134890,063), stdev = 20225,334
[info]   CI (99.9%): [47160,879, 202921,999] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,080 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,042, 0,062), stdev = 0,021
[info]   CI (99.9%): [≈ 0, 0,122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2,767 ±(99.9%) 5,316 B/op [Average]
[info]   (min, avg, max) = (1,378, 2,767, 4,159), stdev = 1,381
[info]   CI (99.9%): [≈ 0, 8,083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.time":
[info]   12,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 2,400, 3,000), stdev = 0,894
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 53,41% complete, ETA 01:01:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24642,508 ops/s
[info] # Warmup Iteration   2: 29434,700 ops/s
[info] # Warmup Iteration   3: 29306,194 ops/s
[info] # Warmup Iteration   4: 29348,073 ops/s
[info] # Warmup Iteration   5: 29399,158 ops/s
[info] Iteration   1: 29357,374 ops/s
[info]                  ·gc.alloc.rate:                   1440,099 MB/sec
[info]                  ·gc.alloc.rate.norm:              77176,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020,475 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     108278,810 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,232 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 29428,828 ops/s
[info]                  ·gc.alloc.rate:                   1443,594 MB/sec
[info]                  ·gc.alloc.rate.norm:              77176,016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,105 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72071,119 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,227 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 29398,930 ops/s
[info]                  ·gc.alloc.rate:                   1442,121 MB/sec
[info]                  ·gc.alloc.rate.norm:              77176,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1349,391 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72213,522 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,343 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 29415,242 ops/s
[info]                  ·gc.alloc.rate:                   1442,965 MB/sec
[info]                  ·gc.alloc.rate.norm:              77176,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350,734 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72243,076 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,114 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 29375,853 ops/s
[info]                  ·gc.alloc.rate:               1441,058 MB/sec
[info]                  ·gc.alloc.rate.norm:          77176,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1352,072 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 72410,343 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readUPickle":
[info]   29395,245 ±(99.9%) 111,461 ops/s [Average]
[info]   (min, avg, max) = (29357,374, 29395,245, 29428,828), stdev = 28,946
[info]   CI (99.9%): [29283,784, 29506,707] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1441,967 ±(99.9%) 5,439 MB/sec [Average]
[info]   (min, avg, max) = (1440,099, 1441,967, 1443,594), stdev = 1,413
[info]   CI (99.9%): [1436,528, 1447,407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   77176,015 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (77176,015, 77176,015, 77176,016), stdev = 0,001
[info]   CI (99.9%): [77176,013, 77176,017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1484,155 ±(99.9%) 1154,482 MB/sec [Average]
[info]   (min, avg, max) = (1348,105, 1484,155, 2020,475), stdev = 299,815
[info]   CI (99.9%): [329,673, 2638,638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   79443,374 ±(99.9%) 62072,186 B/op [Average]
[info]   (min, avg, max) = (72071,119, 79443,374, 108278,810), stdev = 16119,950
[info]   CI (99.9%): [17371,188, 141515,560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,062), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   1,783 ±(99.9%) 4,893 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,783, 3,343), stdev = 1,271
[info]   CI (99.9%): [≈ 0, 6,676] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readUPickle:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readUPickle:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 53,61% complete, ETA 01:01:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 49368,185 ops/s
[info] # Warmup Iteration   2: 64385,547 ops/s
[info] # Warmup Iteration   3: 63754,012 ops/s
[info] # Warmup Iteration   4: 65032,258 ops/s
[info] # Warmup Iteration   5: 64151,010 ops/s
[info] Iteration   1: 64264,653 ops/s
[info]                  ·gc.alloc.rate:                   1782,546 MB/sec
[info]                  ·gc.alloc.rate.norm:              43640,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,355 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32887,801 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,020 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 65017,227 ops/s
[info]                  ·gc.alloc.rate:                   1803,371 MB/sec
[info]                  ·gc.alloc.rate.norm:              43640,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018,602 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48848,411 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,519 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 64458,244 ops/s
[info]                  ·gc.alloc.rate:                   1787,947 MB/sec
[info]                  ·gc.alloc.rate.norm:              43640,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022,053 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49354,033 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,033 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 64462,682 ops/s
[info]                  ·gc.alloc.rate:                   1788,113 MB/sec
[info]                  ·gc.alloc.rate.norm:              43640,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350,034 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32948,415 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,508 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 64925,303 ops/s
[info]                  ·gc.alloc.rate:                   1800,892 MB/sec
[info]                  ·gc.alloc.rate.norm:              43640,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2028,616 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49158,307 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,009 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce":
[info]   64625,622 ±(99.9%) 1259,617 ops/s [Average]
[info]   (min, avg, max) = (64264,653, 64625,622, 65017,227), stdev = 327,119
[info]   CI (99.9%): [63366,005, 65885,239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1792,574 ±(99.9%) 34,850 MB/sec [Average]
[info]   (min, avg, max) = (1782,546, 1792,574, 1803,371), stdev = 9,050
[info]   CI (99.9%): [1757,724, 1827,424] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   43640,007 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (43640,007, 43640,007, 43640,007), stdev = 0,001
[info]   CI (99.9%): [43640,006, 43640,008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1752,532 ±(99.9%) 1426,672 MB/sec [Average]
[info]   (min, avg, max) = (1343,355, 1752,532, 2028,616), stdev = 370,502
[info]   CI (99.9%): [325,860, 3179,204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   42639,394 ±(99.9%) 34178,837 B/op [Average]
[info]   (min, avg, max) = (32887,801, 42639,394, 49354,033), stdev = 8876,135
[info]   CI (99.9%): [8460,557, 76818,231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,058 ±(99.9%) 0,132 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,058, 0,104), stdev = 0,034
[info]   CI (99.9%): [≈ 0, 0,190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1,418 ±(99.9%) 3,190 B/op [Average]
[info]   (min, avg, max) = (0,508, 1,418, 2,519), stdev = 0,828
[info]   CI (99.9%): [≈ 0, 4,608] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.time":
[info]   9,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 53,82% complete, ETA 01:01:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 132093,924 ops/s
[info] # Warmup Iteration   2: 171327,105 ops/s
[info] # Warmup Iteration   3: 172308,617 ops/s
[info] # Warmup Iteration   4: 158273,000 ops/s
[info] # Warmup Iteration   5: 173223,033 ops/s
[info] Iteration   1: 173190,275 ops/s
[info]                  ·gc.alloc.rate:               1538,471 MB/sec
[info]                  ·gc.alloc.rate.norm:          13976,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338,057 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12155,368 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 172090,074 ops/s
[info]                  ·gc.alloc.rate:                   1528,764 MB/sec
[info]                  ·gc.alloc.rate.norm:              13976,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,040 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12250,687 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,761 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 173114,649 ops/s
[info]                  ·gc.alloc.rate:                   1537,844 MB/sec
[info]                  ·gc.alloc.rate.norm:              13976,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014,075 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18304,010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,568 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 172540,725 ops/s
[info]                  ·gc.alloc.rate:                   1532,718 MB/sec
[info]                  ·gc.alloc.rate.norm:              13976,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,063 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12264,882 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,380 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 173489,533 ops/s
[info]                  ·gc.alloc.rate:                   1541,079 MB/sec
[info]                  ·gc.alloc.rate.norm:              13976,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,972 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12215,651 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,189 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala":
[info]   172885,051 ±(99.9%) 2162,733 ops/s [Average]
[info]   (min, avg, max) = (172090,074, 172885,051, 173489,533), stdev = 561,655
[info]   CI (99.9%): [170722,318, 175047,784] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1535,775 ±(99.9%) 19,078 MB/sec [Average]
[info]   (min, avg, max) = (1528,764, 1535,775, 1541,079), stdev = 4,954
[info]   CI (99.9%): [1516,698, 1554,853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   13976,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (13976,002, 13976,003, 13976,003), stdev = 0,001
[info]   CI (99.9%): [13976,002, 13976,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1476,841 ±(99.9%) 1156,520 MB/sec [Average]
[info]   (min, avg, max) = (1338,057, 1476,841, 2014,075), stdev = 300,345
[info]   CI (99.9%): [320,321, 2633,361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   13438,119 ±(99.9%) 10475,459 B/op [Average]
[info]   (min, avg, max) = (12155,368, 13438,119, 18304,010), stdev = 2720,443
[info]   CI (99.9%): [2962,660, 23913,579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,127 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,042, 0,083), stdev = 0,033
[info]   CI (99.9%): [≈ 0, 0,168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,380 ±(99.9%) 1,158 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,380, 0,761), stdev = 0,301
[info]   CI (99.9%): [≈ 0, 1,538] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 54,02% complete, ETA 01:00:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1460678,223 ops/s
[info] # Warmup Iteration   2: 1509967,368 ops/s
[info] # Warmup Iteration   3: 1519703,003 ops/s
[info] # Warmup Iteration   4: 1528850,503 ops/s
[info] # Warmup Iteration   5: 1517553,154 ops/s
[info] Iteration   1: 1526435,040 ops/s
[info]                  ·gc.alloc.rate:                   1265,158 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,016 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1387,341 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,064 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 1526181,068 ops/s
[info]                  ·gc.alloc.rate:                   1264,909 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,388 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1389,028 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,107 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 1513179,311 ops/s
[info]                  ·gc.alloc.rate:                   1254,186 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,022 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1401,564 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,065 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 1527573,002 ops/s
[info]                  ·gc.alloc.rate:                   1266,097 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1349,412 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1389,809 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,043 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 1531501,069 ops/s
[info]                  ·gc.alloc.rate:                   1269,336 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350,668 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1387,553 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,043 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala":
[info]   1524973,898 ±(99.9%) 26682,474 ops/s [Average]
[info]   (min, avg, max) = (1513179,311, 1524973,898, 1531501,069), stdev = 6929,354
[info]   CI (99.9%): [1498291,425, 1551656,372] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1263,937 ±(99.9%) 22,064 MB/sec [Average]
[info]   (min, avg, max) = (1254,186, 1263,937, 1269,336), stdev = 5,730
[info]   CI (99.9%): [1241,873, 1286,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1304,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1304,000, 1304,000, 1304,000), stdev = 0,001
[info]   CI (99.9%): [1304,000, 1304,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1348,301 ±(99.9%) 6,933 MB/sec [Average]
[info]   (min, avg, max) = (1346,016, 1348,301, 1350,668), stdev = 1,800
[info]   CI (99.9%): [1341,368, 1355,234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1391,059 ±(99.9%) 22,955 B/op [Average]
[info]   (min, avg, max) = (1387,341, 1391,059, 1401,564), stdev = 5,961
[info]   CI (99.9%): [1368,104, 1414,014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,062 ±(99.9%) 0,098 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,062, 0,104), stdev = 0,026
[info]   CI (99.9%): [≈ 0, 0,161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,064 ±(99.9%) 0,101 B/op [Average]
[info]   (min, avg, max) = (0,043, 0,064, 0,107), stdev = 0,026
[info]   CI (99.9%): [≈ 0, 0,166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 54,22% complete, ETA 01:00:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1558220,113 ops/s
[info] # Warmup Iteration   2: 1630561,750 ops/s
[info] # Warmup Iteration   3: 1641066,449 ops/s
[info] # Warmup Iteration   4: 1637098,181 ops/s
[info] # Warmup Iteration   5: 1640065,934 ops/s
[info] Iteration   1: 1641155,974 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1642440,025 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1641535,463 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1640204,099 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1637694,466 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc":
[info]   1640606,005 ±(99.9%) 6986,711 ops/s [Average]
[info]   (min, avg, max) = (1637694,466, 1640606,005, 1642440,025), stdev = 1814,427
[info]   CI (99.9%): [1633619,294, 1647592,716] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 54,42% complete, ETA 01:00:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 96681,858 ops/s
[info] # Warmup Iteration   2: 139026,804 ops/s
[info] # Warmup Iteration   3: 141173,181 ops/s
[info] # Warmup Iteration   4: 140884,108 ops/s
[info] # Warmup Iteration   5: 141639,975 ops/s
[info] Iteration   1: 141171,964 ops/s
[info]                  ·gc.alloc.rate:                   1775,927 MB/sec
[info]                  ·gc.alloc.rate.norm:              19792,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006,095 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22357,135 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,696 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 140344,888 ops/s
[info]                  ·gc.alloc.rate:                   1765,555 MB/sec
[info]                  ·gc.alloc.rate.norm:              19792,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011,360 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22547,491 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,167 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 141388,269 ops/s
[info]                  ·gc.alloc.rate:                   1778,694 MB/sec
[info]                  ·gc.alloc.rate.norm:              19792,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,984 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14954,872 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,463 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 141159,967 ops/s
[info]                  ·gc.alloc.rate:                   1775,848 MB/sec
[info]                  ·gc.alloc.rate.norm:              19792,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019,389 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22506,300 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,464 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 140181,063 ops/s
[info]                  ·gc.alloc.rate:                   1763,462 MB/sec
[info]                  ·gc.alloc.rate.norm:              19792,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2024,753 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22724,569 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,467 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson":
[info]   140849,230 ±(99.9%) 2102,118 ops/s [Average]
[info]   (min, avg, max) = (140181,063, 140849,230, 141388,269), stdev = 545,913
[info]   CI (99.9%): [138747,112, 142951,348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1771,897 ±(99.9%) 26,498 MB/sec [Average]
[info]   (min, avg, max) = (1763,462, 1771,897, 1778,694), stdev = 6,881
[info]   CI (99.9%): [1745,399, 1798,395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   19792,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (19792,003, 19792,003, 19792,003), stdev = 0,001
[info]   CI (99.9%): [19792,003, 19792,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1881,116 ±(99.9%) 1156,548 MB/sec [Average]
[info]   (min, avg, max) = (1343,984, 1881,116, 2024,753), stdev = 300,352
[info]   CI (99.9%): [724,569, 3037,664] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   21018,074 ±(99.9%) 13061,229 B/op [Average]
[info]   (min, avg, max) = (14954,872, 21018,074, 22724,569), stdev = 3391,960
[info]   CI (99.9%): [7956,844, 34079,303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,058 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,058, 0,104), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,652 ±(99.9%) 1,175 B/op [Average]
[info]   (min, avg, max) = (0,463, 0,652, 1,167), stdev = 0,305
[info]   CI (99.9%): [≈ 0, 1,826] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.time":
[info]   12,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 54,62% complete, ETA 01:00:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 33700,054 ops/s
[info] # Warmup Iteration   2: 36548,550 ops/s
[info] # Warmup Iteration   3: 36370,984 ops/s
[info] # Warmup Iteration   4: 36361,790 ops/s
[info] # Warmup Iteration   5: 36528,796 ops/s
[info] Iteration   1: 36637,934 ops/s
[info]                  ·gc.alloc.rate:                   760,834 MB/sec
[info]                  ·gc.alloc.rate.norm:              32672,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,656 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28928,405 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,683 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 36677,528 ops/s
[info]                  ·gc.alloc.rate:               761,675 MB/sec
[info]                  ·gc.alloc.rate.norm:          32672,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,000 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 28868,281 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 36712,959 ops/s
[info]                  ·gc.alloc.rate:                   762,394 MB/sec
[info]                  ·gc.alloc.rate.norm:              32672,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,993 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28840,766 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,785 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 36732,592 ops/s
[info]                  ·gc.alloc.rate:                   762,801 MB/sec
[info]                  ·gc.alloc.rate.norm:              32672,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,986 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28825,066 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,892 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 36685,428 ops/s
[info]                  ·gc.alloc.rate:               761,793 MB/sec
[info]                  ·gc.alloc.rate.norm:          32672,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,993 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 28863,560 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeUPickle":
[info]   36689,288 ±(99.9%) 139,183 ops/s [Average]
[info]   (min, avg, max) = (36637,934, 36689,288, 36732,592), stdev = 36,145
[info]   CI (99.9%): [36550,105, 36828,471] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   761,899 ±(99.9%) 2,892 MB/sec [Average]
[info]   (min, avg, max) = (760,834, 761,899, 762,801), stdev = 0,751
[info]   CI (99.9%): [759,008, 764,791] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   32672,012 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (32672,012, 32672,012, 32672,013), stdev = 0,001
[info]   CI (99.9%): [32672,010, 32672,013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   673,126 ±(99.9%) 1,143 MB/sec [Average]
[info]   (min, avg, max) = (672,986, 673,126, 673,656), stdev = 0,297
[info]   CI (99.9%): [671,983, 674,268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   28865,216 ±(99.9%) 151,781 B/op [Average]
[info]   (min, avg, max) = (28825,066, 28865,216, 28928,405), stdev = 39,417
[info]   CI (99.9%): [28713,435, 29016,997] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   1,072 ±(99.9%) 4,488 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,072, 2,683), stdev = 1,165
[info]   CI (99.9%): [≈ 0, 5,559] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeUPickle:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeUPickle:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 54,82% complete, ETA 00:59:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26909,309 ops/s
[info] # Warmup Iteration   2: 38446,436 ops/s
[info] # Warmup Iteration   3: 38313,254 ops/s
[info] # Warmup Iteration   4: 38505,970 ops/s
[info] # Warmup Iteration   5: 38468,742 ops/s
[info] Iteration   1: 38403,379 ops/s
[info]                  ·gc.alloc.rate:                   1379,112 MB/sec
[info]                  ·gc.alloc.rate.norm:              56496,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337,403 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54787,359 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,706 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 38354,549 ops/s
[info]                  ·gc.alloc.rate:                   1377,284 MB/sec
[info]                  ·gc.alloc.rate.norm:              56496,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339,071 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54928,533 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,854 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 37769,626 ops/s
[info]                  ·gc.alloc.rate:               1356,264 MB/sec
[info]                  ·gc.alloc.rate.norm:          56496,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340,650 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 55845,596 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 38507,791 ops/s
[info]                  ·gc.alloc.rate:                   1382,798 MB/sec
[info]                  ·gc.alloc.rate.norm:              56496,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,652 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54855,795 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,552 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 38096,181 ops/s
[info]                  ·gc.alloc.rate:               1368,065 MB/sec
[info]                  ·gc.alloc.rate.norm:          56496,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345,076 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 55546,679 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala":
[info]   38226,305 ±(99.9%) 1143,136 ops/s [Average]
[info]   (min, avg, max) = (37769,626, 38226,305, 38507,791), stdev = 296,869
[info]   CI (99.9%): [37083,169, 39369,441] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1372,704 ±(99.9%) 41,101 MB/sec [Average]
[info]   (min, avg, max) = (1356,264, 1372,704, 1382,798), stdev = 10,674
[info]   CI (99.9%): [1331,603, 1413,805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   56496,012 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (56496,011, 56496,012, 56496,012), stdev = 0,001
[info]   CI (99.9%): [56496,010, 56496,013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1340,970 ±(99.9%) 11,571 MB/sec [Average]
[info]   (min, avg, max) = (1337,403, 1340,970, 1345,076), stdev = 3,005
[info]   CI (99.9%): [1329,399, 1352,542] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   55192,792 ±(99.9%) 1825,673 B/op [Average]
[info]   (min, avg, max) = (54787,359, 55192,792, 55845,596), stdev = 474,121
[info]   CI (99.9%): [53367,120, 57018,465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1,023 ±(99.9%) 4,273 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,023, 2,552), stdev = 1,110
[info]   CI (99.9%): [≈ 0, 5,296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 55,02% complete, ETA 00:59:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 793389,376 ops/s
[info] # Warmup Iteration   2: 868217,091 ops/s
[info] # Warmup Iteration   3: 865533,938 ops/s
[info] # Warmup Iteration   4: 820594,574 ops/s
[info] # Warmup Iteration   5: 866377,500 ops/s
[info] Iteration   1: 864647,180 ops/s
[info]                  ·gc.alloc.rate:                   1688,237 MB/sec
[info]                  ·gc.alloc.rate.norm:              3072,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2021,690 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3678,767 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,114 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 865651,643 ops/s
[info]                  ·gc.alloc.rate:                   1690,204 MB/sec
[info]                  ·gc.alloc.rate.norm:              3072,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1349,388 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2452,556 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,151 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 865765,481 ops/s
[info]                  ·gc.alloc.rate:                   1690,531 MB/sec
[info]                  ·gc.alloc.rate.norm:              3072,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2026,823 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3683,104 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,076 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 867801,886 ops/s
[info]                  ·gc.alloc.rate:                   1694,423 MB/sec
[info]                  ·gc.alloc.rate.norm:              3072,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,713 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2452,479 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,038 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 771249,701 ops/s
[info]                  ·gc.alloc.rate:                   1505,949 MB/sec
[info]                  ·gc.alloc.rate.norm:              3072,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2031,537 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4144,153 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,042 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala":
[info]   847023,178 ±(99.9%) 163167,755 ops/s [Average]
[info]   (min, avg, max) = (771249,701, 847023,178, 867801,886), stdev = 42374,148
[info]   CI (99.9%): [683855,424, 1010190,933] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1653,869 ±(99.9%) 318,526 MB/sec [Average]
[info]   (min, avg, max) = (1505,949, 1653,869, 1694,423), stdev = 82,720
[info]   CI (99.9%): [1335,343, 1972,395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   3072,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (3072,000, 3072,001, 3072,001), stdev = 0,001
[info]   CI (99.9%): [3072,000, 3072,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1756,430 ±(99.9%) 1425,036 MB/sec [Average]
[info]   (min, avg, max) = (1349,388, 1756,430, 2031,537), stdev = 370,077
[info]   CI (99.9%): [331,394, 3181,466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3282,212 ±(99.9%) 3006,031 B/op [Average]
[info]   (min, avg, max) = (2452,479, 3282,212, 4144,153), stdev = 780,657
[info]   CI (99.9%): [276,181, 6288,242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,046 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,046, 0,083), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,084 ±(99.9%) 0,186 B/op [Average]
[info]   (min, avg, max) = (0,038, 0,084, 0,151), stdev = 0,048
[info]   CI (99.9%): [≈ 0, 0,270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 55,22% complete, ETA 00:59:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15401,375 ops/s
[info] # Warmup Iteration   2: 28158,703 ops/s
[info] # Warmup Iteration   3: 28227,056 ops/s
[info] # Warmup Iteration   4: 28155,347 ops/s
[info] # Warmup Iteration   5: 28343,792 ops/s
[info] Iteration   1: 28390,388 ops/s
[info]                  ·gc.alloc.rate:                   2030,275 MB/sec
[info]                  ·gc.alloc.rate.norm:              112512,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008,625 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     111312,193 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,308 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 28455,185 ops/s
[info]                  ·gc.alloc.rate:                   2034,974 MB/sec
[info]                  ·gc.alloc.rate.norm:              112512,016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014,672 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     111389,556 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,605 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 28253,176 ops/s
[info]                  ·gc.alloc.rate:                   2020,505 MB/sec
[info]                  ·gc.alloc.rate.norm:              112512,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018,644 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     112408,386 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,319 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 28344,767 ops/s
[info]                  ·gc.alloc.rate:                   2027,016 MB/sec
[info]                  ·gc.alloc.rate.norm:              112512,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2024,051 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     112347,429 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,779 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 28337,110 ops/s
[info]                  ·gc.alloc.rate:                   2026,500 MB/sec
[info]                  ·gc.alloc.rate.norm:              112512,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2027,367 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     112560,155 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,156 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson":
[info]   28356,125 ±(99.9%) 286,064 ops/s [Average]
[info]   (min, avg, max) = (28253,176, 28356,125, 28455,185), stdev = 74,290
[info]   CI (99.9%): [28070,062, 28642,189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2027,854 ±(99.9%) 20,475 MB/sec [Average]
[info]   (min, avg, max) = (2020,505, 2027,854, 2034,974), stdev = 5,317
[info]   CI (99.9%): [2007,379, 2048,329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   112512,015 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (112512,015, 112512,015, 112512,016), stdev = 0,001
[info]   CI (99.9%): [112512,014, 112512,017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2018,672 ±(99.9%) 28,654 MB/sec [Average]
[info]   (min, avg, max) = (2008,625, 2018,672, 2027,367), stdev = 7,441
[info]   CI (99.9%): [1990,018, 2047,326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   112003,544 ±(99.9%) 2315,929 B/op [Average]
[info]   (min, avg, max) = (111312,193, 112003,544, 112560,155), stdev = 601,439
[info]   CI (99.9%): [109687,615, 114319,473] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,058 ±(99.9%) 0,132 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,058, 0,104), stdev = 0,034
[info]   CI (99.9%): [≈ 0, 0,190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   3,233 ±(99.9%) 7,299 B/op [Average]
[info]   (min, avg, max) = (1,156, 3,233, 5,779), stdev = 1,895
[info]   CI (99.9%): [≈ 0, 10,532] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.count":
[info]   15,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,000, 3,000), stdev = 0,001
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.time":
[info]   12,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 55,42% complete, ETA 00:59:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 32531,595 ops/s
[info] # Warmup Iteration   2: 38706,680 ops/s
[info] # Warmup Iteration   3: 38889,899 ops/s
[info] # Warmup Iteration   4: 38830,140 ops/s
[info] # Warmup Iteration   5: 38894,976 ops/s
[info] Iteration   1: 38452,081 ops/s
[info]                  ·gc.alloc.rate:                   1731,431 MB/sec
[info]                  ·gc.alloc.rate.norm:              70840,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,072 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55155,207 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,704 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 38933,991 ops/s
[info]                  ·gc.alloc.rate:                   1753,108 MB/sec
[info]                  ·gc.alloc.rate.norm:              70840,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2024,081 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     81789,574 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,207 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 38408,069 ops/s
[info]                  ·gc.alloc.rate:               1729,468 MB/sec
[info]                  ·gc.alloc.rate.norm:          70840,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1351,488 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 55357,737 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 38915,791 ops/s
[info]                  ·gc.alloc.rate:                   1752,331 MB/sec
[info]                  ·gc.alloc.rate.norm:              70840,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2028,837 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     82018,078 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,526 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 38851,024 ops/s
[info]                  ·gc.alloc.rate:                   1749,282 MB/sec
[info]                  ·gc.alloc.rate.norm:              70840,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2031,693 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     82276,706 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,843 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readUPickle":
[info]   38712,191 ±(99.9%) 1000,557 ops/s [Average]
[info]   (min, avg, max) = (38408,069, 38712,191, 38933,991), stdev = 259,841
[info]   CI (99.9%): [37711,634, 39712,748] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1743,124 ±(99.9%) 44,970 MB/sec [Average]
[info]   (min, avg, max) = (1729,468, 1743,124, 1753,108), stdev = 11,679
[info]   CI (99.9%): [1698,154, 1788,094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   70840,011 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (70840,011, 70840,011, 70840,012), stdev = 0,001
[info]   CI (99.9%): [70840,010, 70840,013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1756,834 ±(99.9%) 1430,898 MB/sec [Average]
[info]   (min, avg, max) = (1348,072, 1756,834, 2031,693), stdev = 371,600
[info]   CI (99.9%): [325,936, 3187,733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   71319,460 ±(99.9%) 56468,240 B/op [Average]
[info]   (min, avg, max) = (55155,207, 71319,460, 82276,706), stdev = 14664,622
[info]   CI (99.9%): [14851,221, 127787,700] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,046 ±(99.9%) 0,154 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,046, 0,104), stdev = 0,040
[info]   CI (99.9%): [≈ 0, 0,200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   1,856 ±(99.9%) 6,230 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,856, 4,207), stdev = 1,618
[info]   CI (99.9%): [≈ 0, 8,086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readUPickle:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readUPickle:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 55,62% complete, ETA 00:58:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 185536,328 ops/s
[info] # Warmup Iteration   2: 239276,766 ops/s
[info] # Warmup Iteration   3: 238710,014 ops/s
[info] # Warmup Iteration   4: 240623,752 ops/s
[info] # Warmup Iteration   5: 241774,418 ops/s
[info] Iteration   1: 242003,394 ops/s
[info]                  ·gc.alloc.rate:                   1145,660 MB/sec
[info]                  ·gc.alloc.rate.norm:              7448,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336,723 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8690,120 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,406 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 242058,159 ops/s
[info]                  ·gc.alloc.rate:                   1145,929 MB/sec
[info]                  ·gc.alloc.rate.norm:              7448,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337,373 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8692,297 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,271 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 242206,320 ops/s
[info]                  ·gc.alloc.rate:               1146,624 MB/sec
[info]                  ·gc.alloc.rate.norm:          7448,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669,019 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4345,675 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 232532,075 ops/s
[info]                  ·gc.alloc.rate:                   1100,833 MB/sec
[info]                  ·gc.alloc.rate.norm:              7448,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,080 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9066,694 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,423 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 241785,842 ops/s
[info]                  ·gc.alloc.rate:                   1144,524 MB/sec
[info]                  ·gc.alloc.rate.norm:              7448,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341,272 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8728,341 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,271 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala":
[info]   240117,158 ±(99.9%) 16337,802 ops/s [Average]
[info]   (min, avg, max) = (232532,075, 240117,158, 242206,320), stdev = 4242,875
[info]   CI (99.9%): [223779,356, 256454,960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1136,714 ±(99.9%) 77,291 MB/sec [Average]
[info]   (min, avg, max) = (1100,833, 1136,714, 1146,624), stdev = 20,072
[info]   CI (99.9%): [1059,423, 1214,005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   7448,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (7448,002, 7448,002, 7448,002), stdev = 0,001
[info]   CI (99.9%): [7448,002, 7448,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1204,893 ±(99.9%) 1153,533 MB/sec [Average]
[info]   (min, avg, max) = (669,019, 1204,893, 1341,272), stdev = 299,569
[info]   CI (99.9%): [51,361, 2358,426] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   7904,625 ±(99.9%) 7685,017 B/op [Average]
[info]   (min, avg, max) = (4345,675, 7904,625, 9066,694), stdev = 1995,774
[info]   CI (99.9%): [219,609, 15589,642] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,098 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,042, 0,062), stdev = 0,026
[info]   CI (99.9%): [≈ 0, 0,140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,274 ±(99.9%) 0,652 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,274, 0,423), stdev = 0,169
[info]   CI (99.9%): [≈ 0, 0,926] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 55,82% complete, ETA 00:58:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1747454,884 ops/s
[info] # Warmup Iteration   2: 1796890,835 ops/s
[info] # Warmup Iteration   3: 1816598,381 ops/s
[info] # Warmup Iteration   4: 1838527,162 ops/s
[info] # Warmup Iteration   5: 1831828,516 ops/s
[info] Iteration   1: 1812409,990 ops/s
[info]                  ·gc.alloc.rate:               1059,835 MB/sec
[info]                  ·gc.alloc.rate.norm:          920,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,024 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 584,225 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   2: 1844521,135 ops/s
[info]                  ·gc.alloc.rate:                   1078,568 MB/sec
[info]                  ·gc.alloc.rate.norm:              920,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,975 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1148,094 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,071 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 1841610,120 ops/s
[info]                  ·gc.alloc.rate:                   1076,918 MB/sec
[info]                  ·gc.alloc.rate.norm:              920,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,395 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1151,066 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,053 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 1840146,842 ops/s
[info]                  ·gc.alloc.rate:               1076,053 MB/sec
[info]                  ·gc.alloc.rate.norm:          920,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,036 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 576,286 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 1846041,544 ops/s
[info]                  ·gc.alloc.rate:               1079,468 MB/sec
[info]                  ·gc.alloc.rate.norm:          920,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1348,706 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1149,464 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala":
[info]   1836945,926 ±(99.9%) 53568,491 ops/s [Average]
[info]   (min, avg, max) = (1812409,990, 1836945,926, 1846041,544), stdev = 13911,567
[info]   CI (99.9%): [1783377,435, 1890514,417] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1074,169 ±(99.9%) 31,283 MB/sec [Average]
[info]   (min, avg, max) = (1059,835, 1074,169, 1079,468), stdev = 8,124
[info]   CI (99.9%): [1042,886, 1105,452] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   920,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (920,000, 920,000, 920,000), stdev = 0,001
[info]   CI (99.9%): [920,000, 920,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1077,827 ±(99.9%) 1421,167 MB/sec [Average]
[info]   (min, avg, max) = (673,024, 1077,827, 1348,706), stdev = 369,072
[info]   CI (99.9%): [≈ 0, 2498,994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   921,827 ±(99.9%) 1200,727 B/op [Average]
[info]   (min, avg, max) = (576,286, 921,827, 1151,066), stdev = 311,825
[info]   CI (99.9%): [≈ 0, 2122,554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,156 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,083), stdev = 0,041
[info]   CI (99.9%): [≈ 0, 0,185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,025 ±(99.9%) 0,133 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,071), stdev = 0,035
[info]   CI (99.9%): [≈ 0, 0,158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 56,02% complete, ETA 00:58:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1627987,300 ops/s
[info] # Warmup Iteration   2: 1697733,042 ops/s
[info] # Warmup Iteration   3: 1717882,403 ops/s
[info] # Warmup Iteration   4: 1722215,733 ops/s
[info] # Warmup Iteration   5: 1722272,553 ops/s
[info] Iteration   1: 1724986,077 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1727485,197 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1724405,042 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1722153,244 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1725103,742 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc":
[info]   1724826,661 ±(99.9%) 7330,124 ops/s [Average]
[info]   (min, avg, max) = (1722153,244, 1724826,661, 1727485,197), stdev = 1903,610
[info]   CI (99.9%): [1717496,537, 1732156,784] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 56,22% complete, ETA 00:58:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 135367,882 ops/s
[info] # Warmup Iteration   2: 197281,681 ops/s
[info] # Warmup Iteration   3: 196363,346 ops/s
[info] # Warmup Iteration   4: 198235,247 ops/s
[info] # Warmup Iteration   5: 198747,123 ops/s
[info] Iteration   1: 196798,169 ops/s
[info]                  ·gc.alloc.rate:               1274,883 MB/sec
[info]                  ·gc.alloc.rate.norm:          10192,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1334,751 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10670,618 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 197902,744 ops/s
[info]                  ·gc.alloc.rate:                   1282,059 MB/sec
[info]                  ·gc.alloc.rate.norm:              10192,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336,064 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10621,321 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,662 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 196415,152 ops/s
[info]                  ·gc.alloc.rate:                   1272,417 MB/sec
[info]                  ·gc.alloc.rate.norm:              10192,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338,133 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10718,383 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,500 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 198236,331 ops/s
[info]                  ·gc.alloc.rate:                   1284,161 MB/sec
[info]                  ·gc.alloc.rate.norm:              10192,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,032 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10635,428 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,331 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 198368,907 ops/s
[info]                  ·gc.alloc.rate:                   1285,030 MB/sec
[info]                  ·gc.alloc.rate.norm:              10192,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,705 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10649,439 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,165 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson":
[info]   197544,261 ±(99.9%) 3400,280 ops/s [Average]
[info]   (min, avg, max) = (196415,152, 197544,261, 198368,907), stdev = 883,042
[info]   CI (99.9%): [194143,981, 200944,541] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1279,710 ±(99.9%) 21,963 MB/sec [Average]
[info]   (min, avg, max) = (1272,417, 1279,710, 1285,030), stdev = 5,704
[info]   CI (99.9%): [1257,747, 1301,673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   10192,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (10192,002, 10192,002, 10192,003), stdev = 0,001
[info]   CI (99.9%): [10192,002, 10192,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1338,337 ±(99.9%) 12,180 MB/sec [Average]
[info]   (min, avg, max) = (1334,751, 1338,337, 1342,705), stdev = 3,163
[info]   CI (99.9%): [1326,157, 1350,517] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   10659,038 ±(99.9%) 145,716 B/op [Average]
[info]   (min, avg, max) = (10621,321, 10659,038, 10718,383), stdev = 37,842
[info]   CI (99.9%): [10513,322, 10804,754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,127 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,042, 0,083), stdev = 0,033
[info]   CI (99.9%): [≈ 0, 0,168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,332 ±(99.9%) 1,010 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,332, 0,662), stdev = 0,262
[info]   CI (99.9%): [≈ 0, 1,342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 56,43% complete, ETA 00:57:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 51886,253 ops/s
[info] # Warmup Iteration   2: 55861,909 ops/s
[info] # Warmup Iteration   3: 55781,725 ops/s
[info] # Warmup Iteration   4: 55768,573 ops/s
[info] # Warmup Iteration   5: 55748,936 ops/s
[info] Iteration   1: 55592,026 ops/s
[info]                  ·gc.alloc.rate:               584,009 MB/sec
[info]                  ·gc.alloc.rate.norm:          16528,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,746 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 14482,886 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 55222,659 ops/s
[info]                  ·gc.alloc.rate:                   580,147 MB/sec
[info]                  ·gc.alloc.rate.norm:              16528,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,681 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19192,728 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1,668 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 47,523 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 55688,514 ops/s
[info]                  ·gc.alloc.rate:                   585,016 MB/sec
[info]                  ·gc.alloc.rate.norm:              16528,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,664 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19032,502 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,353 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 54066,183 ops/s
[info]                  ·gc.alloc.rate:               567,958 MB/sec
[info]                  ·gc.alloc.rate.norm:          16528,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,984 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19584,329 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 55720,031 ops/s
[info]                  ·gc.alloc.rate:               585,319 MB/sec
[info]                  ·gc.alloc.rate.norm:          16528,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,983 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19003,441 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeUPickle":
[info]   55257,883 ±(99.9%) 2676,173 ops/s [Average]
[info]   (min, avg, max) = (54066,183, 55257,883, 55720,031), stdev = 694,994
[info]   CI (99.9%): [52581,709, 57934,056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   580,490 ±(99.9%) 28,122 MB/sec [Average]
[info]   (min, avg, max) = (567,958, 580,490, 585,319), stdev = 7,303
[info]   CI (99.9%): [552,368, 608,612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   16528,008 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (16528,008, 16528,008, 16528,008), stdev = 0,001
[info]   CI (99.9%): [16528,007, 16528,009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   641,012 ±(99.9%) 278,258 MB/sec [Average]
[info]   (min, avg, max) = (511,746, 641,012, 673,681), stdev = 72,263
[info]   CI (99.9%): [362,754, 919,269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   18259,177 ±(99.9%) 8177,494 B/op [Average]
[info]   (min, avg, max) = (14482,886, 18259,177, 19584,329), stdev = 2123,669
[info]   CI (99.9%): [10081,683, 26436,671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,350 ±(99.9%) 2,840 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,350, 1,668), stdev = 0,738
[info]   CI (99.9%): [≈ 0, 3,190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   9,975 ±(99.9%) 80,920 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9,975, 47,523), stdev = 21,015
[info]   CI (99.9%): [≈ 0, 90,896] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeUPickle:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeUPickle:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 2,000), stdev = 0,837
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 56,63% complete, ETA 00:57:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 60569,989 ops/s
[info] # Warmup Iteration   2: 77396,665 ops/s
[info] # Warmup Iteration   3: 78346,516 ops/s
[info] # Warmup Iteration   4: 77809,751 ops/s
[info] # Warmup Iteration   5: 77362,536 ops/s
[info] Iteration   1: 77812,307 ops/s
[info]                  ·gc.alloc.rate:                   1750,723 MB/sec
[info]                  ·gc.alloc.rate.norm:              35400,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,321 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27162,249 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,684 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 78146,383 ops/s
[info]                  ·gc.alloc.rate:                   1758,362 MB/sec
[info]                  ·gc.alloc.rate.norm:              35400,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     40627,558 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,677 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 78195,465 ops/s
[info]                  ·gc.alloc.rate:                   1759,417 MB/sec
[info]                  ·gc.alloc.rate.norm:              35400,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,344 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27108,983 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,095 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 75842,858 ops/s
[info]                  ·gc.alloc.rate:                   1706,498 MB/sec
[info]                  ·gc.alloc.rate.norm:              35400,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2024,032 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     41986,997 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,432 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 78137,461 ops/s
[info]                  ·gc.alloc.rate:                   1758,079 MB/sec
[info]                  ·gc.alloc.rate.norm:              35400,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1351,352 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27210,300 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,419 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce":
[info]   77626,895 ±(99.9%) 3884,660 ops/s [Average]
[info]   (min, avg, max) = (75842,858, 77626,895, 78195,465), stdev = 1008,834
[info]   CI (99.9%): [73742,235, 81511,555] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate":
[info]   1746,616 ±(99.9%) 87,375 MB/sec [Average]
[info]   (min, avg, max) = (1706,498, 1746,616, 1759,417), stdev = 22,691
[info]   CI (99.9%): [1659,241, 1833,991] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   35400,006 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (35400,006, 35400,006, 35400,006), stdev = 0,001
[info]   CI (99.9%): [35400,005, 35400,007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1616,814 ±(99.9%) 1420,929 MB/sec [Average]
[info]   (min, avg, max) = (1343,321, 1616,814, 2024,032), stdev = 369,011
[info]   CI (99.9%): [195,885, 3037,743] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   32819,217 ±(99.9%) 29894,390 B/op [Average]
[info]   (min, avg, max) = (27108,983, 32819,217, 41986,997), stdev = 7763,478
[info]   CI (99.9%): [2924,827, 62713,608] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,062 ±(99.9%) 0,150 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,062, 0,104), stdev = 0,039
[info]   CI (99.9%): [≈ 0, 0,212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1,261 ±(99.9%) 3,009 B/op [Average]
[info]   (min, avg, max) = (0,419, 1,261, 2,095), stdev = 0,782
[info]   CI (99.9%): [≈ 0, 4,271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 56,83% complete, ETA 00:57:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 73408,283 ops/s
[info] # Warmup Iteration   2: 97537,426 ops/s
[info] # Warmup Iteration   3: 100033,377 ops/s
[info] # Warmup Iteration   4: 100824,840 ops/s
[info] # Warmup Iteration   5: 100480,120 ops/s
[info] Iteration   1: 101009,855 ops/s
[info]                  ·gc.alloc.rate:                   1258,909 MB/sec
[info]                  ·gc.alloc.rate.norm:              19608,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334,018 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20777,856 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,973 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 101323,213 ops/s
[info]                  ·gc.alloc.rate:                   1262,839 MB/sec
[info]                  ·gc.alloc.rate.norm:              19608,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335,396 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20734,583 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,323 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 101019,118 ops/s
[info]                  ·gc.alloc.rate:                   1259,019 MB/sec
[info]                  ·gc.alloc.rate.norm:              19608,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337,440 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20829,337 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,324 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 101303,817 ops/s
[info]                  ·gc.alloc.rate:               1262,614 MB/sec
[info]                  ·gc.alloc.rate.norm:          19608,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669,736 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10400,794 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 100434,138 ops/s
[info]                  ·gc.alloc.rate:                   1251,837 MB/sec
[info]                  ·gc.alloc.rate.norm:              19608,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,581 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20998,035 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,652 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala":
[info]   101018,028 ±(99.9%) 1382,763 ops/s [Average]
[info]   (min, avg, max) = (100434,138, 101018,028, 101323,213), stdev = 359,099
[info]   CI (99.9%): [99635,265, 102400,792] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1259,044 ±(99.9%) 17,124 MB/sec [Average]
[info]   (min, avg, max) = (1251,837, 1259,044, 1262,839), stdev = 4,447
[info]   CI (99.9%): [1241,920, 1276,168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   19608,004 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (19608,004, 19608,004, 19608,005), stdev = 0,001
[info]   CI (99.9%): [19608,004, 19608,005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1203,434 ±(99.9%) 1148,865 MB/sec [Average]
[info]   (min, avg, max) = (669,736, 1203,434, 1340,581), stdev = 298,356
[info]   CI (99.9%): [54,570, 2352,299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   18748,121 ±(99.9%) 17972,372 B/op [Average]
[info]   (min, avg, max) = (10400,794, 18748,121, 20998,035), stdev = 4667,368
[info]   CI (99.9%): [775,749, 36720,493] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,062), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,455 ±(99.9%) 1,426 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,455, 0,973), stdev = 0,370
[info]   CI (99.9%): [≈ 0, 1,881] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 57,03% complete, ETA 00:56:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 105441,456 ops/s
[info] # Warmup Iteration   2: 118336,730 ops/s
[info] # Warmup Iteration   3: 117516,910 ops/s
[info] # Warmup Iteration   4: 117616,335 ops/s
[info] # Warmup Iteration   5: 117156,151 ops/s
[info] Iteration   1: 118044,572 ops/s
[info]                  ·gc.alloc.rate:               1381,157 MB/sec
[info]                  ·gc.alloc.rate.norm:          18408,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343,757 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17909,536 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 117285,622 ops/s
[info]                  ·gc.alloc.rate:               1372,322 MB/sec
[info]                  ·gc.alloc.rate.norm:          18408,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344,754 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 18038,210 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 117054,463 ops/s
[info]                  ·gc.alloc.rate:                   1369,608 MB/sec
[info]                  ·gc.alloc.rate.norm:              18408,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,133 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18092,486 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,280 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 117979,904 ops/s
[info]                  ·gc.alloc.rate:                   1380,385 MB/sec
[info]                  ·gc.alloc.rate.norm:              18408,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,387 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17967,972 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,278 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 118017,463 ops/s
[info]                  ·gc.alloc.rate:                   1380,797 MB/sec
[info]                  ·gc.alloc.rate.norm:              18408,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,677 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17979,802 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,555 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala":
[info]   117676,405 ±(99.9%) 1809,702 ops/s [Average]
[info]   (min, avg, max) = (117054,463, 117676,405, 118044,572), stdev = 469,974
[info]   CI (99.9%): [115866,703, 119486,106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1376,854 ±(99.9%) 21,053 MB/sec [Average]
[info]   (min, avg, max) = (1369,608, 1376,854, 1381,157), stdev = 5,467
[info]   CI (99.9%): [1355,801, 1397,906] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   18408,004 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (18408,004, 18408,004, 18408,004), stdev = 0,001
[info]   CI (99.9%): [18408,003, 18408,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1346,142 ±(99.9%) 7,603 MB/sec [Average]
[info]   (min, avg, max) = (1343,757, 1346,142, 1348,677), stdev = 1,975
[info]   CI (99.9%): [1338,538, 1353,745] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   17997,601 ±(99.9%) 269,562 B/op [Average]
[info]   (min, avg, max) = (17909,536, 17997,601, 18092,486), stdev = 70,004
[info]   CI (99.9%): [17728,039, 18267,163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,017 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,042), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,223 ±(99.9%) 0,895 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,223, 0,555), stdev = 0,232
[info]   CI (99.9%): [≈ 0, 1,117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 57,23% complete, ETA 00:56:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 33583,596 ops/s
[info] # Warmup Iteration   2: 52133,898 ops/s
[info] # Warmup Iteration   3: 53163,399 ops/s
[info] # Warmup Iteration   4: 52966,606 ops/s
[info] # Warmup Iteration   5: 52337,139 ops/s
[info] Iteration   1: 53128,414 ops/s
[info]                  ·gc.alloc.rate:               2530,743 MB/sec
[info]                  ·gc.alloc.rate.norm:          74944,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2015,982 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 59700,163 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 53109,020 ops/s
[info]                  ·gc.alloc.rate:                   2529,946 MB/sec
[info]                  ·gc.alloc.rate.norm:              74944,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2695,472 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     79847,325 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,467 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 53059,113 ops/s
[info]                  ·gc.alloc.rate:                   2527,643 MB/sec
[info]                  ·gc.alloc.rate.norm:              74944,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2702,936 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     80141,406 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,087 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 53167,688 ops/s
[info]                  ·gc.alloc.rate:                   2532,710 MB/sec
[info]                  ·gc.alloc.rate.norm:              74944,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2709,365 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     80171,305 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,232 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 52860,812 ops/s
[info]                  ·gc.alloc.rate:                   2517,983 MB/sec
[info]                  ·gc.alloc.rate.norm:              74944,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2035,385 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60580,204 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,859 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson":
[info]   53065,009 ±(99.9%) 464,603 ops/s [Average]
[info]   (min, avg, max) = (52860,812, 53065,009, 53167,688), stdev = 120,656
[info]   CI (99.9%): [52600,406, 53529,612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2527,805 ±(99.9%) 22,268 MB/sec [Average]
[info]   (min, avg, max) = (2517,983, 2527,805, 2532,710), stdev = 5,783
[info]   CI (99.9%): [2505,537, 2550,073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   74944,008 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (74944,008, 74944,008, 74944,009), stdev = 0,001
[info]   CI (99.9%): [74944,007, 74944,009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2431,828 ±(99.9%) 1428,024 MB/sec [Average]
[info]   (min, avg, max) = (2015,982, 2431,828, 2709,365), stdev = 370,853
[info]   CI (99.9%): [1003,804, 3859,852] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   72088,081 ±(99.9%) 42018,455 B/op [Average]
[info]   (min, avg, max) = (59700,163, 72088,081, 80171,305), stdev = 10912,059
[info]   CI (99.9%): [30069,626, 114106,536] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,058 ±(99.9%) 0,154 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,058, 0,104), stdev = 0,040
[info]   CI (99.9%): [≈ 0, 0,213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1,729 ±(99.9%) 4,574 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,729, 3,087), stdev = 1,188
[info]   CI (99.9%): [≈ 0, 6,303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.count":
[info]   18,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,600, 4,000), stdev = 0,548
[info]   CI (99.9%): [18,000, 18,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.time":
[info]   13,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 57,43% complete, ETA 00:56:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 59757,936 ops/s
[info] # Warmup Iteration   2: 69007,907 ops/s
[info] # Warmup Iteration   3: 68728,847 ops/s
[info] # Warmup Iteration   4: 69677,649 ops/s
[info] # Warmup Iteration   5: 69485,710 ops/s
[info] Iteration   1: 69052,448 ops/s
[info]                  ·gc.alloc.rate:                   1504,234 MB/sec
[info]                  ·gc.alloc.rate.norm:              34272,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,115 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30623,891 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,949 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 69100,866 ops/s
[info]                  ·gc.alloc.rate:                   1505,340 MB/sec
[info]                  ·gc.alloc.rate.norm:              34272,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,835 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30617,794 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,474 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 68943,171 ops/s
[info]                  ·gc.alloc.rate:                   1501,880 MB/sec
[info]                  ·gc.alloc.rate.norm:              34272,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020,835 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     46114,230 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,901 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 69529,380 ops/s
[info]                  ·gc.alloc.rate:               1514,644 MB/sec
[info]                  ·gc.alloc.rate.norm:          34272,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1348,720 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 30517,627 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   5: 66690,612 ops/s
[info]                  ·gc.alloc.rate:                   1452,750 MB/sec
[info]                  ·gc.alloc.rate.norm:              34272,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350,015 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31848,390 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,965 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readUPickle":
[info]   68663,295 ±(99.9%) 4332,112 ops/s [Average]
[info]   (min, avg, max) = (66690,612, 68663,295, 69529,380), stdev = 1125,036
[info]   CI (99.9%): [64331,183, 72995,408] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1495,770 ±(99.9%) 94,469 MB/sec [Average]
[info]   (min, avg, max) = (1452,750, 1495,770, 1514,644), stdev = 24,533
[info]   CI (99.9%): [1401,300, 1590,239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   34272,006 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (34272,006, 34272,006, 34272,006), stdev = 0,001
[info]   CI (99.9%): [34272,006, 34272,007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1481,704 ±(99.9%) 1160,560 MB/sec [Average]
[info]   (min, avg, max) = (1344,115, 1481,704, 2020,835), stdev = 301,394
[info]   CI (99.9%): [321,144, 2642,264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   33944,386 ±(99.9%) 26281,377 B/op [Average]
[info]   (min, avg, max) = (30517,627, 33944,386, 46114,230), stdev = 6825,190
[info]   CI (99.9%): [7663,009, 60225,763] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,046 ±(99.9%) 0,143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,046, 0,083), stdev = 0,037
[info]   CI (99.9%): [≈ 0, 0,189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   1,058 ±(99.9%) 3,338 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,058, 1,965), stdev = 0,867
[info]   CI (99.9%): [≈ 0, 4,395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readUPickle:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readUPickle:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 57,63% complete, ETA 00:56:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 106622,867 ops/s
[info] # Warmup Iteration   2: 132359,656 ops/s
[info] # Warmup Iteration   3: 132044,239 ops/s
[info] # Warmup Iteration   4: 135149,726 ops/s
[info] # Warmup Iteration   5: 134985,680 ops/s
[info] Iteration   1: 135073,249 ops/s
[info]                  ·gc.alloc.rate:                   1267,858 MB/sec
[info]                  ·gc.alloc.rate.norm:              14768,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338,043 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15585,514 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,243 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 135212,548 ops/s
[info]                  ·gc.alloc.rate:                   1269,187 MB/sec
[info]                  ·gc.alloc.rate.norm:              14768,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338,685 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15576,672 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,969 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 133890,799 ops/s
[info]                  ·gc.alloc.rate:                   1256,740 MB/sec
[info]                  ·gc.alloc.rate.norm:              14768,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,681 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15754,401 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,734 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 133740,294 ops/s
[info]                  ·gc.alloc.rate:                   1255,382 MB/sec
[info]                  ·gc.alloc.rate.norm:              14768,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,713 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15795,349 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,490 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 126007,790 ops/s
[info]                  ·gc.alloc.rate:               1182,808 MB/sec
[info]                  ·gc.alloc.rate.norm:          14768,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,996 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8390,239 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce":
[info]   132784,936 ±(99.9%) 14813,101 ops/s [Average]
[info]   (min, avg, max) = (126007,790, 132784,936, 135212,548), stdev = 3846,915
[info]   CI (99.9%): [117971,835, 147598,037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1246,395 ±(99.9%) 138,987 MB/sec [Average]
[info]   (min, avg, max) = (1182,808, 1246,395, 1269,187), stdev = 36,095
[info]   CI (99.9%): [1107,407, 1385,382] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   14768,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (14768,003, 14768,003, 14768,003), stdev = 0,001
[info]   CI (99.9%): [14768,003, 14768,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1206,424 ±(99.9%) 1150,418 MB/sec [Average]
[info]   (min, avg, max) = (671,996, 1206,424, 1342,713), stdev = 298,760
[info]   CI (99.9%): [56,006, 2356,841] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   14220,435 ±(99.9%) 12555,612 B/op [Average]
[info]   (min, avg, max) = (8390,239, 14220,435, 15795,349), stdev = 3260,652
[info]   CI (99.9%): [1664,824, 26776,047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,127 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,042, 0,083), stdev = 0,033
[info]   CI (99.9%): [≈ 0, 0,168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,487 ±(99.9%) 1,479 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,487, 0,969), stdev = 0,384
[info]   CI (99.9%): [≈ 0, 1,967] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 57,83% complete, ETA 00:55:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 254049,212 ops/s
[info] # Warmup Iteration   2: 375475,513 ops/s
[info] # Warmup Iteration   3: 376513,078 ops/s
[info] # Warmup Iteration   4: 376731,024 ops/s
[info] # Warmup Iteration   5: 380111,760 ops/s
[info] Iteration   1: 377515,794 ops/s
[info]                  ·gc.alloc.rate:               560,504 MB/sec
[info]                  ·gc.alloc.rate.norm:          2336,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,754 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2132,827 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   2: 379272,506 ops/s
[info]                  ·gc.alloc.rate:                   563,120 MB/sec
[info]                  ·gc.alloc.rate.norm:              2336,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666,690 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2765,645 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,522 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10,462 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 379235,919 ops/s
[info]                  ·gc.alloc.rate:                   563,074 MB/sec
[info]                  ·gc.alloc.rate.norm:              2336,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666,705 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2765,929 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,346 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 378669,725 ops/s
[info]                  ·gc.alloc.rate:      562,240 MB/sec
[info]                  ·gc.alloc.rate.norm: 2336,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 374694,894 ops/s
[info]                  ·gc.alloc.rate:               556,310 MB/sec
[info]                  ·gc.alloc.rate.norm:          2336,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666,992 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2800,769 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala":
[info]   377877,768 ±(99.9%) 7376,465 ops/s [Average]
[info]   (min, avg, max) = (374694,894, 377877,768, 379272,506), stdev = 1915,644
[info]   CI (99.9%): [370501,303, 385254,232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   561,049 ±(99.9%) 10,987 MB/sec [Average]
[info]   (min, avg, max) = (556,310, 561,049, 563,120), stdev = 2,853
[info]   CI (99.9%): [550,062, 572,037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   2336,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (2336,001, 2336,001, 2336,001), stdev = 0,001
[info]   CI (99.9%): [2336,001, 2336,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   502,428 ±(99.9%) 1111,982 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 502,428, 666,992), stdev = 288,778
[info]   CI (99.9%): [≈ 0, 1614,410] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   2093,034 ±(99.9%) 4632,173 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2093,034, 2800,769), stdev = 1202,961
[info]   CI (99.9%): [≈ 0, 6725,207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,521 ±(99.9%) 4,309 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,521, 2,522), stdev = 1,119
[info]   CI (99.9%): [≈ 0, 4,830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2,161 ±(99.9%) 17,876 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,161, 10,462), stdev = 4,642
[info]   CI (99.9%): [≈ 0, 20,037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,400, 3,000), stdev = 1,140
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 58,03% complete, ETA 00:55:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 701056,581 ops/s
[info] # Warmup Iteration   2: 742464,737 ops/s
[info] # Warmup Iteration   3: 727575,452 ops/s
[info] # Warmup Iteration   4: 735358,279 ops/s
[info] # Warmup Iteration   5: 746786,157 ops/s
[info] Iteration   1: 746051,714 ops/s
[info]                  ·gc.alloc.rate:               925,648 MB/sec
[info]                  ·gc.alloc.rate.norm:          1952,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,693 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1416,461 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   2: 743957,993 ops/s
[info]                  ·gc.alloc.rate:                   923,048 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,377 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2840,883 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,088 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 751010,681 ops/s
[info]                  ·gc.alloc.rate:               931,816 MB/sec
[info]                  ·gc.alloc.rate.norm:          1952,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,718 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1407,138 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 715098,251 ops/s
[info]                  ·gc.alloc.rate:                   887,274 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,076 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1478,565 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,092 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 735587,539 ops/s
[info]                  ·gc.alloc.rate:                   912,668 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,478 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2875,550 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,089 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala":
[info]   738341,236 ±(99.9%) 54433,638 ops/s [Average]
[info]   (min, avg, max) = (715098,251, 738341,236, 751010,681), stdev = 14136,243
[info]   CI (99.9%): [683907,598, 792774,874] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   916,091 ±(99.9%) 67,501 MB/sec [Average]
[info]   (min, avg, max) = (887,274, 916,091, 931,816), stdev = 17,530
[info]   CI (99.9%): [848,589, 983,592] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1952,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1952,001, 1952,001, 1952,001), stdev = 0,001
[info]   CI (99.9%): [1952,001, 1952,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   940,668 ±(99.9%) 1417,513 MB/sec [Average]
[info]   (min, avg, max) = (671,693, 940,668, 1344,478), stdev = 368,124
[info]   CI (99.9%): [≈ 0, 2358,181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2003,719 ±(99.9%) 3005,908 B/op [Average]
[info]   (min, avg, max) = (1407,138, 2003,719, 2875,550), stdev = 780,625
[info]   CI (99.9%): [≈ 0, 5009,628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,042), stdev = 0,023
[info]   CI (99.9%): [≈ 0, 0,113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,054 ±(99.9%) 0,189 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,054, 0,092), stdev = 0,049
[info]   CI (99.9%): [≈ 0, 0,243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 58,23% complete, ETA 00:55:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 748589,945 ops/s
[info] # Warmup Iteration   2: 779661,597 ops/s
[info] # Warmup Iteration   3: 774880,599 ops/s
[info] # Warmup Iteration   4: 776154,068 ops/s
[info] # Warmup Iteration   5: 766221,459 ops/s
[info] Iteration   1: 776842,961 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 774255,066 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 775601,347 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 761238,234 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 776248,094 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc":
[info]   772837,141 ±(99.9%) 25240,609 ops/s [Average]
[info]   (min, avg, max) = (761238,234, 772837,141, 776842,961), stdev = 6554,906
[info]   CI (99.9%): [747596,531, 798077,750] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (0,001, 0,001, 0,001), stdev = 0,001
[info]   CI (99.9%): [0,001, 0,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 58,43% complete, ETA 00:55:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 234437,162 ops/s
[info] # Warmup Iteration   2: 285114,982 ops/s
[info] # Warmup Iteration   3: 244143,353 ops/s
[info] # Warmup Iteration   4: 240561,105 ops/s
[info] # Warmup Iteration   5: 243261,738 ops/s
[info] Iteration   1: 243003,391 ops/s
[info]                  ·gc.alloc.rate:                   794,521 MB/sec
[info]                  ·gc.alloc.rate.norm:              5144,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668,691 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4329,340 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,404 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 241933,369 ops/s
[info]                  ·gc.alloc.rate:                   791,057 MB/sec
[info]                  ·gc.alloc.rate.norm:              5144,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336,780 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8692,669 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,406 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 243630,763 ops/s
[info]                  ·gc.alloc.rate:               796,578 MB/sec
[info]                  ·gc.alloc.rate.norm:          5144,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668,356 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4315,995 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 241633,544 ops/s
[info]                  ·gc.alloc.rate:                   790,079 MB/sec
[info]                  ·gc.alloc.rate.norm:              5144,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668,406 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4351,820 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,271 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 238522,621 ops/s
[info]                  ·gc.alloc.rate:               779,941 MB/sec
[info]                  ·gc.alloc.rate.norm:          5144,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668,790 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4410,916 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson":
[info]   241744,737 ±(99.9%) 7597,409 ops/s [Average]
[info]   (min, avg, max) = (238522,621, 241744,737, 243630,763), stdev = 1973,023
[info]   CI (99.9%): [234147,329, 249342,146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   790,435 ±(99.9%) 24,736 MB/sec [Average]
[info]   (min, avg, max) = (779,941, 790,435, 796,578), stdev = 6,424
[info]   CI (99.9%): [765,700, 815,171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5144,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (5144,002, 5144,002, 5144,002), stdev = 0,001
[info]   CI (99.9%): [5144,002, 5144,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   802,205 ±(99.9%) 1150,714 MB/sec [Average]
[info]   (min, avg, max) = (668,356, 802,205, 1336,780), stdev = 298,837
[info]   CI (99.9%): [≈ 0, 1952,918] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   5220,148 ±(99.9%) 7476,173 B/op [Average]
[info]   (min, avg, max) = (4315,995, 5220,148, 8692,669), stdev = 1941,539
[info]   CI (99.9%): [≈ 0, 12696,321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,062), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,216 ±(99.9%) 0,789 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,216, 0,406), stdev = 0,205
[info]   CI (99.9%): [≈ 0, 1,006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 58,63% complete, ETA 00:54:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26705,664 ops/s
[info] # Warmup Iteration   2: 27801,531 ops/s
[info] # Warmup Iteration   3: 28074,507 ops/s
[info] # Warmup Iteration   4: 27965,117 ops/s
[info] # Warmup Iteration   5: 28256,919 ops/s
[info] Iteration   1: 28032,591 ops/s
[info]                  ·gc.alloc.rate:                   377,883 MB/sec
[info]                  ·gc.alloc.rate.norm:              21208,017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,747 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28720,938 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,752 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 28074,331 ops/s
[info]                  ·gc.alloc.rate:               378,446 MB/sec
[info]                  ·gc.alloc.rate.norm:          21208,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,743 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 28677,980 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 28475,771 ops/s
[info]                  ·gc.alloc.rate:                   383,862 MB/sec
[info]                  ·gc.alloc.rate.norm:              21208,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,777 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28275,214 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,057 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,126 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 28958,947 ops/s
[info]                  ·gc.alloc.rate:      390,372 MB/sec
[info]                  ·gc.alloc.rate.norm: 21208,015 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 28918,180 ops/s
[info]                  ·gc.alloc.rate:                   389,812 MB/sec
[info]                  ·gc.alloc.rate.norm:              21208,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,338 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36579,076 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,095 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 113,978 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeUPickle":
[info]   28491,964 ±(99.9%) 1706,313 ops/s [Average]
[info]   (min, avg, max) = (28032,591, 28491,964, 28958,947), stdev = 443,124
[info]   CI (99.9%): [26785,651, 30198,277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   384,075 ±(99.9%) 22,995 MB/sec [Average]
[info]   (min, avg, max) = (377,883, 384,075, 390,372), stdev = 5,972
[info]   CI (99.9%): [361,080, 407,070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   21208,015 ±(99.9%) 0,003 B/op [Average]
[info]   (min, avg, max) = (21208,015, 21208,015, 21208,017), stdev = 0,001
[info]   CI (99.9%): [21208,013, 21208,018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   441,521 ±(99.9%) 987,404 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 441,521, 672,338), stdev = 256,426
[info]   CI (99.9%): [≈ 0, 1428,925] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   24450,642 ±(99.9%) 54308,618 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 24450,642, 36579,076), stdev = 14103,776
[info]   CI (99.9%): [≈ 0, 78759,260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,437 ±(99.9%) 3,571 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,437, 2,095), stdev = 0,927
[info]   CI (99.9%): [≈ 0, 4,008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   23,771 ±(99.9%) 194,242 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 23,771, 113,978), stdev = 50,444
[info]   CI (99.9%): [≈ 0, 218,013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeUPickle:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeUPickle:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,400, 3,000), stdev = 1,140
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 58,84% complete, ETA 00:54:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 106423,947 ops/s
[info] # Warmup Iteration   2: 139634,003 ops/s
[info] # Warmup Iteration   3: 141049,952 ops/s
[info] # Warmup Iteration   4: 140268,407 ops/s
[info] # Warmup Iteration   5: 140630,728 ops/s
[info] Iteration   1: 141614,547 ops/s
[info]                  ·gc.alloc.rate:                   1942,726 MB/sec
[info]                  ·gc.alloc.rate.norm:              21584,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015,958 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22397,624 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,463 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 141205,701 ops/s
[info]                  ·gc.alloc.rate:                   1937,198 MB/sec
[info]                  ·gc.alloc.rate.norm:              21584,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020,794 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22515,413 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,464 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 141471,132 ops/s
[info]                  ·gc.alloc.rate:                   1940,823 MB/sec
[info]                  ·gc.alloc.rate.norm:              21584,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1349,001 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15002,312 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,232 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 141527,075 ops/s
[info]                  ·gc.alloc.rate:                   1941,590 MB/sec
[info]                  ·gc.alloc.rate.norm:              21584,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2027,055 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22534,091 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,463 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 141263,131 ops/s
[info]                  ·gc.alloc.rate:               1937,857 MB/sec
[info]                  ·gc.alloc.rate.norm:          21584,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2030,689 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 22617,975 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce":
[info]   141416,317 ±(99.9%) 673,565 ops/s [Average]
[info]   (min, avg, max) = (141205,701, 141416,317, 141614,547), stdev = 174,923
[info]   CI (99.9%): [140742,752, 142089,882] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate":
[info]   1940,039 ±(99.9%) 9,247 MB/sec [Average]
[info]   (min, avg, max) = (1937,198, 1940,039, 1942,726), stdev = 2,401
[info]   CI (99.9%): [1930,792, 1949,286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   21584,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (21584,003, 21584,003, 21584,003), stdev = 0,001
[info]   CI (99.9%): [21584,003, 21584,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1888,699 ±(99.9%) 1161,947 MB/sec [Average]
[info]   (min, avg, max) = (1349,001, 1888,699, 2030,689), stdev = 301,754
[info]   CI (99.9%): [726,753, 3050,646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   21013,483 ±(99.9%) 12943,042 B/op [Average]
[info]   (min, avg, max) = (15002,312, 21013,483, 22617,975), stdev = 3361,267
[info]   CI (99.9%): [8070,441, 33956,525] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,042), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,324 ±(99.9%) 0,798 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,324, 0,464), stdev = 0,207
[info]   CI (99.9%): [≈ 0, 1,122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.time":
[info]   9,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 59,04% complete, ETA 00:54:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 148884,917 ops/s
[info] # Warmup Iteration   2: 206747,976 ops/s
[info] # Warmup Iteration   3: 211315,725 ops/s
[info] # Warmup Iteration   4: 211448,832 ops/s
[info] # Warmup Iteration   5: 212062,219 ops/s
[info] Iteration   1: 211083,187 ops/s
[info]                  ·gc.alloc.rate:                   1259,005 MB/sec
[info]                  ·gc.alloc.rate.norm:              9384,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336,733 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9963,354 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,310 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 204680,053 ops/s
[info]                  ·gc.alloc.rate:                   1220,853 MB/sec
[info]                  ·gc.alloc.rate.norm:              9384,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338,063 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10284,927 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,640 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 211742,107 ops/s
[info]                  ·gc.alloc.rate:                   1262,934 MB/sec
[info]                  ·gc.alloc.rate.norm:              9384,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,071 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9957,154 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,619 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 211882,786 ops/s
[info]                  ·gc.alloc.rate:               1263,798 MB/sec
[info]                  ·gc.alloc.rate.norm:          9384,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670,689 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4980,025 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 211311,409 ops/s
[info]                  ·gc.alloc.rate:                   1260,382 MB/sec
[info]                  ·gc.alloc.rate.norm:              9384,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,744 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9997,211 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,620 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala":
[info]   210139,908 ±(99.9%) 11817,913 ops/s [Average]
[info]   (min, avg, max) = (204680,053, 210139,908, 211882,786), stdev = 3069,074
[info]   CI (99.9%): [198321,996, 221957,821] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1253,395 ±(99.9%) 70,438 MB/sec [Average]
[info]   (min, avg, max) = (1220,853, 1253,395, 1263,798), stdev = 18,293
[info]   CI (99.9%): [1182,957, 1323,833] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   9384,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (9384,002, 9384,002, 9384,002), stdev = 0,001
[info]   CI (99.9%): [9384,002, 9384,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1205,660 ±(99.9%) 1151,599 MB/sec [Average]
[info]   (min, avg, max) = (670,689, 1205,660, 1342,744), stdev = 299,067
[info]   CI (99.9%): [54,061, 2357,259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   9036,534 ±(99.9%) 8747,658 B/op [Average]
[info]   (min, avg, max) = (4980,025, 9036,534, 10284,927), stdev = 2271,739
[info]   CI (99.9%): [288,876, 17784,192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,058 ±(99.9%) 0,143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,058, 0,083), stdev = 0,037
[info]   CI (99.9%): [≈ 0, 0,202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,438 ±(99.9%) 1,080 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,438, 0,640), stdev = 0,281
[info]   CI (99.9%): [≈ 0, 1,518] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 2,000), stdev = 0,837
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 59,24% complete, ETA 00:54:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 538662,932 ops/s
[info] # Warmup Iteration   2: 566129,262 ops/s
[info] # Warmup Iteration   3: 537535,627 ops/s
[info] # Warmup Iteration   4: 568743,561 ops/s
[info] # Warmup Iteration   5: 561321,503 ops/s
[info] Iteration   1: 559933,960 ops/s
[info]                  ·gc.alloc.rate:                   1087,631 MB/sec
[info]                  ·gc.alloc.rate.norm:              3056,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,407 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3785,912 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,117 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 567963,391 ops/s
[info]                  ·gc.alloc.rate:               1103,254 MB/sec
[info]                  ·gc.alloc.rate.norm:          3056,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,728 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1866,221 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 564465,646 ops/s
[info]                  ·gc.alloc.rate:                   1096,501 MB/sec
[info]                  ·gc.alloc.rate.norm:              3056,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,574 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3755,754 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,232 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 555918,305 ops/s
[info]                  ·gc.alloc.rate:               1079,885 MB/sec
[info]                  ·gc.alloc.rate.norm:          3056,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1348,760 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3816,899 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 572191,241 ops/s
[info]                  ·gc.alloc.rate:               1111,535 MB/sec
[info]                  ·gc.alloc.rate.norm:          3056,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,768 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1855,175 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala":
[info]   564094,509 ±(99.9%) 24717,981 ops/s [Average]
[info]   (min, avg, max) = (555918,305, 564094,509, 572191,241), stdev = 6419,181
[info]   CI (99.9%): [539376,528, 588812,489] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1095,761 ±(99.9%) 48,080 MB/sec [Average]
[info]   (min, avg, max) = (1079,885, 1095,761, 1111,535), stdev = 12,486
[info]   CI (99.9%): [1047,681, 1143,841] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   3056,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (3056,001, 3056,001, 3056,001), stdev = 0,001
[info]   CI (99.9%): [3056,001, 3056,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1078,448 ±(99.9%) 1420,820 MB/sec [Average]
[info]   (min, avg, max) = (673,728, 1078,448, 1348,760), stdev = 368,982
[info]   CI (99.9%): [≈ 0, 2499,267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3015,992 ±(99.9%) 4061,903 B/op [Average]
[info]   (min, avg, max) = (1855,175, 3015,992, 3816,899), stdev = 1054,863
[info]   CI (99.9%): [≈ 0, 7077,895] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,083), stdev = 0,037
[info]   CI (99.9%): [≈ 0, 0,168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,070 ±(99.9%) 0,400 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,070, 0,232), stdev = 0,104
[info]   CI (99.9%): [≈ 0, 0,470] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 59,44% complete, ETA 00:53:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 43601,186 ops/s
[info] # Warmup Iteration   2: 75614,501 ops/s
[info] # Warmup Iteration   3: 75652,852 ops/s
[info] # Warmup Iteration   4: 75971,658 ops/s
[info] # Warmup Iteration   5: 76763,701 ops/s
[info] Iteration   1: 75879,703 ops/s
[info]                  ·gc.alloc.rate:                   3154,161 MB/sec
[info]                  ·gc.alloc.rate.norm:              65400,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2697,396 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55929,211 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,864 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 76793,894 ops/s
[info]                  ·gc.alloc.rate:                   3192,369 MB/sec
[info]                  ·gc.alloc.rate.norm:              65400,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3381,554 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69275,722 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,133 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   3: 77049,656 ops/s
[info]                  ·gc.alloc.rate:                   3202,989 MB/sec
[info]                  ·gc.alloc.rate.norm:              65400,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3390,818 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69235,188 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,276 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   4: 76400,214 ops/s
[info]                  ·gc.alloc.rate:                   3175,995 MB/sec
[info]                  ·gc.alloc.rate.norm:              65400,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2716,542 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55938,965 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,429 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 76537,181 ops/s
[info]                  ·gc.alloc.rate:                   3181,682 MB/sec
[info]                  ·gc.alloc.rate.norm:              65400,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3399,740 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69882,238 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,284 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson":
[info]   76532,130 ±(99.9%) 1699,790 ops/s [Average]
[info]   (min, avg, max) = (75879,703, 76532,130, 77049,656), stdev = 441,430
[info]   CI (99.9%): [74832,340, 78231,919] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3181,439 ±(99.9%) 70,941 MB/sec [Average]
[info]   (min, avg, max) = (3154,161, 3181,439, 3202,989), stdev = 18,423
[info]   CI (99.9%): [3110,498, 3252,379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   65400,006 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (65400,006, 65400,006, 65400,006), stdev = 0,001
[info]   CI (99.9%): [65400,005, 65400,006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3117,210 ±(99.9%) 1442,503 MB/sec [Average]
[info]   (min, avg, max) = (2697,396, 3117,210, 3399,740), stdev = 374,613
[info]   CI (99.9%): [1674,707, 4559,713] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   64052,265 ±(99.9%) 28553,597 B/op [Average]
[info]   (min, avg, max) = (55929,211, 64052,265, 69882,238), stdev = 7415,278
[info]   CI (99.9%): [35498,668, 92605,861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,058 ±(99.9%) 0,119 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,058, 0,104), stdev = 0,031
[info]   CI (99.9%): [≈ 0, 0,177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1,197 ±(99.9%) 2,429 B/op [Average]
[info]   (min, avg, max) = (0,429, 1,197, 2,133), stdev = 0,631
[info]   CI (99.9%): [≈ 0, 3,626] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.count":
[info]   23,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,600, 5,000), stdev = 0,548
[info]   CI (99.9%): [23,000, 23,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.time":
[info]   18,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 3,600, 4,000), stdev = 0,548
[info]   CI (99.9%): [18,000, 18,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 59,64% complete, ETA 00:53:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 92778,418 ops/s
[info] # Warmup Iteration   2: 102762,072 ops/s
[info] # Warmup Iteration   3: 104221,509 ops/s
[info] # Warmup Iteration   4: 104720,993 ops/s
[info] # Warmup Iteration   5: 104240,310 ops/s
[info] Iteration   1: 104070,005 ops/s
[info]                  ·gc.alloc.rate:               1578,153 MB/sec
[info]                  ·gc.alloc.rate.norm:          23856,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1347,830 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 20374,343 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 104891,980 ops/s
[info]                  ·gc.alloc.rate:               1590,499 MB/sec
[info]                  ·gc.alloc.rate.norm:          23856,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1348,717 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 20229,505 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 104633,014 ops/s
[info]                  ·gc.alloc.rate:                   1586,605 MB/sec
[info]                  ·gc.alloc.rate.norm:              23856,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2025,450 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30454,423 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,566 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 104155,179 ops/s
[info]                  ·gc.alloc.rate:               1579,386 MB/sec
[info]                  ·gc.alloc.rate.norm:          23856,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1352,114 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 20423,145 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 104360,185 ops/s
[info]                  ·gc.alloc.rate:               1582,360 MB/sec
[info]                  ·gc.alloc.rate.norm:          23856,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1353,358 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 20403,517 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readUPickle":
[info]   104422,072 ±(99.9%) 1311,938 ops/s [Average]
[info]   (min, avg, max) = (104070,005, 104422,072, 104891,980), stdev = 340,706
[info]   CI (99.9%): [103110,135, 105734,010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1583,401 ±(99.9%) 19,766 MB/sec [Average]
[info]   (min, avg, max) = (1578,153, 1583,401, 1590,499), stdev = 5,133
[info]   CI (99.9%): [1563,635, 1603,166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   23856,004 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (23856,004, 23856,004, 23856,004), stdev = 0,001
[info]   CI (99.9%): [23856,004, 23856,005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1485,494 ±(99.9%) 1162,331 MB/sec [Average]
[info]   (min, avg, max) = (1347,830, 1485,494, 2025,450), stdev = 301,854
[info]   CI (99.9%): [323,163, 2647,824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   22376,986 ±(99.9%) 17389,753 B/op [Average]
[info]   (min, avg, max) = (20229,505, 22376,986, 30454,423), stdev = 4516,064
[info]   CI (99.9%): [4987,233, 39766,740] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,021 ±(99.9%) 0,179 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,104), stdev = 0,047
[info]   CI (99.9%): [≈ 0, 0,200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,313 ±(99.9%) 2,696 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,313, 1,566), stdev = 0,700
[info]   CI (99.9%): [≈ 0, 3,009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 59,84% complete, ETA 00:53:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 151501,630 ops/s
[info] # Warmup Iteration   2: 188484,450 ops/s
[info] # Warmup Iteration   3: 185734,161 ops/s
[info] # Warmup Iteration   4: 186907,353 ops/s
[info] # Warmup Iteration   5: 189328,101 ops/s
[info] Iteration   1: 189096,080 ops/s
[info]                  ·gc.alloc.rate:               1209,592 MB/sec
[info]                  ·gc.alloc.rate.norm:          10064,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670,356 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5577,473 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 187471,035 ops/s
[info]                  ·gc.alloc.rate:                   1199,152 MB/sec
[info]                  ·gc.alloc.rate.norm:              10064,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341,305 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11257,032 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,524 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 187235,320 ops/s
[info]                  ·gc.alloc.rate:                   1197,707 MB/sec
[info]                  ·gc.alloc.rate.norm:              10064,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,035 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11285,156 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,350 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 188448,474 ops/s
[info]                  ·gc.alloc.rate:               1205,459 MB/sec
[info]                  ·gc.alloc.rate.norm:          10064,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344,723 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11226,676 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 187554,603 ops/s
[info]                  ·gc.alloc.rate:                   1199,709 MB/sec
[info]                  ·gc.alloc.rate.norm:              10064,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,963 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11290,878 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,699 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce":
[info]   187961,102 ±(99.9%) 3018,444 ops/s [Average]
[info]   (min, avg, max) = (187235,320, 187961,102, 189096,080), stdev = 783,880
[info]   CI (99.9%): [184942,659, 190979,546] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1202,324 ±(99.9%) 19,337 MB/sec [Average]
[info]   (min, avg, max) = (1197,707, 1202,324, 1209,592), stdev = 5,022
[info]   CI (99.9%): [1182,987, 1221,660] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   10064,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (10064,002, 10064,002, 10064,002), stdev = 0,001
[info]   CI (99.9%): [10064,002, 10064,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1209,076 ±(99.9%) 1159,655 MB/sec [Average]
[info]   (min, avg, max) = (670,356, 1209,076, 1345,963), stdev = 301,159
[info]   CI (99.9%): [49,421, 2368,732] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   10127,443 ±(99.9%) 9794,647 B/op [Average]
[info]   (min, avg, max) = (5577,473, 10127,443, 11290,878), stdev = 2543,639
[info]   CI (99.9%): [332,796, 19922,090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,083), stdev = 0,037
[info]   CI (99.9%): [≈ 0, 0,181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,315 ±(99.9%) 1,203 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,315, 0,699), stdev = 0,313
[info]   CI (99.9%): [≈ 0, 1,518] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 60,04% complete, ETA 00:52:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 458346,460 ops/s
[info] # Warmup Iteration   2: 592494,826 ops/s
[info] # Warmup Iteration   3: 589514,409 ops/s
[info] # Warmup Iteration   4: 596198,271 ops/s
[info] # Warmup Iteration   5: 592107,034 ops/s
[info] Iteration   1: 590913,638 ops/s
[info]                  ·gc.alloc.rate:                   582,911 MB/sec
[info]                  ·gc.alloc.rate.norm:              1552,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,758 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1362,554 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,055 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 589383,807 ops/s
[info]                  ·gc.alloc.rate:                   581,412 MB/sec
[info]                  ·gc.alloc.rate.norm:              1552,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668,022 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1783,196 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,105 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,620 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 594295,389 ops/s
[info]                  ·gc.alloc.rate:                   586,237 MB/sec
[info]                  ·gc.alloc.rate.norm:              1552,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668,030 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1768,537 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,165 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 594124,294 ops/s
[info]                  ·gc.alloc.rate:               586,092 MB/sec
[info]                  ·gc.alloc.rate.norm:          1552,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667,685 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1768,063 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 596888,695 ops/s
[info]                  ·gc.alloc.rate:               588,810 MB/sec
[info]                  ·gc.alloc.rate.norm:          1552,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667,684 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1759,898 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala":
[info]   593121,165 ±(99.9%) 11458,557 ops/s [Average]
[info]   (min, avg, max) = (589383,807, 593121,165, 596888,695), stdev = 2975,751
[info]   CI (99.9%): [581662,608, 604579,721] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   585,092 ±(99.9%) 11,298 MB/sec [Average]
[info]   (min, avg, max) = (581,412, 585,092, 588,810), stdev = 2,934
[info]   CI (99.9%): [573,794, 596,390] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1552,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1552,001, 1552,001, 1552,001), stdev = 0,001
[info]   CI (99.9%): [1552,001, 1552,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   636,636 ±(99.9%) 268,810 MB/sec [Average]
[info]   (min, avg, max) = (511,758, 636,636, 668,030), stdev = 69,809
[info]   CI (99.9%): [367,826, 905,445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1688,450 ±(99.9%) 702,259 B/op [Average]
[info]   (min, avg, max) = (1362,554, 1688,450, 1783,196), stdev = 182,374
[info]   CI (99.9%): [986,190, 2390,709] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,438 ±(99.9%) 3,591 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,438, 2,105), stdev = 0,933
[info]   CI (99.9%): [≈ 0, 4,029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1,168 ±(99.9%) 9,587 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,168, 5,620), stdev = 2,490
[info]   CI (99.9%): [≈ 0, 10,755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,400, 3,000), stdev = 1,140
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 60,24% complete, ETA 00:52:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1198921,452 ops/s
[info] # Warmup Iteration   2: 1274174,546 ops/s
[info] # Warmup Iteration   3: 1269200,927 ops/s
[info] # Warmup Iteration   4: 1245903,615 ops/s
[info] # Warmup Iteration   5: 1273033,573 ops/s
[info] Iteration   1: 1169005,002 ops/s
[info]                  ·gc.alloc.rate:               867,902 MB/sec
[info]                  ·gc.alloc.rate.norm:          1168,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,098 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 905,839 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   2: 1267469,474 ops/s
[info]                  ·gc.alloc.rate:                   941,007 MB/sec
[info]                  ·gc.alloc.rate.norm:              1168,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,197 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1670,932 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,078 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 1270054,735 ops/s
[info]                  ·gc.alloc.rate:               942,918 MB/sec
[info]                  ·gc.alloc.rate.norm:          1168,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,095 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 833,768 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 1271289,089 ops/s
[info]                  ·gc.alloc.rate:                   943,818 MB/sec
[info]                  ·gc.alloc.rate.norm:              1168,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,753 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     833,788 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,026 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 1261412,176 ops/s
[info]                  ·gc.alloc.rate:                   936,454 MB/sec
[info]                  ·gc.alloc.rate.norm:              1168,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,754 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1680,998 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,078 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala":
[info]   1247846,095 ±(99.9%) 170342,920 ops/s [Average]
[info]   (min, avg, max) = (1169005,002, 1247846,095, 1271289,089), stdev = 44237,515
[info]   CI (99.9%): [1077503,175, 1418189,016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   926,420 ±(99.9%) 126,438 MB/sec [Average]
[info]   (min, avg, max) = (867,902, 926,420, 943,818), stdev = 32,836
[info]   CI (99.9%): [799,981, 1052,858] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1168,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1168,000, 1168,000, 1168,000), stdev = 0,001
[info]   CI (99.9%): [1168,000, 1168,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   942,779 ±(99.9%) 1420,807 MB/sec [Average]
[info]   (min, avg, max) = (673,095, 942,779, 1347,754), stdev = 368,979
[info]   CI (99.9%): [≈ 0, 2363,587] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1185,065 ±(99.9%) 1729,351 B/op [Average]
[info]   (min, avg, max) = (833,768, 1185,065, 1680,998), stdev = 449,107
[info]   CI (99.9%): [≈ 0, 2914,416] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,062), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,036 ±(99.9%) 0,151 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,036, 0,078), stdev = 0,039
[info]   CI (99.9%): [≈ 0, 0,188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 60,44% complete, ETA 00:52:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1183805,374 ops/s
[info] # Warmup Iteration   2: 1241480,095 ops/s
[info] # Warmup Iteration   3: 1240363,464 ops/s
[info] # Warmup Iteration   4: 1240033,658 ops/s
[info] # Warmup Iteration   5: 1239773,744 ops/s
[info] Iteration   1: 1240957,965 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1239263,456 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1242662,196 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1243308,615 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1240188,541 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc":
[info]   1241276,154 ±(99.9%) 6496,959 ops/s [Average]
[info]   (min, avg, max) = (1239263,456, 1241276,154, 1243308,615), stdev = 1687,240
[info]   CI (99.9%): [1234779,195, 1247773,114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 60,64% complete, ETA 00:52:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 258547,121 ops/s
[info] # Warmup Iteration   2: 387702,904 ops/s
[info] # Warmup Iteration   3: 389582,928 ops/s
[info] # Warmup Iteration   4: 390699,248 ops/s
[info] # Warmup Iteration   5: 390544,174 ops/s
[info] Iteration   1: 391527,235 ops/s
[info]                  ·gc.alloc.rate:                   1069,103 MB/sec
[info]                  ·gc.alloc.rate.norm:              4296,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334,077 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5360,752 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,084 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 389034,133 ops/s
[info]                  ·gc.alloc.rate:                   1062,264 MB/sec
[info]                  ·gc.alloc.rate.norm:              4296,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334,066 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5395,224 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,253 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 391038,468 ops/s
[info]                  ·gc.alloc.rate:               1067,722 MB/sec
[info]                  ·gc.alloc.rate.norm:          4296,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2687,797 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 390406,635 ops/s
[info]                  ·gc.alloc.rate:                   1066,049 MB/sec
[info]                  ·gc.alloc.rate.norm:              4296,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336,679 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5386,594 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,252 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 390645,259 ops/s
[info]                  ·gc.alloc.rate:               1066,677 MB/sec
[info]                  ·gc.alloc.rate.norm:          4296,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668,695 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2693,143 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson":
[info]   390530,346 ±(99.9%) 3611,781 ops/s [Average]
[info]   (min, avg, max) = (389034,133, 390530,346, 391527,235), stdev = 937,968
[info]   CI (99.9%): [386918,565, 394142,127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1066,363 ±(99.9%) 9,884 MB/sec [Average]
[info]   (min, avg, max) = (1062,264, 1066,363, 1069,103), stdev = 2,567
[info]   CI (99.9%): [1056,479, 1076,247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4296,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4296,001, 4296,001, 4296,001), stdev = 0,001
[info]   CI (99.9%): [4296,001, 4296,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1068,308 ±(99.9%) 1405,886 MB/sec [Average]
[info]   (min, avg, max) = (668,021, 1068,308, 1336,679), stdev = 365,104
[info]   CI (99.9%): [≈ 0, 2474,194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4304,702 ±(99.9%) 5674,468 B/op [Average]
[info]   (min, avg, max) = (2687,797, 4304,702, 5395,224), stdev = 1473,641
[info]   CI (99.9%): [≈ 0, 9979,170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,062), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,118 ±(99.9%) 0,491 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,118, 0,253), stdev = 0,128
[info]   CI (99.9%): [≈ 0, 0,609] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 2,000), stdev = 1,095
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 60,84% complete, ETA 00:51:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 45370,520 ops/s
[info] # Warmup Iteration   2: 49133,877 ops/s
[info] # Warmup Iteration   3: 48988,028 ops/s
[info] # Warmup Iteration   4: 49245,795 ops/s
[info] # Warmup Iteration   5: 49079,023 ops/s
[info] Iteration   1: 48574,066 ops/s
[info]                  ·gc.alloc.rate:               366,799 MB/sec
[info]                  ·gc.alloc.rate.norm:          11880,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,806 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16576,570 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 48701,268 ops/s
[info]                  ·gc.alloc.rate:               367,762 MB/sec
[info]                  ·gc.alloc.rate.norm:          11880,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,802 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16533,010 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 49239,715 ops/s
[info]                  ·gc.alloc.rate:      371,799 MB/sec
[info]                  ·gc.alloc.rate.norm: 11880,009 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 49055,186 ops/s
[info]                  ·gc.alloc.rate:               370,429 MB/sec
[info]                  ·gc.alloc.rate.norm:          11880,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,752 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16412,382 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   5: 49033,748 ops/s
[info]                  ·gc.alloc.rate:                   370,231 MB/sec
[info]                  ·gc.alloc.rate.norm:              11880,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,644 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21615,936 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1,689 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 54,191 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeUPickle":
[info]   48920,797 ±(99.9%) 1056,197 ops/s [Average]
[info]   (min, avg, max) = (48574,066, 48920,797, 49239,715), stdev = 274,291
[info]   CI (99.9%): [47864,600, 49976,994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   369,404 ±(99.9%) 7,928 MB/sec [Average]
[info]   (min, avg, max) = (366,799, 369,404, 371,799), stdev = 2,059
[info]   CI (99.9%): [361,476, 377,332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   11880,009 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (11880,009, 11880,009, 11880,010), stdev = 0,001
[info]   CI (99.9%): [11880,007, 11880,011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   441,801 ±(99.9%) 988,561 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 441,801, 673,644), stdev = 256,726
[info]   CI (99.9%): [≈ 0, 1430,362] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   14227,580 ±(99.9%) 31789,273 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 14227,580, 21615,936), stdev = 8255,573
[info]   CI (99.9%): [≈ 0, 46016,853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,338 ±(99.9%) 2,908 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,338, 1,689), stdev = 0,755
[info]   CI (99.9%): [≈ 0, 3,246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   10,838 ±(99.9%) 93,320 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10,838, 54,191), stdev = 24,235
[info]   CI (99.9%): [≈ 0, 104,159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,400, 2,000), stdev = 0,894
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 61,04% complete, ETA 00:51:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 588,576 ops/s
[info] # Warmup Iteration   2: 717,758 ops/s
[info] # Warmup Iteration   3: 724,131 ops/s
[info] # Warmup Iteration   4: 724,479 ops/s
[info] # Warmup Iteration   5: 726,641 ops/s
[info] Iteration   1: 762,961 ops/s
[info]                  ·gc.alloc.rate:                   1592,996 MB/sec
[info]                  ·gc.alloc.rate.norm:              3283720,565 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331,635 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2744963,351 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 85,780 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 760,748 ops/s
[info]                  ·gc.alloc.rate:                   1587,817 MB/sec
[info]                  ·gc.alloc.rate.norm:              3283720,568 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2001,805 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4139877,256 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 86,118 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 765,290 ops/s
[info]                  ·gc.alloc.rate:                   1597,689 MB/sec
[info]                  ·gc.alloc.rate.norm:              3283723,373 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336,732 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2747378,632 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 85,556 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 765,860 ops/s
[info]                  ·gc.alloc.rate:                   1599,155 MB/sec
[info]                  ·gc.alloc.rate.norm:              3283720,720 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338,878 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2749265,106 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 85,445 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 768,593 ops/s
[info]                  ·gc.alloc.rate:                   1604,382 MB/sec
[info]                  ·gc.alloc.rate.norm:              3283720,562 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012,973 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4119990,096 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 42,611 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce":
[info]   764,691 ±(99.9%) 11,470 ops/s [Average]
[info]   (min, avg, max) = (760,748, 764,691, 768,593), stdev = 2,979
[info]   CI (99.9%): [753,221, 776,161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1596,408 ±(99.9%) 24,218 MB/sec [Average]
[info]   (min, avg, max) = (1587,817, 1596,408, 1604,382), stdev = 6,289
[info]   CI (99.9%): [1572,190, 1620,626] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   3283721,158 ±(99.9%) 4,777 B/op [Average]
[info]   (min, avg, max) = (3283720,562, 3283721,158, 3283723,373), stdev = 1,240
[info]   CI (99.9%): [3283716,381, 3283725,934] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1604,404 ±(99.9%) 1416,664 MB/sec [Average]
[info]   (min, avg, max) = (1331,635, 1604,404, 2012,973), stdev = 367,903
[info]   CI (99.9%): [187,740, 3021,069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3300294,888 ±(99.9%) 2916428,822 B/op [Average]
[info]   (min, avg, max) = (2744963,351, 3300294,888, 4139877,256), stdev = 757387,304
[info]   CI (99.9%): [383866,066, 6216723,711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,036 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,037, 0,042), stdev = 0,009
[info]   CI (99.9%): [0,002, 0,073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   77,102 ±(99.9%) 74,251 B/op [Average]
[info]   (min, avg, max) = (42,611, 77,102, 86,118), stdev = 19,283
[info]   CI (99.9%): [2,851, 151,353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 61,24% complete, ETA 00:51:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 479,817 ops/s
[info] # Warmup Iteration   2: 765,407 ops/s
[info] # Warmup Iteration   3: 766,459 ops/s
[info] # Warmup Iteration   4: 768,195 ops/s
[info] # Warmup Iteration   5: 764,189 ops/s
[info] Iteration   1: 766,693 ops/s
[info]                  ·gc.alloc.rate:                   1589,502 MB/sec
[info]                  ·gc.alloc.rate.norm:              3261531,275 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1989,787 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4082884,256 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 85,445 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 770,811 ops/s
[info]                  ·gc.alloc.rate:               1598,005 MB/sec
[info]                  ·gc.alloc.rate.norm:          3261504,602 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1329,378 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2713241,401 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 772,053 ops/s
[info]                  ·gc.alloc.rate:                   1601,086 MB/sec
[info]                  ·gc.alloc.rate.norm:              3261513,656 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331,155 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2711647,379 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 42,391 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 768,942 ops/s
[info]                  ·gc.alloc.rate:                   1594,645 MB/sec
[info]                  ·gc.alloc.rate.norm:              3261442,462 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2001,153 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4092850,868 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 85,112 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 767,981 ops/s
[info]                  ·gc.alloc.rate:                   1592,700 MB/sec
[info]                  ·gc.alloc.rate.norm:              3261463,865 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339,081 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2742114,871 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 85,222 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala":
[info]   769,296 ±(99.9%) 8,287 ops/s [Average]
[info]   (min, avg, max) = (766,693, 769,296, 772,053), stdev = 2,152
[info]   CI (99.9%): [761,009, 777,583] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1595,188 ±(99.9%) 17,385 MB/sec [Average]
[info]   (min, avg, max) = (1589,502, 1595,188, 1601,086), stdev = 4,515
[info]   CI (99.9%): [1577,802, 1612,573] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   3261491,172 ±(99.9%) 141,645 B/op [Average]
[info]   (min, avg, max) = (3261442,462, 3261491,172, 3261531,275), stdev = 36,785
[info]   CI (99.9%): [3261349,527, 3261632,817] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1598,111 ±(99.9%) 1396,930 MB/sec [Average]
[info]   (min, avg, max) = (1329,378, 1598,111, 2001,153), stdev = 362,778
[info]   CI (99.9%): [201,181, 2995,041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   3268547,755 ±(99.9%) 2880435,007 B/op [Average]
[info]   (min, avg, max) = (2711647,379, 3268547,755, 4092850,868), stdev = 748039,824
[info]   CI (99.9%): [388112,747, 6148982,762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,042), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   59,634 ±(99.9%) 146,926 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 59,634, 85,445), stdev = 38,156
[info]   CI (99.9%): [≈ 0, 206,560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   9,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 61,45% complete, ETA 00:51:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 30013,958 ops/s
[info] # Warmup Iteration   2: 43960,854 ops/s
[info] # Warmup Iteration   3: 43079,043 ops/s
[info] # Warmup Iteration   4: 43841,735 ops/s
[info] # Warmup Iteration   5: 44185,695 ops/s
[info] Iteration   1: 43462,934 ops/s
[info]                  ·gc.alloc.rate:                   765,352 MB/sec
[info]                  ·gc.alloc.rate.norm:              27704,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338,779 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48460,759 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,657 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 132,374 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   2: 44085,843 ops/s
[info]                  ·gc.alloc.rate:               776,317 MB/sec
[info]                  ·gc.alloc.rate.norm:          27704,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667,705 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23828,030 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 42679,797 ops/s
[info]                  ·gc.alloc.rate:               751,561 MB/sec
[info]                  ·gc.alloc.rate.norm:          27704,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667,687 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24612,269 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 44448,136 ops/s
[info]                  ·gc.alloc.rate:                   782,716 MB/sec
[info]                  ·gc.alloc.rate.norm:              27704,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667,697 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23632,938 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,211 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 44356,028 ops/s
[info]                  ·gc.alloc.rate:                   781,022 MB/sec
[info]                  ·gc.alloc.rate.norm:              27704,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667,664 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23683,012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,739 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala":
[info]   43806,548 ±(99.9%) 2842,188 ops/s [Average]
[info]   (min, avg, max) = (42679,797, 43806,548, 44448,136), stdev = 738,107
[info]   CI (99.9%): [40964,360, 46648,736] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   771,394 ±(99.9%) 50,022 MB/sec [Average]
[info]   (min, avg, max) = (751,561, 771,394, 782,716), stdev = 12,990
[info]   CI (99.9%): [721,372, 821,415] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   27704,010 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (27704,010, 27704,010, 27704,010), stdev = 0,001
[info]   CI (99.9%): [27704,009, 27704,011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   801,906 ±(99.9%) 1155,658 MB/sec [Average]
[info]   (min, avg, max) = (667,664, 801,906, 1338,779), stdev = 300,121
[info]   CI (99.9%): [≈ 0, 1957,564] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   28843,402 ±(99.9%) 42255,255 B/op [Average]
[info]   (min, avg, max) = (23632,938, 28843,402, 48460,759), stdev = 10973,556
[info]   CI (99.9%): [≈ 0, 71098,657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,748 ±(99.9%) 6,262 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,748, 3,657), stdev = 1,626
[info]   CI (99.9%): [≈ 0, 7,010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   27,065 ±(99.9%) 226,712 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 27,065, 132,374), stdev = 58,876
[info]   CI (99.9%): [≈ 0, 253,777] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 4,000), stdev = 1,643
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 61,65% complete, ETA 00:50:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 484,799 ops/s
[info] # Warmup Iteration   2: 747,564 ops/s
[info] # Warmup Iteration   3: 757,284 ops/s
[info] # Warmup Iteration   4: 757,904 ops/s
[info] # Warmup Iteration   5: 760,431 ops/s
[info] Iteration   1: 735,998 ops/s
[info]                  ·gc.alloc.rate:                   1575,834 MB/sec
[info]                  ·gc.alloc.rate.norm:              3366953,704 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1990,027 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4251925,883 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 88,923 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 761,990 ops/s
[info]                  ·gc.alloc.rate:                   1631,317 MB/sec
[info]                  ·gc.alloc.rate.norm:              3366952,566 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329,703 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2744438,102 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 42,946 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 751,626 ops/s
[info]                  ·gc.alloc.rate:                   1608,726 MB/sec
[info]                  ·gc.alloc.rate.norm:              3366960,064 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000,365 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4186634,894 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 174,298 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 759,632 ops/s
[info]                  ·gc.alloc.rate:               1625,866 MB/sec
[info]                  ·gc.alloc.rate.norm:          3366936,568 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337,161 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2769068,463 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 762,888 ops/s
[info]                  ·gc.alloc.rate:                   1633,245 MB/sec
[info]                  ·gc.alloc.rate.norm:              3366972,346 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338,845 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2760060,649 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 42,890 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson":
[info]   754,427 ±(99.9%) 43,195 ops/s [Average]
[info]   (min, avg, max) = (735,998, 754,427, 762,888), stdev = 11,218
[info]   CI (99.9%): [711,232, 797,622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1614,998 ±(99.9%) 92,145 MB/sec [Average]
[info]   (min, avg, max) = (1575,834, 1614,998, 1633,245), stdev = 23,930
[info]   CI (99.9%): [1522,852, 1707,143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   3366955,050 ±(99.9%) 49,978 B/op [Average]
[info]   (min, avg, max) = (3366936,568, 3366955,050, 3366972,346), stdev = 12,979
[info]   CI (99.9%): [3366905,072, 3367005,027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1599,220 ±(99.9%) 1392,044 MB/sec [Average]
[info]   (min, avg, max) = (1329,703, 1599,220, 2000,365), stdev = 361,510
[info]   CI (99.9%): [207,176, 2991,265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3342425,598 ±(99.9%) 3083736,259 B/op [Average]
[info]   (min, avg, max) = (2744438,102, 3342425,598, 4251925,883), stdev = 800836,514
[info]   CI (99.9%): [258689,339, 6426161,857] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,083), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   69,811 ±(99.9%) 255,443 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 69,811, 174,298), stdev = 66,338
[info]   CI (99.9%): [≈ 0, 325,254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.time":
[info]   9,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 61,85% complete, ETA 00:50:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 601,697 ops/s
[info] # Warmup Iteration   2: 765,633 ops/s
[info] # Warmup Iteration   3: 746,316 ops/s
[info] # Warmup Iteration   4: 743,154 ops/s
[info] # Warmup Iteration   5: 673,385 ops/s
[info] Iteration   1: 743,587 ops/s
[info]                  ·gc.alloc.rate:               1540,964 MB/sec
[info]                  ·gc.alloc.rate.norm:          3259944,667 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1333,746 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2821571,441 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 739,936 ops/s
[info]                  ·gc.alloc.rate:                   1533,836 MB/sec
[info]                  ·gc.alloc.rate.norm:              3259944,583 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2003,089 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4257275,163 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 44,221 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 738,268 ops/s
[info]                  ·gc.alloc.rate:                   1530,106 MB/sec
[info]                  ·gc.alloc.rate.norm:              3259920,411 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337,981 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2850594,295 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 177,364 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 747,005 ops/s
[info]                  ·gc.alloc.rate:                   1548,368 MB/sec
[info]                  ·gc.alloc.rate.norm:              3259896,620 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339,999 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2821202,139 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 87,615 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 746,607 ops/s
[info]                  ·gc.alloc.rate:                   1547,199 MB/sec
[info]                  ·gc.alloc.rate.norm:              3259896,578 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014,668 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4244837,783 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 87,732 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readUPickle":
[info]   743,080 ±(99.9%) 15,054 ops/s [Average]
[info]   (min, avg, max) = (738,268, 743,080, 747,005), stdev = 3,910
[info]   CI (99.9%): [728,026, 758,135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.alloc.rate":
[info]   1540,094 ±(99.9%) 30,963 MB/sec [Average]
[info]   (min, avg, max) = (1530,106, 1540,094, 1548,368), stdev = 8,041
[info]   CI (99.9%): [1509,131, 1571,057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   3259920,572 ±(99.9%) 92,465 B/op [Average]
[info]   (min, avg, max) = (3259896,578, 3259920,572, 3259944,667), stdev = 24,013
[info]   CI (99.9%): [3259828,107, 3260013,037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1605,897 ±(99.9%) 1416,652 MB/sec [Average]
[info]   (min, avg, max) = (1333,746, 1605,897, 2014,668), stdev = 367,900
[info]   CI (99.9%): [189,244, 3022,549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   3399096,164 ±(99.9%) 2995160,387 B/op [Average]
[info]   (min, avg, max) = (2821202,139, 3399096,164, 4257275,163), stdev = 777833,641
[info]   CI (99.9%): [403935,778, 6394256,551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,119 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,083), stdev = 0,031
[info]   CI (99.9%): [≈ 0, 0,156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   79,387 ±(99.9%) 253,059 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 79,387, 177,364), stdev = 65,719
[info]   CI (99.9%): [≈ 0, 332,446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 62,05% complete, ETA 00:50:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10345,503 ops/s
[info] # Warmup Iteration   2: 14513,443 ops/s
[info] # Warmup Iteration   3: 14576,574 ops/s
[info] # Warmup Iteration   4: 14528,381 ops/s
[info] # Warmup Iteration   5: 13757,352 ops/s
[info] Iteration   1: 14327,149 ops/s
[info]                  ·gc.alloc.rate:                   1167,793 MB/sec
[info]                  ·gc.alloc.rate.norm:              128232,030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328,766 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     145907,924 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6,860 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 14521,645 ops/s
[info]                  ·gc.alloc.rate:                   1183,613 MB/sec
[info]                  ·gc.alloc.rate.norm:              128232,032 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329,018 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     143985,186 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,256 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 14480,297 ops/s
[info]                  ·gc.alloc.rate:                   1180,223 MB/sec
[info]                  ·gc.alloc.rate.norm:              128225,404 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330,365 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     144537,558 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,262 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 14520,037 ops/s
[info]                  ·gc.alloc.rate:                   1182,874 MB/sec
[info]                  ·gc.alloc.rate.norm:              128168,030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665,637 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72123,893 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,512 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 14578,487 ops/s
[info]                  ·gc.alloc.rate:                   1187,601 MB/sec
[info]                  ·gc.alloc.rate.norm:              128168,030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333,278 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     143889,767 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,494 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce":
[info]   14485,523 ±(99.9%) 366,561 ops/s [Average]
[info]   (min, avg, max) = (14327,149, 14485,523, 14578,487), stdev = 95,195
[info]   CI (99.9%): [14118,962, 14852,083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1180,421 ±(99.9%) 29,024 MB/sec [Average]
[info]   (min, avg, max) = (1167,793, 1180,421, 1187,601), stdev = 7,537
[info]   CI (99.9%): [1151,397, 1209,445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   128205,105 ±(99.9%) 130,741 B/op [Average]
[info]   (min, avg, max) = (128168,030, 128205,105, 128232,032), stdev = 33,953
[info]   CI (99.9%): [128074,364, 128335,846] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1197,413 ±(99.9%) 1144,707 MB/sec [Average]
[info]   (min, avg, max) = (665,637, 1197,413, 1333,278), stdev = 297,277
[info]   CI (99.9%): [52,705, 2342,120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   130088,865 ±(99.9%) 124812,520 B/op [Average]
[info]   (min, avg, max) = (72123,893, 130088,865, 145907,924), stdev = 32413,415
[info]   CI (99.9%): [5276,345, 254901,386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,037, 0,062), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   4,077 ±(99.9%) 7,386 B/op [Average]
[info]   (min, avg, max) = (2,256, 4,077, 6,860), stdev = 1,918
[info]   CI (99.9%): [≈ 0, 11,463] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,400, 2,000), stdev = 0,894
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 62,25% complete, ETA 00:50:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10593,928 ops/s
[info] # Warmup Iteration   2: 16719,053 ops/s
[info] # Warmup Iteration   3: 16668,414 ops/s
[info] # Warmup Iteration   4: 16627,345 ops/s
[info] # Warmup Iteration   5: 16814,509 ops/s
[info] Iteration   1: 16782,909 ops/s
[info]                  ·gc.alloc.rate:                   1057,361 MB/sec
[info]                  ·gc.alloc.rate.norm:              99120,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1324,662 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     124177,583 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,904 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 16815,868 ops/s
[info]                  ·gc.alloc.rate:                   1059,467 MB/sec
[info]                  ·gc.alloc.rate.norm:              99119,937 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1324,698 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     123933,953 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,844 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 16695,697 ops/s
[info]                  ·gc.alloc.rate:               1051,906 MB/sec
[info]                  ·gc.alloc.rate.norm:          99120,143 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663,012 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 62475,037 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 16738,381 ops/s
[info]                  ·gc.alloc.rate:                   1054,530 MB/sec
[info]                  ·gc.alloc.rate.norm:              99120,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1326,999 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     124730,564 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,957 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   5: 16816,379 ops/s
[info]                  ·gc.alloc.rate:               1059,394 MB/sec
[info]                  ·gc.alloc.rate.norm:          99119,925 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663,969 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 62122,829 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala":
[info]   16769,847 ±(99.9%) 201,397 ops/s [Average]
[info]   (min, avg, max) = (16695,697, 16769,847, 16816,379), stdev = 52,302
[info]   CI (99.9%): [16568,450, 16971,244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1056,532 ±(99.9%) 12,611 MB/sec [Average]
[info]   (min, avg, max) = (1051,906, 1056,532, 1059,467), stdev = 3,275
[info]   CI (99.9%): [1043,921, 1069,142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   99120,005 ±(99.9%) 0,334 B/op [Average]
[info]   (min, avg, max) = (99119,925, 99120,005, 99120,143), stdev = 0,087
[info]   CI (99.9%): [99119,671, 99120,339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1060,668 ±(99.9%) 1396,140 MB/sec [Average]
[info]   (min, avg, max) = (663,012, 1060,668, 1326,999), stdev = 362,573
[info]   CI (99.9%): [≈ 0, 2456,808] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   99487,993 ±(99.9%) 130730,391 B/op [Average]
[info]   (min, avg, max) = (62122,829, 99487,993, 124730,564), stdev = 33950,267
[info]   CI (99.9%): [≈ 0, 230218,384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2,341 ±(99.9%) 9,784 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,341, 5,844), stdev = 2,541
[info]   CI (99.9%): [≈ 0, 12,125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   9,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,800, 5,000), stdev = 1,924
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 62,45% complete, ETA 00:49:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 261764,980 ops/s
[info] # Warmup Iteration   2: 277023,605 ops/s
[info] # Warmup Iteration   3: 276799,946 ops/s
[info] # Warmup Iteration   4: 276745,925 ops/s
[info] # Warmup Iteration   5: 274440,508 ops/s
[info] Iteration   1: 277882,763 ops/s
[info]                  ·gc.alloc.rate:                   1007,438 MB/sec
[info]                  ·gc.alloc.rate.norm:              5704,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335,373 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7560,731 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,472 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 279756,581 ops/s
[info]                  ·gc.alloc.rate:               1014,254 MB/sec
[info]                  ·gc.alloc.rate.norm:          5704,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667,011 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3751,164 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 279725,220 ops/s
[info]                  ·gc.alloc.rate:                   1014,101 MB/sec
[info]                  ·gc.alloc.rate.norm:              5704,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334,351 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7505,302 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,468 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 280280,041 ops/s
[info]                  ·gc.alloc.rate:                   1016,160 MB/sec
[info]                  ·gc.alloc.rate.norm:              5704,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335,398 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7495,974 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,234 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 277166,566 ops/s
[info]                  ·gc.alloc.rate:               1004,850 MB/sec
[info]                  ·gc.alloc.rate.norm:          5704,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668,005 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3791,911 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala":
[info]   278962,234 ±(99.9%) 5215,964 ops/s [Average]
[info]   (min, avg, max) = (277166,566, 278962,234, 280280,041), stdev = 1354,569
[info]   CI (99.9%): [273746,270, 284178,198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1011,361 ±(99.9%) 18,933 MB/sec [Average]
[info]   (min, avg, max) = (1004,850, 1011,361, 1016,160), stdev = 4,917
[info]   CI (99.9%): [992,428, 1030,294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   5704,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (5704,002, 5704,002, 5704,002), stdev = 0,001
[info]   CI (99.9%): [5704,001, 5704,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1068,027 ±(99.9%) 1407,884 MB/sec [Average]
[info]   (min, avg, max) = (667,011, 1068,027, 1335,398), stdev = 365,623
[info]   CI (99.9%): [≈ 0, 2475,911] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   6021,016 ±(99.9%) 7908,003 B/op [Average]
[info]   (min, avg, max) = (3751,164, 6021,016, 7560,731), stdev = 2053,683
[info]   CI (99.9%): [≈ 0, 13929,020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,160 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,042, 0,083), stdev = 0,042
[info]   CI (99.9%): [≈ 0, 0,202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,235 ±(99.9%) 0,905 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,235, 0,472), stdev = 0,235
[info]   CI (99.9%): [≈ 0, 1,140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 62,65% complete, ETA 00:49:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 287058,754 ops/s
[info] # Warmup Iteration   2: 307617,400 ops/s
[info] # Warmup Iteration   3: 313952,796 ops/s
[info] # Warmup Iteration   4: 313423,978 ops/s
[info] # Warmup Iteration   5: 314330,134 ops/s
[info] Iteration   1: 314403,012 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 314209,299 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 313442,579 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 313665,442 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 313858,818 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   313915,830 ±(99.9%) 1507,886 ops/s [Average]
[info]   (min, avg, max) = (313442,579, 313915,830, 314403,012), stdev = 391,593
[info]   CI (99.9%): [312407,943, 315423,716] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (0,001, 0,001, 0,001), stdev = 0,001
[info]   CI (99.9%): [0,001, 0,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 62,85% complete, ETA 00:49:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12109,511 ops/s
[info] # Warmup Iteration   2: 14855,338 ops/s
[info] # Warmup Iteration   3: 16126,365 ops/s
[info] # Warmup Iteration   4: 15984,558 ops/s
[info] # Warmup Iteration   5: 16601,625 ops/s
[info] Iteration   1: 16683,692 ops/s
[info]                  ·gc.alloc.rate:               1134,896 MB/sec
[info]                  ·gc.alloc.rate.norm:          107024,042 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663,676 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 62586,546 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 16734,942 ops/s
[info]                  ·gc.alloc.rate:                   1138,402 MB/sec
[info]                  ·gc.alloc.rate.norm:              107024,020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1327,315 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     124784,240 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,915 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 16110,747 ops/s
[info]                  ·gc.alloc.rate:                   1095,770 MB/sec
[info]                  ·gc.alloc.rate.norm:              107009,514 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328,675 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     129754,285 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,034 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 16620,155 ops/s
[info]                  ·gc.alloc.rate:                   1130,417 MB/sec
[info]                  ·gc.alloc.rate.norm:              107008,026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330,733 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     125970,419 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,942 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 16303,123 ops/s
[info]                  ·gc.alloc.rate:               1108,800 MB/sec
[info]                  ·gc.alloc.rate.norm:          107008,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666,289 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 64302,202 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson":
[info]   16490,532 ±(99.9%) 1042,537 ops/s [Average]
[info]   (min, avg, max) = (16110,747, 16490,532, 16734,942), stdev = 270,744
[info]   CI (99.9%): [15447,994, 17533,069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1121,657 ±(99.9%) 71,207 MB/sec [Average]
[info]   (min, avg, max) = (1095,770, 1121,657, 1138,402), stdev = 18,492
[info]   CI (99.9%): [1050,450, 1192,864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   107014,722 ±(99.9%) 32,805 B/op [Average]
[info]   (min, avg, max) = (107008,010, 107014,722, 107024,042), stdev = 8,519
[info]   CI (99.9%): [106981,918, 107047,527] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1063,338 ±(99.9%) 1400,286 MB/sec [Average]
[info]   (min, avg, max) = (663,676, 1063,338, 1330,733), stdev = 363,650
[info]   CI (99.9%): [≈ 0, 2463,624] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   101479,538 ±(99.9%) 133906,009 B/op [Average]
[info]   (min, avg, max) = (62586,546, 101479,538, 129754,285), stdev = 34774,965
[info]   CI (99.9%): [≈ 0, 235385,547] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,021 ±(99.9%) 0,080 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,042), stdev = 0,021
[info]   CI (99.9%): [≈ 0, 0,101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1,978 ±(99.9%) 7,565 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,978, 3,942), stdev = 1,965
[info]   CI (99.9%): [≈ 0, 9,544] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 63,05% complete, ETA 00:48:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7057,927 ops/s
[info] # Warmup Iteration   2: 8092,798 ops/s
[info] # Warmup Iteration   3: 8108,745 ops/s
[info] # Warmup Iteration   4: 8128,678 ops/s
[info] # Warmup Iteration   5: 8109,583 ops/s
[info] Iteration   1: 8093,726 ops/s
[info]                  ·gc.alloc.rate:                   854,839 MB/sec
[info]                  ·gc.alloc.rate.norm:              166160,053 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336,984 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     259877,439 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8,095 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 8096,726 ops/s
[info]                  ·gc.alloc.rate:               855,130 MB/sec
[info]                  ·gc.alloc.rate.norm:          166160,053 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667,639 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 129728,751 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 8078,385 ops/s
[info]                  ·gc.alloc.rate:               853,147 MB/sec
[info]                  ·gc.alloc.rate.norm:          166167,033 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666,962 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 129904,032 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 8145,855 ops/s
[info]                  ·gc.alloc.rate:                   860,428 MB/sec
[info]                  ·gc.alloc.rate.norm:              166184,053 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666,973 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     128819,904 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12,065 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 8029,224 ops/s
[info]                  ·gc.alloc.rate:               848,088 MB/sec
[info]                  ·gc.alloc.rate.norm:          166184,054 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1334,636 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 261523,811 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeUPickle":
[info]   8088,783 ±(99.9%) 161,086 ops/s [Average]
[info]   (min, avg, max) = (8029,224, 8088,783, 8145,855), stdev = 41,833
[info]   CI (99.9%): [7927,698, 8249,869] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.alloc.rate":
[info]   854,326 ±(99.9%) 17,053 MB/sec [Average]
[info]   (min, avg, max) = (848,088, 854,326, 860,428), stdev = 4,429
[info]   CI (99.9%): [837,273, 871,379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   166171,049 ±(99.9%) 47,010 B/op [Average]
[info]   (min, avg, max) = (166160,053, 166171,049, 166184,054), stdev = 12,208
[info]   CI (99.9%): [166124,039, 166218,059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   934,639 ±(99.9%) 1410,177 MB/sec [Average]
[info]   (min, avg, max) = (666,962, 934,639, 1336,984), stdev = 366,219
[info]   CI (99.9%): [≈ 0, 2344,816] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   181970,787 ±(99.9%) 276760,085 B/op [Average]
[info]   (min, avg, max) = (128819,904, 181970,787, 261523,811), stdev = 71873,715
[info]   CI (99.9%): [≈ 0, 458730,873] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,021 ±(99.9%) 0,113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,062), stdev = 0,029
[info]   CI (99.9%): [≈ 0, 0,134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   4,032 ±(99.9%) 21,935 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4,032, 12,065), stdev = 5,697
[info]   CI (99.9%): [≈ 0, 25,967] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 63,25% complete, ETA 00:48:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1101311,214 ops/s
[info] # Warmup Iteration   2: 990082,826 ops/s
[info] # Warmup Iteration   3: 1175553,318 ops/s
[info] # Warmup Iteration   4: 1147248,777 ops/s
[info] # Warmup Iteration   5: 1165721,253 ops/s
[info] Iteration   1: 1168982,091 ops/s
[info]                  ·gc.alloc.rate:      47,554 MB/sec
[info]                  ·gc.alloc.rate.norm: 64,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1166479,735 ops/s
[info]                  ·gc.alloc.rate:      47,452 MB/sec
[info]                  ·gc.alloc.rate.norm: 64,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1157505,632 ops/s
[info]                  ·gc.alloc.rate:      47,088 MB/sec
[info]                  ·gc.alloc.rate.norm: 64,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1168384,230 ops/s
[info]                  ·gc.alloc.rate:      47,530 MB/sec
[info]                  ·gc.alloc.rate.norm: 64,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1169441,198 ops/s
[info]                  ·gc.alloc.rate:      47,572 MB/sec
[info]                  ·gc.alloc.rate.norm: 64,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala":
[info]   1166158,577 ±(99.9%) 19125,528 ops/s [Average]
[info]   (min, avg, max) = (1157505,632, 1166158,577, 1169441,198), stdev = 4966,839
[info]   CI (99.9%): [1147033,049, 1185284,105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   47,439 ±(99.9%) 0,776 MB/sec [Average]
[info]   (min, avg, max) = (47,088, 47,439, 47,572), stdev = 0,202
[info]   CI (99.9%): [46,663, 48,215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   64,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (64,000, 64,000, 64,000), stdev = 0,001
[info]   CI (99.9%): [64,000, 64,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 63,45% complete, ETA 00:48:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 45240,582 ops/s
[info] # Warmup Iteration   2: 80069,464 ops/s
[info] # Warmup Iteration   3: 79452,200 ops/s
[info] # Warmup Iteration   4: 80927,475 ops/s
[info] # Warmup Iteration   5: 80786,082 ops/s
[info] Iteration   1: 80939,237 ops/s
[info]                  ·gc.alloc.rate:                   3547,036 MB/sec
[info]                  ·gc.alloc.rate.norm:              68944,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3377,281 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     65644,479 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,214 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   2: 80921,582 ops/s
[info]                  ·gc.alloc.rate:                   3546,148 MB/sec
[info]                  ·gc.alloc.rate.norm:              68944,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4066,068 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     79052,259 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,024 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   3: 81314,289 ops/s
[info]                  ·gc.alloc.rate:                   3563,167 MB/sec
[info]                  ·gc.alloc.rate.norm:              68944,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3395,031 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     65690,718 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,209 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   4: 80810,437 ops/s
[info]                  ·gc.alloc.rate:                   3541,134 MB/sec
[info]                  ·gc.alloc.rate.norm:              68944,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3400,408 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     66204,139 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,811 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   5: 81162,580 ops/s
[info]                  ·gc.alloc.rate:                   3556,594 MB/sec
[info]                  ·gc.alloc.rate.norm:              68944,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3402,983 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     65966,292 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,807 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson":
[info]   81029,625 ±(99.9%) 785,844 ops/s [Average]
[info]   (min, avg, max) = (80810,437, 81029,625, 81314,289), stdev = 204,081
[info]   CI (99.9%): [80243,781, 81815,469] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3550,816 ±(99.9%) 34,212 MB/sec [Average]
[info]   (min, avg, max) = (3541,134, 3550,816, 3563,167), stdev = 8,885
[info]   CI (99.9%): [3516,604, 3585,028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   68944,005 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (68944,005, 68944,005, 68944,005), stdev = 0,001
[info]   CI (99.9%): [68944,005, 68944,005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3528,354 ±(99.9%) 1158,114 MB/sec [Average]
[info]   (min, avg, max) = (3377,281, 3528,354, 4066,068), stdev = 300,759
[info]   CI (99.9%): [2370,240, 4686,468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   68511,577 ±(99.9%) 22706,249 B/op [Average]
[info]   (min, avg, max) = (65644,479, 68511,577, 79052,259), stdev = 5896,741
[info]   CI (99.9%): [45805,328, 91217,826] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,062 ±(99.9%) 0,098 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,062, 0,104), stdev = 0,026
[info]   CI (99.9%): [≈ 0, 0,161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1,213 ±(99.9%) 1,910 B/op [Average]
[info]   (min, avg, max) = (0,807, 1,213, 2,024), stdev = 0,496
[info]   CI (99.9%): [≈ 0, 3,123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.count":
[info]   26,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (5,000, 5,200, 6,000), stdev = 0,447
[info]   CI (99.9%): [26,000, 26,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.time":
[info]   19,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 3,800, 4,000), stdev = 0,447
[info]   CI (99.9%): [19,000, 19,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 63,65% complete, ETA 00:48:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1236860,802 ops/s
[info] # Warmup Iteration   2: 1671712,363 ops/s
[info] # Warmup Iteration   3: 1697474,440 ops/s
[info] # Warmup Iteration   4: 1649177,859 ops/s
[info] # Warmup Iteration   5: 1696327,940 ops/s
[info] Iteration   1: 1697948,989 ops/s
[info]                  ·gc.alloc.rate:                   975,607 MB/sec
[info]                  ·gc.alloc.rate.norm:              904,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667,698 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     618,691 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,019 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 1695683,866 ops/s
[info]                  ·gc.alloc.rate:                   974,300 MB/sec
[info]                  ·gc.alloc.rate.norm:              904,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335,717 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1239,340 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,097 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 1672245,598 ops/s
[info]                  ·gc.alloc.rate:               960,837 MB/sec
[info]                  ·gc.alloc.rate.norm:          904,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668,030 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 628,514 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 1689253,459 ops/s
[info]                  ·gc.alloc.rate:                   970,585 MB/sec
[info]                  ·gc.alloc.rate.norm:              904,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337,343 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1245,598 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,039 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 1688904,256 ops/s
[info]                  ·gc.alloc.rate:               970,428 MB/sec
[info]                  ·gc.alloc.rate.norm:          904,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669,369 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 623,550 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala":
[info]   1688807,234 ±(99.9%) 38763,386 ops/s [Average]
[info]   (min, avg, max) = (1672245,598, 1688807,234, 1697948,989), stdev = 10066,728
[info]   CI (99.9%): [1650043,847, 1727570,620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   970,351 ±(99.9%) 22,271 MB/sec [Average]
[info]   (min, avg, max) = (960,837, 970,351, 975,607), stdev = 5,784
[info]   CI (99.9%): [948,080, 992,622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   904,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (904,000, 904,000, 904,000), stdev = 0,001
[info]   CI (99.9%): [904,000, 904,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   935,632 ±(99.9%) 1409,219 MB/sec [Average]
[info]   (min, avg, max) = (667,698, 935,632, 1337,343), stdev = 365,970
[info]   CI (99.9%): [≈ 0, 2344,851] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   871,139 ±(99.9%) 1305,375 B/op [Average]
[info]   (min, avg, max) = (618,691, 871,139, 1245,598), stdev = 339,002
[info]   CI (99.9%): [≈ 0, 2176,514] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,166 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,104), stdev = 0,043
[info]   CI (99.9%): [≈ 0, 0,200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,031 ±(99.9%) 0,154 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,031, 0,097), stdev = 0,040
[info]   CI (99.9%): [≈ 0, 0,185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 63,86% complete, ETA 00:47:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1825465,332 ops/s
[info] # Warmup Iteration   2: 1869649,152 ops/s
[info] # Warmup Iteration   3: 1767169,060 ops/s
[info] # Warmup Iteration   4: 2002350,345 ops/s
[info] # Warmup Iteration   5: 2003024,056 ops/s
[info] Iteration   1: 2008024,552 ops/s
[info]                  ·gc.alloc.rate:                   561,589 MB/sec
[info]                  ·gc.alloc.rate.norm:              440,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,766 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     400,964 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,008 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 2005274,783 ops/s
[info]                  ·gc.alloc.rate:                   560,829 MB/sec
[info]                  ·gc.alloc.rate.norm:              440,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,696 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     528,550 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1,564 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,227 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 2015249,307 ops/s
[info]                  ·gc.alloc.rate:      563,614 MB/sec
[info]                  ·gc.alloc.rate.norm: 440,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2015236,877 ops/s
[info]                  ·gc.alloc.rate:                   563,599 MB/sec
[info]                  ·gc.alloc.rate.norm:              440,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,695 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     525,951 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,049 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 1982576,118 ops/s
[info]                  ·gc.alloc.rate:               554,471 MB/sec
[info]                  ·gc.alloc.rate.norm:          440,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,037 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 534,089 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala":
[info]   2005272,327 ±(99.9%) 51716,492 ops/s [Average]
[info]   (min, avg, max) = (1982576,118, 2005272,327, 2015249,307), stdev = 13430,609
[info]   CI (99.9%): [1953555,835, 2056988,820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   560,821 ±(99.9%) 14,464 MB/sec [Average]
[info]   (min, avg, max) = (554,471, 560,821, 563,614), stdev = 3,756
[info]   CI (99.9%): [546,357, 575,284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   440,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (440,000, 440,000, 440,000), stdev = 0,001
[info]   CI (99.9%): [440,000, 440,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   506,439 ±(99.9%) 1122,997 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506,439, 673,696), stdev = 291,639
[info]   CI (99.9%): [≈ 0, 1629,436] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   397,911 ±(99.9%) 883,023 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 397,911, 534,089), stdev = 229,318
[info]   CI (99.9%): [≈ 0, 1280,934] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,327 ±(99.9%) 2,664 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,327, 1,564), stdev = 0,692
[info]   CI (99.9%): [≈ 0, 2,991] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,257 ±(99.9%) 2,090 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,257, 1,227), stdev = 0,543
[info]   CI (99.9%): [≈ 0, 2,347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 64,06% complete, ETA 00:47:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1871484,929 ops/s
[info] # Warmup Iteration   2: 1996271,315 ops/s
[info] # Warmup Iteration   3: 2037241,510 ops/s
[info] # Warmup Iteration   4: 2027298,294 ops/s
[info] # Warmup Iteration   5: 2043117,713 ops/s
[info] Iteration   1: 2042540,177 ops/s
[info]                  ·gc.alloc.rate:      20,772 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2035700,638 ops/s
[info]                  ·gc.alloc.rate:      20,703 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2041569,814 ops/s
[info]                  ·gc.alloc.rate:      20,762 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2037665,244 ops/s
[info]                  ·gc.alloc.rate:      20,722 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2040567,509 ops/s
[info]                  ·gc.alloc.rate:      20,751 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc":
[info]   2039608,677 ±(99.9%) 10960,614 ops/s [Average]
[info]   (min, avg, max) = (2035700,638, 2039608,677, 2042540,177), stdev = 2846,437
[info]   CI (99.9%): [2028648,063, 2050569,290] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   20,742 ±(99.9%) 0,112 MB/sec [Average]
[info]   (min, avg, max) = (20,703, 20,742, 20,772), stdev = 0,029
[info]   CI (99.9%): [20,630, 20,854] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (16,000, 16,000, 16,000), stdev = 0,001
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 64,26% complete, ETA 00:47:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 25985,213 ops/s
[info] # Warmup Iteration   2: 41704,715 ops/s
[info] # Warmup Iteration   3: 42088,367 ops/s
[info] # Warmup Iteration   4: 41696,667 ops/s
[info] # Warmup Iteration   5: 42107,862 ops/s
[info] Iteration   1: 41975,316 ops/s
[info]                  ·gc.alloc.rate:               1831,634 MB/sec
[info]                  ·gc.alloc.rate.norm:          68648,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338,170 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 50153,414 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 40882,056 ops/s
[info]                  ·gc.alloc.rate:                   1783,915 MB/sec
[info]                  ·gc.alloc.rate.norm:              68648,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011,599 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     77409,672 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,206 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 40917,433 ops/s
[info]                  ·gc.alloc.rate:                   1785,507 MB/sec
[info]                  ·gc.alloc.rate.norm:              68648,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016,337 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     77522,828 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,601 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 42107,540 ops/s
[info]                  ·gc.alloc.rate:                   1837,387 MB/sec
[info]                  ·gc.alloc.rate.norm:              68648,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2021,625 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     75531,434 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,556 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 42154,273 ops/s
[info]                  ·gc.alloc.rate:                   1839,451 MB/sec
[info]                  ·gc.alloc.rate.norm:              68648,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350,203 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50389,350 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,554 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson":
[info]   41607,324 ±(99.9%) 2500,512 ops/s [Average]
[info]   (min, avg, max) = (40882,056, 41607,324, 42154,273), stdev = 649,375
[info]   CI (99.9%): [39106,812, 44107,835] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1815,579 ±(99.9%) 109,085 MB/sec [Average]
[info]   (min, avg, max) = (1783,915, 1815,579, 1839,451), stdev = 28,329
[info]   CI (99.9%): [1706,493, 1924,664] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   68648,011 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (68648,010, 68648,011, 68648,011), stdev = 0,001
[info]   CI (99.9%): [68648,009, 68648,012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1747,587 ±(99.9%) 1418,170 MB/sec [Average]
[info]   (min, avg, max) = (1338,170, 1747,587, 2021,625), stdev = 368,294
[info]   CI (99.9%): [329,417, 3165,757] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   66201,339 ±(99.9%) 56079,722 B/op [Average]
[info]   (min, avg, max) = (50153,414, 66201,339, 77522,828), stdev = 14563,726
[info]   CI (99.9%): [10121,617, 122281,062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,042, 0,083), stdev = 0,029
[info]   CI (99.9%): [≈ 0, 0,155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1,584 ±(99.9%) 4,365 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,584, 3,206), stdev = 1,134
[info]   CI (99.9%): [≈ 0, 5,949] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.time":
[info]   11,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce
[info] # Run progress: 64,46% complete, ETA 00:47:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 554969,997 ops/s
[info] # Warmup Iteration   2: 877813,051 ops/s
[info] # Warmup Iteration   3: 886694,309 ops/s
[info] # Warmup Iteration   4: 879371,209 ops/s
[info] # Warmup Iteration   5: 883856,759 ops/s
[info] Iteration   1: 877991,559 ops/s
[info]                  ·gc.alloc.rate:                   2861,836 MB/sec
[info]                  ·gc.alloc.rate.norm:              5128,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2704,244 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4845,618 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,112 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 872552,430 ops/s
[info]                  ·gc.alloc.rate:                   2844,336 MB/sec
[info]                  ·gc.alloc.rate.norm:              5128,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2709,892 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4885,615 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,113 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 881780,323 ops/s
[info]                  ·gc.alloc.rate:                   2874,310 MB/sec
[info]                  ·gc.alloc.rate.norm:              5128,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3393,246 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6053,824 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,186 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 878650,240 ops/s
[info]                  ·gc.alloc.rate:                   2863,880 MB/sec
[info]                  ·gc.alloc.rate.norm:              5128,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2718,124 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4867,014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,112 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 882954,978 ops/s
[info]                  ·gc.alloc.rate:                   2877,854 MB/sec
[info]                  ·gc.alloc.rate.norm:              5128,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2720,824 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4848,191 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,037 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce":
[info]   878785,906 ±(99.9%) 15623,997 ops/s [Average]
[info]   (min, avg, max) = (872552,430, 878785,906, 882954,978), stdev = 4057,503
[info]   CI (99.9%): [863161,908, 894409,903] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.alloc.rate":
[info]   2864,443 ±(99.9%) 50,524 MB/sec [Average]
[info]   (min, avg, max) = (2844,336, 2864,443, 2877,854), stdev = 13,121
[info]   CI (99.9%): [2813,919, 2914,967] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5128,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (5128,000, 5128,000, 5128,001), stdev = 0,001
[info]   CI (99.9%): [5128,000, 5128,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2849,266 ±(99.9%) 1171,232 MB/sec [Average]
[info]   (min, avg, max) = (2704,244, 2849,266, 3393,246), stdev = 304,165
[info]   CI (99.9%): [1678,034, 4020,498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5100,052 ±(99.9%) 2054,004 B/op [Average]
[info]   (min, avg, max) = (4845,618, 5100,052, 6053,824), stdev = 533,418
[info]   CI (99.9%): [3046,048, 7154,057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,062 ±(99.9%) 0,113 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,062, 0,104), stdev = 0,029
[info]   CI (99.9%): [≈ 0, 0,176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,112 ±(99.9%) 0,202 B/op [Average]
[info]   (min, avg, max) = (0,037, 0,112, 0,186), stdev = 0,053
[info]   CI (99.9%): [≈ 0, 0,314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.count":
[info]   21,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,200, 5,000), stdev = 0,447
[info]   CI (99.9%): [21,000, 21,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.time":
[info]   11,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava
[info] # Run progress: 64,66% complete, ETA 00:46:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0,992 ops/s
[info] # Warmup Iteration   2: 5707349,410 ops/s
[info] # Warmup Iteration   3: 5877702,782 ops/s
[info] # Warmup Iteration   4: 5926514,852 ops/s
[info] # Warmup Iteration   5: 5938785,980 ops/s
[info] Iteration   1: 5825287,824 ops/s
[info]                  ·gc.alloc.rate:                   355,448 MB/sec
[info]                  ·gc.alloc.rate.norm:              96,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,780 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     138,222 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,006 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 5879895,275 ops/s
[info]                  ·gc.alloc.rate:               358,780 MB/sec
[info]                  ·gc.alloc.rate.norm:          96,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,780 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 136,939 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 5832027,273 ops/s
[info]                  ·gc.alloc.rate:                   355,857 MB/sec
[info]                  ·gc.alloc.rate.norm:              96,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,775 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     138,063 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,007 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,002 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 5927331,843 ops/s
[info]                  ·gc.alloc.rate:      361,687 MB/sec
[info]                  ·gc.alloc.rate.norm: 96,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 5923232,155 ops/s
[info]                  ·gc.alloc.rate:                   361,414 MB/sec
[info]                  ·gc.alloc.rate.norm:              96,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664,014 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     176,378 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,027 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,007 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava":
[info]   5877554,874 ±(99.9%) 186410,992 ops/s [Average]
[info]   (min, avg, max) = (5825287,824, 5877554,874, 5927331,843), stdev = 48410,343
[info]   CI (99.9%): [5691143,882, 6063965,866] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   358,637 ±(99.9%) 11,379 MB/sec [Average]
[info]   (min, avg, max) = (355,448, 358,637, 361,687), stdev = 2,955
[info]   CI (99.9%): [347,258, 370,016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   96,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (96,000, 96,000, 96,000), stdev = 0,001
[info]   CI (99.9%): [96,000, 96,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   439,870 ±(99.9%) 980,287 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 439,870, 664,014), stdev = 254,577
[info]   CI (99.9%): [≈ 0, 1420,157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   117,920 ±(99.9%) 261,887 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 117,920, 176,378), stdev = 68,011
[info]   CI (99.9%): [≈ 0, 379,807] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,011 ±(99.9%) 0,048 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,011, 0,027), stdev = 0,012
[info]   CI (99.9%): [≈ 0, 0,059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0,003 ±(99.9%) 0,013 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,003, 0,007), stdev = 0,003
[info]   CI (99.9%): [≈ 0, 0,016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,400, 2,000), stdev = 0,894
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala
[info] # Run progress: 64,86% complete, ETA 00:46:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 464628,998 ops/s
[info] # Warmup Iteration   2: 1100682,039 ops/s
[info] # Warmup Iteration   3: 1090196,536 ops/s
[info] # Warmup Iteration   4: 1050906,339 ops/s
[info] # Warmup Iteration   5: 1105165,327 ops/s
[info] Iteration   1: 1111904,192 ops/s
[info]                  ·gc.alloc.rate:                   1379,499 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334,034 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1887,666 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,059 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 1101979,327 ops/s
[info]                  ·gc.alloc.rate:                   1367,238 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336,019 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1907,429 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,059 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 1004852,644 ops/s
[info]                  ·gc.alloc.rate:                   1246,746 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337,321 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2093,811 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,033 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 1110432,472 ops/s
[info]                  ·gc.alloc.rate:               1377,719 MB/sec
[info]                  ·gc.alloc.rate.norm:          1952,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340,034 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1898,607 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   5: 1079148,169 ops/s
[info]                  ·gc.alloc.rate:                   1338,919 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,751 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1957,587 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,061 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala":
[info]   1081663,361 ±(99.9%) 172862,613 ops/s [Average]
[info]   (min, avg, max) = (1004852,644, 1081663,361, 1111904,192), stdev = 44891,872
[info]   CI (99.9%): [908800,748, 1254525,974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1342,024 ±(99.9%) 214,410 MB/sec [Average]
[info]   (min, avg, max) = (1246,746, 1342,024, 1379,499), stdev = 55,682
[info]   CI (99.9%): [1127,615, 1556,434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1952,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1952,000, 1952,000, 1952,000), stdev = 0,001
[info]   CI (99.9%): [1952,000, 1952,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1338,032 ±(99.9%) 13,175 MB/sec [Average]
[info]   (min, avg, max) = (1334,034, 1338,032, 1342,751), stdev = 3,422
[info]   CI (99.9%): [1324,857, 1351,207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1949,020 ±(99.9%) 328,286 B/op [Average]
[info]   (min, avg, max) = (1887,666, 1949,020, 2093,811), stdev = 85,255
[info]   CI (99.9%): [1620,734, 2277,306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,042), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,042 ±(99.9%) 0,102 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,042, 0,061), stdev = 0,026
[info]   CI (99.9%): [≈ 0, 0,144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala
[info] # Run progress: 65,06% complete, ETA 00:46:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7635317,773 ops/s
[info] # Warmup Iteration   2: 8302656,033 ops/s
[info] # Warmup Iteration   3: 8384586,563 ops/s
[info] # Warmup Iteration   4: 8318099,757 ops/s
[info] # Warmup Iteration   5: 8417261,673 ops/s
[info] Iteration   1: 8295749,722 ops/s
[info]                  ·gc.alloc.rate:               379,673 MB/sec
[info]                  ·gc.alloc.rate.norm:          72,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,805 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 97,057 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 8365185,818 ops/s
[info]                  ·gc.alloc.rate:               382,825 MB/sec
[info]                  ·gc.alloc.rate.norm:          72,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,760 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 96,250 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 8424243,589 ops/s
[info]                  ·gc.alloc.rate:                   385,543 MB/sec
[info]                  ·gc.alloc.rate.norm:              72,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,818 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     95,582 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,046 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,009 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 8427335,710 ops/s
[info]                  ·gc.alloc.rate:      385,663 MB/sec
[info]                  ·gc.alloc.rate.norm: 72,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 8419173,258 ops/s
[info]                  ·gc.alloc.rate:                   385,305 MB/sec
[info]                  ·gc.alloc.rate.norm:              72,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          676,416 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     126,398 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1,470 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,275 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala":
[info]   8386337,619 ±(99.9%) 218245,677 ops/s [Average]
[info]   (min, avg, max) = (8295749,722, 8386337,619, 8427335,710), stdev = 56677,709
[info]   CI (99.9%): [8168091,942, 8604583,297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   383,802 ±(99.9%) 9,959 MB/sec [Average]
[info]   (min, avg, max) = (379,673, 383,802, 385,663), stdev = 2,586
[info]   CI (99.9%): [373,843, 393,761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   72,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (72,000, 72,000, 72,000), stdev = 0,001
[info]   CI (99.9%): [72,000, 72,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   442,360 ±(99.9%) 990,985 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 442,360, 676,416), stdev = 257,356
[info]   CI (99.9%): [≈ 0, 1433,345] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   83,057 ±(99.9%) 185,710 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 83,057, 126,398), stdev = 48,228
[info]   CI (99.9%): [≈ 0, 268,767] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,303 ±(99.9%) 2,513 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,303, 1,470), stdev = 0,653
[info]   CI (99.9%): [≈ 0, 2,817] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,057 ±(99.9%) 0,470 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,057, 0,275), stdev = 0,122
[info]   CI (99.9%): [≈ 0, 0,526] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 3,000), stdev = 1,095
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson
[info] # Run progress: 65,26% complete, ETA 00:46:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 86315,608 ops/s
[info] # Warmup Iteration   2: 298760,615 ops/s
[info] # Warmup Iteration   3: 301805,791 ops/s
[info] # Warmup Iteration   4: 306758,271 ops/s
[info] # Warmup Iteration   5: 305584,350 ops/s
[info] Iteration   1: 290885,517 ops/s
[info]                  ·gc.alloc.rate:                   1501,297 MB/sec
[info]                  ·gc.alloc.rate.norm:              8120,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334,708 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7218,982 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,113 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 307007,486 ops/s
[info]                  ·gc.alloc.rate:                   1584,515 MB/sec
[info]                  ·gc.alloc.rate.norm:              8120,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10275,035 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,427 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 308535,048 ops/s
[info]                  ·gc.alloc.rate:                   1592,461 MB/sec
[info]                  ·gc.alloc.rate.norm:              8120,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,100 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6833,206 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,425 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 308776,849 ops/s
[info]                  ·gc.alloc.rate:                   1593,711 MB/sec
[info]                  ·gc.alloc.rate.norm:              8120,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014,274 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10262,780 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,318 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 306271,380 ops/s
[info]                  ·gc.alloc.rate:               1580,772 MB/sec
[info]                  ·gc.alloc.rate.norm:          8120,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345,505 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6911,499 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson":
[info]   304295,256 ±(99.9%) 29144,495 ops/s [Average]
[info]   (min, avg, max) = (290885,517, 304295,256, 308776,849), stdev = 7568,733
[info]   CI (99.9%): [275150,760, 333439,751] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1570,551 ±(99.9%) 150,521 MB/sec [Average]
[info]   (min, avg, max) = (1501,297, 1570,551, 1593,711), stdev = 39,090
[info]   CI (99.9%): [1420,030, 1721,072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   8120,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (8120,001, 8120,001, 8120,002), stdev = 0,001
[info]   CI (99.9%): [8120,001, 8120,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1607,926 ±(99.9%) 1412,277 MB/sec [Average]
[info]   (min, avg, max) = (1334,708, 1607,926, 2014,274), stdev = 366,764
[info]   CI (99.9%): [195,648, 3020,203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   8300,300 ±(99.9%) 6942,191 B/op [Average]
[info]   (min, avg, max) = (6833,206, 8300,300, 10275,035), stdev = 1802,865
[info]   CI (99.9%): [1358,109, 15242,491] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,050 ±(99.9%) 0,146 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,050, 0,083), stdev = 0,038
[info]   CI (99.9%): [≈ 0, 0,196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,257 ±(99.9%) 0,740 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,257, 0,427), stdev = 0,192
[info]   CI (99.9%): [≈ 0, 0,996] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.time":
[info]   9,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 3,000), stdev = 1,095
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readUPickle
[info] # Run progress: 65,46% complete, ETA 00:45:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 454293,822 ops/s
[info] # Warmup Iteration   2: 656024,942 ops/s
[info] # Warmup Iteration   3: 662360,342 ops/s
[info] # Warmup Iteration   4: 647516,150 ops/s
[info] # Warmup Iteration   5: 663769,137 ops/s
[info] Iteration   1: 660107,232 ops/s
[info]                  ·gc.alloc.rate:                   1426,533 MB/sec
[info]                  ·gc.alloc.rate.norm:              3400,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,369 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3211,322 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,099 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 658157,784 ops/s
[info]                  ·gc.alloc.rate:                   1422,359 MB/sec
[info]                  ·gc.alloc.rate.norm:              3400,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,088 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3222,462 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,199 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 652137,473 ops/s
[info]                  ·gc.alloc.rate:               1409,413 MB/sec
[info]                  ·gc.alloc.rate.norm:          3400,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1349,171 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3254,675 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   4: 663272,935 ops/s
[info]                  ·gc.alloc.rate:                   1433,381 MB/sec
[info]                  ·gc.alloc.rate.norm:              3400,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350,044 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3202,323 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,049 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 661093,141 ops/s
[info]                  ·gc.alloc.rate:                   1428,679 MB/sec
[info]                  ·gc.alloc.rate.norm:              3400,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2027,447 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4824,960 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,099 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readUPickle":
[info]   658953,713 ±(99.9%) 16298,060 ops/s [Average]
[info]   (min, avg, max) = (652137,473, 658953,713, 663272,935), stdev = 4232,554
[info]   CI (99.9%): [642655,654, 675251,773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1424,073 ±(99.9%) 35,067 MB/sec [Average]
[info]   (min, avg, max) = (1409,413, 1424,073, 1433,381), stdev = 9,107
[info]   CI (99.9%): [1389,006, 1459,140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   3400,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (3400,001, 3400,001, 3400,001), stdev = 0,001
[info]   CI (99.9%): [3400,001, 3400,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1484,424 ±(99.9%) 1168,905 MB/sec [Average]
[info]   (min, avg, max) = (1347,369, 1484,424, 2027,447), stdev = 303,561
[info]   CI (99.9%): [315,519, 2653,329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   3543,148 ±(99.9%) 2760,249 B/op [Average]
[info]   (min, avg, max) = (3202,323, 3543,148, 4824,960), stdev = 716,828
[info]   CI (99.9%): [782,900, 6303,397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,119 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,083), stdev = 0,031
[info]   CI (99.9%): [≈ 0, 0,156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,089 ±(99.9%) 0,284 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,089, 0,199), stdev = 0,074
[info]   CI (99.9%): [≈ 0, 0,374] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readUPickle:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readUPickle:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce
[info] # Run progress: 65,66% complete, ETA 00:45:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2820,126 ops/s
[info] # Warmup Iteration   2: 4010,911 ops/s
[info] # Warmup Iteration   3: 4026,903 ops/s
[info] # Warmup Iteration   4: 4090,104 ops/s
[info] # Warmup Iteration   5: 4050,385 ops/s
[info] Iteration   1: 4054,205 ops/s
[info]                  ·gc.alloc.rate:                   2011,822 MB/sec
[info]                  ·gc.alloc.rate.norm:              780640,107 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011,092 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     780356,671 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 48,473 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 4089,710 ops/s
[info]                  ·gc.alloc.rate:                   2029,291 MB/sec
[info]                  ·gc.alloc.rate.norm:              780640,106 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016,862 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     775859,094 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,229 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 88,108 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 4095,058 ops/s
[info]                  ·gc.alloc.rate:                   2031,911 MB/sec
[info]                  ·gc.alloc.rate.norm:              780640,105 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020,999 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     776448,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 64,000 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 4060,485 ops/s
[info]                  ·gc.alloc.rate:                   2014,822 MB/sec
[info]                  ·gc.alloc.rate.norm:              780640,114 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2024,774 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     784495,929 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8,067 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 4066,276 ops/s
[info]                  ·gc.alloc.rate:                   2017,503 MB/sec
[info]                  ·gc.alloc.rate.norm:              780640,106 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2028,973 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     785078,417 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24,171 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce":
[info]   4073,147 ±(99.9%) 69,970 ops/s [Average]
[info]   (min, avg, max) = (4054,205, 4073,147, 4095,058), stdev = 18,171
[info]   CI (99.9%): [4003,176, 4143,117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.alloc.rate":
[info]   2021,070 ±(99.9%) 34,569 MB/sec [Average]
[info]   (min, avg, max) = (2011,822, 2021,070, 2031,911), stdev = 8,978
[info]   CI (99.9%): [1986,500, 2055,639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   780640,108 ±(99.9%) 0,014 B/op [Average]
[info]   (min, avg, max) = (780640,105, 780640,108, 780640,114), stdev = 0,004
[info]   CI (99.9%): [780640,093, 780640,122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2020,540 ±(99.9%) 26,682 MB/sec [Average]
[info]   (min, avg, max) = (2011,092, 2020,540, 2028,973), stdev = 6,929
[info]   CI (99.9%): [1993,858, 2047,222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   780447,622 ±(99.9%) 16661,867 B/op [Average]
[info]   (min, avg, max) = (775859,094, 780447,622, 785078,417), stdev = 4327,034
[info]   CI (99.9%): [763785,755, 797109,489] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,121 ±(99.9%) 0,318 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,121, 0,229), stdev = 0,083
[info]   CI (99.9%): [≈ 0, 0,438] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   46,564 ±(99.9%) 122,026 B/op [Average]
[info]   (min, avg, max) = (8,067, 46,564, 88,108), stdev = 31,690
[info]   CI (99.9%): [≈ 0, 168,590] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.count":
[info]   15,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,000, 3,000), stdev = 0,001
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.time":
[info]   11,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala
[info] # Run progress: 65,86% complete, ETA 00:45:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3067,603 ops/s
[info] # Warmup Iteration   2: 5585,371 ops/s
[info] # Warmup Iteration   3: 5664,818 ops/s
[info] # Warmup Iteration   4: 5627,113 ops/s
[info] # Warmup Iteration   5: 5646,092 ops/s
[info] Iteration   1: 5691,680 ops/s
[info]                  ·gc.alloc.rate:                   2384,310 MB/sec
[info]                  ·gc.alloc.rate.norm:              659032,087 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2677,471 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     740062,949 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17,268 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 5641,933 ops/s
[info]                  ·gc.alloc.rate:                   2363,343 MB/sec
[info]                  ·gc.alloc.rate.norm:              659032,077 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014,745 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     561823,416 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23,227 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 5699,093 ops/s
[info]                  ·gc.alloc.rate:                   2387,455 MB/sec
[info]                  ·gc.alloc.rate.norm:              659032,076 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2693,899 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     743622,657 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17,243 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   4: 5724,051 ops/s
[info]                  ·gc.alloc.rate:                   2397,894 MB/sec
[info]                  ·gc.alloc.rate.norm:              659032,081 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2025,895 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     556792,757 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11,445 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 5632,469 ops/s
[info]                  ·gc.alloc.rate:                   2359,374 MB/sec
[info]                  ·gc.alloc.rate.norm:              659032,077 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2706,533 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     756002,079 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11,632 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala":
[info]   5677,845 ±(99.9%) 150,699 ops/s [Average]
[info]   (min, avg, max) = (5632,469, 5677,845, 5724,051), stdev = 39,136
[info]   CI (99.9%): [5527,147, 5828,544] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   2378,475 ±(99.9%) 63,437 MB/sec [Average]
[info]   (min, avg, max) = (2359,374, 2378,475, 2397,894), stdev = 16,474
[info]   CI (99.9%): [2315,038, 2441,912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   659032,079 ±(99.9%) 0,018 B/op [Average]
[info]   (min, avg, max) = (659032,076, 659032,079, 659032,087), stdev = 0,005
[info]   CI (99.9%): [659032,061, 659032,098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   2423,709 ±(99.9%) 1418,604 MB/sec [Average]
[info]   (min, avg, max) = (2014,745, 2423,709, 2706,533), stdev = 368,407
[info]   CI (99.9%): [1005,105, 3842,312] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   671660,772 ±(99.9%) 395651,239 B/op [Average]
[info]   (min, avg, max) = (556792,757, 671660,772, 756002,079), stdev = 102749,370
[info]   CI (99.9%): [276009,533, 1067312,010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,058 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,058, 0,083), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   16,163 ±(99.9%) 18,773 B/op [Average]
[info]   (min, avg, max) = (11,445, 16,163, 23,227), stdev = 4,875
[info]   CI (99.9%): [≈ 0, 34,936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.count":
[info]   18,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,600, 4,000), stdev = 0,548
[info]   CI (99.9%): [18,000, 18,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.time":
[info]   16,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 3,200, 4,000), stdev = 0,837
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala
[info] # Run progress: 66,06% complete, ETA 00:44:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 44588,617 ops/s
[info] # Warmup Iteration   2: 46847,070 ops/s
[info] # Warmup Iteration   3: 46987,881 ops/s
[info] # Warmup Iteration   4: 47282,144 ops/s
[info] # Warmup Iteration   5: 47435,705 ops/s
[info] Iteration   1: 47557,834 ops/s
[info]                  ·gc.alloc.rate:                   791,488 MB/sec
[info]                  ·gc.alloc.rate.norm:              26184,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,375 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22276,591 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,689 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 47150,738 ops/s
[info]                  ·gc.alloc.rate:                   784,741 MB/sec
[info]                  ·gc.alloc.rate.norm:              26184,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,078 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22458,209 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,695 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 47577,346 ops/s
[info]                  ·gc.alloc.rate:                   791,826 MB/sec
[info]                  ·gc.alloc.rate.norm:              26184,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,060 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22256,678 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,689 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 47249,060 ops/s
[info]                  ·gc.alloc.rate:                   786,383 MB/sec
[info]                  ·gc.alloc.rate.norm:              26184,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,118 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     44821,371 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,080 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 47487,352 ops/s
[info]                  ·gc.alloc.rate:               790,307 MB/sec
[info]                  ·gc.alloc.rate.norm:          26184,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,361 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 22309,423 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala":
[info]   47404,466 ±(99.9%) 742,706 ops/s [Average]
[info]   (min, avg, max) = (47150,738, 47404,466, 47577,346), stdev = 192,878
[info]   CI (99.9%): [46661,760, 48147,172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   788,949 ±(99.9%) 12,307 MB/sec [Average]
[info]   (min, avg, max) = (784,741, 788,949, 791,826), stdev = 3,196
[info]   CI (99.9%): [776,642, 801,256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   26184,009 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (26184,009, 26184,009, 26184,010), stdev = 0,001
[info]   CI (99.9%): [26184,008, 26184,010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   807,798 ±(99.9%) 1158,772 MB/sec [Average]
[info]   (min, avg, max) = (673,060, 807,798, 1346,118), stdev = 300,930
[info]   CI (99.9%): [≈ 0, 1966,571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   26824,454 ±(99.9%) 38740,916 B/op [Average]
[info]   (min, avg, max) = (22256,678, 26824,454, 44821,371), stdev = 10060,893
[info]   CI (99.9%): [≈ 0, 65565,370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,023
[info]   CI (99.9%): [≈ 0, 0,113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,831 ±(99.9%) 2,926 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,831, 2,080), stdev = 0,760
[info]   CI (99.9%): [≈ 0, 3,757] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce
[info] # Run progress: 66,27% complete, ETA 00:44:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3291,475 ops/s
[info] # Warmup Iteration   2: 4496,622 ops/s
[info] # Warmup Iteration   3: 4582,934 ops/s
[info] # Warmup Iteration   4: 4607,856 ops/s
[info] # Warmup Iteration   5: 4599,523 ops/s
[info] Iteration   1: 4616,901 ops/s
[info]                  ·gc.alloc.rate:               984,481 MB/sec
[info]                  ·gc.alloc.rate.norm:          335456,100 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668,372 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 227743,986 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 4609,681 ops/s
[info]                  ·gc.alloc.rate:                   982,898 MB/sec
[info]                  ·gc.alloc.rate.norm:              335456,094 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337,288 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     456406,860 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,124 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 42,271 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 4602,106 ops/s
[info]                  ·gc.alloc.rate:               981,321 MB/sec
[info]                  ·gc.alloc.rate.norm:          335456,094 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668,919 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 228664,271 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 4600,640 ops/s
[info]                  ·gc.alloc.rate:                   980,967 MB/sec
[info]                  ·gc.alloc.rate.norm:              335456,101 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339,269 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     457982,999 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35,602 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 4599,370 ops/s
[info]                  ·gc.alloc.rate:               980,697 MB/sec
[info]                  ·gc.alloc.rate.norm:          335456,094 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670,596 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 229383,122 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce":
[info]   4605,739 ±(99.9%) 28,550 ops/s [Average]
[info]   (min, avg, max) = (4599,370, 4605,739, 4616,901), stdev = 7,414
[info]   CI (99.9%): [4577,190, 4634,289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.alloc.rate":
[info]   982,073 ±(99.9%) 6,137 MB/sec [Average]
[info]   (min, avg, max) = (980,697, 982,073, 984,481), stdev = 1,594
[info]   CI (99.9%): [975,935, 988,210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   335456,097 ±(99.9%) 0,014 B/op [Average]
[info]   (min, avg, max) = (335456,094, 335456,097, 335456,101), stdev = 0,004
[info]   CI (99.9%): [335456,082, 335456,111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   936,889 ±(99.9%) 1410,948 MB/sec [Average]
[info]   (min, avg, max) = (668,372, 936,889, 1339,269), stdev = 366,419
[info]   CI (99.9%): [≈ 0, 2347,836] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   320036,248 ±(99.9%) 482142,058 B/op [Average]
[info]   (min, avg, max) = (227743,986, 320036,248, 457982,999), stdev = 125210,761
[info]   CI (99.9%): [≈ 0, 802178,305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,046 ±(99.9%) 0,242 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,046, 0,124), stdev = 0,063
[info]   CI (99.9%): [≈ 0, 0,287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   15,575 ±(99.9%) 82,621 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 15,575, 42,271), stdev = 21,456
[info]   CI (99.9%): [≈ 0, 98,195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala
[info] # Run progress: 66,47% complete, ETA 00:44:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3049,829 ops/s
[info] # Warmup Iteration   2: 5154,870 ops/s
[info] # Warmup Iteration   3: 5275,578 ops/s
[info] # Warmup Iteration   4: 5285,813 ops/s
[info] # Warmup Iteration   5: 5107,706 ops/s
[info] Iteration   1: 5269,859 ops/s
[info]                  ·gc.alloc.rate:               587,114 MB/sec
[info]                  ·gc.alloc.rate.norm:          175254,144 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,826 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 152780,567 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   2: 5297,655 ops/s
[info]                  ·gc.alloc.rate:                   590,126 MB/sec
[info]                  ·gc.alloc.rate.norm:              175253,071 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663,991 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     197189,278 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,738 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 813,237 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 5321,496 ops/s
[info]                  ·gc.alloc.rate:                   592,808 MB/sec
[info]                  ·gc.alloc.rate.norm:              175254,218 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663,997 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     196300,204 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12,312 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 5313,062 ops/s
[info]                  ·gc.alloc.rate:                   591,862 MB/sec
[info]                  ·gc.alloc.rate.norm:              175252,293 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664,275 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     196694,313 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12,330 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 5313,829 ops/s
[info]                  ·gc.alloc.rate:               591,941 MB/sec
[info]                  ·gc.alloc.rate.norm:          175254,704 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664,356 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 196694,313 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala":
[info]   5303,180 ±(99.9%) 79,087 ops/s [Average]
[info]   (min, avg, max) = (5269,859, 5303,180, 5321,496), stdev = 20,539
[info]   CI (99.9%): [5224,094, 5382,267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   590,770 ±(99.9%) 8,717 MB/sec [Average]
[info]   (min, avg, max) = (587,114, 590,770, 592,808), stdev = 2,264
[info]   CI (99.9%): [582,054, 599,487] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   175253,686 ±(99.9%) 3,777 B/op [Average]
[info]   (min, avg, max) = (175252,293, 175253,686, 175254,704), stdev = 0,981
[info]   CI (99.9%): [175249,909, 175257,462] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   633,689 ±(99.9%) 262,320 MB/sec [Average]
[info]   (min, avg, max) = (511,826, 633,689, 664,356), stdev = 68,124
[info]   CI (99.9%): [371,369, 896,009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   187931,735 ±(99.9%) 75675,282 B/op [Average]
[info]   (min, avg, max) = (152780,567, 187931,735, 197189,278), stdev = 19652,630
[info]   CI (99.9%): [112256,453, 263607,017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,564 ±(99.9%) 4,681 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,564, 2,738), stdev = 1,216
[info]   CI (99.9%): [≈ 0, 5,245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   167,576 ±(99.9%) 1390,037 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 167,576, 813,237), stdev = 360,988
[info]   CI (99.9%): [≈ 0, 1557,613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,600, 3,000), stdev = 1,342
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala
[info] # Run progress: 66,67% complete, ETA 00:44:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6598,848 ops/s
[info] # Warmup Iteration   2: 6897,348 ops/s
[info] # Warmup Iteration   3: 6865,959 ops/s
[info] # Warmup Iteration   4: 6954,705 ops/s
[info] # Warmup Iteration   5: 6945,361 ops/s
[info] Iteration   1: 6959,735 ops/s
[info]                  ·gc.alloc.rate:      224,494 MB/sec
[info]                  ·gc.alloc.rate.norm: 50744,062 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 6648,631 ops/s
[info]                  ·gc.alloc.rate:               214,447 MB/sec
[info]                  ·gc.alloc.rate.norm:          50744,065 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,770 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 121098,702 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 6961,967 ops/s
[info]                  ·gc.alloc.rate:      224,564 MB/sec
[info]                  ·gc.alloc.rate.norm: 50744,062 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 6933,362 ops/s
[info]                  ·gc.alloc.rate:                   223,633 MB/sec
[info]                  ·gc.alloc.rate.norm:              50744,466 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,754 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     116122,043 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,054 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12,197 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 6944,715 ops/s
[info]                  ·gc.alloc.rate:      224,016 MB/sec
[info]                  ·gc.alloc.rate.norm: 50752,374 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala":
[info]   6889,682 ±(99.9%) 520,816 ops/s [Average]
[info]   (min, avg, max) = (6648,631, 6889,682, 6961,967), stdev = 135,254
[info]   CI (99.9%): [6368,866, 7410,498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   222,231 ±(99.9%) 16,818 MB/sec [Average]
[info]   (min, avg, max) = (214,447, 222,231, 224,564), stdev = 4,368
[info]   CI (99.9%): [205,413, 239,049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   50745,806 ±(99.9%) 14,155 B/op [Average]
[info]   (min, avg, max) = (50744,062, 50745,806, 50752,374), stdev = 3,676
[info]   CI (99.9%): [50731,651, 50759,961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   204,705 ±(99.9%) 1079,349 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204,705, 511,770), stdev = 280,304
[info]   CI (99.9%): [≈ 0, 1284,054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   47444,149 ±(99.9%) 250251,036 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 47444,149, 121098,702), stdev = 64989,399
[info]   CI (99.9%): [≈ 0, 297695,185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,011 ±(99.9%) 0,093 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,011, 0,054), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2,439 ±(99.9%) 21,003 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,439, 12,197), stdev = 5,455
[info]   CI (99.9%): [≈ 0, 23,443] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.count":
[info]   2,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 2,000), stdev = 0,894
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 66,87% complete, ETA 00:43:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6753,232 ops/s
[info] # Warmup Iteration   2: 7060,633 ops/s
[info] # Warmup Iteration   3: 7007,078 ops/s
[info] # Warmup Iteration   4: 7039,512 ops/s
[info] # Warmup Iteration   5: 7039,940 ops/s
[info] Iteration   1: 7016,163 ops/s
[info]                  ·gc.alloc.rate:                   174,997 MB/sec
[info]                  ·gc.alloc.rate.norm:              39240,076 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,740 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     114748,699 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,711 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 607,807 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 7056,871 ops/s
[info]                  ·gc.alloc.rate:      176,011 MB/sec
[info]                  ·gc.alloc.rate.norm: 39240,061 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 7035,766 ops/s
[info]                  ·gc.alloc.rate:      175,479 MB/sec
[info]                  ·gc.alloc.rate.norm: 39240,066 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 7008,293 ops/s
[info]                  ·gc.alloc.rate:               174,825 MB/sec
[info]                  ·gc.alloc.rate.norm:          39245,496 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,749 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 114879,653 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   5: 7043,555 ops/s
[info]                  ·gc.alloc.rate:      175,785 MB/sec
[info]                  ·gc.alloc.rate.norm: 39264,061 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc":
[info]   7032,130 ±(99.9%) 76,506 ops/s [Average]
[info]   (min, avg, max) = (7008,293, 7032,130, 7056,871), stdev = 19,868
[info]   CI (99.9%): [6955,623, 7108,636] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   175,419 ±(99.9%) 1,943 MB/sec [Average]
[info]   (min, avg, max) = (174,825, 175,419, 176,011), stdev = 0,504
[info]   CI (99.9%): [173,477, 177,362] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   39245,952 ±(99.9%) 40,018 B/op [Average]
[info]   (min, avg, max) = (39240,061, 39245,952, 39264,061), stdev = 10,393
[info]   CI (99.9%): [39205,934, 39285,970] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   204,698 ±(99.9%) 1079,313 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204,698, 511,749), stdev = 280,294
[info]   CI (99.9%): [≈ 0, 1284,011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   45925,670 ±(99.9%) 242152,869 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 45925,670, 114879,653), stdev = 62886,331
[info]   CI (99.9%): [≈ 0, 288078,539] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0,542 ±(99.9%) 4,668 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,542, 2,711), stdev = 1,212
[info]   CI (99.9%): [≈ 0, 5,210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   121,561 ±(99.9%) 1046,681 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 121,561, 607,807), stdev = 271,820
[info]   CI (99.9%): [≈ 0, 1168,242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   2,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 2,000), stdev = 0,894
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce
[info] # Run progress: 67,07% complete, ETA 00:43:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6476,433 ops/s
[info] # Warmup Iteration   2: 8560,889 ops/s
[info] # Warmup Iteration   3: 8789,582 ops/s
[info] # Warmup Iteration   4: 8540,490 ops/s
[info] # Warmup Iteration   5: 8782,410 ops/s
[info] Iteration   1: 8705,307 ops/s
[info]                  ·gc.alloc.rate:                   2173,165 MB/sec
[info]                  ·gc.alloc.rate.norm:              392752,050 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2692,074 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     486533,483 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,054 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9,761 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 8769,381 ops/s
[info]                  ·gc.alloc.rate:                   2189,204 MB/sec
[info]                  ·gc.alloc.rate.norm:              392752,053 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2023,550 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     363032,981 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18,678 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 8791,576 ops/s
[info]                  ·gc.alloc.rate:                   2194,788 MB/sec
[info]                  ·gc.alloc.rate.norm:              392773,506 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2026,857 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     362720,968 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,066 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11,877 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 8564,596 ops/s
[info]                  ·gc.alloc.rate:                   2138,158 MB/sec
[info]                  ·gc.alloc.rate.norm:              392776,050 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2030,768 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     373048,723 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,033 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6,097 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 8790,471 ops/s
[info]                  ·gc.alloc.rate:                   2194,702 MB/sec
[info]                  ·gc.alloc.rate.norm:              392776,053 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2711,655 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     485292,850 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18,633 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce":
[info]   8724,266 ±(99.9%) 369,357 ops/s [Average]
[info]   (min, avg, max) = (8564,596, 8724,266, 8791,576), stdev = 95,921
[info]   CI (99.9%): [8354,909, 9093,623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate":
[info]   2178,003 ±(99.9%) 92,277 MB/sec [Average]
[info]   (min, avg, max) = (2138,158, 2178,003, 2194,788), stdev = 23,964
[info]   CI (99.9%): [2085,727, 2270,280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   392765,942 ±(99.9%) 48,993 B/op [Average]
[info]   (min, avg, max) = (392752,050, 392765,942, 392776,053), stdev = 12,723
[info]   CI (99.9%): [392716,949, 392814,936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2296,981 ±(99.9%) 1423,508 MB/sec [Average]
[info]   (min, avg, max) = (2023,550, 2296,981, 2711,655), stdev = 369,680
[info]   CI (99.9%): [873,473, 3720,488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   414125,801 ±(99.9%) 252854,820 B/op [Average]
[info]   (min, avg, max) = (362720,968, 414125,801, 486533,483), stdev = 65665,594
[info]   CI (99.9%): [161270,981, 666980,621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,072 ±(99.9%) 0,121 MB/sec [Average]
[info]   (min, avg, max) = (0,033, 0,072, 0,104), stdev = 0,031
[info]   CI (99.9%): [≈ 0, 0,193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   13,009 ±(99.9%) 21,385 B/op [Average]
[info]   (min, avg, max) = (6,097, 13,009, 18,678), stdev = 5,554
[info]   CI (99.9%): [≈ 0, 34,394] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.count":
[info]   17,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,400, 4,000), stdev = 0,548
[info]   CI (99.9%): [17,000, 17,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.time":
[info]   12,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava
[info] # Run progress: 67,27% complete, ETA 00:43:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1987,246 ops/s
[info] # Warmup Iteration   2: 12381,090 ops/s
[info] # Warmup Iteration   3: 12729,594 ops/s
[info] # Warmup Iteration   4: 12859,924 ops/s
[info] # Warmup Iteration   5: 12820,894 ops/s
[info] Iteration   1: 12821,874 ops/s
[info]                  ·gc.alloc.rate:                   316,485 MB/sec
[info]                  ·gc.alloc.rate.norm:              38832,036 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,800 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62796,816 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,555 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 12869,961 ops/s
[info]                  ·gc.alloc.rate:      317,676 MB/sec
[info]                  ·gc.alloc.rate.norm: 38832,034 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 12825,557 ops/s
[info]                  ·gc.alloc.rate:               316,572 MB/sec
[info]                  ·gc.alloc.rate.norm:          38832,036 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,742 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 62772,341 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   4: 12617,066 ops/s
[info]                  ·gc.alloc.rate:                   311,418 MB/sec
[info]                  ·gc.alloc.rate.norm:              38832,047 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,788 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63816,972 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,033 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,057 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 12864,932 ops/s
[info]                  ·gc.alloc.rate:      317,557 MB/sec
[info]                  ·gc.alloc.rate.norm: 38832,034 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava":
[info]   12799,878 ±(99.9%) 402,513 ops/s [Average]
[info]   (min, avg, max) = (12617,066, 12799,878, 12869,961), stdev = 104,531
[info]   CI (99.9%): [12397,366, 13202,391] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   315,942 ±(99.9%) 9,962 MB/sec [Average]
[info]   (min, avg, max) = (311,418, 315,942, 317,676), stdev = 2,587
[info]   CI (99.9%): [305,980, 325,903] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   38832,037 ±(99.9%) 0,021 B/op [Average]
[info]   (min, avg, max) = (38832,034, 38832,037, 38832,047), stdev = 0,006
[info]   CI (99.9%): [38832,016, 38832,059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   307,066 ±(99.9%) 1079,380 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 307,066, 511,800), stdev = 280,312
[info]   CI (99.9%): [≈ 0, 1386,446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   37877,226 ±(99.9%) 133153,681 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 37877,226, 63816,972), stdev = 34579,588
[info]   CI (99.9%): [≈ 0, 171030,907] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,011 ±(99.9%) 0,058 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,011, 0,033), stdev = 0,015
[info]   CI (99.9%): [≈ 0, 0,069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   1,323 ±(99.9%) 7,267 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,323, 4,057), stdev = 1,887
[info]   CI (99.9%): [≈ 0, 8,589] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala
[info] # Run progress: 67,47% complete, ETA 00:43:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9532,617 ops/s
[info] # Warmup Iteration   2: 15663,262 ops/s
[info] # Warmup Iteration   3: 15767,969 ops/s
[info] # Warmup Iteration   4: 15748,152 ops/s
[info] # Warmup Iteration   5: 15799,243 ops/s
[info] Iteration   1: 15888,954 ops/s
[info]                  ·gc.alloc.rate:      429,679 MB/sec
[info]                  ·gc.alloc.rate.norm: 42544,027 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 15712,557 ops/s
[info]                  ·gc.alloc.rate:               424,913 MB/sec
[info]                  ·gc.alloc.rate.norm:          42544,038 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,777 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 51241,179 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   3: 15737,744 ops/s
[info]                  ·gc.alloc.rate:                   425,579 MB/sec
[info]                  ·gc.alloc.rate.norm:              42544,029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,764 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51159,797 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,052 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,205 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 15765,696 ops/s
[info]                  ·gc.alloc.rate:                   426,325 MB/sec
[info]                  ·gc.alloc.rate.norm:              42544,027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664,010 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     66263,300 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,597 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 259,170 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 15841,282 ops/s
[info]                  ·gc.alloc.rate:      428,363 MB/sec
[info]                  ·gc.alloc.rate.norm: 42544,029 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala":
[info]   15789,247 ±(99.9%) 283,864 ops/s [Average]
[info]   (min, avg, max) = (15712,557, 15789,247, 15888,954), stdev = 73,719
[info]   CI (99.9%): [15505,383, 16073,111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   426,972 ±(99.9%) 7,667 MB/sec [Average]
[info]   (min, avg, max) = (424,913, 426,972, 429,679), stdev = 1,991
[info]   CI (99.9%): [419,304, 434,639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   42544,030 ±(99.9%) 0,017 B/op [Average]
[info]   (min, avg, max) = (42544,027, 42544,030, 42544,038), stdev = 0,004
[info]   CI (99.9%): [42544,014, 42544,047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   337,510 ±(99.9%) 1210,294 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 337,510, 664,010), stdev = 314,310
[info]   CI (99.9%): [≈ 0, 1547,805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   33732,855 ±(99.9%) 120916,973 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 33732,855, 66263,300), stdev = 31401,754
[info]   CI (99.9%): [≈ 0, 154649,829] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,530 ±(99.9%) 4,451 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,530, 2,597), stdev = 1,156
[info]   CI (99.9%): [≈ 0, 4,981] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   52,875 ±(99.9%) 444,150 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 52,875, 259,170), stdev = 115,344
[info]   CI (99.9%): [≈ 0, 497,025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,600, 3,000), stdev = 1,517
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala
[info] # Run progress: 67,67% complete, ETA 00:42:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22395,385 ops/s
[info] # Warmup Iteration   2: 24826,426 ops/s
[info] # Warmup Iteration   3: 24782,064 ops/s
[info] # Warmup Iteration   4: 24107,407 ops/s
[info] # Warmup Iteration   5: 24746,695 ops/s
[info] Iteration   1: 24810,159 ops/s
[info]                  ·gc.alloc.rate:                   505,377 MB/sec
[info]                  ·gc.alloc.rate.norm:              32048,017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,733 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32451,095 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,320 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 24828,944 ops/s
[info]                  ·gc.alloc.rate:               505,786 MB/sec
[info]                  ·gc.alloc.rate.norm:          32048,017 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,756 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 32426,268 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 24870,055 ops/s
[info]                  ·gc.alloc.rate:                   506,590 MB/sec
[info]                  ·gc.alloc.rate.norm:              32048,017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,331 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42596,424 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1,733 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 109,627 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 24837,396 ops/s
[info]                  ·gc.alloc.rate:                   505,944 MB/sec
[info]                  ·gc.alloc.rate.norm:              32048,019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,365 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42653,009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,638 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 24850,224 ops/s
[info]                  ·gc.alloc.rate:      506,210 MB/sec
[info]                  ·gc.alloc.rate.norm: 32048,017 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala":
[info]   24839,356 ±(99.9%) 86,646 ops/s [Average]
[info]   (min, avg, max) = (24810,159, 24839,356, 24870,055), stdev = 22,502
[info]   CI (99.9%): [24752,710, 24926,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   505,981 ±(99.9%) 1,751 MB/sec [Average]
[info]   (min, avg, max) = (505,377, 505,981, 506,590), stdev = 0,455
[info]   CI (99.9%): [504,230, 507,733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   32048,018 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (32048,017, 32048,018, 32048,019), stdev = 0,001
[info]   CI (99.9%): [32048,015, 32048,020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   474,037 ±(99.9%) 1066,783 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 474,037, 673,365), stdev = 277,040
[info]   CI (99.9%): [≈ 0, 1540,820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   30025,359 ±(99.9%) 67541,764 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 30025,359, 42653,009), stdev = 17540,382
[info]   CI (99.9%): [≈ 0, 97567,123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,359 ±(99.9%) 2,958 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,359, 1,733), stdev = 0,768
[info]   CI (99.9%): [≈ 0, 3,317] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   22,717 ±(99.9%) 187,127 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 22,717, 109,627), stdev = 48,596
[info]   CI (99.9%): [≈ 0, 209,844] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 2,000), stdev = 0,837
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson
[info] # Run progress: 67,87% complete, ETA 00:42:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1243,585 ops/s
[info] # Warmup Iteration   2: 2622,960 ops/s
[info] # Warmup Iteration   3: 2620,360 ops/s
[info] # Warmup Iteration   4: 2645,513 ops/s
[info] # Warmup Iteration   5: 2664,689 ops/s
[info] Iteration   1: 2654,819 ops/s
[info]                  ·gc.alloc.rate:                   1662,546 MB/sec
[info]                  ·gc.alloc.rate.norm:              985216,163 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338,425 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     793143,518 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12,337 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 2667,573 ops/s
[info]                  ·gc.alloc.rate:               1670,624 MB/sec
[info]                  ·gc.alloc.rate.norm:          985216,174 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2012,228 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1186670,591 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   3: 2671,127 ops/s
[info]                  ·gc.alloc.rate:                   1672,735 MB/sec
[info]                  ·gc.alloc.rate.norm:              985216,162 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,227 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     792318,467 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12,263 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 2562,852 ops/s
[info]                  ·gc.alloc.rate:                   1605,105 MB/sec
[info]                  ·gc.alloc.rate.norm:              985216,168 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022,812 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1241605,591 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12,780 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 2638,316 ops/s
[info]                  ·gc.alloc.rate:                   1652,172 MB/sec
[info]                  ·gc.alloc.rate.norm:              985216,176 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350,968 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     805603,577 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12,417 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson":
[info]   2638,937 ±(99.9%) 171,102 ops/s [Average]
[info]   (min, avg, max) = (2562,852, 2638,937, 2671,127), stdev = 44,435
[info]   CI (99.9%): [2467,835, 2810,040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1652,636 ±(99.9%) 106,940 MB/sec [Average]
[info]   (min, avg, max) = (1605,105, 1652,636, 1672,735), stdev = 27,772
[info]   CI (99.9%): [1545,696, 1759,577] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   985216,168 ±(99.9%) 0,025 B/op [Average]
[info]   (min, avg, max) = (985216,162, 985216,168, 985216,176), stdev = 0,006
[info]   CI (99.9%): [985216,144, 985216,193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1613,932 ±(99.9%) 1418,846 MB/sec [Average]
[info]   (min, avg, max) = (1338,425, 1613,932, 2022,812), stdev = 368,470
[info]   CI (99.9%): [195,086, 3032,778] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   963868,349 ±(99.9%) 883139,294 B/op [Average]
[info]   (min, avg, max) = (792318,467, 963868,349, 1241605,591), stdev = 229348,470
[info]   CI (99.9%): [80729,055, 1847007,643] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,017 ±(99.9%) 0,036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,021), stdev = 0,009
[info]   CI (99.9%): [≈ 0, 0,053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   9,960 ±(99.9%) 21,452 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9,960, 12,780), stdev = 5,571
[info]   CI (99.9%): [≈ 0, 31,412] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.time":
[info]   10,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 2,000, 3,000), stdev = 1,000
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readUPickle
[info] # Run progress: 68,07% complete, ETA 00:42:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6252,455 ops/s
[info] # Warmup Iteration   2: 7207,717 ops/s
[info] # Warmup Iteration   3: 7250,344 ops/s
[info] # Warmup Iteration   4: 7220,471 ops/s
[info] # Warmup Iteration   5: 7191,537 ops/s
[info] Iteration   1: 7218,737 ops/s
[info]                  ·gc.alloc.rate:                   1150,484 MB/sec
[info]                  ·gc.alloc.rate.norm:              250736,064 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,250 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     292747,433 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13,614 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 7228,722 ops/s
[info]                  ·gc.alloc.rate:                   1152,114 MB/sec
[info]                  ·gc.alloc.rate.norm:              250736,060 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,959 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     292487,594 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18,126 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 7216,356 ops/s
[info]                  ·gc.alloc.rate:               1150,126 MB/sec
[info]                  ·gc.alloc.rate.norm:          250736,060 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345,389 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 293304,924 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   4: 7214,404 ops/s
[info]                  ·gc.alloc.rate:               1149,808 MB/sec
[info]                  ·gc.alloc.rate.norm:          250747,897 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,997 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 146765,765 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 7234,595 ops/s
[info]                  ·gc.alloc.rate:                   1153,050 MB/sec
[info]                  ·gc.alloc.rate.norm:              250760,060 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,324 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     293010,043 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9,057 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readUPickle":
[info]   7222,563 ±(99.9%) 33,483 ops/s [Average]
[info]   (min, avg, max) = (7214,404, 7222,563, 7234,595), stdev = 8,695
[info]   CI (99.9%): [7189,080, 7256,046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readUPickle:·gc.alloc.rate":
[info]   1151,116 ±(99.9%) 5,385 MB/sec [Average]
[info]   (min, avg, max) = (1149,808, 1151,116, 1153,050), stdev = 1,399
[info]   CI (99.9%): [1145,731, 1156,502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   250743,228 ±(99.9%) 41,257 B/op [Average]
[info]   (min, avg, max) = (250736,060, 250743,228, 250760,060), stdev = 10,714
[info]   CI (99.9%): [250701,971, 250784,485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1210,584 ±(99.9%) 1157,213 MB/sec [Average]
[info]   (min, avg, max) = (672,997, 1210,584, 1347,324), stdev = 300,524
[info]   CI (99.9%): [53,371, 2367,796] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   263663,152 ±(99.9%) 251633,155 B/op [Average]
[info]   (min, avg, max) = (146765,765, 263663,152, 293304,924), stdev = 65348,331
[info]   CI (99.9%): [12029,996, 515296,307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,083), stdev = 0,037
[info]   CI (99.9%): [≈ 0, 0,181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   8,159 ±(99.9%) 31,226 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8,159, 18,126), stdev = 8,109
[info]   CI (99.9%): [≈ 0, 39,386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readUPickle:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readUPickle:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce
[info] # Run progress: 68,27% complete, ETA 00:42:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7123,950 ops/s
[info] # Warmup Iteration   2: 9734,090 ops/s
[info] # Warmup Iteration   3: 9875,614 ops/s
[info] # Warmup Iteration   4: 9886,841 ops/s
[info] # Warmup Iteration   5: 9739,745 ops/s
[info] Iteration   1: 9850,645 ops/s
[info]                  ·gc.alloc.rate:                   2194,257 MB/sec
[info]                  ·gc.alloc.rate.norm:              350456,044 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016,629 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     322086,193 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,326 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 9897,298 ops/s
[info]                  ·gc.alloc.rate:                   2204,760 MB/sec
[info]                  ·gc.alloc.rate.norm:              350478,723 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020,863 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     321245,556 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6,620 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 9809,309 ops/s
[info]                  ·gc.alloc.rate:                   2185,355 MB/sec
[info]                  ·gc.alloc.rate.norm:              350501,877 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2024,906 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     324767,883 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10,019 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 9860,843 ops/s
[info]                  ·gc.alloc.rate:                   2196,874 MB/sec
[info]                  ·gc.alloc.rate.norm:              350504,044 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2706,051 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     431741,573 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16,612 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 9855,493 ops/s
[info]                  ·gc.alloc.rate:                   2195,688 MB/sec
[info]                  ·gc.alloc.rate.norm:              350504,044 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2033,303 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     324582,031 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,324 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce":
[info]   9854,718 ±(99.9%) 120,694 ops/s [Average]
[info]   (min, avg, max) = (9809,309, 9854,718, 9897,298), stdev = 31,344
[info]   CI (99.9%): [9734,024, 9975,411] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate":
[info]   2195,387 ±(99.9%) 26,683 MB/sec [Average]
[info]   (min, avg, max) = (2185,355, 2195,387, 2204,760), stdev = 6,930
[info]   CI (99.9%): [2168,704, 2222,070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   350488,946 ±(99.9%) 81,915 B/op [Average]
[info]   (min, avg, max) = (350456,044, 350488,946, 350504,044), stdev = 21,273
[info]   CI (99.9%): [350407,032, 350570,861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2160,350 ±(99.9%) 1174,901 MB/sec [Average]
[info]   (min, avg, max) = (2016,629, 2160,350, 2706,051), stdev = 305,118
[info]   CI (99.9%): [985,449, 3335,252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   344884,647 ±(99.9%) 187059,492 B/op [Average]
[info]   (min, avg, max) = (321245,556, 344884,647, 431741,573), stdev = 48578,756
[info]   CI (99.9%): [157825,156, 531944,139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,050 ±(99.9%) 0,134 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,050, 0,104), stdev = 0,035
[info]   CI (99.9%): [≈ 0, 0,184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   7,980 ±(99.9%) 21,427 B/op [Average]
[info]   (min, avg, max) = (3,324, 7,980, 16,612), stdev = 5,564
[info]   CI (99.9%): [≈ 0, 29,407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.count":
[info]   16,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,200, 4,000), stdev = 0,447
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.time":
[info]   12,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava
[info] # Run progress: 68,47% complete, ETA 00:41:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10118,205 ops/s
[info] # Warmup Iteration   2: 60882,411 ops/s
[info] # Warmup Iteration   3: 59878,867 ops/s
[info] # Warmup Iteration   4: 61616,861 ops/s
[info] # Warmup Iteration   5: 61238,280 ops/s
[info] Iteration   1: 61348,969 ops/s
[info]                  ·gc.alloc.rate:                   573,699 MB/sec
[info]                  ·gc.alloc.rate.norm:              14712,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,769 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13123,861 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,068 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 61587,455 ops/s
[info]                  ·gc.alloc.rate:               575,923 MB/sec
[info]                  ·gc.alloc.rate.norm:          14712,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663,032 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16937,226 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 61426,653 ops/s
[info]                  ·gc.alloc.rate:               574,434 MB/sec
[info]                  ·gc.alloc.rate.norm:          14712,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663,040 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16981,333 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   4: 61463,858 ops/s
[info]                  ·gc.alloc.rate:                   574,763 MB/sec
[info]                  ·gc.alloc.rate.norm:              14712,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664,709 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17014,308 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,020 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,509 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 61458,754 ops/s
[info]                  ·gc.alloc.rate:                   574,736 MB/sec
[info]                  ·gc.alloc.rate.norm:              14712,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664,699 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17014,861 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,016 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,418 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava":
[info]   61457,138 ±(99.9%) 331,581 ops/s [Average]
[info]   (min, avg, max) = (61348,969, 61457,138, 61587,455), stdev = 86,111
[info]   CI (99.9%): [61125,557, 61788,719] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   574,711 ±(99.9%) 3,088 MB/sec [Average]
[info]   (min, avg, max) = (573,699, 574,711, 575,923), stdev = 0,802
[info]   CI (99.9%): [571,623, 577,799] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   14712,007 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (14712,007, 14712,007, 14712,008), stdev = 0,001
[info]   CI (99.9%): [14712,007, 14712,008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   633,450 ±(99.9%) 261,946 MB/sec [Average]
[info]   (min, avg, max) = (511,769, 633,450, 664,709), stdev = 68,027
[info]   CI (99.9%): [371,503, 895,396] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   16214,318 ±(99.9%) 6653,564 B/op [Average]
[info]   (min, avg, max) = (13123,861, 16214,318, 17014,861), stdev = 1727,909
[info]   CI (99.9%): [9560,754, 22867,882] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,016 ±(99.9%) 0,066 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,016, 0,042), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0,399 ±(99.9%) 1,699 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,399, 1,068), stdev = 0,441
[info]   CI (99.9%): [≈ 0, 2,098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala
[info] # Run progress: 68,67% complete, ETA 00:41:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 30054,182 ops/s
[info] # Warmup Iteration   2: 45545,992 ops/s
[info] # Warmup Iteration   3: 45433,572 ops/s
[info] # Warmup Iteration   4: 45373,978 ops/s
[info] # Warmup Iteration   5: 43394,413 ops/s
[info] Iteration   1: 45510,120 ops/s
[info]                  ·gc.alloc.rate:                   677,833 MB/sec
[info]                  ·gc.alloc.rate.norm:              23431,855 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664,731 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22978,922 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,622 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 90,651 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 45700,155 ops/s
[info]                  ·gc.alloc.rate:                   680,640 MB/sec
[info]                  ·gc.alloc.rate.norm:              23431,778 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664,681 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22882,401 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,434 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 45470,475 ops/s
[info]                  ·gc.alloc.rate:                   677,215 MB/sec
[info]                  ·gc.alloc.rate.norm:              23431,909 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664,374 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22987,604 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,721 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 45739,421 ops/s
[info]                  ·gc.alloc.rate:               681,226 MB/sec
[info]                  ·gc.alloc.rate.norm:          23431,852 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664,366 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 22851,934 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 45572,874 ops/s
[info]                  ·gc.alloc.rate:                   678,762 MB/sec
[info]                  ·gc.alloc.rate.norm:              23431,806 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665,013 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22957,153 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,438 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala":
[info]   45598,609 ±(99.9%) 451,735 ops/s [Average]
[info]   (min, avg, max) = (45470,475, 45598,609, 45739,421), stdev = 117,314
[info]   CI (99.9%): [45146,874, 46050,344] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   679,135 ±(99.9%) 6,712 MB/sec [Average]
[info]   (min, avg, max) = (677,215, 679,135, 681,226), stdev = 1,743
[info]   CI (99.9%): [672,423, 685,847] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   23431,840 ±(99.9%) 0,194 B/op [Average]
[info]   (min, avg, max) = (23431,778, 23431,840, 23431,909), stdev = 0,050
[info]   CI (99.9%): [23431,646, 23432,034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   664,633 ±(99.9%) 1,045 MB/sec [Average]
[info]   (min, avg, max) = (664,366, 664,633, 665,013), stdev = 0,271
[info]   CI (99.9%): [663,588, 665,678] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   22931,603 ±(99.9%) 234,194 B/op [Average]
[info]   (min, avg, max) = (22851,934, 22931,603, 22987,604), stdev = 60,819
[info]   CI (99.9%): [22697,409, 23165,797] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,545 ±(99.9%) 4,472 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,545, 2,622), stdev = 1,161
[info]   CI (99.9%): [≈ 0, 5,017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   18,849 ±(99.9%) 154,578 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 18,849, 90,651), stdev = 40,143
[info]   CI (99.9%): [≈ 0, 173,426] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala
[info] # Run progress: 68,88% complete, ETA 00:41:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 84557,175 ops/s
[info] # Warmup Iteration   2: 90770,924 ops/s
[info] # Warmup Iteration   3: 88244,554 ops/s
[info] # Warmup Iteration   4: 91136,454 ops/s
[info] # Warmup Iteration   5: 91429,626 ops/s
[info] Iteration   1: 91123,928 ops/s
[info]                  ·gc.alloc.rate:                   685,317 MB/sec
[info]                  ·gc.alloc.rate.norm:              11832,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,380 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11625,917 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1,685 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29,099 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 90954,179 ops/s
[info]                  ·gc.alloc.rate:                   684,001 MB/sec
[info]                  ·gc.alloc.rate.norm:              11832,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,365 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11648,027 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,081 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 90983,575 ops/s
[info]                  ·gc.alloc.rate:               684,240 MB/sec
[info]                  ·gc.alloc.rate.norm:          11832,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,045 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11638,425 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 90941,222 ops/s
[info]                  ·gc.alloc.rate:               683,948 MB/sec
[info]                  ·gc.alloc.rate.norm:          11832,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,046 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11643,415 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 90627,521 ops/s
[info]                  ·gc.alloc.rate:                   681,541 MB/sec
[info]                  ·gc.alloc.rate.norm:              11832,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,986 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11683,491 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,084 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala":
[info]   90926,085 ±(99.9%) 701,108 ops/s [Average]
[info]   (min, avg, max) = (90627,521, 90926,085, 91123,928), stdev = 182,075
[info]   CI (99.9%): [90224,977, 91627,193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   683,809 ±(99.9%) 5,329 MB/sec [Average]
[info]   (min, avg, max) = (681,541, 683,809, 685,317), stdev = 1,384
[info]   CI (99.9%): [678,481, 689,138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   11832,005 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (11832,005, 11832,005, 11832,005), stdev = 0,001
[info]   CI (99.9%): [11832,004, 11832,006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   673,165 ±(99.9%) 0,738 MB/sec [Average]
[info]   (min, avg, max) = (672,986, 673,165, 673,380), stdev = 0,192
[info]   CI (99.9%): [672,427, 673,903] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   11647,855 ±(99.9%) 83,033 B/op [Average]
[info]   (min, avg, max) = (11625,917, 11647,855, 11683,491), stdev = 21,563
[info]   CI (99.9%): [11564,822, 11730,888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,362 ±(99.9%) 2,851 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,362, 1,685), stdev = 0,740
[info]   CI (99.9%): [≈ 0, 3,213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   6,253 ±(99.9%) 49,223 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6,253, 29,099), stdev = 12,783
[info]   CI (99.9%): [≈ 0, 55,476] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 69,08% complete, ETA 00:41:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 110860,165 ops/s
[info] # Warmup Iteration   2: 113446,357 ops/s
[info] # Warmup Iteration   3: 114826,836 ops/s
[info] # Warmup Iteration   4: 115643,212 ops/s
[info] # Warmup Iteration   5: 115964,890 ops/s
[info] Iteration   1: 115717,238 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 115629,635 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 115690,877 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 115626,702 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 115837,671 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc":
[info]   115700,424 ±(99.9%) 331,561 ops/s [Average]
[info]   (min, avg, max) = (115626,702, 115700,424, 115837,671), stdev = 86,105
[info]   CI (99.9%): [115368,863, 116031,986] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0,004 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (0,004, 0,004, 0,004), stdev = 0,001
[info]   CI (99.9%): [0,004, 0,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson
[info] # Run progress: 69,28% complete, ETA 00:40:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3711,116 ops/s
[info] # Warmup Iteration   2: 6484,015 ops/s
[info] # Warmup Iteration   3: 6642,863 ops/s
[info] # Warmup Iteration   4: 6616,554 ops/s
[info] # Warmup Iteration   5: 6524,522 ops/s
[info] Iteration   1: 6660,149 ops/s
[info]                  ·gc.alloc.rate:                   1994,661 MB/sec
[info]                  ·gc.alloc.rate.norm:              471168,417 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004,982 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     473606,302 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,919 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 6677,753 ops/s
[info]                  ·gc.alloc.rate:                   1999,899 MB/sec
[info]                  ·gc.alloc.rate.norm:              471168,343 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011,160 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     473821,356 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,905 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 6670,385 ops/s
[info]                  ·gc.alloc.rate:                   1997,635 MB/sec
[info]                  ·gc.alloc.rate.norm:              471168,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016,624 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     475646,772 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9,823 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 6683,965 ops/s
[info]                  ·gc.alloc.rate:                   2001,815 MB/sec
[info]                  ·gc.alloc.rate.norm:              471167,643 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,297 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     317113,472 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9,802 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 6665,342 ops/s
[info]                  ·gc.alloc.rate:                   1995,994 MB/sec
[info]                  ·gc.alloc.rate.norm:              471167,801 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2024,807 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     477969,471 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,915 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson":
[info]   6671,519 ±(99.9%) 36,655 ops/s [Average]
[info]   (min, avg, max) = (6660,149, 6671,519, 6683,965), stdev = 9,519
[info]   CI (99.9%): [6634,863, 6708,174] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1998,001 ±(99.9%) 11,139 MB/sec [Average]
[info]   (min, avg, max) = (1994,661, 1998,001, 2001,815), stdev = 2,893
[info]   CI (99.9%): [1986,862, 2009,140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   471168,044 ±(99.9%) 1,289 B/op [Average]
[info]   (min, avg, max) = (471167,643, 471168,044, 471168,417), stdev = 0,335
[info]   CI (99.9%): [471166,754, 471169,333] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1880,974 ±(99.9%) 1149,123 MB/sec [Average]
[info]   (min, avg, max) = (1347,297, 1880,974, 2024,807), stdev = 298,424
[info]   CI (99.9%): [731,851, 3030,097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   443631,475 ±(99.9%) 272423,203 B/op [Average]
[info]   (min, avg, max) = (317113,472, 443631,475, 477969,471), stdev = 70747,441
[info]   CI (99.9%): [171208,271, 716054,678] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,044 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,029, 0,042), stdev = 0,011
[info]   CI (99.9%): [≈ 0, 0,073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   6,873 ±(99.9%) 10,333 B/op [Average]
[info]   (min, avg, max) = (4,905, 6,873, 9,823), stdev = 2,683
[info]   CI (99.9%): [≈ 0, 17,206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.time":
[info]   12,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 2,400, 3,000), stdev = 0,894
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeUPickle
[info] # Run progress: 69,48% complete, ETA 00:40:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4409,618 ops/s
[info] # Warmup Iteration   2: 4898,436 ops/s
[info] # Warmup Iteration   3: 5013,469 ops/s
[info] # Warmup Iteration   4: 5019,240 ops/s
[info] # Warmup Iteration   5: 5028,884 ops/s
[info] Iteration   1: 5053,777 ops/s
[info]                  ·gc.alloc.rate:               523,813 MB/sec
[info]                  ·gc.alloc.rate.norm:          163072,092 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,725 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 159308,876 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 5046,922 ops/s
[info]                  ·gc.alloc.rate:      523,143 MB/sec
[info]                  ·gc.alloc.rate.norm: 163072,086 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 4945,205 ops/s
[info]                  ·gc.alloc.rate:                   512,630 MB/sec
[info]                  ·gc.alloc.rate.norm:              163072,087 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671,983 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     213763,674 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1,785 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 567,798 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 5029,792 ops/s
[info]                  ·gc.alloc.rate:                   521,340 MB/sec
[info]                  ·gc.alloc.rate.norm:              163072,086 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671,990 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     210194,573 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 32,566 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 4982,113 ops/s
[info]                  ·gc.alloc.rate:               516,398 MB/sec
[info]                  ·gc.alloc.rate.norm:          163072,093 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,698 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 212114,110 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeUPickle":
[info]   5011,562 ±(99.9%) 178,912 ops/s [Average]
[info]   (min, avg, max) = (4945,205, 5011,562, 5053,777), stdev = 46,463
[info]   CI (99.9%): [4832,649, 5190,474] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeUPickle:·gc.alloc.rate":
[info]   519,465 ±(99.9%) 18,474 MB/sec [Average]
[info]   (min, avg, max) = (512,630, 519,465, 523,813), stdev = 4,798
[info]   CI (99.9%): [500,990, 537,939] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   163072,089 ±(99.9%) 0,013 B/op [Average]
[info]   (min, avg, max) = (163072,086, 163072,089, 163072,093), stdev = 0,003
[info]   CI (99.9%): [163072,075, 163072,102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   505,479 ±(99.9%) 1120,376 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 505,479, 671,990), stdev = 290,958
[info]   CI (99.9%): [≈ 0, 1625,855] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   159076,247 ±(99.9%) 353558,103 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 159076,247, 213763,674), stdev = 91817,917
[info]   CI (99.9%): [≈ 0, 512634,350] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,378 ±(99.9%) 3,034 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,378, 1,785), stdev = 0,788
[info]   CI (99.9%): [≈ 0, 3,412] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   120,073 ±(99.9%) 965,290 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 120,073, 567,798), stdev = 250,683
[info]   CI (99.9%): [≈ 0, 1085,363] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeUPickle:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeUPickle:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce
[info] # Run progress: 69,68% complete, ETA 00:40:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4075980,426 ops/s
[info] # Warmup Iteration   2: 5563810,648 ops/s
[info] # Warmup Iteration   3: 5549307,513 ops/s
[info] # Warmup Iteration   4: 5578144,212 ops/s
[info] # Warmup Iteration   5: 5519979,804 ops/s
[info] Iteration   1: 5571598,378 ops/s
[info]                  ·gc.alloc.rate:                   3541,393 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3390,919 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     957,510 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,024 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 5574337,473 ops/s
[info]                  ·gc.alloc.rate:                   3543,107 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3396,043 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     958,493 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,029 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 5570541,347 ops/s
[info]                  ·gc.alloc.rate:                   3540,636 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4080,894 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1152,588 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,018 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 5538916,465 ops/s
[info]                  ·gc.alloc.rate:                   3520,577 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3404,525 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     967,036 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,018 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 5557383,169 ops/s
[info]                  ·gc.alloc.rate:                   3532,292 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3405,202 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     964,020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,018 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce":
[info]   5562555,367 ±(99.9%) 56786,205 ops/s [Average]
[info]   (min, avg, max) = (5538916,465, 5562555,367, 5574337,473), stdev = 14747,197
[info]   CI (99.9%): [5505769,162, 5619341,572] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.alloc.rate":
[info]   3535,601 ±(99.9%) 36,117 MB/sec [Average]
[info]   (min, avg, max) = (3520,577, 3535,601, 3543,107), stdev = 9,380
[info]   CI (99.9%): [3499,484, 3571,718] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   1000,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1000,000, 1000,000, 1000,000), stdev = 0,001
[info]   CI (99.9%): [1000,000, 1000,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   3535,517 ±(99.9%) 1174,191 MB/sec [Average]
[info]   (min, avg, max) = (3390,919, 3535,517, 4080,894), stdev = 304,934
[info]   CI (99.9%): [2361,326, 4709,708] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   999,930 ±(99.9%) 328,956 B/op [Average]
[info]   (min, avg, max) = (957,510, 999,930, 1152,588), stdev = 85,429
[info]   CI (99.9%): [670,974, 1328,886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,075 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (0,062, 0,075, 0,104), stdev = 0,019
[info]   CI (99.9%): [0,003, 0,147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,021 ±(99.9%) 0,020 B/op [Average]
[info]   (min, avg, max) = (0,018, 0,021, 0,029), stdev = 0,005
[info]   CI (99.9%): [0,001, 0,041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.count":
[info]   26,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (5,000, 5,200, 6,000), stdev = 0,447
[info]   CI (99.9%): [26,000, 26,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.time":
[info]   15,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 3,000, 3,000), stdev = 0,001
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava
[info] # Run progress: 69,88% complete, ETA 00:39:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 566273,396 ops/s
[info] # Warmup Iteration   2: 41916918,393 ops/s
[info] # Warmup Iteration   3: 43999545,999 ops/s
[info] # Warmup Iteration   4: 43953681,766 ops/s
[info] # Warmup Iteration   5: 44115497,295 ops/s
[info] Iteration   1: 44099532,391 ops/s
[info]                  ·gc.alloc.rate:               448,476 MB/sec
[info]                  ·gc.alloc.rate.norm:          16,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,748 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 18,257 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 44026624,473 ops/s
[info]                  ·gc.alloc.rate:               447,764 MB/sec
[info]                  ·gc.alloc.rate.norm:          16,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,794 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 18,288 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 44112691,716 ops/s
[info]                  ·gc.alloc.rate:      448,622 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 44037345,741 ops/s
[info]                  ·gc.alloc.rate:                   447,852 MB/sec
[info]                  ·gc.alloc.rate.norm:              16,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664,047 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23,724 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,001 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 44072639,477 ops/s
[info]                  ·gc.alloc.rate:               448,193 MB/sec
[info]                  ·gc.alloc.rate.norm:          16,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664,030 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23,705 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava":
[info]   44069766,760 ±(99.9%) 144709,132 ops/s [Average]
[info]   (min, avg, max) = (44026624,473, 44069766,760, 44112691,716), stdev = 37580,502
[info]   CI (99.9%): [43925057,628, 44214475,891] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   448,181 ±(99.9%) 1,446 MB/sec [Average]
[info]   (min, avg, max) = (447,764, 448,181, 448,622), stdev = 0,375
[info]   CI (99.9%): [446,735, 449,627] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   16,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (16,000, 16,000, 16,000), stdev = 0,001
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   470,324 ±(99.9%) 1053,998 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 470,324, 664,047), stdev = 273,720
[info]   CI (99.9%): [≈ 0, 1524,322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   16,795 ±(99.9%) 37,640 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 16,795, 23,724), stdev = 9,775
[info]   CI (99.9%): [≈ 0, 54,435] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,008 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,008, 0,042), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,400, 2,000), stdev = 0,894
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala
[info] # Run progress: 70,08% complete, ETA 00:39:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5118999,530 ops/s
[info] # Warmup Iteration   2: 9251770,730 ops/s
[info] # Warmup Iteration   3: 9477760,744 ops/s
[info] # Warmup Iteration   4: 9495757,028 ops/s
[info] # Warmup Iteration   5: 9402637,443 ops/s
[info] Iteration   1: 9466851,436 ops/s
[info]                  ·gc.alloc.rate:                   3562,241 MB/sec
[info]                  ·gc.alloc.rate.norm:              592,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3380,475 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     561,793 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,014 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 9446997,590 ops/s
[info]                  ·gc.alloc.rate:                   3554,749 MB/sec
[info]                  ·gc.alloc.rate.norm:              592,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4068,078 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     677,489 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,017 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   3: 9429794,184 ops/s
[info]                  ·gc.alloc.rate:                   3548,257 MB/sec
[info]                  ·gc.alloc.rate.norm:              592,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3397,057 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     566,773 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,014 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 9365316,309 ops/s
[info]                  ·gc.alloc.rate:                   3524,030 MB/sec
[info]                  ·gc.alloc.rate.norm:              592,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3401,166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     571,360 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,003 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   5: 9442896,858 ops/s
[info]                  ·gc.alloc.rate:                   3553,082 MB/sec
[info]                  ·gc.alloc.rate.norm:              592,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3404,411 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     567,229 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,010 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala":
[info]   9430371,275 ±(99.9%) 149092,642 ops/s [Average]
[info]   (min, avg, max) = (9365316,309, 9430371,275, 9466851,436), stdev = 38718,886
[info]   CI (99.9%): [9281278,633, 9579463,918] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   3548,472 ±(99.9%) 56,057 MB/sec [Average]
[info]   (min, avg, max) = (3524,030, 3548,472, 3562,241), stdev = 14,558
[info]   CI (99.9%): [3492,415, 3604,528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   592,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (592,000, 592,000, 592,000), stdev = 0,001
[info]   CI (99.9%): [592,000, 592,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   3530,237 ±(99.9%) 1158,286 MB/sec [Average]
[info]   (min, avg, max) = (3380,475, 3530,237, 4068,078), stdev = 300,803
[info]   CI (99.9%): [2371,952, 4688,523] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   588,929 ±(99.9%) 191,079 B/op [Average]
[info]   (min, avg, max) = (561,793, 588,929, 677,489), stdev = 49,623
[info]   CI (99.9%): [397,850, 780,008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,071 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,071, 0,104), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,012 ±(99.9%) 0,020 B/op [Average]
[info]   (min, avg, max) = (0,003, 0,012, 0,017), stdev = 0,005
[info]   CI (99.9%): [≈ 0, 0,032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.count":
[info]   26,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (5,000, 5,200, 6,000), stdev = 0,447
[info]   CI (99.9%): [26,000, 26,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.time":
[info]   16,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 3,200, 4,000), stdev = 0,837
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala
[info] # Run progress: 70,28% complete, ETA 00:39:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 49635744,269 ops/s
[info] # Warmup Iteration   2: 52129610,301 ops/s
[info] # Warmup Iteration   3: 54511355,001 ops/s
[info] # Warmup Iteration   4: 54441937,900 ops/s
[info] # Warmup Iteration   5: 54421277,747 ops/s
[info] Iteration   1: 54493327,577 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 53675537,062 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 54340349,072 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 54448065,305 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 54275353,186 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala":
[info]   54246526,440 ±(99.9%) 1273031,346 ops/s [Average]
[info]   (min, avg, max) = (53675537,062, 54246526,440, 54493327,577), stdev = 330602,198
[info]   CI (99.9%): [52973495,095, 55519557,786] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala
[info] # Run progress: 70,48% complete, ETA 00:39:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15617788,788 ops/s
[info] # Warmup Iteration   2: 18351992,787 ops/s
[info] # Warmup Iteration   3: 18883736,547 ops/s
[info] # Warmup Iteration   4: 19060414,110 ops/s
[info] # Warmup Iteration   5: 18822044,535 ops/s
[info] Iteration   1: 19031549,484 ops/s
[info]                  ·gc.alloc.rate:                   1258,011 MB/sec
[info]                  ·gc.alloc.rate.norm:              104,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,710 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     111,498 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,003 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 19046406,457 ops/s
[info]                  ·gc.alloc.rate:                   1259,045 MB/sec
[info]                  ·gc.alloc.rate.norm:              104,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350,026 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     111,515 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,002 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 19082137,996 ops/s
[info]                  ·gc.alloc.rate:                   1261,329 MB/sec
[info]                  ·gc.alloc.rate.norm:              104,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350,012 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     111,312 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,005 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 19054465,077 ops/s
[info]                  ·gc.alloc.rate:               1259,532 MB/sec
[info]                  ·gc.alloc.rate.norm:          104,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,689 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 55,792 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 19041702,590 ops/s
[info]                  ·gc.alloc.rate:                   1258,686 MB/sec
[info]                  ·gc.alloc.rate.norm:              104,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,054 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     111,715 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,003 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala":
[info]   19051252,321 ±(99.9%) 73745,820 ops/s [Average]
[info]   (min, avg, max) = (19031549,484, 19051252,321, 19082137,996), stdev = 19151,555
[info]   CI (99.9%): [18977506,501, 19124998,140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.alloc.rate":
[info]   1259,321 ±(99.9%) 4,822 MB/sec [Average]
[info]   (min, avg, max) = (1258,011, 1259,321, 1261,329), stdev = 1,252
[info]   CI (99.9%): [1254,498, 1264,143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.alloc.rate.norm":
[info]   104,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (104,000, 104,000, 104,000), stdev = 0,001
[info]   CI (99.9%): [104,000, 104,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.PS_Eden_Space":
[info]   1215,298 ±(99.9%) 1161,559 MB/sec [Average]
[info]   (min, avg, max) = (675,689, 1215,298, 1352,054), stdev = 301,653
[info]   CI (99.9%): [53,739, 2376,857] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.PS_Eden_Space.norm":
[info]   100,366 ±(99.9%) 95,952 B/op [Average]
[info]   (min, avg, max) = (55,792, 100,366, 111,715), stdev = 24,918
[info]   CI (99.9%): [4,415, 196,318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,062), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,003 ±(99.9%) 0,008 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,003, 0,005), stdev = 0,002
[info]   CI (99.9%): [≈ 0, 0,010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson
[info] # Run progress: 70,68% complete, ETA 00:38:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5307206,067 ops/s
[info] # Warmup Iteration   2: 8239615,952 ops/s
[info] # Warmup Iteration   3: 8444411,904 ops/s
[info] # Warmup Iteration   4: 8439892,609 ops/s
[info] # Warmup Iteration   5: 8412620,089 ops/s
[info] Iteration   1: 8385455,305 ops/s
[info]                  ·gc.alloc.rate:                   4050,730 MB/sec
[info]                  ·gc.alloc.rate.norm:              760,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4068,162 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     763,271 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,008 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   2: 8438345,004 ops/s
[info]                  ·gc.alloc.rate:                   4076,269 MB/sec
[info]                  ·gc.alloc.rate.norm:              760,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4077,072 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     760,150 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,019 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 8389605,293 ops/s
[info]                  ·gc.alloc.rate:                   4052,736 MB/sec
[info]                  ·gc.alloc.rate.norm:              760,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4082,485 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     765,579 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,016 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 8424230,330 ops/s
[info]                  ·gc.alloc.rate:                   4069,565 MB/sec
[info]                  ·gc.alloc.rate.norm:              760,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4086,426 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     763,149 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,008 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   5: 8388732,517 ops/s
[info]                  ·gc.alloc.rate:                   4052,948 MB/sec
[info]                  ·gc.alloc.rate.norm:              760,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4088,113 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     766,594 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,008 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson":
[info]   8405273,690 ±(99.9%) 93629,724 ops/s [Average]
[info]   (min, avg, max) = (8385455,305, 8405273,690, 8438345,004), stdev = 24315,342
[info]   CI (99.9%): [8311643,966, 8498903,413] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.alloc.rate":
[info]   4060,449 ±(99.9%) 44,891 MB/sec [Average]
[info]   (min, avg, max) = (4050,730, 4060,449, 4076,269), stdev = 11,658
[info]   CI (99.9%): [4015,559, 4105,340] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   760,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (760,000, 760,000, 760,000), stdev = 0,001
[info]   CI (99.9%): [760,000, 760,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   4080,452 ±(99.9%) 31,105 MB/sec [Average]
[info]   (min, avg, max) = (4068,162, 4080,452, 4088,113), stdev = 8,078
[info]   CI (99.9%): [4049,347, 4111,556] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   763,748 ±(99.9%) 9,624 B/op [Average]
[info]   (min, avg, max) = (760,150, 763,748, 766,594), stdev = 2,499
[info]   CI (99.9%): [754,124, 773,373] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,062 ±(99.9%) 0,113 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,062, 0,104), stdev = 0,029
[info]   CI (99.9%): [≈ 0, 0,176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,012 ±(99.9%) 0,021 B/op [Average]
[info]   (min, avg, max) = (0,008, 0,012, 0,019), stdev = 0,005
[info]   CI (99.9%): [≈ 0, 0,033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.count":
[info]   30,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (6,000, 6,000, 6,000), stdev = 0,001
[info]   CI (99.9%): [30,000, 30,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.time":
[info]   18,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 3,600, 4,000), stdev = 0,548
[info]   CI (99.9%): [18,000, 18,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readUPickle
[info] # Run progress: 70,88% complete, ETA 00:38:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7560329,725 ops/s
[info] # Warmup Iteration   2: 9548336,069 ops/s
[info] # Warmup Iteration   3: 9639247,056 ops/s
[info] # Warmup Iteration   4: 9667568,696 ops/s
[info] # Warmup Iteration   5: 9516404,078 ops/s
[info] Iteration   1: 9725438,565 ops/s
[info]                  ·gc.alloc.rate:                   4401,673 MB/sec
[info]                  ·gc.alloc.rate.norm:              712,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4078,711 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     659,759 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,010 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   2: 9647686,228 ops/s
[info]                  ·gc.alloc.rate:                   4366,215 MB/sec
[info]                  ·gc.alloc.rate.norm:              712,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4764,617 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     776,968 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,017 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   3: 9669207,263 ops/s
[info]                  ·gc.alloc.rate:                   4375,857 MB/sec
[info]                  ·gc.alloc.rate.norm:              712,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4086,074 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     664,849 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,014 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 9677215,238 ops/s
[info]                  ·gc.alloc.rate:                   4379,415 MB/sec
[info]                  ·gc.alloc.rate.norm:              712,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4771,007 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     775,665 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,014 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   5: 9645774,979 ops/s
[info]                  ·gc.alloc.rate:                   4365,128 MB/sec
[info]                  ·gc.alloc.rate.norm:              712,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4090,174 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     667,152 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,007 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readUPickle":
[info]   9673064,455 ±(99.9%) 124238,093 ops/s [Average]
[info]   (min, avg, max) = (9645774,979, 9673064,455, 9725438,565), stdev = 32264,238
[info]   CI (99.9%): [9548826,361, 9797302,548] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readUPickle:·gc.alloc.rate":
[info]   4377,658 ±(99.9%) 56,821 MB/sec [Average]
[info]   (min, avg, max) = (4365,128, 4377,658, 4401,673), stdev = 14,756
[info]   CI (99.9%): [4320,837, 4434,478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   712,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (712,000, 712,000, 712,000), stdev = 0,001
[info]   CI (99.9%): [712,000, 712,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   4358,116 ±(99.9%) 1440,251 MB/sec [Average]
[info]   (min, avg, max) = (4078,711, 4358,116, 4771,007), stdev = 374,029
[info]   CI (99.9%): [2917,866, 5798,367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   708,878 ±(99.9%) 237,283 B/op [Average]
[info]   (min, avg, max) = (659,759, 708,878, 776,968), stdev = 61,622
[info]   CI (99.9%): [471,595, 946,162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,075 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,075, 0,104), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,012 ±(99.9%) 0,015 B/op [Average]
[info]   (min, avg, max) = (0,007, 0,012, 0,017), stdev = 0,004
[info]   CI (99.9%): [≈ 0, 0,027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readUPickle:·gc.count":
[info]   32,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (6,000, 6,400, 7,000), stdev = 0,548
[info]   CI (99.9%): [32,000, 32,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readUPickle:·gc.time":
[info]   19,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 3,800, 4,000), stdev = 0,447
[info]   CI (99.9%): [19,000, 19,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce
[info] # Run progress: 71,08% complete, ETA 00:38:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9396448,485 ops/s
[info] # Warmup Iteration   2: 13798921,956 ops/s
[info] # Warmup Iteration   3: 13921662,457 ops/s
[info] # Warmup Iteration   4: 13882685,164 ops/s
[info] # Warmup Iteration   5: 13813364,162 ops/s
[info] Iteration   1: 13752916,066 ops/s
[info]                  ·gc.alloc.rate:                   2587,393 MB/sec
[info]                  ·gc.alloc.rate.norm:              296,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2698,420 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     308,702 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,002 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 13920188,679 ops/s
[info]                  ·gc.alloc.rate:                   2618,793 MB/sec
[info]                  ·gc.alloc.rate.norm:              296,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2705,001 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     305,744 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,012 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 13891839,460 ops/s
[info]                  ·gc.alloc.rate:                   2613,620 MB/sec
[info]                  ·gc.alloc.rate.norm:              296,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2710,819 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     307,008 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,007 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 13829084,935 ops/s
[info]                  ·gc.alloc.rate:                   2601,853 MB/sec
[info]                  ·gc.alloc.rate.norm:              296,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2714,771 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     308,846 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,002 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 13800820,478 ops/s
[info]                  ·gc.alloc.rate:                   2596,747 MB/sec
[info]                  ·gc.alloc.rate.norm:              296,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2038,644 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     232,383 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,007 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce":
[info]   13838969,924 ±(99.9%) 260808,535 ops/s [Average]
[info]   (min, avg, max) = (13752916,066, 13838969,924, 13920188,679), stdev = 67731,148
[info]   CI (99.9%): [13578161,389, 14099778,458] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.alloc.rate":
[info]   2603,681 ±(99.9%) 48,854 MB/sec [Average]
[info]   (min, avg, max) = (2587,393, 2603,681, 2618,793), stdev = 12,687
[info]   CI (99.9%): [2554,827, 2652,535] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   296,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (296,000, 296,000, 296,000), stdev = 0,001
[info]   CI (99.9%): [296,000, 296,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2573,531 ±(99.9%) 1151,630 MB/sec [Average]
[info]   (min, avg, max) = (2038,644, 2573,531, 2714,771), stdev = 299,075
[info]   CI (99.9%): [1421,902, 3725,161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   292,537 ±(99.9%) 129,580 B/op [Average]
[info]   (min, avg, max) = (232,383, 292,537, 308,846), stdev = 33,651
[info]   CI (99.9%): [162,957, 422,116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,054 ±(99.9%) 0,134 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,054, 0,104), stdev = 0,035
[info]   CI (99.9%): [≈ 0, 0,188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,006 ±(99.9%) 0,015 B/op [Average]
[info]   (min, avg, max) = (0,002, 0,006, 0,012), stdev = 0,004
[info]   CI (99.9%): [≈ 0, 0,021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.count":
[info]   19,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,800, 4,000), stdev = 0,447
[info]   CI (99.9%): [19,000, 19,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.time":
[info]   12,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava
[info] # Run progress: 71,29% complete, ETA 00:38:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0,987 ops/s
[info] # Warmup Iteration   2: 61668132,903 ops/s
[info] # Warmup Iteration   3: 63457678,983 ops/s
[info] # Warmup Iteration   4: 66149187,429 ops/s
[info] # Warmup Iteration   5: 66108016,237 ops/s
[info] Iteration   1: 66773332,970 ops/s
[info]                  ·gc.alloc.rate:                   2037,197 MB/sec
[info]                  ·gc.alloc.rate.norm:              48,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007,486 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     47,300 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,371 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,056 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   2: 66856419,500 ops/s
[info]                  ·gc.alloc.rate:                   2039,740 MB/sec
[info]                  ·gc.alloc.rate.norm:              48,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009,358 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     47,285 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,001 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 66182320,954 ops/s
[info]                  ·gc.alloc.rate:                   2019,286 MB/sec
[info]                  ·gc.alloc.rate.norm:              48,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009,500 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     47,767 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 66874437,139 ops/s
[info]                  ·gc.alloc.rate:                   2040,332 MB/sec
[info]                  ·gc.alloc.rate.norm:              48,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011,461 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     47,321 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 66932817,706 ops/s
[info]                  ·gc.alloc.rate:                   2042,135 MB/sec
[info]                  ·gc.alloc.rate.norm:              48,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016,122 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     47,389 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava":
[info]   66723865,654 ±(99.9%) 1186256,051 ops/s [Average]
[info]   (min, avg, max) = (66182320,954, 66723865,654, 66932817,706), stdev = 308066,929
[info]   CI (99.9%): [65537609,603, 67910121,705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   2035,738 ±(99.9%) 36,063 MB/sec [Average]
[info]   (min, avg, max) = (2019,286, 2035,738, 2042,135), stdev = 9,365
[info]   CI (99.9%): [1999,675, 2071,801] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   48,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (48,000, 48,000, 48,000), stdev = 0,001
[info]   CI (99.9%): [48,000, 48,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   2010,785 ±(99.9%) 12,699 MB/sec [Average]
[info]   (min, avg, max) = (2007,486, 2010,785, 2016,122), stdev = 3,298
[info]   CI (99.9%): [1998,086, 2023,485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   47,412 ±(99.9%) 0,779 B/op [Average]
[info]   (min, avg, max) = (47,285, 47,412, 47,767), stdev = 0,202
[info]   CI (99.9%): [46,633, 48,192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,495 ±(99.9%) 4,039 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,495, 2,371), stdev = 1,049
[info]   CI (99.9%): [≈ 0, 4,534] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0,012 ±(99.9%) 0,095 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻³, 0,012, 0,056), stdev = 0,025
[info]   CI (99.9%): [≈ 0, 0,107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.count":
[info]   15,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,000, 3,000), stdev = 0,001
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.time":
[info]   15,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 3,000, 4,000), stdev = 0,707
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala
[info] # Run progress: 71,49% complete, ETA 00:37:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6585726,407 ops/s
[info] # Warmup Iteration   2: 12594805,179 ops/s
[info] # Warmup Iteration   3: 12713683,350 ops/s
[info] # Warmup Iteration   4: 12705788,351 ops/s
[info] # Warmup Iteration   5: 12637171,195 ops/s
[info] Iteration   1: 12711863,365 ops/s
[info]                  ·gc.alloc.rate:                   3102,534 MB/sec
[info]                  ·gc.alloc.rate.norm:              384,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2697,411 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     333,858 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,008 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 12736070,254 ops/s
[info]                  ·gc.alloc.rate:                   3108,558 MB/sec
[info]                  ·gc.alloc.rate.norm:              384,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3382,070 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     417,787 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,018 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 12772345,552 ops/s
[info]                  ·gc.alloc.rate:                   3117,256 MB/sec
[info]                  ·gc.alloc.rate.norm:              384,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3390,040 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     417,603 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,008 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 12780178,224 ops/s
[info]                  ·gc.alloc.rate:                   3119,058 MB/sec
[info]                  ·gc.alloc.rate.norm:              384,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2716,626 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     334,455 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,008 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 12571410,869 ops/s
[info]                  ·gc.alloc.rate:               3068,344 MB/sec
[info]                  ·gc.alloc.rate.norm:          384,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3399,930 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 425,498 B/op
[info]                  ·gc.count:                    5,000 counts
[info]                  ·gc.time:                     4,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala":
[info]   12714373,653 ±(99.9%) 325637,829 ops/s [Average]
[info]   (min, avg, max) = (12571410,869, 12714373,653, 12780178,224), stdev = 84567,110
[info]   CI (99.9%): [12388735,824, 13040011,482] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   3103,150 ±(99.9%) 79,222 MB/sec [Average]
[info]   (min, avg, max) = (3068,344, 3103,150, 3119,058), stdev = 20,574
[info]   CI (99.9%): [3023,928, 3182,373] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   384,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (384,000, 384,000, 384,000), stdev = 0,001
[info]   CI (99.9%): [384,000, 384,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   3117,216 ±(99.9%) 1442,343 MB/sec [Average]
[info]   (min, avg, max) = (2697,411, 3117,216, 3399,930), stdev = 374,572
[info]   CI (99.9%): [1674,873, 4559,559] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   385,840 ±(99.9%) 182,091 B/op [Average]
[info]   (min, avg, max) = (333,858, 385,840, 425,498), stdev = 47,288
[info]   CI (99.9%): [203,749, 567,931] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,067 ±(99.9%) 0,200 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,067, 0,146), stdev = 0,052
[info]   CI (99.9%): [≈ 0, 0,266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,008 ±(99.9%) 0,025 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,008, 0,018), stdev = 0,006
[info]   CI (99.9%): [≈ 0, 0,033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.count":
[info]   23,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,600, 5,000), stdev = 0,548
[info]   CI (99.9%): [23,000, 23,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.time":
[info]   16,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 3,200, 4,000), stdev = 0,447
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala
[info] # Run progress: 71,69% complete, ETA 00:37:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 36788732,546 ops/s
[info] # Warmup Iteration   2: 49152202,170 ops/s
[info] # Warmup Iteration   3: 49832890,671 ops/s
[info] # Warmup Iteration   4: 49827873,390 ops/s
[info] # Warmup Iteration   5: 50190567,487 ops/s
[info] Iteration   1: 50080598,360 ops/s
[info]                  ·gc.alloc.rate:                   1018,625 MB/sec
[info]                  ·gc.alloc.rate.norm:              32,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,389 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42,328 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,001 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 49760271,271 ops/s
[info]                  ·gc.alloc.rate:               1012,157 MB/sec
[info]                  ·gc.alloc.rate.norm:          32,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,717 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21,300 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 50092501,262 ops/s
[info]                  ·gc.alloc.rate:                   1018,860 MB/sec
[info]                  ·gc.alloc.rate.norm:              32,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,379 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42,318 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,003 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 45784338,020 ops/s
[info]                  ·gc.alloc.rate:               931,251 MB/sec
[info]                  ·gc.alloc.rate.norm:          32,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,725 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23,151 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 50265307,002 ops/s
[info]                  ·gc.alloc.rate:                   1022,449 MB/sec
[info]                  ·gc.alloc.rate.norm:              32,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,921 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42,218 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,001 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala":
[info]   49196603,183 ±(99.9%) 7378652,674 ops/s [Average]
[info]   (min, avg, max) = (45784338,020, 49196603,183, 50265307,002), stdev = 1916212,667
[info]   CI (99.9%): [41817950,509, 56575255,857] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1000,668 ±(99.9%) 150,107 MB/sec [Average]
[info]   (min, avg, max) = (931,251, 1000,668, 1022,449), stdev = 38,982
[info]   CI (99.9%): [850,561, 1150,775] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   32,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (32,000, 32,000, 32,000), stdev = 0,001
[info]   CI (99.9%): [32,000, 32,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1078,226 ±(99.9%) 1421,895 MB/sec [Average]
[info]   (min, avg, max) = (673,717, 1078,226, 1348,921), stdev = 369,262
[info]   CI (99.9%): [≈ 0, 2500,121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   34,263 ±(99.9%) 42,389 B/op [Average]
[info]   (min, avg, max) = (21,300, 34,263, 42,328), stdev = 11,008
[info]   CI (99.9%): [≈ 0, 76,652] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,166 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,104), stdev = 0,043
[info]   CI (99.9%): [≈ 0, 0,200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,001 ±(99.9%) 0,005 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,001, 0,003), stdev = 0,001
[info]   CI (99.9%): [≈ 0, 0,006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 71,89% complete, ETA 00:37:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 50970143,710 ops/s
[info] # Warmup Iteration   2: 62276725,184 ops/s
[info] # Warmup Iteration   3: 64371772,456 ops/s
[info] # Warmup Iteration   4: 61978137,012 ops/s
[info] # Warmup Iteration   5: 64383060,682 ops/s
[info] Iteration   1: 64444255,154 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 62147432,890 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 64434686,601 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 64292153,162 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 63577630,366 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc":
[info]   63779231,634 ±(99.9%) 3772047,338 ops/s [Average]
[info]   (min, avg, max) = (62147432,890, 63779231,634, 64444255,154), stdev = 979588,715
[info]   CI (99.9%): [60007184,297, 67551278,972] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala
[info] # Run progress: 72,09% complete, ETA 00:36:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14976238,431 ops/s
[info] # Warmup Iteration   2: 14577881,992 ops/s
[info] # Warmup Iteration   3: 14963879,635 ops/s
[info] # Warmup Iteration   4: 14812093,110 ops/s
[info] # Warmup Iteration   5: 14683997,763 ops/s
[info] Iteration   1: 14913499,785 ops/s
[info]                  ·gc.alloc.rate:                   2502,507 MB/sec
[info]                  ·gc.alloc.rate.norm:              264,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2711,398 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     286,037 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,004 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 15002586,810 ops/s
[info]                  ·gc.alloc.rate:                   2517,626 MB/sec
[info]                  ·gc.alloc.rate.norm:              264,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2714,958 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     284,692 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,013 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 14892679,587 ops/s
[info]                  ·gc.alloc.rate:                   2499,272 MB/sec
[info]                  ·gc.alloc.rate.norm:              264,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2038,157 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     215,292 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,007 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 15014288,699 ops/s
[info]                  ·gc.alloc.rate:                   2519,424 MB/sec
[info]                  ·gc.alloc.rate.norm:              264,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2719,435 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     284,958 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,007 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 15053445,888 ops/s
[info]                  ·gc.alloc.rate:                   2525,934 MB/sec
[info]                  ·gc.alloc.rate.norm:              264,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2721,473 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     284,437 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,002 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala":
[info]   14975300,154 ±(99.9%) 265505,093 ops/s [Average]
[info]   (min, avg, max) = (14892679,587, 14975300,154, 15053445,888), stdev = 68950,830
[info]   CI (99.9%): [14709795,060, 15240805,247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.alloc.rate":
[info]   2512,952 ±(99.9%) 44,263 MB/sec [Average]
[info]   (min, avg, max) = (2499,272, 2512,952, 2525,934), stdev = 11,495
[info]   CI (99.9%): [2468,690, 2557,215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.alloc.rate.norm":
[info]   264,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (264,000, 264,000, 264,000), stdev = 0,001
[info]   CI (99.9%): [264,000, 264,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.PS_Eden_Space":
[info]   2581,084 ±(99.9%) 1168,789 MB/sec [Average]
[info]   (min, avg, max) = (2038,157, 2581,084, 2721,473), stdev = 303,531
[info]   CI (99.9%): [1412,296, 3749,873] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.PS_Eden_Space.norm":
[info]   271,083 ±(99.9%) 120,118 B/op [Average]
[info]   (min, avg, max) = (215,292, 271,083, 286,037), stdev = 31,194
[info]   CI (99.9%): [150,966, 391,201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.PS_Survivor_Space":
[info]   0,062 ±(99.9%) 0,150 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,062, 0,125), stdev = 0,039
[info]   CI (99.9%): [≈ 0, 0,213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,007 ±(99.9%) 0,016 B/op [Average]
[info]   (min, avg, max) = (0,002, 0,007, 0,013), stdev = 0,004
[info]   CI (99.9%): [≈ 0, 0,022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.count":
[info]   19,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,800, 4,000), stdev = 0,447
[info]   CI (99.9%): [19,000, 19,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson
[info] # Run progress: 72,29% complete, ETA 00:36:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1852233,758 ops/s
[info] # Warmup Iteration   2: 2515490,220 ops/s
[info] # Warmup Iteration   3: 2545190,155 ops/s
[info] # Warmup Iteration   4: 2519691,776 ops/s
[info] # Warmup Iteration   5: 2537574,158 ops/s
[info] Iteration   1: 2534772,368 ops/s
[info]                  ·gc.alloc.rate:                   2191,139 MB/sec
[info]                  ·gc.alloc.rate.norm:              1360,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2695,430 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1673,004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,065 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 2538552,882 ops/s
[info]                  ·gc.alloc.rate:                   2194,431 MB/sec
[info]                  ·gc.alloc.rate.norm:              1360,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2025,713 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1255,437 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,065 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 2552552,493 ops/s
[info]                  ·gc.alloc.rate:                   2206,554 MB/sec
[info]                  ·gc.alloc.rate.norm:              1360,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2028,401 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1250,196 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,026 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 2552863,565 ops/s
[info]                  ·gc.alloc.rate:                   2207,187 MB/sec
[info]                  ·gc.alloc.rate.norm:              1360,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2708,366 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1668,811 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,038 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 2550063,240 ops/s
[info]                  ·gc.alloc.rate:                   2204,335 MB/sec
[info]                  ·gc.alloc.rate.norm:              1360,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2035,401 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1255,773 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,026 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson":
[info]   2545760,910 ±(99.9%) 32661,717 ops/s [Average]
[info]   (min, avg, max) = (2534772,368, 2545760,910, 2552863,565), stdev = 8482,144
[info]   CI (99.9%): [2513099,193, 2578422,627] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2200,729 ±(99.9%) 28,574 MB/sec [Average]
[info]   (min, avg, max) = (2191,139, 2200,729, 2207,187), stdev = 7,421
[info]   CI (99.9%): [2172,155, 2229,303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   1360,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1360,000, 1360,000, 1360,000), stdev = 0,001
[info]   CI (99.9%): [1360,000, 1360,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2298,662 ±(99.9%) 1417,605 MB/sec [Average]
[info]   (min, avg, max) = (2025,713, 2298,662, 2708,366), stdev = 368,148
[info]   CI (99.9%): [881,057, 3716,267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1420,644 ±(99.9%) 879,770 B/op [Average]
[info]   (min, avg, max) = (1250,196, 1420,644, 1673,004), stdev = 228,473
[info]   CI (99.9%): [540,875, 2300,414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,071 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,071, 0,104), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,044 ±(99.9%) 0,076 B/op [Average]
[info]   (min, avg, max) = (0,026, 0,044, 0,065), stdev = 0,020
[info]   CI (99.9%): [≈ 0, 0,120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.count":
[info]   17,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,400, 4,000), stdev = 0,548
[info]   CI (99.9%): [17,000, 17,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.time":
[info]   10,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeUPickle
[info] # Run progress: 72,49% complete, ETA 00:36:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6816507,924 ops/s
[info] # Warmup Iteration   2: 8632260,472 ops/s
[info] # Warmup Iteration   3: 8801720,260 ops/s
[info] # Warmup Iteration   4: 8745882,564 ops/s
[info] # Warmup Iteration   5: 8797468,867 ops/s
[info] Iteration   1: 8762484,987 ops/s
[info]                  ·gc.alloc.rate:                   2807,039 MB/sec
[info]                  ·gc.alloc.rate.norm:              504,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2708,144 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     486,244 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,011 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 8767162,423 ops/s
[info]                  ·gc.alloc.rate:                   2808,503 MB/sec
[info]                  ·gc.alloc.rate.norm:              504,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2713,076 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     486,875 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,015 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 8480513,628 ops/s
[info]                  ·gc.alloc.rate:                   2716,663 MB/sec
[info]                  ·gc.alloc.rate.norm:              504,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2716,465 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     503,963 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,015 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 8756483,359 ops/s
[info]                  ·gc.alloc.rate:                   2805,115 MB/sec
[info]                  ·gc.alloc.rate.norm:              504,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2719,404 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     488,600 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,007 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 8739327,964 ops/s
[info]                  ·gc.alloc.rate:                   2799,570 MB/sec
[info]                  ·gc.alloc.rate.norm:              504,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2721,404 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     489,928 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,007 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeUPickle":
[info]   8701194,472 ±(99.9%) 476762,580 ops/s [Average]
[info]   (min, avg, max) = (8480513,628, 8701194,472, 8767162,423), stdev = 123813,728
[info]   CI (99.9%): [8224431,892, 9177957,052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeUPickle:·gc.alloc.rate":
[info]   2787,378 ±(99.9%) 152,776 MB/sec [Average]
[info]   (min, avg, max) = (2716,663, 2787,378, 2808,503), stdev = 39,676
[info]   CI (99.9%): [2634,601, 2940,154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   504,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (504,000, 504,000, 504,000), stdev = 0,001
[info]   CI (99.9%): [504,000, 504,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   2715,699 ±(99.9%) 20,268 MB/sec [Average]
[info]   (min, avg, max) = (2708,144, 2715,699, 2721,404), stdev = 5,264
[info]   CI (99.9%): [2695,431, 2735,967] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   491,122 ±(99.9%) 28,199 B/op [Average]
[info]   (min, avg, max) = (486,244, 491,122, 503,963), stdev = 7,323
[info]   CI (99.9%): [462,923, 519,321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,062 ±(99.9%) 0,080 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,062, 0,083), stdev = 0,021
[info]   CI (99.9%): [≈ 0, 0,143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,011 ±(99.9%) 0,015 B/op [Average]
[info]   (min, avg, max) = (0,007, 0,011, 0,015), stdev = 0,004
[info]   CI (99.9%): [≈ 0, 0,026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeUPickle:·gc.count":
[info]   20,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,000, 4,000), stdev = 0,001
[info]   CI (99.9%): [20,000, 20,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeUPickle:·gc.time":
[info]   11,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 72,69% complete, ETA 00:36:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 164166,975 ops/s
[info] # Warmup Iteration   2: 180282,756 ops/s
[info] # Warmup Iteration   3: 177955,468 ops/s
[info] # Warmup Iteration   4: 178036,918 ops/s
[info] # Warmup Iteration   5: 178626,774 ops/s
[info] Iteration   1: 179313,809 ops/s
[info]                  ·gc.alloc.rate:                   3290,752 MB/sec
[info]                  ·gc.alloc.rate.norm:              28872,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3389,767 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29740,720 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,548 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 179176,139 ops/s
[info]                  ·gc.alloc.rate:                   3288,386 MB/sec
[info]                  ·gc.alloc.rate.norm:              28872,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3396,231 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29818,880 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,914 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 178205,811 ops/s
[info]                  ·gc.alloc.rate:                   3271,026 MB/sec
[info]                  ·gc.alloc.rate.norm:              28872,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3399,313 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30004,336 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,367 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 177817,157 ops/s
[info]                  ·gc.alloc.rate:                   3263,276 MB/sec
[info]                  ·gc.alloc.rate.norm:              28872,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2722,061 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24083,578 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,921 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 176027,654 ops/s
[info]                  ·gc.alloc.rate:                   3230,076 MB/sec
[info]                  ·gc.alloc.rate.norm:              28872,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3404,641 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30432,347 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,303 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala":
[info]   178108,114 ±(99.9%) 5100,066 ops/s [Average]
[info]   (min, avg, max) = (176027,654, 178108,114, 179313,809), stdev = 1324,471
[info]   CI (99.9%): [173008,048, 183208,180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   3268,703 ±(99.9%) 94,331 MB/sec [Average]
[info]   (min, avg, max) = (3230,076, 3268,703, 3290,752), stdev = 24,497
[info]   CI (99.9%): [3174,373, 3363,034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   28872,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (28872,002, 28872,002, 28872,002), stdev = 0,001
[info]   CI (99.9%): [28872,002, 28872,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   3262,403 ±(99.9%) 1163,310 MB/sec [Average]
[info]   (min, avg, max) = (2722,061, 3262,403, 3404,641), stdev = 302,108
[info]   CI (99.9%): [2099,093, 4425,712] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   28815,972 ±(99.9%) 10238,915 B/op [Average]
[info]   (min, avg, max) = (24083,578, 28815,972, 30432,347), stdev = 2659,014
[info]   CI (99.9%): [18577,058, 39054,887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,092 ±(99.9%) 0,156 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,092, 0,146), stdev = 0,041
[info]   CI (99.9%): [≈ 0, 0,248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,811 ±(99.9%) 1,402 B/op [Average]
[info]   (min, avg, max) = (0,367, 0,811, 1,303), stdev = 0,364
[info]   CI (99.9%): [≈ 0, 2,213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   24,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,800, 5,000), stdev = 0,447
[info]   CI (99.9%): [24,000, 24,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   15,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 3,000, 3,000), stdev = 0,001
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 72,89% complete, ETA 00:35:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15158,873 ops/s
[info] # Warmup Iteration   2: 28192,311 ops/s
[info] # Warmup Iteration   3: 28311,635 ops/s
[info] # Warmup Iteration   4: 28328,198 ops/s
[info] # Warmup Iteration   5: 28429,768 ops/s
[info] Iteration   1: 28518,246 ops/s
[info]                  ·gc.alloc.rate:                   2218,684 MB/sec
[info]                  ·gc.alloc.rate.norm:              122400,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011,050 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     110945,252 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6,893 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 28478,633 ops/s
[info]                  ·gc.alloc.rate:                   2215,552 MB/sec
[info]                  ·gc.alloc.rate.norm:              122400,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2688,371 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     148521,271 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,451 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 28525,240 ops/s
[info]                  ·gc.alloc.rate:                   2219,316 MB/sec
[info]                  ·gc.alloc.rate.norm:              122400,016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022,053 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     111520,534 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,594 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 28659,171 ops/s
[info]                  ·gc.alloc.rate:                   2229,483 MB/sec
[info]                  ·gc.alloc.rate.norm:              122400,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2026,555 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     111259,163 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,286 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 27599,312 ops/s
[info]                  ·gc.alloc.rate:                   2147,188 MB/sec
[info]                  ·gc.alloc.rate.norm:              122400,016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2030,027 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     115721,311 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,561 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson":
[info]   28356,120 ±(99.9%) 1650,052 ops/s [Average]
[info]   (min, avg, max) = (27599,312, 28356,120, 28659,171), stdev = 428,513
[info]   CI (99.9%): [26706,069, 30006,172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2206,045 ±(99.9%) 128,287 MB/sec [Average]
[info]   (min, avg, max) = (2147,188, 2206,045, 2229,483), stdev = 33,316
[info]   CI (99.9%): [2077,757, 2334,332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   122400,015 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (122400,015, 122400,015, 122400,016), stdev = 0,001
[info]   CI (99.9%): [122400,014, 122400,017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2155,611 ±(99.9%) 1147,136 MB/sec [Average]
[info]   (min, avg, max) = (2011,050, 2155,611, 2688,371), stdev = 297,907
[info]   CI (99.9%): [1008,476, 3302,747] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   119593,506 ±(99.9%) 62720,474 B/op [Average]
[info]   (min, avg, max) = (110945,252, 119593,506, 148521,271), stdev = 16288,308
[info]   CI (99.9%): [56873,032, 182313,980] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,075 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,075, 0,125), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   4,157 ±(99.9%) 6,677 B/op [Average]
[info]   (min, avg, max) = (2,286, 4,157, 6,893), stdev = 1,734
[info]   CI (99.9%): [≈ 0, 10,834] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   16,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,200, 4,000), stdev = 0,447
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   13,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 73,09% complete, ETA 00:35:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 83540,849 ops/s
[info] # Warmup Iteration   2: 146991,225 ops/s
[info] # Warmup Iteration   3: 136695,230 ops/s
[info] # Warmup Iteration   4: 149034,508 ops/s
[info] # Warmup Iteration   5: 149255,805 ops/s
[info] Iteration   1: 149074,472 ops/s
[info]                  ·gc.alloc.rate:               1444,011 MB/sec
[info]                  ·gc.alloc.rate.norm:          15240,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1335,013 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 14089,642 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 148221,066 ops/s
[info]                  ·gc.alloc.rate:                   1435,841 MB/sec
[info]                  ·gc.alloc.rate.norm:              15240,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336,746 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14188,202 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,663 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 147751,754 ops/s
[info]                  ·gc.alloc.rate:               1431,314 MB/sec
[info]                  ·gc.alloc.rate.norm:          15240,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338,813 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 14255,093 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   4: 149085,970 ops/s
[info]                  ·gc.alloc.rate:                   1444,174 MB/sec
[info]                  ·gc.alloc.rate.norm:              15240,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012,800 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21240,570 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,879 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 148714,204 ops/s
[info]                  ·gc.alloc.rate:                   1440,491 MB/sec
[info]                  ·gc.alloc.rate.norm:              15240,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,049 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14219,676 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,441 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala":
[info]   148569,493 ±(99.9%) 2222,718 ops/s [Average]
[info]   (min, avg, max) = (147751,754, 148569,493, 149085,970), stdev = 577,233
[info]   CI (99.9%): [146346,775, 150792,212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1439,166 ±(99.9%) 21,354 MB/sec [Average]
[info]   (min, avg, max) = (1431,314, 1439,166, 1444,174), stdev = 5,546
[info]   CI (99.9%): [1417,812, 1460,520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   15240,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (15240,003, 15240,003, 15240,003), stdev = 0,001
[info]   CI (99.9%): [15240,003, 15240,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1473,484 ±(99.9%) 1160,991 MB/sec [Average]
[info]   (min, avg, max) = (1335,013, 1473,484, 2012,800), stdev = 301,506
[info]   CI (99.9%): [312,493, 2634,475] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   15598,637 ±(99.9%) 12147,002 B/op [Average]
[info]   (min, avg, max) = (14089,642, 15598,637, 21240,570), stdev = 3154,538
[info]   CI (99.9%): [3451,634, 27745,639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,083), stdev = 0,037
[info]   CI (99.9%): [≈ 0, 0,181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,397 ±(99.9%) 1,516 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,397, 0,879), stdev = 0,394
[info]   CI (99.9%): [≈ 0, 1,913] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   9,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 73,29% complete, ETA 00:35:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 541447,048 ops/s
[info] # Warmup Iteration   2: 571455,611 ops/s
[info] # Warmup Iteration   3: 575387,826 ops/s
[info] # Warmup Iteration   4: 575369,558 ops/s
[info] # Warmup Iteration   5: 575541,681 ops/s
[info] Iteration   1: 575749,667 ops/s
[info]                  ·gc.alloc.rate:                   1191,549 MB/sec
[info]                  ·gc.alloc.rate.norm:              3256,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,038 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3678,153 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,114 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 573011,581 ops/s
[info]                  ·gc.alloc.rate:               1185,858 MB/sec
[info]                  ·gc.alloc.rate.norm:          3256,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,340 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1848,784 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 576694,513 ops/s
[info]                  ·gc.alloc.rate:                   1193,519 MB/sec
[info]                  ·gc.alloc.rate.norm:              3256,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,371 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3675,719 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,227 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 571857,778 ops/s
[info]                  ·gc.alloc.rate:               1183,490 MB/sec
[info]                  ·gc.alloc.rate.norm:          3256,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1348,750 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3710,664 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 573924,612 ops/s
[info]                  ·gc.alloc.rate:                   1187,753 MB/sec
[info]                  ·gc.alloc.rate.norm:              3256,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350,025 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3700,839 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,057 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala":
[info]   574247,630 ±(99.9%) 7601,219 ops/s [Average]
[info]   (min, avg, max) = (571857,778, 574247,630, 576694,513), stdev = 1974,013
[info]   CI (99.9%): [566646,411, 581848,849] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1188,434 ±(99.9%) 15,772 MB/sec [Average]
[info]   (min, avg, max) = (1183,490, 1188,434, 1193,519), stdev = 4,096
[info]   CI (99.9%): [1172,661, 1204,206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3256,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (3256,001, 3256,001, 3256,001), stdev = 0,001
[info]   CI (99.9%): [3256,001, 3256,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1213,105 ±(99.9%) 1161,899 MB/sec [Average]
[info]   (min, avg, max) = (673,340, 1213,105, 1350,025), stdev = 301,741
[info]   CI (99.9%): [51,206, 2375,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3322,832 ±(99.9%) 3173,514 B/op [Average]
[info]   (min, avg, max) = (1848,784, 3322,832, 3710,664), stdev = 824,152
[info]   CI (99.9%): [149,317, 6496,346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,134 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,083), stdev = 0,035
[info]   CI (99.9%): [≈ 0, 0,163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,080 ±(99.9%) 0,366 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,080, 0,227), stdev = 0,095
[info]   CI (99.9%): [≈ 0, 0,446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 2,000), stdev = 0,837
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 73,49% complete, ETA 00:35:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 568891,175 ops/s
[info] # Warmup Iteration   2: 605020,685 ops/s
[info] # Warmup Iteration   3: 598982,621 ops/s
[info] # Warmup Iteration   4: 598630,551 ops/s
[info] # Warmup Iteration   5: 604669,998 ops/s
[info] Iteration   1: 585039,846 ops/s
[info]                  ·gc.alloc.rate:                   571,171 MB/sec
[info]                  ·gc.alloc.rate.norm:              1536,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,760 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1376,230 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,112 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 602705,489 ops/s
[info]                  ·gc.alloc.rate:                   588,421 MB/sec
[info]                  ·gc.alloc.rate.norm:              1536,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,353 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1757,704 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1,522 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,974 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 606038,191 ops/s
[info]                  ·gc.alloc.rate:                   591,682 MB/sec
[info]                  ·gc.alloc.rate.norm:              1536,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,360 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1748,036 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,216 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 602601,741 ops/s
[info]                  ·gc.alloc.rate:                   588,321 MB/sec
[info]                  ·gc.alloc.rate.norm:              1536,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,007 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1757,102 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,054 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 601681,899 ops/s
[info]                  ·gc.alloc.rate:                   587,410 MB/sec
[info]                  ·gc.alloc.rate.norm:              1536,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,058 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1759,961 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,054 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   599613,433 ±(99.9%) 32011,122 ops/s [Average]
[info]   (min, avg, max) = (585039,846, 599613,433, 606038,191), stdev = 8313,187
[info]   CI (99.9%): [567602,312, 631624,555] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   585,401 ±(99.9%) 31,260 MB/sec [Average]
[info]   (min, avg, max) = (571,171, 585,401, 591,682), stdev = 8,118
[info]   CI (99.9%): [554,141, 616,661] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   1536,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1536,001, 1536,001, 1536,001), stdev = 0,001
[info]   CI (99.9%): [1536,001, 1536,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   640,907 ±(99.9%) 278,001 MB/sec [Average]
[info]   (min, avg, max) = (511,760, 640,907, 673,360), stdev = 72,196
[info]   CI (99.9%): [362,906, 918,909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   1679,807 ±(99.9%) 653,707 B/op [Average]
[info]   (min, avg, max) = (1376,230, 1679,807, 1759,961), stdev = 169,766
[info]   CI (99.9%): [1026,100, 2333,513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0,338 ±(99.9%) 2,552 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,338, 1,522), stdev = 0,663
[info]   CI (99.9%): [≈ 0, 2,890] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   0,882 ±(99.9%) 6,660 B/op [Average]
[info]   (min, avg, max) = (0,054, 0,882, 3,974), stdev = 1,730
[info]   CI (99.9%): [≈ 0, 7,542] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 73,69% complete, ETA 00:34:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13796,507 ops/s
[info] # Warmup Iteration   2: 21571,195 ops/s
[info] # Warmup Iteration   3: 21423,747 ops/s
[info] # Warmup Iteration   4: 21632,246 ops/s
[info] # Warmup Iteration   5: 21425,261 ops/s
[info] Iteration   1: 21669,580 ops/s
[info]                  ·gc.alloc.rate:                   482,514 MB/sec
[info]                  ·gc.alloc.rate.norm:              35032,027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,760 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37155,411 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,006 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,429 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 21634,811 ops/s
[info]                  ·gc.alloc.rate:               481,737 MB/sec
[info]                  ·gc.alloc.rate.norm:          35032,020 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,739 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 37213,788 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 21653,656 ops/s
[info]                  ·gc.alloc.rate:                   482,157 MB/sec
[info]                  ·gc.alloc.rate.norm:              35032,020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666,656 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48437,153 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,324 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 168,851 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 20685,722 ops/s
[info]                  ·gc.alloc.rate:      460,599 MB/sec
[info]                  ·gc.alloc.rate.norm: 35032,021 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 21773,432 ops/s
[info]                  ·gc.alloc.rate:                   484,846 MB/sec
[info]                  ·gc.alloc.rate.norm:              35032,020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666,773 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48176,905 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,514 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson":
[info]   21483,440 ±(99.9%) 1729,562 ops/s [Average]
[info]   (min, avg, max) = (20685,722, 21483,440, 21773,432), stdev = 449,162
[info]   CI (99.9%): [19753,879, 23213,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   478,371 ±(99.9%) 38,535 MB/sec [Average]
[info]   (min, avg, max) = (460,599, 478,371, 484,846), stdev = 10,007
[info]   CI (99.9%): [439,836, 516,905] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   35032,022 ±(99.9%) 0,012 B/op [Average]
[info]   (min, avg, max) = (35032,020, 35032,022, 35032,027), stdev = 0,003
[info]   CI (99.9%): [35032,009, 35032,034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   471,386 ±(99.9%) 1057,648 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 471,386, 666,773), stdev = 274,668
[info]   CI (99.9%): [≈ 0, 1529,033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   34196,651 ±(99.9%) 76663,306 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 34196,651, 48437,153), stdev = 19909,217
[info]   CI (99.9%): [≈ 0, 110859,957] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,478 ±(99.9%) 3,974 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,478, 2,324), stdev = 1,032
[info]   CI (99.9%): [≈ 0, 4,452] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   34,759 ±(99.9%) 288,736 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 34,759, 168,851), stdev = 74,984
[info]   CI (99.9%): [≈ 0, 323,494] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,400, 3,000), stdev = 1,342
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 73,90% complete, ETA 00:34:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 320638,184 ops/s
[info] # Warmup Iteration   2: 370518,769 ops/s
[info] # Warmup Iteration   3: 375587,280 ops/s
[info] # Warmup Iteration   4: 375126,867 ops/s
[info] # Warmup Iteration   5: 373565,505 ops/s
[info] Iteration   1: 375067,521 ops/s
[info]                  ·gc.alloc.rate:                   2723,450 MB/sec
[info]                  ·gc.alloc.rate.norm:              11424,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2705,378 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11348,195 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,087 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 375922,860 ops/s
[info]                  ·gc.alloc.rate:                   2729,704 MB/sec
[info]                  ·gc.alloc.rate.norm:              11424,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2710,755 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11344,700 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,349 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 373728,597 ops/s
[info]                  ·gc.alloc.rate:                   2713,706 MB/sec
[info]                  ·gc.alloc.rate.norm:              11424,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2714,677 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11428,086 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,175 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 374888,250 ops/s
[info]                  ·gc.alloc.rate:                   2722,123 MB/sec
[info]                  ·gc.alloc.rate.norm:              11424,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2717,997 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11406,684 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,087 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 373929,231 ops/s
[info]                  ·gc.alloc.rate:                   2715,123 MB/sec
[info]                  ·gc.alloc.rate.norm:              11424,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2720,719 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11447,544 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,175 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce":
[info]   374707,292 ±(99.9%) 3445,917 ops/s [Average]
[info]   (min, avg, max) = (373728,597, 374707,292, 375922,860), stdev = 894,894
[info]   CI (99.9%): [371261,375, 378153,209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   2720,821 ±(99.9%) 25,147 MB/sec [Average]
[info]   (min, avg, max) = (2713,706, 2720,821, 2729,704), stdev = 6,531
[info]   CI (99.9%): [2695,674, 2745,968] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   11424,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (11424,001, 11424,001, 11424,001), stdev = 0,001
[info]   CI (99.9%): [11424,001, 11424,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2713,905 ±(99.9%) 23,296 MB/sec [Average]
[info]   (min, avg, max) = (2705,378, 2713,905, 2720,719), stdev = 6,050
[info]   CI (99.9%): [2690,610, 2737,201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   11395,042 ±(99.9%) 179,716 B/op [Average]
[info]   (min, avg, max) = (11344,700, 11395,042, 11447,544), stdev = 46,672
[info]   CI (99.9%): [11215,326, 11574,757] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,098 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,042, 0,083), stdev = 0,026
[info]   CI (99.9%): [≈ 0, 0,140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,175 ±(99.9%) 0,411 B/op [Average]
[info]   (min, avg, max) = (0,087, 0,175, 0,349), stdev = 0,107
[info]   CI (99.9%): [≈ 0, 0,585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.count":
[info]   20,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,000, 4,000), stdev = 0,001
[info]   CI (99.9%): [20,000, 20,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.time":
[info]   12,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 74,10% complete, ETA 00:34:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 229121,396 ops/s
[info] # Warmup Iteration   2: 374867,648 ops/s
[info] # Warmup Iteration   3: 374061,953 ops/s
[info] # Warmup Iteration   4: 375271,328 ops/s
[info] # Warmup Iteration   5: 374604,599 ops/s
[info] Iteration   1: 375323,491 ops/s
[info]                  ·gc.alloc.rate:                   994,318 MB/sec
[info]                  ·gc.alloc.rate.norm:              4168,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667,037 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2796,098 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,087 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 375561,650 ops/s
[info]                  ·gc.alloc.rate:                   994,934 MB/sec
[info]                  ·gc.alloc.rate.norm:              4168,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334,753 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5591,579 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,087 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 376902,053 ops/s
[info]                  ·gc.alloc.rate:               998,508 MB/sec
[info]                  ·gc.alloc.rate.norm:          4168,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667,728 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2787,249 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 375690,292 ops/s
[info]                  ·gc.alloc.rate:                   995,329 MB/sec
[info]                  ·gc.alloc.rate.norm:              4168,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336,179 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5595,330 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,262 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 376143,897 ops/s
[info]                  ·gc.alloc.rate:               996,519 MB/sec
[info]                  ·gc.alloc.rate.norm:          4168,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669,412 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2799,856 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala":
[info]   375924,277 ±(99.9%) 2398,143 ops/s [Average]
[info]   (min, avg, max) = (375323,491, 375924,277, 376902,053), stdev = 622,790
[info]   CI (99.9%): [373526,133, 378322,420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   995,922 ±(99.9%) 6,370 MB/sec [Average]
[info]   (min, avg, max) = (994,318, 995,922, 998,508), stdev = 1,654
[info]   CI (99.9%): [989,552, 1002,292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   4168,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4168,001, 4168,001, 4168,001), stdev = 0,001
[info]   CI (99.9%): [4168,001, 4168,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   935,022 ±(99.9%) 1407,623 MB/sec [Average]
[info]   (min, avg, max) = (667,037, 935,022, 1336,179), stdev = 365,555
[info]   CI (99.9%): [≈ 0, 2342,645] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   3914,023 ±(99.9%) 5903,469 B/op [Average]
[info]   (min, avg, max) = (2787,249, 3914,023, 5595,330), stdev = 1533,112
[info]   CI (99.9%): [≈ 0, 9817,491] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,021 ±(99.9%) 0,098 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,062), stdev = 0,026
[info]   CI (99.9%): [≈ 0, 0,119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,087 ±(99.9%) 0,411 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,087, 0,262), stdev = 0,107
[info]   CI (99.9%): [≈ 0, 0,499] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 74,30% complete, ETA 00:34:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1200666,781 ops/s
[info] # Warmup Iteration   2: 1311360,954 ops/s
[info] # Warmup Iteration   3: 1333778,846 ops/s
[info] # Warmup Iteration   4: 1330436,760 ops/s
[info] # Warmup Iteration   5: 1338560,837 ops/s
[info] Iteration   1: 1333447,011 ops/s
[info]                  ·gc.alloc.rate:                   2603,684 MB/sec
[info]                  ·gc.alloc.rate.norm:              3072,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2705,413 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3192,027 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,049 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 1216449,314 ops/s
[info]                  ·gc.alloc.rate:                   2375,306 MB/sec
[info]                  ·gc.alloc.rate.norm:              3072,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2032,397 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2628,513 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,081 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 1287359,601 ops/s
[info]                  ·gc.alloc.rate:                   2513,796 MB/sec
[info]                  ·gc.alloc.rate.norm:              3072,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2713,392 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3315,918 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,051 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 1332077,483 ops/s
[info]                  ·gc.alloc.rate:                   2601,215 MB/sec
[info]                  ·gc.alloc.rate.norm:              3072,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2717,768 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3209,649 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,025 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 1333165,235 ops/s
[info]                  ·gc.alloc.rate:                   2603,060 MB/sec
[info]                  ·gc.alloc.rate.norm:              3072,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2720,076 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3210,096 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,049 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala":
[info]   1300499,729 ±(99.9%) 196220,900 ops/s [Average]
[info]   (min, avg, max) = (1216449,314, 1300499,729, 1333447,011), stdev = 50957,945
[info]   CI (99.9%): [1104278,829, 1496720,629] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   2539,412 ±(99.9%) 383,079 MB/sec [Average]
[info]   (min, avg, max) = (2375,306, 2539,412, 2603,684), stdev = 99,484
[info]   CI (99.9%): [2156,334, 2922,491] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   3072,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (3072,000, 3072,000, 3072,000), stdev = 0,001
[info]   CI (99.9%): [3072,000, 3072,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   2577,809 ±(99.9%) 1174,239 MB/sec [Average]
[info]   (min, avg, max) = (2032,397, 2577,809, 2720,076), stdev = 304,946
[info]   CI (99.9%): [1403,571, 3752,048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3111,240 ±(99.9%) 1056,125 B/op [Average]
[info]   (min, avg, max) = (2628,513, 3111,240, 3315,918), stdev = 274,272
[info]   CI (99.9%): [2055,115, 4167,366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,057 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,042, 0,062), stdev = 0,015
[info]   CI (99.9%): [≈ 0, 0,098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,051 ±(99.9%) 0,077 B/op [Average]
[info]   (min, avg, max) = (0,025, 0,051, 0,081), stdev = 0,020
[info]   CI (99.9%): [≈ 0, 0,128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   19,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,800, 4,000), stdev = 0,447
[info]   CI (99.9%): [19,000, 19,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   12,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 74,50% complete, ETA 00:33:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 86700,454 ops/s
[info] # Warmup Iteration   2: 123924,216 ops/s
[info] # Warmup Iteration   3: 125520,351 ops/s
[info] # Warmup Iteration   4: 125434,821 ops/s
[info] # Warmup Iteration   5: 125645,850 ops/s
[info] Iteration   1: 125907,357 ops/s
[info]                  ·gc.alloc.rate:                   4560,407 MB/sec
[info]                  ·gc.alloc.rate.norm:              56984,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4073,510 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50900,050 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,520 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 125583,658 ops/s
[info]                  ·gc.alloc.rate:                   4548,739 MB/sec
[info]                  ·gc.alloc.rate.norm:              56984,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4761,347 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     59647,433 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,044 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   3: 125850,578 ops/s
[info]                  ·gc.alloc.rate:                   4558,425 MB/sec
[info]                  ·gc.alloc.rate.norm:              56984,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4766,772 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     59588,500 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,781 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 125798,181 ops/s
[info]                  ·gc.alloc.rate:                   4556,580 MB/sec
[info]                  ·gc.alloc.rate.norm:              56984,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4088,214 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51126,674 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,042 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   5: 124681,086 ops/s
[info]                  ·gc.alloc.rate:                   4515,761 MB/sec
[info]                  ·gc.alloc.rate.norm:              56984,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4771,641 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60212,924 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,314 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         7,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson":
[info]   125564,172 ±(99.9%) 1958,522 ops/s [Average]
[info]   (min, avg, max) = (124681,086, 125564,172, 125907,357), stdev = 508,622
[info]   CI (99.9%): [123605,650, 127522,694] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   4547,982 ±(99.9%) 71,421 MB/sec [Average]
[info]   (min, avg, max) = (4515,761, 4547,982, 4560,407), stdev = 18,548
[info]   CI (99.9%): [4476,561, 4619,404] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   56984,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (56984,003, 56984,003, 56984,004), stdev = 0,001
[info]   CI (99.9%): [56984,003, 56984,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   4492,297 ±(99.9%) 1446,457 MB/sec [Average]
[info]   (min, avg, max) = (4073,510, 4492,297, 4771,641), stdev = 375,640
[info]   CI (99.9%): [3045,840, 5938,754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   56295,116 ±(99.9%) 18592,387 B/op [Average]
[info]   (min, avg, max) = (50900,050, 56295,116, 60212,924), stdev = 4828,384
[info]   CI (99.9%): [37702,729, 74887,504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,075 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,075, 0,104), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,940 ±(99.9%) 1,159 B/op [Average]
[info]   (min, avg, max) = (0,520, 0,940, 1,314), stdev = 0,301
[info]   CI (99.9%): [≈ 0, 2,099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   33,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (6,000, 6,600, 7,000), stdev = 0,548
[info]   CI (99.9%): [33,000, 33,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   22,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 4,400, 7,000), stdev = 1,673
[info]   CI (99.9%): [22,000, 22,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 74,70% complete, ETA 00:33:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 586933,987 ops/s
[info] # Warmup Iteration   2: 650911,575 ops/s
[info] # Warmup Iteration   3: 650601,926 ops/s
[info] # Warmup Iteration   4: 649678,453 ops/s
[info] # Warmup Iteration   5: 649445,219 ops/s
[info] Iteration   1: 646243,918 ops/s
[info]                  ·gc.alloc.rate:                   2822,653 MB/sec
[info]                  ·gc.alloc.rate.norm:              6872,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2709,467 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6596,440 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,152 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 651033,390 ops/s
[info]                  ·gc.alloc.rate:                   2843,662 MB/sec
[info]                  ·gc.alloc.rate.norm:              6872,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2712,723 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6555,573 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,151 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 617714,984 ops/s
[info]                  ·gc.alloc.rate:                   2698,104 MB/sec
[info]                  ·gc.alloc.rate.norm:              6872,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2716,773 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6919,552 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,106 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 612090,523 ops/s
[info]                  ·gc.alloc.rate:                   2673,644 MB/sec
[info]                  ·gc.alloc.rate.norm:              6872,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2719,649 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6990,244 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,107 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 649312,532 ops/s
[info]                  ·gc.alloc.rate:                   2836,228 MB/sec
[info]                  ·gc.alloc.rate.norm:              6872,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2721,648 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6594,381 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,151 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readUPickle":
[info]   635279,070 ±(99.9%) 72336,024 ops/s [Average]
[info]   (min, avg, max) = (612090,523, 635279,070, 651033,390), stdev = 18785,436
[info]   CI (99.9%): [562943,046, 707615,093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readUPickle:·gc.alloc.rate":
[info]   2774,858 ±(99.9%) 315,894 MB/sec [Average]
[info]   (min, avg, max) = (2673,644, 2774,858, 2843,662), stdev = 82,037
[info]   CI (99.9%): [2458,964, 3090,752] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   6872,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (6872,001, 6872,001, 6872,001), stdev = 0,001
[info]   CI (99.9%): [6872,001, 6872,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   2716,052 ±(99.9%) 19,178 MB/sec [Average]
[info]   (min, avg, max) = (2709,467, 2716,052, 2721,648), stdev = 4,980
[info]   CI (99.9%): [2696,874, 2735,230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   6731,238 ±(99.9%) 794,542 B/op [Average]
[info]   (min, avg, max) = (6555,573, 6731,238, 6990,244), stdev = 206,340
[info]   CI (99.9%): [5936,696, 7525,780] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,054 ±(99.9%) 0,044 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,054, 0,062), stdev = 0,011
[info]   CI (99.9%): [0,010, 0,098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,134 ±(99.9%) 0,095 B/op [Average]
[info]   (min, avg, max) = (0,106, 0,134, 0,152), stdev = 0,025
[info]   CI (99.9%): [0,039, 0,228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readUPickle:·gc.count":
[info]   20,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,000, 4,000), stdev = 0,001
[info]   CI (99.9%): [20,000, 20,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readUPickle:·gc.time":
[info]   11,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 74,90% complete, ETA 00:33:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 323860,645 ops/s
[info] # Warmup Iteration   2: 416299,489 ops/s
[info] # Warmup Iteration   3: 409352,444 ops/s
[info] # Warmup Iteration   4: 409633,366 ops/s
[info] # Warmup Iteration   5: 409584,623 ops/s
[info] Iteration   1: 409895,577 ops/s
[info]                  ·gc.alloc.rate:                   1392,247 MB/sec
[info]                  ·gc.alloc.rate.norm:              5344,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341,701 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5149,983 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,240 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 409797,700 ops/s
[info]                  ·gc.alloc.rate:                   1392,004 MB/sec
[info]                  ·gc.alloc.rate.norm:              5344,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,119 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5156,331 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,320 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 411105,234 ops/s
[info]                  ·gc.alloc.rate:               1396,362 MB/sec
[info]                  ·gc.alloc.rate.norm:          5344,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344,704 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5146,304 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 410842,989 ops/s
[info]                  ·gc.alloc.rate:                   1395,438 MB/sec
[info]                  ·gc.alloc.rate.norm:              5344,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,334 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5155,952 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,239 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 409471,862 ops/s
[info]                  ·gc.alloc.rate:                   1390,794 MB/sec
[info]                  ·gc.alloc.rate.norm:              5344,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,959 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5179,411 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,160 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce":
[info]   410222,672 ±(99.9%) 2733,019 ops/s [Average]
[info]   (min, avg, max) = (409471,862, 410222,672, 411105,234), stdev = 709,756
[info]   CI (99.9%): [407489,653, 412955,691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   1393,369 ±(99.9%) 9,232 MB/sec [Average]
[info]   (min, avg, max) = (1390,794, 1393,369, 1396,362), stdev = 2,397
[info]   CI (99.9%): [1384,137, 1402,600] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5344,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (5344,001, 5344,001, 5344,001), stdev = 0,001
[info]   CI (99.9%): [5344,001, 5344,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1344,763 ±(99.9%) 9,580 MB/sec [Average]
[info]   (min, avg, max) = (1341,701, 1344,763, 1347,959), stdev = 2,488
[info]   CI (99.9%): [1335,183, 1354,344] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5157,596 ±(99.9%) 49,674 B/op [Average]
[info]   (min, avg, max) = (5146,304, 5157,596, 5179,411), stdev = 12,900
[info]   CI (99.9%): [5107,922, 5207,271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,050 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,050, 0,083), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,192 ±(99.9%) 0,467 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,192, 0,320), stdev = 0,121
[info]   CI (99.9%): [≈ 0, 0,658] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 75,10% complete, ETA 00:33:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 576087,636 ops/s
[info] # Warmup Iteration   2: 818221,973 ops/s
[info] # Warmup Iteration   3: 822778,129 ops/s
[info] # Warmup Iteration   4: 820204,119 ops/s
[info] # Warmup Iteration   5: 827017,907 ops/s
[info] Iteration   1: 826801,545 ops/s
[info]                  ·gc.alloc.rate:                   613,807 MB/sec
[info]                  ·gc.alloc.rate.norm:              1168,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,758 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     973,814 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,052 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,099 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 821668,804 ops/s
[info]                  ·gc.alloc.rate:                   610,001 MB/sec
[info]                  ·gc.alloc.rate.norm:              1168,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667,348 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1277,807 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,303 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,410 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 829213,284 ops/s
[info]                  ·gc.alloc.rate:                   615,602 MB/sec
[info]                  ·gc.alloc.rate.norm:              1168,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667,356 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1266,196 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,158 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 828314,905 ops/s
[info]                  ·gc.alloc.rate:               614,906 MB/sec
[info]                  ·gc.alloc.rate.norm:          1168,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667,011 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1266,974 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 832410,748 ops/s
[info]                  ·gc.alloc.rate:               617,931 MB/sec
[info]                  ·gc.alloc.rate.norm:          1168,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667,005 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1260,760 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala":
[info]   827681,857 ±(99.9%) 15164,912 ops/s [Average]
[info]   (min, avg, max) = (821668,804, 827681,857, 832410,748), stdev = 3938,279
[info]   CI (99.9%): [812516,945, 842846,769] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   614,449 ±(99.9%) 11,203 MB/sec [Average]
[info]   (min, avg, max) = (610,001, 614,449, 617,931), stdev = 2,909
[info]   CI (99.9%): [603,246, 625,652] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1168,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1168,001, 1168,001, 1168,001), stdev = 0,001
[info]   CI (99.9%): [1168,000, 1168,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   636,096 ±(99.9%) 267,647 MB/sec [Average]
[info]   (min, avg, max) = (511,758, 636,096, 667,356), stdev = 69,507
[info]   CI (99.9%): [368,449, 903,743] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1209,110 ±(99.9%) 507,052 B/op [Average]
[info]   (min, avg, max) = (973,814, 1209,110, 1277,807), stdev = 131,680
[info]   CI (99.9%): [702,059, 1716,162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,488 ±(99.9%) 3,910 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,488, 2,303), stdev = 1,016
[info]   CI (99.9%): [≈ 0, 4,398] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,933 ±(99.9%) 7,488 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,933, 4,410), stdev = 1,945
[info]   CI (99.9%): [≈ 0, 8,422] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,400, 3,000), stdev = 1,140
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 75,30% complete, ETA 00:32:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2725472,533 ops/s
[info] # Warmup Iteration   2: 2798671,380 ops/s
[info] # Warmup Iteration   3: 2311144,909 ops/s
[info] # Warmup Iteration   4: 2294453,338 ops/s
[info] # Warmup Iteration   5: 2291972,435 ops/s
[info] Iteration   1: 2277593,099 ops/s
[info]                  ·gc.alloc.rate:               1053,869 MB/sec
[info]                  ·gc.alloc.rate.norm:          728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,344 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 465,138 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 2300095,071 ops/s
[info]                  ·gc.alloc.rate:                   1064,275 MB/sec
[info]                  ·gc.alloc.rate.norm:              728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,059 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     921,434 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,071 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 2279731,738 ops/s
[info]                  ·gc.alloc.rate:               1054,906 MB/sec
[info]                  ·gc.alloc.rate.norm:          728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,726 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 464,944 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 2288102,512 ops/s
[info]                  ·gc.alloc.rate:                   1058,777 MB/sec
[info]                  ·gc.alloc.rate.norm:              728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,037 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     926,891 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,043 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 2295614,737 ops/s
[info]                  ·gc.alloc.rate:               1062,222 MB/sec
[info]                  ·gc.alloc.rate.norm:          728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,682 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 462,398 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala":
[info]   2288227,432 ±(99.9%) 37565,719 ops/s [Average]
[info]   (min, avg, max) = (2277593,099, 2288227,432, 2300095,071), stdev = 9755,698
[info]   CI (99.9%): [2250661,712, 2325793,151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1058,810 ±(99.9%) 17,344 MB/sec [Average]
[info]   (min, avg, max) = (1053,869, 1058,810, 1064,275), stdev = 4,504
[info]   CI (99.9%): [1041,465, 1076,154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   728,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (728,000, 728,000, 728,000), stdev = 0,001
[info]   CI (99.9%): [728,000, 728,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   943,369 ±(99.9%) 1420,745 MB/sec [Average]
[info]   (min, avg, max) = (673,344, 943,369, 1348,037), stdev = 368,963
[info]   CI (99.9%): [≈ 0, 2364,115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   648,161 ±(99.9%) 970,222 B/op [Average]
[info]   (min, avg, max) = (462,398, 648,161, 926,891), stdev = 251,963
[info]   CI (99.9%): [≈ 0, 1618,383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,185 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,104), stdev = 0,048
[info]   CI (99.9%): [≈ 0, 0,218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,023 ±(99.9%) 0,126 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,023, 0,071), stdev = 0,033
[info]   CI (99.9%): [≈ 0, 0,149] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 75,50% complete, ETA 00:32:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2642041,386 ops/s
[info] # Warmup Iteration   2: 2866196,982 ops/s
[info] # Warmup Iteration   3: 2716829,270 ops/s
[info] # Warmup Iteration   4: 2719666,531 ops/s
[info] # Warmup Iteration   5: 2718135,884 ops/s
[info] Iteration   1: 2721400,198 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2724070,883 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2725221,702 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2723109,537 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2721603,325 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   2723081,129 ±(99.9%) 6260,082 ops/s [Average]
[info]   (min, avg, max) = (2721400,198, 2723081,129, 2725221,702), stdev = 1625,724
[info]   CI (99.9%): [2716821,046, 2729341,211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 75,70% complete, ETA 00:32:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 361546,431 ops/s
[info] # Warmup Iteration   2: 424936,427 ops/s
[info] # Warmup Iteration   3: 415793,423 ops/s
[info] # Warmup Iteration   4: 417710,700 ops/s
[info] # Warmup Iteration   5: 416749,232 ops/s
[info] Iteration   1: 415294,302 ops/s
[info]                  ·gc.alloc.rate:               597,620 MB/sec
[info]                  ·gc.alloc.rate.norm:          2264,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,765 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1938,750 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   2: 416214,223 ops/s
[info]                  ·gc.alloc.rate:                   598,938 MB/sec
[info]                  ·gc.alloc.rate.norm:              2264,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670,003 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2532,628 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,012 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7,604 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 412382,100 ops/s
[info]                  ·gc.alloc.rate:                   593,410 MB/sec
[info]                  ·gc.alloc.rate.norm:              2264,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670,019 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2556,281 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,318 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 417112,699 ops/s
[info]                  ·gc.alloc.rate:               600,231 MB/sec
[info]                  ·gc.alloc.rate.norm:          2264,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669,698 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2526,023 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 400603,577 ops/s
[info]                  ·gc.alloc.rate:                   576,470 MB/sec
[info]                  ·gc.alloc.rate.norm:              2264,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669,682 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2630,076 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,082 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson":
[info]   412321,380 ±(99.9%) 26134,770 ops/s [Average]
[info]   (min, avg, max) = (400603,577, 412321,380, 417112,699), stdev = 6787,117
[info]   CI (99.9%): [386186,610, 438456,150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   593,334 ±(99.9%) 37,618 MB/sec [Average]
[info]   (min, avg, max) = (576,470, 593,334, 600,231), stdev = 9,769
[info]   CI (99.9%): [555,716, 630,952] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2264,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (2264,001, 2264,001, 2264,001), stdev = 0,001
[info]   CI (99.9%): [2264,001, 2264,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   638,233 ±(99.9%) 272,234 MB/sec [Average]
[info]   (min, avg, max) = (511,765, 638,233, 670,019), stdev = 70,698
[info]   CI (99.9%): [365,999, 910,467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2436,752 ±(99.9%) 1083,717 B/op [Average]
[info]   (min, avg, max) = (1938,750, 2436,752, 2630,076), stdev = 281,438
[info]   CI (99.9%): [1353,035, 3520,468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,423 ±(99.9%) 3,422 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,423, 2,012), stdev = 0,889
[info]   CI (99.9%): [≈ 0, 3,845] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1,601 ±(99.9%) 12,932 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,601, 7,604), stdev = 3,359
[info]   CI (99.9%): [≈ 0, 14,533] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,400, 3,000), stdev = 1,140
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 75,90% complete, ETA 00:31:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 173724,279 ops/s
[info] # Warmup Iteration   2: 184857,378 ops/s
[info] # Warmup Iteration   3: 185107,972 ops/s
[info] # Warmup Iteration   4: 184343,104 ops/s
[info] # Warmup Iteration   5: 181639,984 ops/s
[info] Iteration   1: 183020,484 ops/s
[info]                  ·gc.alloc.rate:                   1072,120 MB/sec
[info]                  ·gc.alloc.rate.norm:              9216,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,767 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11594,071 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,179 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 183632,531 ops/s
[info]                  ·gc.alloc.rate:               1075,760 MB/sec
[info]                  ·gc.alloc.rate.norm:          9216,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,436 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5777,876 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 184216,723 ops/s
[info]                  ·gc.alloc.rate:                   1079,107 MB/sec
[info]                  ·gc.alloc.rate.norm:              9216,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,708 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11518,498 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,534 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 184521,102 ops/s
[info]                  ·gc.alloc.rate:               1080,868 MB/sec
[info]                  ·gc.alloc.rate.norm:          9216,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,679 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5752,634 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 183931,138 ops/s
[info]                  ·gc.alloc.rate:               1077,350 MB/sec
[info]                  ·gc.alloc.rate.norm:          9216,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1349,959 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11547,990 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeUPickle":
[info]   183864,396 ±(99.9%) 2216,881 ops/s [Average]
[info]   (min, avg, max) = (183020,484, 183864,396, 184521,102), stdev = 575,717
[info]   CI (99.9%): [181647,515, 186081,277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeUPickle:·gc.alloc.rate":
[info]   1077,041 ±(99.9%) 12,896 MB/sec [Average]
[info]   (min, avg, max) = (1072,120, 1077,041, 1080,868), stdev = 3,349
[info]   CI (99.9%): [1064,145, 1089,937] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   9216,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (9216,002, 9216,002, 9216,003), stdev = 0,001
[info]   CI (99.9%): [9216,002, 9216,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   1079,310 ±(99.9%) 1422,762 MB/sec [Average]
[info]   (min, avg, max) = (674,436, 1079,310, 1349,959), stdev = 369,487
[info]   CI (99.9%): [≈ 0, 2502,072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   9238,214 ±(99.9%) 12208,428 B/op [Average]
[info]   (min, avg, max) = (5752,634, 9238,214, 11594,071), stdev = 3170,490
[info]   CI (99.9%): [≈ 0, 21446,642] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,017 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,143 ±(99.9%) 0,893 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,143, 0,534), stdev = 0,232
[info]   CI (99.9%): [≈ 0, 1,036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeUPickle:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeUPickle:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 76,10% complete, ETA 00:31:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 57512,145 ops/s
[info] # Warmup Iteration   2: 68441,424 ops/s
[info] # Warmup Iteration   3: 69279,844 ops/s
[info] # Warmup Iteration   4: 67547,111 ops/s
[info] # Warmup Iteration   5: 69274,866 ops/s
[info] Iteration   1: 69625,664 ops/s
[info]                  ·gc.alloc.rate:                   2153,563 MB/sec
[info]                  ·gc.alloc.rate.norm:              48664,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2697,391 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60952,866 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,353 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 69415,660 ops/s
[info]                  ·gc.alloc.rate:                   2147,151 MB/sec
[info]                  ·gc.alloc.rate.norm:              48664,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2026,698 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     45934,005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,472 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 69818,318 ops/s
[info]                  ·gc.alloc.rate:                   2159,548 MB/sec
[info]                  ·gc.alloc.rate.norm:              48664,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029,360 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     45730,299 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,877 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 69702,625 ops/s
[info]                  ·gc.alloc.rate:                   2155,968 MB/sec
[info]                  ·gc.alloc.rate.norm:              48664,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2032,757 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     45882,909 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,940 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 68827,250 ops/s
[info]                  ·gc.alloc.rate:                   2128,894 MB/sec
[info]                  ·gc.alloc.rate.norm:              48664,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2034,743 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     46511,815 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,952 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce":
[info]   69477,903 ±(99.9%) 1510,414 ops/s [Average]
[info]   (min, avg, max) = (68827,250, 69477,903, 69818,318), stdev = 392,250
[info]   CI (99.9%): [67967,489, 70988,317] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   2149,025 ±(99.9%) 46,698 MB/sec [Average]
[info]   (min, avg, max) = (2128,894, 2149,025, 2159,548), stdev = 12,127
[info]   CI (99.9%): [2102,327, 2195,723] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   48664,006 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (48664,006, 48664,006, 48664,007), stdev = 0,001
[info]   CI (99.9%): [48664,005, 48664,007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2164,190 ±(99.9%) 1147,818 MB/sec [Average]
[info]   (min, avg, max) = (2026,698, 2164,190, 2697,391), stdev = 298,085
[info]   CI (99.9%): [1016,372, 3312,007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   49002,378 ±(99.9%) 25749,665 B/op [Average]
[info]   (min, avg, max) = (45730,299, 49002,378, 60952,866), stdev = 6687,106
[info]   CI (99.9%): [23252,713, 74752,044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,058 ±(99.9%) 0,132 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,058, 0,104), stdev = 0,034
[info]   CI (99.9%): [≈ 0, 0,190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1,319 ±(99.9%) 2,968 B/op [Average]
[info]   (min, avg, max) = (0,472, 1,319, 2,353), stdev = 0,771
[info]   CI (99.9%): [≈ 0, 4,286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.count":
[info]   16,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,200, 4,000), stdev = 0,447
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.time":
[info]   10,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 2,000, 3,000), stdev = 0,707
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 76,31% complete, ETA 00:31:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 59725,194 ops/s
[info] # Warmup Iteration   2: 91764,134 ops/s
[info] # Warmup Iteration   3: 90937,026 ops/s
[info] # Warmup Iteration   4: 92438,153 ops/s
[info] # Warmup Iteration   5: 92349,241 ops/s
[info] Iteration   1: 92322,552 ops/s
[info]                  ·gc.alloc.rate:                   1660,912 MB/sec
[info]                  ·gc.alloc.rate.norm:              28304,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337,775 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22797,352 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,355 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 92304,710 ops/s
[info]                  ·gc.alloc.rate:                   1660,653 MB/sec
[info]                  ·gc.alloc.rate.norm:              28304,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010,131 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     34260,471 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,420 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 92168,999 ops/s
[info]                  ·gc.alloc.rate:                   1658,165 MB/sec
[info]                  ·gc.alloc.rate.norm:              28304,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,734 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22919,756 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,355 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 91516,029 ops/s
[info]                  ·gc.alloc.rate:                   1646,482 MB/sec
[info]                  ·gc.alloc.rate.norm:              28304,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,362 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23127,573 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,716 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 92035,050 ops/s
[info]                  ·gc.alloc.rate:                   1655,798 MB/sec
[info]                  ·gc.alloc.rate.norm:              28304,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2021,418 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     34553,857 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,712 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala":
[info]   92069,468 ±(99.9%) 1272,426 ops/s [Average]
[info]   (min, avg, max) = (91516,029, 92069,468, 92322,552), stdev = 330,445
[info]   CI (99.9%): [90797,042, 93341,894] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1656,402 ±(99.9%) 22,804 MB/sec [Average]
[info]   (min, avg, max) = (1646,482, 1656,402, 1660,912), stdev = 5,922
[info]   CI (99.9%): [1633,598, 1679,206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   28304,005 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (28304,005, 28304,005, 28304,005), stdev = 0,001
[info]   CI (99.9%): [28304,004, 28304,005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1611,484 ±(99.9%) 1421,260 MB/sec [Average]
[info]   (min, avg, max) = (1337,775, 1611,484, 2021,418), stdev = 369,097
[info]   CI (99.9%): [190,224, 3032,743] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   27531,802 ±(99.9%) 24175,441 B/op [Average]
[info]   (min, avg, max) = (22797,352, 27531,802, 34553,857), stdev = 6278,285
[info]   CI (99.9%): [3356,361, 51707,243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,098 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,042, 0,083), stdev = 0,026
[info]   CI (99.9%): [≈ 0, 0,140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,712 ±(99.9%) 1,674 B/op [Average]
[info]   (min, avg, max) = (0,355, 0,712, 1,420), stdev = 0,435
[info]   CI (99.9%): [≈ 0, 2,385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 76,51% complete, ETA 00:31:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 91253,376 ops/s
[info] # Warmup Iteration   2: 101415,653 ops/s
[info] # Warmup Iteration   3: 101335,977 ops/s
[info] # Warmup Iteration   4: 101714,395 ops/s
[info] # Warmup Iteration   5: 101667,311 ops/s
[info] Iteration   1: 99583,841 ops/s
[info]                  ·gc.alloc.rate:                   1527,774 MB/sec
[info]                  ·gc.alloc.rate.norm:              24136,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020,481 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31919,865 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,658 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 101593,406 ops/s
[info]                  ·gc.alloc.rate:               1558,592 MB/sec
[info]                  ·gc.alloc.rate.norm:          24136,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1348,074 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 20875,963 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 101777,154 ops/s
[info]                  ·gc.alloc.rate:                   1561,385 MB/sec
[info]                  ·gc.alloc.rate.norm:              24136,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1349,421 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20859,446 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,966 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 101438,000 ops/s
[info]                  ·gc.alloc.rate:                   1556,163 MB/sec
[info]                  ·gc.alloc.rate.norm:              24136,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2026,395 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31429,272 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,969 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 99964,383 ops/s
[info]                  ·gc.alloc.rate:                   1533,610 MB/sec
[info]                  ·gc.alloc.rate.norm:              24136,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,715 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21289,073 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,655 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala":
[info]   100871,357 ±(99.9%) 3918,968 ops/s [Average]
[info]   (min, avg, max) = (99583,841, 100871,357, 101777,154), stdev = 1017,743
[info]   CI (99.9%): [96952,389, 104790,325] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1547,505 ±(99.9%) 60,055 MB/sec [Average]
[info]   (min, avg, max) = (1527,774, 1547,505, 1561,385), stdev = 15,596
[info]   CI (99.9%): [1487,450, 1607,560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   24136,004 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (24136,004, 24136,004, 24136,005), stdev = 0,001
[info]   CI (99.9%): [24136,004, 24136,005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1619,417 ±(99.9%) 1420,227 MB/sec [Average]
[info]   (min, avg, max) = (1348,074, 1619,417, 2026,395), stdev = 368,829
[info]   CI (99.9%): [199,190, 3039,644] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   25274,724 ±(99.9%) 22516,025 B/op [Average]
[info]   (min, avg, max) = (20859,446, 25274,724, 31919,865), stdev = 5847,340
[info]   CI (99.9%): [2758,698, 47790,749] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,098 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,042, 0,062), stdev = 0,026
[info]   CI (99.9%): [≈ 0, 0,140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,650 ±(99.9%) 1,521 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,650, 0,969), stdev = 0,395
[info]   CI (99.9%): [≈ 0, 2,170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 76,71% complete, ETA 00:30:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14230,290 ops/s
[info] # Warmup Iteration   2: 28529,194 ops/s
[info] # Warmup Iteration   3: 28714,134 ops/s
[info] # Warmup Iteration   4: 28516,784 ops/s
[info] # Warmup Iteration   5: 28650,660 ops/s
[info] Iteration   1: 28374,547 ops/s
[info]                  ·gc.alloc.rate:                   1978,738 MB/sec
[info]                  ·gc.alloc.rate.norm:              109712,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008,731 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     111374,946 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,618 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 27830,118 ops/s
[info]                  ·gc.alloc.rate:                   1940,730 MB/sec
[info]                  ·gc.alloc.rate.norm:              109712,016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341,985 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     75864,212 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,709 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 28535,760 ops/s
[info]                  ·gc.alloc.rate:                   1989,964 MB/sec
[info]                  ·gc.alloc.rate.norm:              109712,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017,253 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     111216,502 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,592 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 28659,133 ops/s
[info]                  ·gc.alloc.rate:                   1998,533 MB/sec
[info]                  ·gc.alloc.rate.norm:              109712,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022,122 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     111006,973 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,286 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 28696,317 ops/s
[info]                  ·gc.alloc.rate:                   2001,079 MB/sec
[info]                  ·gc.alloc.rate.norm:              109712,016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2026,682 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     111115,738 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,283 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson":
[info]   28419,175 ±(99.9%) 1357,262 ops/s [Average]
[info]   (min, avg, max) = (27830,118, 28419,175, 28696,317), stdev = 352,477
[info]   CI (99.9%): [27061,913, 29776,437] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1981,809 ±(99.9%) 94,605 MB/sec [Average]
[info]   (min, avg, max) = (1940,730, 1981,809, 2001,079), stdev = 24,569
[info]   CI (99.9%): [1887,204, 2076,414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   109712,015 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (109712,015, 109712,015, 109712,016), stdev = 0,001
[info]   CI (99.9%): [109712,014, 109712,017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1883,355 ±(99.9%) 1165,619 MB/sec [Average]
[info]   (min, avg, max) = (1341,985, 1883,355, 2026,682), stdev = 302,708
[info]   CI (99.9%): [717,735, 3048,974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   104115,674 ±(99.9%) 60815,640 B/op [Average]
[info]   (min, avg, max) = (75864,212, 104115,674, 111374,946), stdev = 15793,629
[info]   CI (99.9%): [43300,034, 164931,314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,067 ±(99.9%) 0,088 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,067, 0,083), stdev = 0,023
[info]   CI (99.9%): [≈ 0, 0,154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   3,698 ±(99.9%) 4,969 B/op [Average]
[info]   (min, avg, max) = (2,283, 3,698, 4,709), stdev = 1,290
[info]   CI (99.9%): [≈ 0, 8,667] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.time":
[info]   11,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 2,200, 3,000), stdev = 0,837
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 76,91% complete, ETA 00:30:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 102993,394 ops/s
[info] # Warmup Iteration   2: 162156,717 ops/s
[info] # Warmup Iteration   3: 160768,857 ops/s
[info] # Warmup Iteration   4: 161230,141 ops/s
[info] # Warmup Iteration   5: 162139,373 ops/s
[info] Iteration   1: 161517,308 ops/s
[info]                  ·gc.alloc.rate:               1257,379 MB/sec
[info]                  ·gc.alloc.rate.norm:          12248,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1334,056 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12994,906 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 162273,183 ops/s
[info]                  ·gc.alloc.rate:                   1263,266 MB/sec
[info]                  ·gc.alloc.rate.norm:              12248,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335,392 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12947,297 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,009 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 162129,700 ops/s
[info]                  ·gc.alloc.rate:               1262,138 MB/sec
[info]                  ·gc.alloc.rate.norm:          12248,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668,688 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6489,057 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 160940,250 ops/s
[info]                  ·gc.alloc.rate:                   1252,863 MB/sec
[info]                  ·gc.alloc.rate.norm:              12248,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338,685 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13087,006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,407 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 160924,481 ops/s
[info]                  ·gc.alloc.rate:                   1252,779 MB/sec
[info]                  ·gc.alloc.rate.norm:              12248,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,761 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13108,177 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,611 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala":
[info]   161556,984 ±(99.9%) 2452,758 ops/s [Average]
[info]   (min, avg, max) = (160924,481, 161556,984, 162273,183), stdev = 636,974
[info]   CI (99.9%): [159104,226, 164009,742] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1257,685 ±(99.9%) 19,099 MB/sec [Average]
[info]   (min, avg, max) = (1252,779, 1257,685, 1263,266), stdev = 4,960
[info]   CI (99.9%): [1238,586, 1276,784] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   12248,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (12248,003, 12248,003, 12248,003), stdev = 0,001
[info]   CI (99.9%): [12248,002, 12248,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1203,516 ±(99.9%) 1151,304 MB/sec [Average]
[info]   (min, avg, max) = (668,688, 1203,516, 1340,761), stdev = 298,990
[info]   CI (99.9%): [52,212, 2354,820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   11725,289 ±(99.9%) 11274,237 B/op [Average]
[info]   (min, avg, max) = (6489,057, 11725,289, 13108,177), stdev = 2927,884
[info]   CI (99.9%): [451,051, 22999,526] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,170 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,042, 0,104), stdev = 0,044
[info]   CI (99.9%): [≈ 0, 0,212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,405 ±(99.9%) 1,652 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,405, 1,009), stdev = 0,429
[info]   CI (99.9%): [≈ 0, 2,057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,400, 2,000), stdev = 0,894
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 77,11% complete, ETA 00:30:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 577806,254 ops/s
[info] # Warmup Iteration   2: 626538,763 ops/s
[info] # Warmup Iteration   3: 621654,147 ops/s
[info] # Warmup Iteration   4: 622513,681 ops/s
[info] # Warmup Iteration   5: 619543,721 ops/s
[info] Iteration   1: 625071,930 ops/s
[info]                  ·gc.alloc.rate:                   689,716 MB/sec
[info]                  ·gc.alloc.rate.norm:              1736,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,012 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1693,957 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1,585 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,989 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 616458,058 ops/s
[info]                  ·gc.alloc.rate:                   680,248 MB/sec
[info]                  ·gc.alloc.rate.norm:              1736,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,070 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1717,683 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,106 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 631374,516 ops/s
[info]                  ·gc.alloc.rate:                   696,735 MB/sec
[info]                  ·gc.alloc.rate.norm:              1736,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,128 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1677,180 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,052 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 630082,680 ops/s
[info]                  ·gc.alloc.rate:               695,235 MB/sec
[info]                  ·gc.alloc.rate.norm:          1736,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,032 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1680,560 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 630363,443 ops/s
[info]                  ·gc.alloc.rate:                   695,522 MB/sec
[info]                  ·gc.alloc.rate.norm:              1736,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,003 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1679,795 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,104 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala":
[info]   626670,125 ±(99.9%) 23912,620 ops/s [Average]
[info]   (min, avg, max) = (616458,058, 626670,125, 631374,516), stdev = 6210,031
[info]   CI (99.9%): [602757,505, 650582,745] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   691,491 ±(99.9%) 26,352 MB/sec [Average]
[info]   (min, avg, max) = (680,248, 691,491, 696,735), stdev = 6,843
[info]   CI (99.9%): [665,140, 717,843] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1736,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1736,001, 1736,001, 1736,001), stdev = 0,001
[info]   CI (99.9%): [1736,001, 1736,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   673,049 ±(99.9%) 0,196 MB/sec [Average]
[info]   (min, avg, max) = (673,003, 673,049, 673,128), stdev = 0,051
[info]   CI (99.9%): [672,853, 673,245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1689,835 ±(99.9%) 64,993 B/op [Average]
[info]   (min, avg, max) = (1677,180, 1689,835, 1717,683), stdev = 16,878
[info]   CI (99.9%): [1624,842, 1754,828] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,338 ±(99.9%) 2,685 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,338, 1,585), stdev = 0,697
[info]   CI (99.9%): [≈ 0, 3,023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,850 ±(99.9%) 6,758 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,850, 3,989), stdev = 1,755
[info]   CI (99.9%): [≈ 0, 7,609] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 77,31% complete, ETA 00:30:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 606173,923 ops/s
[info] # Warmup Iteration   2: 640440,758 ops/s
[info] # Warmup Iteration   3: 640487,463 ops/s
[info] # Warmup Iteration   4: 647782,571 ops/s
[info] # Warmup Iteration   5: 633934,535 ops/s
[info] Iteration   1: 644022,940 ops/s
[info]                  ·gc.alloc.rate:      6,550 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 644765,124 ops/s
[info]                  ·gc.alloc.rate:      6,557 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 562279,086 ops/s
[info]                  ·gc.alloc.rate:      5,718 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 618710,980 ops/s
[info]                  ·gc.alloc.rate:      6,292 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 640169,666 ops/s
[info]                  ·gc.alloc.rate:      6,511 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   621989,559 ±(99.9%) 134921,010 ops/s [Average]
[info]   (min, avg, max) = (562279,086, 621989,559, 644765,124), stdev = 35038,558
[info]   CI (99.9%): [487068,549, 756910,569] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   6,326 ±(99.9%) 1,372 MB/sec [Average]
[info]   (min, avg, max) = (5,718, 6,326, 6,557), stdev = 0,356
[info]   CI (99.9%): [4,953, 7,698] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (16,001, 16,001, 16,001), stdev = 0,001
[info]   CI (99.9%): [16,001, 16,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 77,51% complete, ETA 00:29:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14380,028 ops/s
[info] # Warmup Iteration   2: 21737,742 ops/s
[info] # Warmup Iteration   3: 21756,607 ops/s
[info] # Warmup Iteration   4: 21769,198 ops/s
[info] # Warmup Iteration   5: 21003,884 ops/s
[info] Iteration   1: 21633,600 ops/s
[info]                  ·gc.alloc.rate:      421,543 MB/sec
[info]                  ·gc.alloc.rate.norm: 30656,027 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 21723,425 ops/s
[info]                  ·gc.alloc.rate:               423,303 MB/sec
[info]                  ·gc.alloc.rate.norm:          30656,021 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,772 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 37063,069 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 21460,323 ops/s
[info]                  ·gc.alloc.rate:                   418,177 MB/sec
[info]                  ·gc.alloc.rate.norm:              30656,020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,769 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37517,185 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,288 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 21707,623 ops/s
[info]                  ·gc.alloc.rate:                   422,986 MB/sec
[info]                  ·gc.alloc.rate.norm:              30656,020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666,726 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48321,141 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,303 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 166,938 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 21798,196 ops/s
[info]                  ·gc.alloc.rate:      424,762 MB/sec
[info]                  ·gc.alloc.rate.norm: 30656,021 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson":
[info]   21664,633 ±(99.9%) 494,060 ops/s [Average]
[info]   (min, avg, max) = (21460,323, 21664,633, 21798,196), stdev = 128,306
[info]   CI (99.9%): [21170,573, 22158,693] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   422,154 ±(99.9%) 9,627 MB/sec [Average]
[info]   (min, avg, max) = (418,177, 422,154, 424,762), stdev = 2,500
[info]   CI (99.9%): [412,527, 431,781] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   30656,022 ±(99.9%) 0,012 B/op [Average]
[info]   (min, avg, max) = (30656,020, 30656,022, 30656,027), stdev = 0,003
[info]   CI (99.9%): [30656,010, 30656,034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   338,053 ±(99.9%) 1213,016 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 338,053, 666,726), stdev = 315,016
[info]   CI (99.9%): [≈ 0, 1551,069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   24580,279 ±(99.9%) 88128,284 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 24580,279, 48321,141), stdev = 22886,635
[info]   CI (99.9%): [≈ 0, 112708,563] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,467 ±(99.9%) 3,953 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,467, 2,303), stdev = 1,027
[info]   CI (99.9%): [≈ 0, 4,420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   33,845 ±(99.9%) 286,519 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 33,845, 166,938), stdev = 74,408
[info]   CI (99.9%): [≈ 0, 320,364] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,400, 3,000), stdev = 1,342
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce
[info] # Run progress: 77,71% complete, ETA 00:29:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1451767,411 ops/s
[info] # Warmup Iteration   2: 2439994,844 ops/s
[info] # Warmup Iteration   3: 2430614,406 ops/s
[info] # Warmup Iteration   4: 2457023,057 ops/s
[info] # Warmup Iteration   5: 2452953,969 ops/s
[info] Iteration   1: 2424819,721 ops/s
[info]                  ·gc.alloc.rate:                   3637,409 MB/sec
[info]                  ·gc.alloc.rate.norm:              2360,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3389,144 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2198,922 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,027 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 2452336,136 ops/s
[info]                  ·gc.alloc.rate:                   3678,630 MB/sec
[info]                  ·gc.alloc.rate.norm:              2360,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4074,752 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2614,130 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,053 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 2468919,281 ops/s
[info]                  ·gc.alloc.rate:                   3703,496 MB/sec
[info]                  ·gc.alloc.rate.norm:              2360,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3400,405 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2166,860 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,040 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 2465726,260 ops/s
[info]                  ·gc.alloc.rate:                   3698,657 MB/sec
[info]                  ·gc.alloc.rate.norm:              2360,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4084,695 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2606,320 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,027 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   5: 2462032,864 ops/s
[info]                  ·gc.alloc.rate:                   3693,157 MB/sec
[info]                  ·gc.alloc.rate.norm:              2360,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3405,167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2175,969 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,027 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce":
[info]   2454766,852 ±(99.9%) 68772,917 ops/s [Average]
[info]   (min, avg, max) = (2424819,721, 2454766,852, 2468919,281), stdev = 17860,108
[info]   CI (99.9%): [2385993,935, 2523539,769] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.alloc.rate":
[info]   3682,270 ±(99.9%) 103,024 MB/sec [Average]
[info]   (min, avg, max) = (3637,409, 3682,270, 3703,496), stdev = 26,755
[info]   CI (99.9%): [3579,245, 3785,294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2360,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (2360,000, 2360,000, 2360,000), stdev = 0,001
[info]   CI (99.9%): [2360,000, 2360,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   3670,833 ±(99.9%) 1437,548 MB/sec [Average]
[info]   (min, avg, max) = (3389,144, 3670,833, 4084,695), stdev = 373,327
[info]   CI (99.9%): [2233,285, 5108,381] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2352,440 ±(99.9%) 907,327 B/op [Average]
[info]   (min, avg, max) = (2166,860, 2352,440, 2614,130), stdev = 235,630
[info]   CI (99.9%): [1445,113, 3259,768] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,054 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,054, 0,083), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,035 ±(99.9%) 0,046 B/op [Average]
[info]   (min, avg, max) = (0,027, 0,035, 0,053), stdev = 0,012
[info]   CI (99.9%): [≈ 0, 0,081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.count":
[info]   27,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (5,000, 5,400, 6,000), stdev = 0,548
[info]   CI (99.9%): [27,000, 27,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.time":
[info]   16,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 3,200, 4,000), stdev = 0,447
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava
[info] # Run progress: 77,91% complete, ETA 00:29:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 33325,247 ops/s
[info] # Warmup Iteration   2: 932490,682 ops/s
[info] # Warmup Iteration   3: 922493,465 ops/s
[info] # Warmup Iteration   4: 927707,025 ops/s
[info] # Warmup Iteration   5: 915451,922 ops/s
[info] Iteration   1: 923110,920 ops/s
[info]                  ·gc.alloc.rate:                   563,290 MB/sec
[info]                  ·gc.alloc.rate.norm:              960,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,810 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     872,265 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,033 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,055 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 926050,972 ops/s
[info]                  ·gc.alloc.rate:               565,081 MB/sec
[info]                  ·gc.alloc.rate.norm:          960,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664,088 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1128,201 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 919518,525 ops/s
[info]                  ·gc.alloc.rate:                   561,136 MB/sec
[info]                  ·gc.alloc.rate.norm:              960,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664,135 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1136,212 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,058 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,099 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 926426,581 ops/s
[info]                  ·gc.alloc.rate:               565,348 MB/sec
[info]                  ·gc.alloc.rate.norm:          960,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665,476 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1130,025 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   5: 925309,704 ops/s
[info]                  ·gc.alloc.rate:      564,608 MB/sec
[info]                  ·gc.alloc.rate.norm: 960,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava":
[info]   924083,340 ±(99.9%) 11001,232 ops/s [Average]
[info]   (min, avg, max) = (919518,525, 924083,340, 926426,581), stdev = 2856,985
[info]   CI (99.9%): [913082,108, 935084,573] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   563,893 ±(99.9%) 6,670 MB/sec [Average]
[info]   (min, avg, max) = (561,136, 563,893, 565,348), stdev = 1,732
[info]   CI (99.9%): [557,222, 570,563] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   960,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (960,000, 960,000, 960,001), stdev = 0,001
[info]   CI (99.9%): [960,000, 960,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   501,102 ±(99.9%) 1108,325 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 501,102, 665,476), stdev = 287,828
[info]   CI (99.9%): [≈ 0, 1609,427] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   853,341 ±(99.9%) 1887,078 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 853,341, 1136,212), stdev = 490,068
[info]   CI (99.9%): [≈ 0, 2740,418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,018 ±(99.9%) 0,102 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,018, 0,058), stdev = 0,026
[info]   CI (99.9%): [≈ 0, 0,120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0,031 ±(99.9%) 0,174 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,031, 0,099), stdev = 0,045
[info]   CI (99.9%): [≈ 0, 0,205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,400, 2,000), stdev = 0,894
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala
[info] # Run progress: 78,11% complete, ETA 00:29:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 92122,039 ops/s
[info] # Warmup Iteration   2: 323010,998 ops/s
[info] # Warmup Iteration   3: 335754,984 ops/s
[info] # Warmup Iteration   4: 335620,860 ops/s
[info] # Warmup Iteration   5: 334220,537 ops/s
[info] Iteration   1: 335951,335 ops/s
[info]                  ·gc.alloc.rate:                   830,207 MB/sec
[info]                  ·gc.alloc.rate.norm:              3888,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333,347 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6244,291 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,366 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11,079 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 340364,467 ops/s
[info]                  ·gc.alloc.rate:               841,141 MB/sec
[info]                  ·gc.alloc.rate.norm:          3888,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667,027 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3083,195 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 340499,811 ops/s
[info]                  ·gc.alloc.rate:                   841,478 MB/sec
[info]                  ·gc.alloc.rate.norm:              3888,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667,032 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3081,982 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,192 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 328782,086 ops/s
[info]                  ·gc.alloc.rate:                   812,553 MB/sec
[info]                  ·gc.alloc.rate.norm:              3888,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667,398 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3193,446 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,100 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 326847,438 ops/s
[info]                  ·gc.alloc.rate:                   807,710 MB/sec
[info]                  ·gc.alloc.rate.norm:              3888,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335,418 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6428,180 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,301 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala":
[info]   334489,027 ±(99.9%) 24637,481 ops/s [Average]
[info]   (min, avg, max) = (326847,438, 334489,027, 340499,811), stdev = 6398,275
[info]   CI (99.9%): [309851,547, 359126,508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   826,618 ±(99.9%) 60,883 MB/sec [Average]
[info]   (min, avg, max) = (807,710, 826,618, 841,478), stdev = 15,811
[info]   CI (99.9%): [765,735, 887,500] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   3888,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (3888,001, 3888,001, 3888,001), stdev = 0,001
[info]   CI (99.9%): [3888,001, 3888,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   934,044 ±(99.9%) 1407,249 MB/sec [Average]
[info]   (min, avg, max) = (667,027, 934,044, 1335,418), stdev = 365,458
[info]   CI (99.9%): [≈ 0, 2341,293] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   4406,219 ±(99.9%) 6791,134 B/op [Average]
[info]   (min, avg, max) = (3081,982, 4406,219, 6428,180), stdev = 1763,636
[info]   CI (99.9%): [≈ 0, 11197,353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,498 ±(99.9%) 4,021 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,498, 2,366), stdev = 1,044
[info]   CI (99.9%): [≈ 0, 4,519] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2,334 ±(99.9%) 18,828 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,334, 11,079), stdev = 4,890
[info]   CI (99.9%): [≈ 0, 21,163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,400, 3,000), stdev = 1,140
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala
[info] # Run progress: 78,31% complete, ETA 00:28:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 672757,198 ops/s
[info] # Warmup Iteration   2: 720248,816 ops/s
[info] # Warmup Iteration   3: 721431,632 ops/s
[info] # Warmup Iteration   4: 723059,132 ops/s
[info] # Warmup Iteration   5: 725036,438 ops/s
[info] Iteration   1: 723722,041 ops/s
[info]                  ·gc.alloc.rate:                   647,670 MB/sec
[info]                  ·gc.alloc.rate.norm:              1408,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          676,358 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1470,367 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1,522 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,310 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 734276,568 ops/s
[info]                  ·gc.alloc.rate:                   657,140 MB/sec
[info]                  ·gc.alloc.rate.norm:              1408,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          676,355 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1449,171 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,045 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 729615,869 ops/s
[info]                  ·gc.alloc.rate:                   652,968 MB/sec
[info]                  ·gc.alloc.rate.norm:              1408,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,684 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1456,984 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,045 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 735435,145 ops/s
[info]                  ·gc.alloc.rate:               658,137 MB/sec
[info]                  ·gc.alloc.rate.norm:          1408,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,676 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1445,523 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 733578,389 ops/s
[info]                  ·gc.alloc.rate:                   656,525 MB/sec
[info]                  ·gc.alloc.rate.norm:              1408,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,747 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1449,225 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,089 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala":
[info]   731325,603 ±(99.9%) 18407,621 ops/s [Average]
[info]   (min, avg, max) = (723722,041, 731325,603, 735435,145), stdev = 4780,401
[info]   CI (99.9%): [712917,982, 749733,223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   654,488 ±(99.9%) 16,483 MB/sec [Average]
[info]   (min, avg, max) = (647,670, 654,488, 658,137), stdev = 4,281
[info]   CI (99.9%): [638,004, 670,971] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1408,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1408,001, 1408,001, 1408,001), stdev = 0,001
[info]   CI (99.9%): [1408,001, 1408,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   675,964 ±(99.9%) 1,383 MB/sec [Average]
[info]   (min, avg, max) = (675,676, 675,964, 676,358), stdev = 0,359
[info]   CI (99.9%): [674,580, 677,347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1454,254 ±(99.9%) 38,238 B/op [Average]
[info]   (min, avg, max) = (1445,523, 1454,254, 1470,367), stdev = 9,930
[info]   CI (99.9%): [1416,017, 1492,492] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,321 ±(99.9%) 2,586 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,321, 1,522), stdev = 0,672
[info]   CI (99.9%): [≈ 0, 2,908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,698 ±(99.9%) 5,624 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,698, 3,310), stdev = 1,460
[info]   CI (99.9%): [≈ 0, 6,321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless
[info] # Run progress: 78,51% complete, ETA 00:28:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4244707,992 ops/s
[info] # Warmup Iteration   2: 4465093,921 ops/s
[info] # Warmup Iteration   3: 4524536,307 ops/s
[info] # Warmup Iteration   4: 4530797,583 ops/s
[info] # Warmup Iteration   5: 4522399,147 ops/s
[info] Iteration   1: 4525288,276 ops/s
[info]                  ·gc.alloc.rate:                   2646,515 MB/sec
[info]                  ·gc.alloc.rate.norm:              920,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2709,931 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     942,045 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,022 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 4393721,562 ops/s
[info]                  ·gc.alloc.rate:                   2569,325 MB/sec
[info]                  ·gc.alloc.rate.norm:              920,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2714,236 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     971,889 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,030 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 4506566,776 ops/s
[info]                  ·gc.alloc.rate:                   2635,292 MB/sec
[info]                  ·gc.alloc.rate.norm:              920,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2716,749 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     948,438 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,022 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 4513278,038 ops/s
[info]                  ·gc.alloc.rate:                   2639,103 MB/sec
[info]                  ·gc.alloc.rate.norm:              920,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2719,306 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     947,959 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,015 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 4523408,972 ops/s
[info]                  ·gc.alloc.rate:                   2645,017 MB/sec
[info]                  ·gc.alloc.rate.norm:              920,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2721,253 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     946,517 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,014 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless":
[info]   4492452,725 ±(99.9%) 214543,467 ops/s [Average]
[info]   (min, avg, max) = (4393721,562, 4492452,725, 4525288,276), stdev = 55716,257
[info]   CI (99.9%): [4277909,258, 4706996,192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate":
[info]   2627,050 ±(99.9%) 125,473 MB/sec [Average]
[info]   (min, avg, max) = (2569,325, 2627,050, 2646,515), stdev = 32,585
[info]   CI (99.9%): [2501,578, 2752,523] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate.norm":
[info]   920,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (920,000, 920,000, 920,000), stdev = 0,001
[info]   CI (99.9%): [920,000, 920,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space":
[info]   2716,295 ±(99.9%) 17,069 MB/sec [Average]
[info]   (min, avg, max) = (2709,931, 2716,295, 2721,253), stdev = 4,433
[info]   CI (99.9%): [2699,226, 2733,364] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space.norm":
[info]   951,369 ±(99.9%) 45,225 B/op [Average]
[info]   (min, avg, max) = (942,045, 951,369, 971,889), stdev = 11,745
[info]   CI (99.9%): [906,145, 996,594] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space":
[info]   0,058 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,058, 0,083), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space.norm":
[info]   0,020 ±(99.9%) 0,025 B/op [Average]
[info]   (min, avg, max) = (0,014, 0,020, 0,030), stdev = 0,006
[info]   CI (99.9%): [≈ 0, 0,045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.count":
[info]   20,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,000, 4,000), stdev = 0,001
[info]   CI (99.9%): [20,000, 20,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.time":
[info]   12,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump
[info] # Run progress: 78,71% complete, ETA 00:28:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8603943,507 ops/s
[info] # Warmup Iteration   2: 8982668,762 ops/s
[info] # Warmup Iteration   3: 9233363,178 ops/s
[info] # Warmup Iteration   4: 9154893,526 ops/s
[info] # Warmup Iteration   5: 9283739,447 ops/s
[info] Iteration   1: 9231762,225 ops/s
[info]                  ·gc.alloc.rate:                   985,784 MB/sec
[info]                  ·gc.alloc.rate.norm:              168,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1351,435 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     230,315 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,007 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 9299436,967 ops/s
[info]                  ·gc.alloc.rate:               993,041 MB/sec
[info]                  ·gc.alloc.rate.norm:          168,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,728 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 114,318 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 9249148,551 ops/s
[info]                  ·gc.alloc.rate:                   987,673 MB/sec
[info]                  ·gc.alloc.rate.norm:              168,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1351,395 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     229,868 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,011 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 9279870,355 ops/s
[info]                  ·gc.alloc.rate:               990,877 MB/sec
[info]                  ·gc.alloc.rate.norm:          168,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,668 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 114,557 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 9202400,568 ops/s
[info]                  ·gc.alloc.rate:                   982,623 MB/sec
[info]                  ·gc.alloc.rate.norm:              168,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1351,349 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     231,041 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,004 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump":
[info]   9252523,733 ±(99.9%) 147930,056 ops/s [Average]
[info]   (min, avg, max) = (9202400,568, 9252523,733, 9299436,967), stdev = 38416,966
[info]   CI (99.9%): [9104593,677, 9400453,789] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate":
[info]   988,000 ±(99.9%) 15,832 MB/sec [Average]
[info]   (min, avg, max) = (982,623, 988,000, 993,041), stdev = 4,111
[info]   CI (99.9%): [972,168, 1003,831] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate.norm":
[info]   168,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (168,000, 168,000, 168,000), stdev = 0,001
[info]   CI (99.9%): [168,000, 168,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space":
[info]   1081,115 ±(99.9%) 1425,098 MB/sec [Average]
[info]   (min, avg, max) = (675,668, 1081,115, 1351,435), stdev = 370,093
[info]   CI (99.9%): [≈ 0, 2506,213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space.norm":
[info]   184,020 ±(99.9%) 244,597 B/op [Average]
[info]   (min, avg, max) = (114,318, 184,020, 231,041), stdev = 63,521
[info]   CI (99.9%): [≈ 0, 428,617] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space.norm":
[info]   0,004 ±(99.9%) 0,018 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,004, 0,011), stdev = 0,005
[info]   CI (99.9%): [≈ 0, 0,022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson
[info] # Run progress: 78,92% complete, ETA 00:27:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 48930,141 ops/s
[info] # Warmup Iteration   2: 193543,888 ops/s
[info] # Warmup Iteration   3: 194899,843 ops/s
[info] # Warmup Iteration   4: 198779,562 ops/s
[info] # Warmup Iteration   5: 197960,049 ops/s
[info] Iteration   1: 196993,300 ops/s
[info]                  ·gc.alloc.rate:                   1692,874 MB/sec
[info]                  ·gc.alloc.rate.norm:              13520,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335,398 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10665,054 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,333 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 196484,653 ops/s
[info]                  ·gc.alloc.rate:                   1688,510 MB/sec
[info]                  ·gc.alloc.rate.norm:              13520,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007,441 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16073,698 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,667 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 197156,461 ops/s
[info]                  ·gc.alloc.rate:                   1694,251 MB/sec
[info]                  ·gc.alloc.rate.norm:              13520,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,691 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10698,616 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,332 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 195730,683 ops/s
[info]                  ·gc.alloc.rate:                   1681,996 MB/sec
[info]                  ·gc.alloc.rate.norm:              13520,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014,768 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16194,855 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,335 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 196347,742 ops/s
[info]                  ·gc.alloc.rate:                   1687,297 MB/sec
[info]                  ·gc.alloc.rate.norm:              13520,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,747 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10791,236 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,501 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson":
[info]   196542,568 ±(99.9%) 2178,672 ops/s [Average]
[info]   (min, avg, max) = (195730,683, 196542,568, 197156,461), stdev = 565,794
[info]   CI (99.9%): [194363,896, 198721,240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1688,985 ±(99.9%) 18,744 MB/sec [Average]
[info]   (min, avg, max) = (1681,996, 1688,985, 1694,251), stdev = 4,868
[info]   CI (99.9%): [1670,242, 1707,729] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   13520,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (13520,002, 13520,002, 13520,002), stdev = 0,001
[info]   CI (99.9%): [13520,002, 13520,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1609,009 ±(99.9%) 1413,543 MB/sec [Average]
[info]   (min, avg, max) = (1335,398, 1609,009, 2014,768), stdev = 367,093
[info]   CI (99.9%): [195,466, 3022,552] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   12884,692 ±(99.9%) 11425,324 B/op [Average]
[info]   (min, avg, max) = (10665,054, 12884,692, 16194,855), stdev = 2967,120
[info]   CI (99.9%): [1459,367, 24310,016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,054 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,054, 0,083), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,433 ±(99.9%) 0,575 B/op [Average]
[info]   (min, avg, max) = (0,332, 0,433, 0,667), stdev = 0,149
[info]   CI (99.9%): [≈ 0, 1,008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.time":
[info]   9,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 3,000), stdev = 0,837
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readUPickle
[info] # Run progress: 79,12% complete, ETA 00:27:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 227116,730 ops/s
[info] # Warmup Iteration   2: 327292,394 ops/s
[info] # Warmup Iteration   3: 334129,618 ops/s
[info] # Warmup Iteration   4: 332238,734 ops/s
[info] # Warmup Iteration   5: 330326,554 ops/s
[info] Iteration   1: 333924,799 ops/s
[info]                  ·gc.alloc.rate:               602,779 MB/sec
[info]                  ·gc.alloc.rate.norm:          2840,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,768 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2411,198 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 336463,400 ops/s
[info]                  ·gc.alloc.rate:                   607,335 MB/sec
[info]                  ·gc.alloc.rate.norm:              2840,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,361 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3148,751 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1,679 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7,849 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 335899,111 ops/s
[info]                  ·gc.alloc.rate:                   606,328 MB/sec
[info]                  ·gc.alloc.rate.norm:              2840,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,370 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3154,018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,293 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 334514,365 ops/s
[info]                  ·gc.alloc.rate:                   603,857 MB/sec
[info]                  ·gc.alloc.rate.norm:              2840,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,022 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3165,290 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,098 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 263611,249 ops/s
[info]                  ·gc.alloc.rate:               475,873 MB/sec
[info]                  ·gc.alloc.rate.norm:          2840,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,091 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4016,999 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readUPickle":
[info]   320882,585 ±(99.9%) 123343,713 ops/s [Average]
[info]   (min, avg, max) = (263611,249, 320882,585, 336463,400), stdev = 32031,971
[info]   CI (99.9%): [197538,872, 444226,298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readUPickle:·gc.alloc.rate":
[info]   579,234 ±(99.9%) 222,606 MB/sec [Average]
[info]   (min, avg, max) = (475,873, 579,234, 607,335), stdev = 57,810
[info]   CI (99.9%): [356,628, 801,841] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   2840,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (2840,001, 2840,001, 2840,002), stdev = 0,001
[info]   CI (99.9%): [2840,001, 2840,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   640,922 ±(99.9%) 278,016 MB/sec [Average]
[info]   (min, avg, max) = (511,768, 640,922, 673,370), stdev = 72,200
[info]   CI (99.9%): [362,906, 918,938] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   3179,251 ±(99.9%) 2189,701 B/op [Average]
[info]   (min, avg, max) = (2411,198, 3179,251, 4016,999), stdev = 568,658
[info]   CI (99.9%): [989,550, 5368,952] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,352 ±(99.9%) 2,856 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,352, 1,679), stdev = 0,742
[info]   CI (99.9%): [≈ 0, 3,209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   1,648 ±(99.9%) 13,357 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,648, 7,849), stdev = 3,469
[info]   CI (99.9%): [≈ 0, 15,005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readUPickle:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readUPickle:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 2,000), stdev = 0,837
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 79,32% complete, ETA 00:27:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1203738,806 ops/s
[info] # Warmup Iteration   2: 1264466,722 ops/s
[info] # Warmup Iteration   3: 1258577,449 ops/s
[info] # Warmup Iteration   4: 1258571,754 ops/s
[info] # Warmup Iteration   5: 1258003,400 ops/s
[info] Iteration   1: 1259819,213 ops/s
[info]                  ·gc.alloc.rate:      70,467 MB/sec
[info]                  ·gc.alloc.rate.norm: 88,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1251977,058 ops/s
[info]                  ·gc.alloc.rate:               70,027 MB/sec
[info]                  ·gc.alloc.rate.norm:          88,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,753 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 643,103 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 1259820,472 ops/s
[info]                  ·gc.alloc.rate:      70,467 MB/sec
[info]                  ·gc.alloc.rate.norm: 88,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1258787,005 ops/s
[info]                  ·gc.alloc.rate:      70,407 MB/sec
[info]                  ·gc.alloc.rate.norm: 88,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1258514,638 ops/s
[info]                  ·gc.alloc.rate:      70,392 MB/sec
[info]                  ·gc.alloc.rate.norm: 88,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala":
[info]   1257783,677 ±(99.9%) 12705,628 ops/s [Average]
[info]   (min, avg, max) = (1251977,058, 1257783,677, 1259820,472), stdev = 3299,611
[info]   CI (99.9%): [1245078,049, 1270489,305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   70,352 ±(99.9%) 0,713 MB/sec [Average]
[info]   (min, avg, max) = (70,027, 70,352, 70,467), stdev = 0,185
[info]   CI (99.9%): [69,640, 71,065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   88,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (88,000, 88,000, 88,000), stdev = 0,001
[info]   CI (99.9%): [88,000, 88,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   102,351 ±(99.9%) 881,270 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 102,351, 511,753), stdev = 228,863
[info]   CI (99.9%): [≈ 0, 983,621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   128,621 ±(99.9%) 1107,463 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 128,621, 643,103), stdev = 287,605
[info]   CI (99.9%): [≈ 0, 1236,084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.count":
[info]   1,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,200, 1,000), stdev = 0,447
[info]   CI (99.9%): [1,000, 1,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 2,000), stdev = 0,894
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 79,52% complete, ETA 00:27:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 39264,800 ops/s
[info] # Warmup Iteration   2: 70519,304 ops/s
[info] # Warmup Iteration   3: 70330,471 ops/s
[info] # Warmup Iteration   4: 70813,891 ops/s
[info] # Warmup Iteration   5: 71249,095 ops/s
[info] Iteration   1: 70794,769 ops/s
[info]                  ·gc.alloc.rate:                   3197,424 MB/sec
[info]                  ·gc.alloc.rate.norm:              71056,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3372,797 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74953,289 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,463 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   2: 71277,387 ops/s
[info]                  ·gc.alloc.rate:                   3219,283 MB/sec
[info]                  ·gc.alloc.rate.norm:              71056,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2706,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     59729,106 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,758 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 71235,883 ops/s
[info]                  ·gc.alloc.rate:                   3217,382 MB/sec
[info]                  ·gc.alloc.rate.norm:              71056,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3390,787 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74885,671 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,840 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 71124,479 ops/s
[info]                  ·gc.alloc.rate:                   3212,217 MB/sec
[info]                  ·gc.alloc.rate.norm:              71056,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3396,148 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     75124,657 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,921 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   5: 71248,214 ops/s
[info]                  ·gc.alloc.rate:                   3217,835 MB/sec
[info]                  ·gc.alloc.rate.norm:              71056,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3400,260 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     75084,310 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,379 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson":
[info]   71136,147 ±(99.9%) 768,032 ops/s [Average]
[info]   (min, avg, max) = (70794,769, 71136,147, 71277,387), stdev = 199,455
[info]   CI (99.9%): [70368,115, 71904,178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3212,828 ±(99.9%) 34,716 MB/sec [Average]
[info]   (min, avg, max) = (3197,424, 3212,828, 3219,283), stdev = 9,016
[info]   CI (99.9%): [3178,113, 3247,544] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   71056,006 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (71056,006, 71056,006, 71056,007), stdev = 0,001
[info]   CI (99.9%): [71056,005, 71056,007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3253,219 ±(99.9%) 1178,399 MB/sec [Average]
[info]   (min, avg, max) = (2706,104, 3253,219, 3400,260), stdev = 306,027
[info]   CI (99.9%): [2074,820, 4431,618] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   71955,406 ±(99.9%) 26320,663 B/op [Average]
[info]   (min, avg, max) = (59729,106, 71955,406, 75124,657), stdev = 6835,393
[info]   CI (99.9%): [45634,744, 98276,069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,067 ±(99.9%) 0,154 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,067, 0,125), stdev = 0,040
[info]   CI (99.9%): [≈ 0, 0,221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1,472 ±(99.9%) 3,400 B/op [Average]
[info]   (min, avg, max) = (0,463, 1,472, 2,758), stdev = 0,883
[info]   CI (99.9%): [≈ 0, 4,872] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.count":
[info]   24,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,800, 5,000), stdev = 0,447
[info]   CI (99.9%): [24,000, 24,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.time":
[info]   18,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 3,600, 4,000), stdev = 0,548
[info]   CI (99.9%): [18,000, 18,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 79,72% complete, ETA 00:26:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1279260,033 ops/s
[info] # Warmup Iteration   2: 1779149,542 ops/s
[info] # Warmup Iteration   3: 1745557,278 ops/s
[info] # Warmup Iteration   4: 1733836,824 ops/s
[info] # Warmup Iteration   5: 1770718,359 ops/s
[info] Iteration   1: 1758331,767 ops/s
[info]                  ·gc.alloc.rate:                   983,455 MB/sec
[info]                  ·gc.alloc.rate.norm:              880,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335,360 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1194,886 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,037 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 1761904,628 ops/s
[info]                  ·gc.alloc.rate:               985,466 MB/sec
[info]                  ·gc.alloc.rate.norm:          880,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668,020 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 596,528 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 1774054,357 ops/s
[info]                  ·gc.alloc.rate:               992,241 MB/sec
[info]                  ·gc.alloc.rate.norm:          880,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668,003 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 592,440 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 1740021,698 ops/s
[info]                  ·gc.alloc.rate:                   973,235 MB/sec
[info]                  ·gc.alloc.rate.norm:              880,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337,388 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1209,268 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,019 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 1764241,548 ops/s
[info]                  ·gc.alloc.rate:                   986,796 MB/sec
[info]                  ·gc.alloc.rate.norm:              880,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669,329 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     596,892 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,019 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala":
[info]   1759710,800 ±(99.9%) 47964,894 ops/s [Average]
[info]   (min, avg, max) = (1740021,698, 1759710,800, 1774054,357), stdev = 12456,331
[info]   CI (99.9%): [1711745,906, 1807675,694] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   984,239 ±(99.9%) 26,800 MB/sec [Average]
[info]   (min, avg, max) = (973,235, 984,239, 992,241), stdev = 6,960
[info]   CI (99.9%): [957,438, 1011,039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   880,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (880,000, 880,000, 880,000), stdev = 0,001
[info]   CI (99.9%): [880,000, 880,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   935,620 ±(99.9%) 1408,711 MB/sec [Average]
[info]   (min, avg, max) = (668,003, 935,620, 1337,388), stdev = 365,838
[info]   CI (99.9%): [≈ 0, 2344,332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   838,003 ±(99.9%) 1279,940 B/op [Average]
[info]   (min, avg, max) = (592,440, 838,003, 1209,268), stdev = 332,396
[info]   CI (99.9%): [≈ 0, 2117,943] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,017 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,042), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,015 ±(99.9%) 0,060 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,015, 0,037), stdev = 0,016
[info]   CI (99.9%): [≈ 0, 0,075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 79,92% complete, ETA 00:26:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 970726,872 ops/s
[info] # Warmup Iteration   2: 1015953,566 ops/s
[info] # Warmup Iteration   3: 957086,645 ops/s
[info] # Warmup Iteration   4: 952322,599 ops/s
[info] # Warmup Iteration   5: 928087,157 ops/s
[info] Iteration   1: 958921,243 ops/s
[info]                  ·gc.alloc.rate:               268,205 MB/sec
[info]                  ·gc.alloc.rate.norm:          440,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,832 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 839,679 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 958323,424 ops/s
[info]                  ·gc.alloc.rate:      268,007 MB/sec
[info]                  ·gc.alloc.rate.norm: 440,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 955856,704 ops/s
[info]                  ·gc.alloc.rate:               267,317 MB/sec
[info]                  ·gc.alloc.rate.norm:          440,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,754 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 842,339 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 955374,679 ops/s
[info]                  ·gc.alloc.rate:      267,182 MB/sec
[info]                  ·gc.alloc.rate.norm: 440,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 954922,963 ops/s
[info]                  ·gc.alloc.rate:                   267,059 MB/sec
[info]                  ·gc.alloc.rate.norm:              440,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,792 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     843,216 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,017 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala":
[info]   956679,803 ±(99.9%) 6993,152 ops/s [Average]
[info]   (min, avg, max) = (954922,963, 956679,803, 958921,243), stdev = 1816,099
[info]   CI (99.9%): [949686,651, 963672,955] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   267,554 ±(99.9%) 1,991 MB/sec [Average]
[info]   (min, avg, max) = (267,059, 267,554, 268,205), stdev = 0,517
[info]   CI (99.9%): [265,564, 269,545] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   440,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (440,000, 440,000, 440,000), stdev = 0,001
[info]   CI (99.9%): [440,000, 440,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   307,076 ±(99.9%) 1079,414 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 307,076, 511,832), stdev = 280,320
[info]   CI (99.9%): [≈ 0, 1386,490] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   505,047 ±(99.9%) 1775,318 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 505,047, 843,216), stdev = 461,044
[info]   CI (99.9%): [≈ 0, 2280,365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,002 ±(99.9%) 0,018 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,002, 0,010), stdev = 0,005
[info]   CI (99.9%): [≈ 0, 0,020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,003 ±(99.9%) 0,030 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,003, 0,017), stdev = 0,008
[info]   CI (99.9%): [≈ 0, 0,033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 80,12% complete, ETA 00:26:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1801885,019 ops/s
[info] # Warmup Iteration   2: 1933578,894 ops/s
[info] # Warmup Iteration   3: 1970517,030 ops/s
[info] # Warmup Iteration   4: 1964772,983 ops/s
[info] # Warmup Iteration   5: 1964865,508 ops/s
[info] Iteration   1: 1967166,861 ops/s
[info]                  ·gc.alloc.rate:      20,006 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1966909,179 ops/s
[info]                  ·gc.alloc.rate:      20,004 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1968581,917 ops/s
[info]                  ·gc.alloc.rate:      20,021 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1965417,543 ops/s
[info]                  ·gc.alloc.rate:      19,988 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1966065,245 ops/s
[info]                  ·gc.alloc.rate:      19,995 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc":
[info]   1966828,149 ±(99.9%) 4624,311 ops/s [Average]
[info]   (min, avg, max) = (1965417,543, 1966828,149, 1968581,917), stdev = 1200,919
[info]   CI (99.9%): [1962203,838, 1971452,460] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   20,003 ±(99.9%) 0,047 MB/sec [Average]
[info]   (min, avg, max) = (19,988, 20,003, 20,021), stdev = 0,012
[info]   CI (99.9%): [19,955, 20,050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (16,000, 16,000, 16,000), stdev = 0,001
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 80,32% complete, ETA 00:26:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 25861,456 ops/s
[info] # Warmup Iteration   2: 42707,689 ops/s
[info] # Warmup Iteration   3: 43186,866 ops/s
[info] # Warmup Iteration   4: 43125,367 ops/s
[info] # Warmup Iteration   5: 42216,342 ops/s
[info] Iteration   1: 43114,454 ops/s
[info]                  ·gc.alloc.rate:                   1888,706 MB/sec
[info]                  ·gc.alloc.rate.norm:              68920,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008,081 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73276,066 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,280 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 43265,298 ops/s
[info]                  ·gc.alloc.rate:                   1895,322 MB/sec
[info]                  ·gc.alloc.rate.norm:              68920,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012,701 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73188,303 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,543 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 43271,378 ops/s
[info]                  ·gc.alloc.rate:                   1895,592 MB/sec
[info]                  ·gc.alloc.rate.norm:              68920,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,360 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48914,649 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,271 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 43191,237 ops/s
[info]                  ·gc.alloc.rate:                   1892,044 MB/sec
[info]                  ·gc.alloc.rate.norm:              68920,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2021,511 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73636,023 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,276 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 43122,502 ops/s
[info]                  ·gc.alloc.rate:                   1889,154 MB/sec
[info]                  ·gc.alloc.rate.norm:              68920,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2025,558 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73896,285 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,519 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson":
[info]   43192,974 ±(99.9%) 288,879 ops/s [Average]
[info]   (min, avg, max) = (43114,454, 43192,974, 43271,378), stdev = 75,021
[info]   CI (99.9%): [42904,094, 43481,853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1892,164 ±(99.9%) 12,589 MB/sec [Average]
[info]   (min, avg, max) = (1888,706, 1892,164, 1895,592), stdev = 3,269
[info]   CI (99.9%): [1879,574, 1904,753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   68920,010 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (68920,010, 68920,010, 68920,011), stdev = 0,001
[info]   CI (99.9%): [68920,009, 68920,011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1882,642 ±(99.9%) 1156,848 MB/sec [Average]
[info]   (min, avg, max) = (1345,360, 1882,642, 2025,558), stdev = 300,430
[info]   CI (99.9%): [725,794, 3039,490] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   68582,265 ±(99.9%) 42350,157 B/op [Average]
[info]   (min, avg, max) = (48914,649, 68582,265, 73896,285), stdev = 10998,201
[info]   CI (99.9%): [26232,108, 110932,422] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,071 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,071, 0,125), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2,578 ±(99.9%) 4,414 B/op [Average]
[info]   (min, avg, max) = (1,519, 2,578, 4,543), stdev = 1,146
[info]   CI (99.9%): [≈ 0, 6,992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.time":
[info]   11,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 80,52% complete, ETA 00:25:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 248687,957 ops/s
[info] # Warmup Iteration   2: 268083,943 ops/s
[info] # Warmup Iteration   3: 268781,710 ops/s
[info] # Warmup Iteration   4: 269319,841 ops/s
[info] # Warmup Iteration   5: 270521,473 ops/s
[info] Iteration   1: 269089,456 ops/s
[info]                  ·gc.alloc.rate:               1053,604 MB/sec
[info]                  ·gc.alloc.rate.norm:          6160,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,018 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3934,868 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 270143,262 ops/s
[info]                  ·gc.alloc.rate:                   1057,719 MB/sec
[info]                  ·gc.alloc.rate.norm:              6160,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,723 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7843,121 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,485 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 265938,244 ops/s
[info]                  ·gc.alloc.rate:               1041,302 MB/sec
[info]                  ·gc.alloc.rate.norm:          6160,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,734 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3985,587 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 271611,174 ops/s
[info]                  ·gc.alloc.rate:                   1063,523 MB/sec
[info]                  ·gc.alloc.rate.norm:              6160,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,894 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7807,103 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,241 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 269302,645 ops/s
[info]                  ·gc.alloc.rate:               1054,344 MB/sec
[info]                  ·gc.alloc.rate.norm:          6160,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1348,646 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7879,464 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala":
[info]   269216,956 ±(99.9%) 8022,814 ops/s [Average]
[info]   (min, avg, max) = (265938,244, 269216,956, 271611,174), stdev = 2083,499
[info]   CI (99.9%): [261194,142, 277239,770] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1054,098 ±(99.9%) 31,399 MB/sec [Average]
[info]   (min, avg, max) = (1041,302, 1054,098, 1063,523), stdev = 8,154
[info]   CI (99.9%): [1022,699, 1085,497] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   6160,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (6160,002, 6160,002, 6160,002), stdev = 0,001
[info]   CI (99.9%): [6160,001, 6160,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1078,003 ±(99.9%) 1422,324 MB/sec [Average]
[info]   (min, avg, max) = (673,018, 1078,003, 1348,646), stdev = 369,373
[info]   CI (99.9%): [≈ 0, 2500,327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   6290,029 ±(99.9%) 8190,463 B/op [Average]
[info]   (min, avg, max) = (3934,868, 6290,029, 7879,464), stdev = 2127,037
[info]   CI (99.9%): [≈ 0, 14480,492] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,083), stdev = 0,037
[info]   CI (99.9%): [≈ 0, 0,168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,145 ±(99.9%) 0,835 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,145, 0,485), stdev = 0,217
[info]   CI (99.9%): [≈ 0, 0,980] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 80,72% complete, ETA 00:25:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16612,344 ops/s
[info] # Warmup Iteration   2: 31782,693 ops/s
[info] # Warmup Iteration   3: 31785,521 ops/s
[info] # Warmup Iteration   4: 31313,043 ops/s
[info] # Warmup Iteration   5: 31726,361 ops/s
[info] Iteration   1: 31761,568 ops/s
[info]                  ·gc.alloc.rate:                   1734,572 MB/sec
[info]                  ·gc.alloc.rate.norm:              85920,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336,340 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     66194,062 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,031 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 31971,289 ops/s
[info]                  ·gc.alloc.rate:                   1746,021 MB/sec
[info]                  ·gc.alloc.rate.norm:              85920,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008,719 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     98847,093 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,099 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 31970,237 ops/s
[info]                  ·gc.alloc.rate:                   1746,007 MB/sec
[info]                  ·gc.alloc.rate.norm:              85920,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014,096 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     99112,517 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,025 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 29911,090 ops/s
[info]                  ·gc.alloc.rate:               1633,414 MB/sec
[info]                  ·gc.alloc.rate.norm:          85920,016 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345,303 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 70764,948 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   5: 31929,588 ops/s
[info]                  ·gc.alloc.rate:                   1743,687 MB/sec
[info]                  ·gc.alloc.rate.norm:              85920,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2021,935 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     99630,644 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,104 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson":
[info]   31508,754 ±(99.9%) 3455,109 ops/s [Average]
[info]   (min, avg, max) = (29911,090, 31508,754, 31971,289), stdev = 897,281
[info]   CI (99.9%): [28053,645, 34963,864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1720,740 ±(99.9%) 188,852 MB/sec [Average]
[info]   (min, avg, max) = (1633,414, 1720,740, 1746,021), stdev = 49,044
[info]   CI (99.9%): [1531,888, 1909,592] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   85920,014 ±(99.9%) 0,003 B/op [Average]
[info]   (min, avg, max) = (85920,014, 85920,014, 85920,016), stdev = 0,001
[info]   CI (99.9%): [85920,011, 85920,017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1745,279 ±(99.9%) 1421,891 MB/sec [Average]
[info]   (min, avg, max) = (1336,340, 1745,279, 2021,935), stdev = 369,261
[info]   CI (99.9%): [323,387, 3167,170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   86909,853 ±(99.9%) 65092,490 B/op [Average]
[info]   (min, avg, max) = (66194,062, 86909,853, 99630,644), stdev = 16904,313
[info]   CI (99.9%): [21817,363, 152002,343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,150 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,042, 0,083), stdev = 0,039
[info]   CI (99.9%): [≈ 0, 0,192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2,052 ±(99.9%) 7,384 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,052, 4,104), stdev = 1,918
[info]   CI (99.9%): [≈ 0, 9,436] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   10,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 80,92% complete, ETA 00:25:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 76249,488 ops/s
[info] # Warmup Iteration   2: 113873,321 ops/s
[info] # Warmup Iteration   3: 116281,725 ops/s
[info] # Warmup Iteration   4: 117940,781 ops/s
[info] # Warmup Iteration   5: 116981,263 ops/s
[info] Iteration   1: 116433,071 ops/s
[info]                  ·gc.alloc.rate:                   1498,486 MB/sec
[info]                  ·gc.alloc.rate.norm:              20248,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336,040 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18052,971 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,281 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 116520,673 ops/s
[info]                  ·gc.alloc.rate:                   1499,622 MB/sec
[info]                  ·gc.alloc.rate.norm:              20248,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338,030 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18066,177 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,125 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 116777,534 ops/s
[info]                  ·gc.alloc.rate:                   1502,885 MB/sec
[info]                  ·gc.alloc.rate.norm:              20248,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,012 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18053,667 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,122 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 116691,631 ops/s
[info]                  ·gc.alloc.rate:                   1501,812 MB/sec
[info]                  ·gc.alloc.rate.norm:              20248,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27167,835 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,281 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 116183,826 ops/s
[info]                  ·gc.alloc.rate:                   1495,268 MB/sec
[info]                  ·gc.alloc.rate.norm:              20248,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,724 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18222,961 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,282 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala":
[info]   116521,347 ±(99.9%) 895,518 ops/s [Average]
[info]   (min, avg, max) = (116183,826, 116521,347, 116777,534), stdev = 232,563
[info]   CI (99.9%): [115625,829, 117416,865] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1499,615 ±(99.9%) 11,501 MB/sec [Average]
[info]   (min, avg, max) = (1495,268, 1499,615, 1502,885), stdev = 2,987
[info]   CI (99.9%): [1488,114, 1511,115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   20248,004 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (20248,004, 20248,004, 20248,004), stdev = 0,001
[info]   CI (99.9%): [20248,003, 20248,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1474,973 ±(99.9%) 1162,664 MB/sec [Average]
[info]   (min, avg, max) = (1336,040, 1474,973, 2015,062), stdev = 301,940
[info]   CI (99.9%): [312,309, 2637,638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   19912,722 ±(99.9%) 15619,623 B/op [Average]
[info]   (min, avg, max) = (18052,971, 19912,722, 27167,835), stdev = 4056,367
[info]   CI (99.9%): [4293,099, 35532,346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,046 ±(99.9%) 0,132 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,046, 0,083), stdev = 0,034
[info]   CI (99.9%): [≈ 0, 0,178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,618 ±(99.9%) 1,776 B/op [Average]
[info]   (min, avg, max) = (0,281, 0,618, 1,125), stdev = 0,461
[info]   CI (99.9%): [≈ 0, 2,394] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 81,12% complete, ETA 00:25:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 369496,762 ops/s
[info] # Warmup Iteration   2: 396066,513 ops/s
[info] # Warmup Iteration   3: 397435,645 ops/s
[info] # Warmup Iteration   4: 394452,895 ops/s
[info] # Warmup Iteration   5: 395382,196 ops/s
[info] Iteration   1: 395595,622 ops/s
[info]                  ·gc.alloc.rate:                   1884,843 MB/sec
[info]                  ·gc.alloc.rate.norm:              7496,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2023,418 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8047,113 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,083 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 399326,982 ops/s
[info]                  ·gc.alloc.rate:                   1903,157 MB/sec
[info]                  ·gc.alloc.rate.norm:              7496,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2025,784 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7978,994 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,410 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 394214,376 ops/s
[info]                  ·gc.alloc.rate:               1878,365 MB/sec
[info]                  ·gc.alloc.rate.norm:          7496,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1352,780 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5398,547 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 396798,859 ops/s
[info]                  ·gc.alloc.rate:                   1890,698 MB/sec
[info]                  ·gc.alloc.rate.norm:              7496,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2031,651 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8054,831 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,248 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 395226,673 ops/s
[info]                  ·gc.alloc.rate:                   1883,007 MB/sec
[info]                  ·gc.alloc.rate.norm:              7496,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2033,704 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8095,903 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,166 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala":
[info]   396232,503 ±(99.9%) 7552,248 ops/s [Average]
[info]   (min, avg, max) = (394214,376, 396232,503, 399326,982), stdev = 1961,295
[info]   CI (99.9%): [388680,255, 403784,750] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1888,014 ±(99.9%) 36,771 MB/sec [Average]
[info]   (min, avg, max) = (1878,365, 1888,014, 1903,157), stdev = 9,549
[info]   CI (99.9%): [1851,244, 1924,785] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   7496,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (7496,001, 7496,001, 7496,001), stdev = 0,001
[info]   CI (99.9%): [7496,001, 7496,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1893,467 ±(99.9%) 1163,982 MB/sec [Average]
[info]   (min, avg, max) = (1352,780, 1893,467, 2033,704), stdev = 302,282
[info]   CI (99.9%): [729,485, 3057,449] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   7515,078 ±(99.9%) 4558,858 B/op [Average]
[info]   (min, avg, max) = (5398,547, 7515,078, 8095,903), stdev = 1183,921
[info]   CI (99.9%): [2956,220, 12073,935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,046 ±(99.9%) 0,154 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,046, 0,104), stdev = 0,040
[info]   CI (99.9%): [≈ 0, 0,200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,181 ±(99.9%) 0,607 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,181, 0,410), stdev = 0,158
[info]   CI (99.9%): [≈ 0, 0,788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 81,33% complete, ETA 00:24:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 430673,247 ops/s
[info] # Warmup Iteration   2: 470665,658 ops/s
[info] # Warmup Iteration   3: 475977,089 ops/s
[info] # Warmup Iteration   4: 468264,289 ops/s
[info] # Warmup Iteration   5: 475354,391 ops/s
[info] Iteration   1: 474560,033 ops/s
[info]                  ·gc.alloc.rate:                   1626,437 MB/sec
[info]                  ·gc.alloc.rate.norm:              5392,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,713 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4467,971 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,069 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 474300,243 ops/s
[info]                  ·gc.alloc.rate:                   1625,551 MB/sec
[info]                  ·gc.alloc.rate.norm:              5392,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2023,418 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6711,737 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,345 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 473156,348 ops/s
[info]                  ·gc.alloc.rate:                   1621,625 MB/sec
[info]                  ·gc.alloc.rate.norm:              5392,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350,729 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4491,254 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,208 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 474335,868 ops/s
[info]                  ·gc.alloc.rate:               1625,720 MB/sec
[info]                  ·gc.alloc.rate.norm:          5392,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2028,938 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6729,349 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   5: 474867,490 ops/s
[info]                  ·gc.alloc.rate:                   1627,520 MB/sec
[info]                  ·gc.alloc.rate.norm:              5392,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4486,378 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,069 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   474243,996 ±(99.9%) 2497,883 ops/s [Average]
[info]   (min, avg, max) = (473156,348, 474243,996, 474867,490), stdev = 648,692
[info]   CI (99.9%): [471746,113, 476741,880] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1625,371 ±(99.9%) 8,597 MB/sec [Average]
[info]   (min, avg, max) = (1621,625, 1625,371, 1627,520), stdev = 2,233
[info]   CI (99.9%): [1616,774, 1633,968] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   5392,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (5392,001, 5392,001, 5392,001), stdev = 0,001
[info]   CI (99.9%): [5392,001, 5392,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   1620,993 ±(99.9%) 1424,329 MB/sec [Average]
[info]   (min, avg, max) = (1347,713, 1620,993, 2028,938), stdev = 369,894
[info]   CI (99.9%): [196,664, 3045,322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   5377,338 ±(99.9%) 4721,734 B/op [Average]
[info]   (min, avg, max) = (4467,971, 5377,338, 6729,349), stdev = 1226,219
[info]   CI (99.9%): [655,603, 10099,072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,160 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,042, 0,104), stdev = 0,042
[info]   CI (99.9%): [≈ 0, 0,202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   0,138 ±(99.9%) 0,532 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,138, 0,345), stdev = 0,138
[info]   CI (99.9%): [≈ 0, 0,670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 81,53% complete, ETA 00:24:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 32119,238 ops/s
[info] # Warmup Iteration   2: 55399,996 ops/s
[info] # Warmup Iteration   3: 55730,101 ops/s
[info] # Warmup Iteration   4: 56473,596 ops/s
[info] # Warmup Iteration   5: 56225,855 ops/s
[info] Iteration   1: 56492,731 ops/s
[info]                  ·gc.alloc.rate:                   1557,243 MB/sec
[info]                  ·gc.alloc.rate.norm:              43368,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336,118 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37209,870 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,160 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 56593,424 ops/s
[info]                  ·gc.alloc.rate:                   1560,055 MB/sec
[info]                  ·gc.alloc.rate.norm:              43368,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337,476 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37180,524 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,579 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 56054,433 ops/s
[info]                  ·gc.alloc.rate:                   1545,219 MB/sec
[info]                  ·gc.alloc.rate.norm:              43368,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011,570 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     56456,605 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,753 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 56511,138 ops/s
[info]                  ·gc.alloc.rate:               1557,771 MB/sec
[info]                  ·gc.alloc.rate.norm:          43368,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343,429 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 37400,775 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 54904,309 ops/s
[info]                  ·gc.alloc.rate:                   1513,414 MB/sec
[info]                  ·gc.alloc.rate.norm:              43368,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,296 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     38550,448 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,597 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson":
[info]   56111,207 ±(99.9%) 2721,363 ops/s [Average]
[info]   (min, avg, max) = (54904,309, 56111,207, 56593,424), stdev = 706,729
[info]   CI (99.9%): [53389,844, 58832,569] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1546,740 ±(99.9%) 75,118 MB/sec [Average]
[info]   (min, avg, max) = (1513,414, 1546,740, 1560,055), stdev = 19,508
[info]   CI (99.9%): [1471,623, 1621,858] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   43368,008 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (43368,008, 43368,008, 43368,008), stdev = 0,001
[info]   CI (99.9%): [43368,007, 43368,009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1474,778 ±(99.9%) 1155,582 MB/sec [Average]
[info]   (min, avg, max) = (1336,118, 1474,778, 2011,570), stdev = 300,101
[info]   CI (99.9%): [319,196, 2630,360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   41359,645 ±(99.9%) 32569,718 B/op [Average]
[info]   (min, avg, max) = (37180,524, 41359,645, 56456,605), stdev = 8458,252
[info]   CI (99.9%): [8789,927, 73929,362] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,062), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,818 ±(99.9%) 2,559 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,818, 1,753), stdev = 0,665
[info]   CI (99.9%): [≈ 0, 3,377] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   9,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 3,000), stdev = 0,837
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 81,73% complete, ETA 00:24:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 68040,003 ops/s
[info] # Warmup Iteration   2: 87552,215 ops/s
[info] # Warmup Iteration   3: 87979,899 ops/s
[info] # Warmup Iteration   4: 88033,573 ops/s
[info] # Warmup Iteration   5: 88031,574 ops/s
[info] Iteration   1: 80301,624 ops/s
[info]                  ·gc.alloc.rate:                   1440,192 MB/sec
[info]                  ·gc.alloc.rate.norm:              28216,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,406 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26358,989 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,816 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 83894,135 ops/s
[info]                  ·gc.alloc.rate:                   1504,666 MB/sec
[info]                  ·gc.alloc.rate.norm:              28216,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020,911 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37896,799 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,562 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 83844,171 ops/s
[info]                  ·gc.alloc.rate:                   1503,747 MB/sec
[info]                  ·gc.alloc.rate.norm:              28216,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,792 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25308,472 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,172 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 88215,770 ops/s
[info]                  ·gc.alloc.rate:                   1582,099 MB/sec
[info]                  ·gc.alloc.rate.norm:              28216,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350,024 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24077,056 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,743 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 87603,440 ops/s
[info]                  ·gc.alloc.rate:                   1571,081 MB/sec
[info]                  ·gc.alloc.rate.norm:              28216,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2027,380 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36410,967 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,374 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce":
[info]   84771,828 ±(99.9%) 12401,880 ops/s [Average]
[info]   (min, avg, max) = (80301,624, 84771,828, 88215,770), stdev = 3220,729
[info]   CI (99.9%): [72369,948, 97173,708] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1520,357 ±(99.9%) 222,319 MB/sec [Average]
[info]   (min, avg, max) = (1440,192, 1520,357, 1582,099), stdev = 57,736
[info]   CI (99.9%): [1298,038, 1742,676] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   28216,005 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (28216,005, 28216,005, 28216,006), stdev = 0,001
[info]   CI (99.9%): [28216,004, 28216,006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1618,503 ±(99.9%) 1425,933 MB/sec [Average]
[info]   (min, avg, max) = (1345,406, 1618,503, 2027,380), stdev = 370,310
[info]   CI (99.9%): [192,570, 3044,436] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   30010,457 ±(99.9%) 25382,728 B/op [Average]
[info]   (min, avg, max) = (24077,056, 30010,457, 37896,799), stdev = 6591,814
[info]   CI (99.9%): [4627,728, 55393,185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,050 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,050, 0,083), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,933 ±(99.9%) 1,739 B/op [Average]
[info]   (min, avg, max) = (0,374, 0,933, 1,562), stdev = 0,452
[info]   CI (99.9%): [≈ 0, 2,672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 81,93% complete, ETA 00:23:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 74823,439 ops/s
[info] # Warmup Iteration   2: 126158,446 ops/s
[info] # Warmup Iteration   3: 130567,500 ops/s
[info] # Warmup Iteration   4: 129239,099 ops/s
[info] # Warmup Iteration   5: 130980,162 ops/s
[info] Iteration   1: 130400,961 ops/s
[info]                  ·gc.alloc.rate:               645,169 MB/sec
[info]                  ·gc.alloc.rate.norm:          7784,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,769 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6174,526 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   2: 130536,430 ops/s
[info]                  ·gc.alloc.rate:                   645,845 MB/sec
[info]                  ·gc.alloc.rate.norm:              7784,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667,359 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8043,296 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,303 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27,760 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 130705,770 ops/s
[info]                  ·gc.alloc.rate:                   646,697 MB/sec
[info]                  ·gc.alloc.rate.norm:              7784,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667,370 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8032,837 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,003 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 130355,846 ops/s
[info]                  ·gc.alloc.rate:               644,946 MB/sec
[info]                  ·gc.alloc.rate.norm:          7784,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667,022 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8050,441 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 130508,051 ops/s
[info]                  ·gc.alloc.rate:                   645,695 MB/sec
[info]                  ·gc.alloc.rate.norm:              7784,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667,008 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8040,944 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,753 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala":
[info]   130501,412 ±(99.9%) 524,849 ops/s [Average]
[info]   (min, avg, max) = (130355,846, 130501,412, 130705,770), stdev = 136,302
[info]   CI (99.9%): [129976,563, 131026,261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   645,670 ±(99.9%) 2,626 MB/sec [Average]
[info]   (min, avg, max) = (644,946, 645,670, 646,697), stdev = 0,682
[info]   CI (99.9%): [643,045, 648,296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   7784,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (7784,003, 7784,003, 7784,004), stdev = 0,001
[info]   CI (99.9%): [7784,003, 7784,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   636,106 ±(99.9%) 267,644 MB/sec [Average]
[info]   (min, avg, max) = (511,769, 636,106, 667,370), stdev = 69,506
[info]   CI (99.9%): [368,462, 903,749] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   7668,409 ±(99.9%) 3215,787 B/op [Average]
[info]   (min, avg, max) = (6174,526, 7668,409, 8050,441), stdev = 835,130
[info]   CI (99.9%): [4452,622, 10884,196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,490 ±(99.9%) 3,906 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,490, 2,303), stdev = 1,014
[info]   CI (99.9%): [≈ 0, 4,396] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   5,903 ±(99.9%) 47,080 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5,903, 27,760), stdev = 12,227
[info]   CI (99.9%): [≈ 0, 52,983] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,400, 3,000), stdev = 1,140
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 82,13% complete, ETA 00:23:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 189291,657 ops/s
[info] # Warmup Iteration   2: 206075,395 ops/s
[info] # Warmup Iteration   3: 204193,200 ops/s
[info] # Warmup Iteration   4: 205078,861 ops/s
[info] # Warmup Iteration   5: 205728,961 ops/s
[info] Iteration   1: 206192,757 ops/s
[info]                  ·gc.alloc.rate:                   849,258 MB/sec
[info]                  ·gc.alloc.rate.norm:              6480,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,391 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10273,228 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,477 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 205960,307 ops/s
[info]                  ·gc.alloc.rate:               848,303 MB/sec
[info]                  ·gc.alloc.rate.norm:          6480,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,003 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5140,927 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 205863,372 ops/s
[info]                  ·gc.alloc.rate:                   847,879 MB/sec
[info]                  ·gc.alloc.rate.norm:              6480,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,997 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5143,448 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,159 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 182441,748 ops/s
[info]                  ·gc.alloc.rate:                   751,425 MB/sec
[info]                  ·gc.alloc.rate.norm:              6480,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,035 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5804,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,180 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 204649,662 ops/s
[info]                  ·gc.alloc.rate:                   842,885 MB/sec
[info]                  ·gc.alloc.rate.norm:              6480,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,655 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5178,975 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,160 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala":
[info]   201021,569 ±(99.9%) 40060,957 ops/s [Average]
[info]   (min, avg, max) = (182441,748, 201021,569, 206192,757), stdev = 10403,703
[info]   CI (99.9%): [160960,612, 241082,527] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   827,950 ±(99.9%) 165,001 MB/sec [Average]
[info]   (min, avg, max) = (751,425, 827,950, 849,258), stdev = 42,850
[info]   CI (99.9%): [662,949, 992,951] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   6480,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (6480,002, 6480,002, 6480,002), stdev = 0,001
[info]   CI (99.9%): [6480,002, 6480,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   807,816 ±(99.9%) 1159,323 MB/sec [Average]
[info]   (min, avg, max) = (672,997, 807,816, 1346,391), stdev = 301,073
[info]   CI (99.9%): [≈ 0, 1967,139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   6308,116 ±(99.9%) 8603,838 B/op [Average]
[info]   (min, avg, max) = (5140,927, 6308,116, 10273,228), stdev = 2234,389
[info]   CI (99.9%): [≈ 0, 14911,954] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,023
[info]   CI (99.9%): [≈ 0, 0,113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,195 ±(99.9%) 0,667 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,195, 0,477), stdev = 0,173
[info]   CI (99.9%): [≈ 0, 0,862] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 82,33% complete, ETA 00:23:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11107,744 ops/s
[info] # Warmup Iteration   2: 21383,193 ops/s
[info] # Warmup Iteration   3: 21076,988 ops/s
[info] # Warmup Iteration   4: 21324,253 ops/s
[info] # Warmup Iteration   5: 21227,389 ops/s
[info] Iteration   1: 20913,457 ops/s
[info]                  ·gc.alloc.rate:                   1197,779 MB/sec
[info]                  ·gc.alloc.rate.norm:              90104,028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333,397 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     100305,984 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,133 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 21277,027 ops/s
[info]                  ·gc.alloc.rate:                   1218,597 MB/sec
[info]                  ·gc.alloc.rate.norm:              90104,020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334,828 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     98698,202 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,540 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 21251,175 ops/s
[info]                  ·gc.alloc.rate:                   1217,154 MB/sec
[info]                  ·gc.alloc.rate.norm:              90104,020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336,481 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     98937,623 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,625 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 21400,453 ops/s
[info]                  ·gc.alloc.rate:                   1225,654 MB/sec
[info]                  ·gc.alloc.rate.norm:              90104,020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338,715 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     98415,753 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,531 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 21340,467 ops/s
[info]                  ·gc.alloc.rate:                   1222,191 MB/sec
[info]                  ·gc.alloc.rate.norm:              90104,020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669,978 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49393,009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,535 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson":
[info]   21236,516 ±(99.9%) 730,365 ops/s [Average]
[info]   (min, avg, max) = (20913,457, 21236,516, 21400,453), stdev = 189,673
[info]   CI (99.9%): [20506,151, 21966,881] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1216,275 ±(99.9%) 41,793 MB/sec [Average]
[info]   (min, avg, max) = (1197,779, 1216,275, 1225,654), stdev = 10,854
[info]   CI (99.9%): [1174,481, 1258,068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   90104,022 ±(99.9%) 0,014 B/op [Average]
[info]   (min, avg, max) = (90104,020, 90104,022, 90104,028), stdev = 0,004
[info]   CI (99.9%): [90104,008, 90104,036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1202,680 ±(99.9%) 1146,707 MB/sec [Average]
[info]   (min, avg, max) = (669,978, 1202,680, 1338,715), stdev = 297,796
[info]   CI (99.9%): [55,973, 2349,386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   89150,114 ±(99.9%) 85625,850 B/op [Average]
[info]   (min, avg, max) = (49393,009, 89150,114, 100305,984), stdev = 22236,761
[info]   CI (99.9%): [3524,264, 174775,964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,033, 0,062), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2,473 ±(99.9%) 5,344 B/op [Average]
[info]   (min, avg, max) = (1,531, 2,473, 4,625), stdev = 1,388
[info]   CI (99.9%): [≈ 0, 7,817] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,400, 2,000), stdev = 0,894
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 82,53% complete, ETA 00:23:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 110828,988 ops/s
[info] # Warmup Iteration   2: 164480,065 ops/s
[info] # Warmup Iteration   3: 164547,954 ops/s
[info] # Warmup Iteration   4: 149742,493 ops/s
[info] # Warmup Iteration   5: 163951,850 ops/s
[info] Iteration   1: 164994,990 ops/s
[info]                  ·gc.alloc.rate:               1125,960 MB/sec
[info]                  ·gc.alloc.rate.norm:          10736,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667,092 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6360,706 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 165029,449 ops/s
[info]                  ·gc.alloc.rate:                   1126,042 MB/sec
[info]                  ·gc.alloc.rate.norm:              10736,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333,958 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12718,329 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,794 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 164438,319 ops/s
[info]                  ·gc.alloc.rate:                   1122,123 MB/sec
[info]                  ·gc.alloc.rate.norm:              10736,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12782,692 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,398 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 164736,549 ops/s
[info]                  ·gc.alloc.rate:               1124,136 MB/sec
[info]                  ·gc.alloc.rate.norm:          10736,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337,392 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12772,689 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   5: 164641,389 ops/s
[info]                  ·gc.alloc.rate:                   1123,474 MB/sec
[info]                  ·gc.alloc.rate.norm:              10736,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670,020 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6402,764 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,199 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala":
[info]   164768,139 ±(99.9%) 954,130 ops/s [Average]
[info]   (min, avg, max) = (164438,319, 164768,139, 165029,449), stdev = 247,785
[info]   CI (99.9%): [163814,009, 165722,269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1124,347 ±(99.9%) 6,452 MB/sec [Average]
[info]   (min, avg, max) = (1122,123, 1124,347, 1126,042), stdev = 1,676
[info]   CI (99.9%): [1117,895, 1130,799] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   10736,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (10736,003, 10736,003, 10736,003), stdev = 0,001
[info]   CI (99.9%): [10736,003, 10736,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1068,901 ±(99.9%) 1407,281 MB/sec [Average]
[info]   (min, avg, max) = (667,092, 1068,901, 1337,392), stdev = 365,467
[info]   CI (99.9%): [≈ 0, 2476,182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   10207,436 ±(99.9%) 13448,330 B/op [Average]
[info]   (min, avg, max) = (6360,706, 10207,436, 12782,692), stdev = 3492,489
[info]   CI (99.9%): [≈ 0, 23655,766] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,134 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,083), stdev = 0,035
[info]   CI (99.9%): [≈ 0, 0,163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,278 ±(99.9%) 1,280 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,278, 0,794), stdev = 0,332
[info]   CI (99.9%): [≈ 0, 1,558] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 82,73% complete, ETA 00:22:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 587583,803 ops/s
[info] # Warmup Iteration   2: 629385,371 ops/s
[info] # Warmup Iteration   3: 624978,580 ops/s
[info] # Warmup Iteration   4: 633527,994 ops/s
[info] # Warmup Iteration   5: 625780,468 ops/s
[info] Iteration   1: 632127,095 ops/s
[info]                  ·gc.alloc.rate:                   703,954 MB/sec
[info]                  ·gc.alloc.rate.norm:              1752,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,424 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1676,017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1,537 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,826 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 633392,229 ops/s
[info]                  ·gc.alloc.rate:                   705,371 MB/sec
[info]                  ·gc.alloc.rate.norm:              1752,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,429 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1672,662 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,155 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 632553,097 ops/s
[info]                  ·gc.alloc.rate:                   704,437 MB/sec
[info]                  ·gc.alloc.rate.norm:              1752,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,099 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1674,062 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,052 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 632559,616 ops/s
[info]                  ·gc.alloc.rate:               704,421 MB/sec
[info]                  ·gc.alloc.rate.norm:          1752,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,079 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1674,049 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 504422,993 ops/s
[info]                  ·gc.alloc.rate:                   561,731 MB/sec
[info]                  ·gc.alloc.rate.norm:              1752,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,085 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2099,305 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,195 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala":
[info]   607011,006 ±(99.9%) 220835,497 ops/s [Average]
[info]   (min, avg, max) = (504422,993, 607011,006, 633392,229), stdev = 57350,277
[info]   CI (99.9%): [386175,509, 827846,503] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   675,983 ±(99.9%) 245,943 MB/sec [Average]
[info]   (min, avg, max) = (561,731, 675,983, 705,371), stdev = 63,871
[info]   CI (99.9%): [430,040, 921,926] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1752,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1752,001, 1752,001, 1752,001), stdev = 0,001
[info]   CI (99.9%): [1752,000, 1752,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   673,223 ±(99.9%) 0,714 MB/sec [Average]
[info]   (min, avg, max) = (673,079, 673,223, 673,429), stdev = 0,186
[info]   CI (99.9%): [672,509, 673,938] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1759,219 ±(99.9%) 732,076 B/op [Average]
[info]   (min, avg, max) = (1672,662, 1759,219, 2099,305), stdev = 190,118
[info]   CI (99.9%): [1027,143, 2491,295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,337 ±(99.9%) 2,587 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,337, 1,537), stdev = 0,672
[info]   CI (99.9%): [≈ 0, 2,924] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,846 ±(99.9%) 6,423 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,846, 3,826), stdev = 1,668
[info]   CI (99.9%): [≈ 0, 7,269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 82,93% complete, ETA 00:22:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 626198,783 ops/s
[info] # Warmup Iteration   2: 657254,371 ops/s
[info] # Warmup Iteration   3: 655177,215 ops/s
[info] # Warmup Iteration   4: 498939,744 ops/s
[info] # Warmup Iteration   5: 637850,466 ops/s
[info] Iteration   1: 656642,380 ops/s
[info]                  ·gc.alloc.rate:      13,357 MB/sec
[info]                  ·gc.alloc.rate.norm: 32,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 656462,139 ops/s
[info]                  ·gc.alloc.rate:      13,353 MB/sec
[info]                  ·gc.alloc.rate.norm: 32,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 655495,269 ops/s
[info]                  ·gc.alloc.rate:      13,333 MB/sec
[info]                  ·gc.alloc.rate.norm: 32,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 655661,283 ops/s
[info]                  ·gc.alloc.rate:      13,337 MB/sec
[info]                  ·gc.alloc.rate.norm: 32,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 654775,521 ops/s
[info]                  ·gc.alloc.rate:      13,319 MB/sec
[info]                  ·gc.alloc.rate.norm: 32,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   655807,318 ±(99.9%) 2925,871 ops/s [Average]
[info]   (min, avg, max) = (654775,521, 655807,318, 656642,380), stdev = 759,839
[info]   CI (99.9%): [652881,447, 658733,190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   13,340 ±(99.9%) 0,061 MB/sec [Average]
[info]   (min, avg, max) = (13,319, 13,340, 13,357), stdev = 0,016
[info]   CI (99.9%): [13,279, 13,400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   32,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (32,001, 32,001, 32,001), stdev = 0,001
[info]   CI (99.9%): [32,001, 32,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 83,13% complete, ETA 00:22:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14025,153 ops/s
[info] # Warmup Iteration   2: 21610,165 ops/s
[info] # Warmup Iteration   3: 21938,152 ops/s
[info] # Warmup Iteration   4: 21977,055 ops/s
[info] # Warmup Iteration   5: 21802,312 ops/s
[info] Iteration   1: 21921,382 ops/s
[info]                  ·gc.alloc.rate:               458,022 MB/sec
[info]                  ·gc.alloc.rate.norm:          32872,027 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,731 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 36726,701 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 21918,911 ops/s
[info]                  ·gc.alloc.rate:               457,984 MB/sec
[info]                  ·gc.alloc.rate.norm:          32872,020 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,759 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 36731,726 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   3: 22021,403 ops/s
[info]                  ·gc.alloc.rate:      460,103 MB/sec
[info]                  ·gc.alloc.rate.norm: 32872,021 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 21954,498 ops/s
[info]                  ·gc.alloc.rate:                   458,707 MB/sec
[info]                  ·gc.alloc.rate.norm:              32872,020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666,673 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     47775,413 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,318 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 166,120 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 21908,862 ops/s
[info]                  ·gc.alloc.rate:                   457,737 MB/sec
[info]                  ·gc.alloc.rate.norm:              32872,020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666,660 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     47875,703 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,991 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson":
[info]   21945,011 ±(99.9%) 177,214 ops/s [Average]
[info]   (min, avg, max) = (21908,862, 21945,011, 22021,403), stdev = 46,022
[info]   CI (99.9%): [21767,797, 22122,225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   458,511 ±(99.9%) 3,697 MB/sec [Average]
[info]   (min, avg, max) = (457,737, 458,511, 460,103), stdev = 0,960
[info]   CI (99.9%): [454,814, 462,208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   32872,021 ±(99.9%) 0,012 B/op [Average]
[info]   (min, avg, max) = (32872,020, 32872,021, 32872,027), stdev = 0,003
[info]   CI (99.9%): [32872,009, 32872,034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   471,365 ±(99.9%) 1057,582 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 471,365, 666,673), stdev = 274,651
[info]   CI (99.9%): [≈ 0, 1528,946] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   33821,909 ±(99.9%) 75874,195 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 33821,909, 47875,703), stdev = 19704,287
[info]   CI (99.9%): [≈ 0, 109696,104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,472 ±(99.9%) 3,975 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,472, 2,318), stdev = 1,032
[info]   CI (99.9%): [≈ 0, 4,447] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   33,822 ±(99.9%) 284,826 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 33,822, 166,120), stdev = 73,968
[info]   CI (99.9%): [≈ 0, 318,648] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,600, 3,000), stdev = 1,140
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 83,33% complete, ETA 00:22:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 70182,695 ops/s
[info] # Warmup Iteration   2: 80953,088 ops/s
[info] # Warmup Iteration   3: 82131,605 ops/s
[info] # Warmup Iteration   4: 82414,967 ops/s
[info] # Warmup Iteration   5: 82109,589 ops/s
[info] Iteration   1: 81649,669 ops/s
[info]                  ·gc.alloc.rate:               1504,622 MB/sec
[info]                  ·gc.alloc.rate.norm:          28992,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1346,043 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 25936,418 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 81605,124 ops/s
[info]                  ·gc.alloc.rate:                   1503,803 MB/sec
[info]                  ·gc.alloc.rate.norm:              28992,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,686 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25962,928 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,803 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 82123,422 ops/s
[info]                  ·gc.alloc.rate:                   1513,357 MB/sec
[info]                  ·gc.alloc.rate.norm:              28992,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022,733 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     38750,334 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,399 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 81877,129 ops/s
[info]                  ·gc.alloc.rate:                   1508,812 MB/sec
[info]                  ·gc.alloc.rate.norm:              28992,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350,398 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25948,069 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,400 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 81395,639 ops/s
[info]                  ·gc.alloc.rate:                   1499,908 MB/sec
[info]                  ·gc.alloc.rate.norm:              28992,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,060 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26134,220 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,208 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce":
[info]   81730,197 ±(99.9%) 1072,444 ops/s [Average]
[info]   (min, avg, max) = (81395,639, 81730,197, 82123,422), stdev = 278,510
[info]   CI (99.9%): [80657,753, 82802,640] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   1506,100 ±(99.9%) 19,805 MB/sec [Average]
[info]   (min, avg, max) = (1499,908, 1506,100, 1513,357), stdev = 5,143
[info]   CI (99.9%): [1486,296, 1525,905] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   28992,005 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (28992,005, 28992,005, 28992,005), stdev = 0,001
[info]   CI (99.9%): [28992,005, 28992,005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1483,584 ±(99.9%) 1160,598 MB/sec [Average]
[info]   (min, avg, max) = (1346,043, 1483,584, 2022,733), stdev = 301,404
[info]   CI (99.9%): [322,986, 2644,182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   28546,394 ±(99.9%) 21966,948 B/op [Average]
[info]   (min, avg, max) = (25936,418, 28546,394, 38750,334), stdev = 5704,747
[info]   CI (99.9%): [6579,445, 50513,342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,062), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,562 ±(99.9%) 1,768 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,562, 1,208), stdev = 0,459
[info]   CI (99.9%): [≈ 0, 2,330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 83,53% complete, ETA 00:21:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 107524,333 ops/s
[info] # Warmup Iteration   2: 171788,352 ops/s
[info] # Warmup Iteration   3: 171952,558 ops/s
[info] # Warmup Iteration   4: 171589,526 ops/s
[info] # Warmup Iteration   5: 171990,503 ops/s
[info] Iteration   1: 171610,953 ops/s
[info]                  ·gc.alloc.rate:                   733,818 MB/sec
[info]                  ·gc.alloc.rate.norm:              6728,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667,293 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6118,073 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,293 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21,020 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 166012,246 ops/s
[info]                  ·gc.alloc.rate:               709,906 MB/sec
[info]                  ·gc.alloc.rate.norm:          6728,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667,321 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6324,407 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 171194,356 ops/s
[info]                  ·gc.alloc.rate:                   732,097 MB/sec
[info]                  ·gc.alloc.rate.norm:              6728,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667,024 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6129,982 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,383 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 171617,628 ops/s
[info]                  ·gc.alloc.rate:                   733,915 MB/sec
[info]                  ·gc.alloc.rate.norm:              6728,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334,741 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12235,932 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,573 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 171586,488 ops/s
[info]                  ·gc.alloc.rate:               733,752 MB/sec
[info]                  ·gc.alloc.rate.norm:          6728,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667,660 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6121,983 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala":
[info]   170404,334 ±(99.9%) 9479,169 ops/s [Average]
[info]   (min, avg, max) = (166012,246, 170404,334, 171617,628), stdev = 2461,710
[info]   CI (99.9%): [160925,165, 179883,504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   728,698 ±(99.9%) 40,553 MB/sec [Average]
[info]   (min, avg, max) = (709,906, 728,698, 733,915), stdev = 10,532
[info]   CI (99.9%): [688,144, 769,251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   6728,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (6728,003, 6728,003, 6728,003), stdev = 0,001
[info]   CI (99.9%): [6728,002, 6728,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   800,808 ±(99.9%) 1149,331 MB/sec [Average]
[info]   (min, avg, max) = (667,024, 800,808, 1334,741), stdev = 298,478
[info]   CI (99.9%): [≈ 0, 1950,139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   7386,076 ±(99.9%) 10445,076 B/op [Average]
[info]   (min, avg, max) = (6118,073, 7386,076, 12235,932), stdev = 2712,553
[info]   CI (99.9%): [≈ 0, 17831,152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,479 ±(99.9%) 3,905 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,479, 2,293), stdev = 1,014
[info]   CI (99.9%): [≈ 0, 4,384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4,395 ±(99.9%) 35,799 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4,395, 21,020), stdev = 9,297
[info]   CI (99.9%): [≈ 0, 40,194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 3,000), stdev = 0,894
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 83,73% complete, ETA 00:21:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 228463,476 ops/s
[info] # Warmup Iteration   2: 245909,772 ops/s
[info] # Warmup Iteration   3: 243466,698 ops/s
[info] # Warmup Iteration   4: 247456,348 ops/s
[info] # Warmup Iteration   5: 247600,495 ops/s
[info] Iteration   1: 245775,545 ops/s
[info]                  ·gc.alloc.rate:                   876,010 MB/sec
[info]                  ·gc.alloc.rate.norm:              5608,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,258 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8618,415 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,533 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 247063,417 ops/s
[info]                  ·gc.alloc.rate:               880,664 MB/sec
[info]                  ·gc.alloc.rate.norm:          5608,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,020 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4285,739 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 245956,006 ops/s
[info]                  ·gc.alloc.rate:                   876,644 MB/sec
[info]                  ·gc.alloc.rate.norm:              5608,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,995 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4305,234 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,266 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 246902,794 ops/s
[info]                  ·gc.alloc.rate:                   880,064 MB/sec
[info]                  ·gc.alloc.rate.norm:              5608,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,698 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8581,520 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,398 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 246907,738 ops/s
[info]                  ·gc.alloc.rate:               880,089 MB/sec
[info]                  ·gc.alloc.rate.norm:          5608,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,666 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4292,657 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala":
[info]   246521,100 ±(99.9%) 2329,934 ops/s [Average]
[info]   (min, avg, max) = (245775,545, 246521,100, 247063,417), stdev = 605,076
[info]   CI (99.9%): [244191,166, 248851,033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   878,694 ±(99.9%) 8,417 MB/sec [Average]
[info]   (min, avg, max) = (876,010, 878,694, 880,664), stdev = 2,186
[info]   CI (99.9%): [870,277, 887,111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   5608,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (5608,002, 5608,002, 5608,002), stdev = 0,001
[info]   CI (99.9%): [5608,002, 5608,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   942,527 ±(99.9%) 1419,944 MB/sec [Average]
[info]   (min, avg, max) = (672,995, 942,527, 1346,698), stdev = 368,755
[info]   CI (99.9%): [≈ 0, 2362,472] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   6016,713 ±(99.9%) 9080,683 B/op [Average]
[info]   (min, avg, max) = (4285,739, 6016,713, 8618,415), stdev = 2358,225
[info]   CI (99.9%): [≈ 0, 15097,396] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,083), stdev = 0,037
[info]   CI (99.9%): [≈ 0, 0,181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,240 ±(99.9%) 0,917 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,240, 0,533), stdev = 0,238
[info]   CI (99.9%): [≈ 0, 1,157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 83,94% complete, ETA 00:21:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 32125,779 ops/s
[info] # Warmup Iteration   2: 44542,028 ops/s
[info] # Warmup Iteration   3: 45563,604 ops/s
[info] # Warmup Iteration   4: 45633,068 ops/s
[info] # Warmup Iteration   5: 45347,788 ops/s
[info] Iteration   1: 45677,881 ops/s
[info]                  ·gc.alloc.rate:                   1838,640 MB/sec
[info]                  ·gc.alloc.rate.norm:              63328,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012,736 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69324,399 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,869 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 45481,716 ops/s
[info]                  ·gc.alloc.rate:                   1830,733 MB/sec
[info]                  ·gc.alloc.rate.norm:              63328,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,031 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     46492,225 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,441 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 45518,787 ops/s
[info]                  ·gc.alloc.rate:                   1832,289 MB/sec
[info]                  ·gc.alloc.rate.norm:              63328,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019,409 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69795,286 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,439 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 45552,213 ops/s
[info]                  ·gc.alloc.rate:                   1833,622 MB/sec
[info]                  ·gc.alloc.rate.norm:              63328,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2024,079 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69905,834 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,438 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 45711,354 ops/s
[info]                  ·gc.alloc.rate:                   1840,002 MB/sec
[info]                  ·gc.alloc.rate.norm:              63328,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2027,434 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69778,926 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,433 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson":
[info]   45588,390 ±(99.9%) 388,235 ops/s [Average]
[info]   (min, avg, max) = (45481,716, 45588,390, 45711,354), stdev = 100,824
[info]   CI (99.9%): [45200,155, 45976,626] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1835,057 ±(99.9%) 15,607 MB/sec [Average]
[info]   (min, avg, max) = (1830,733, 1835,057, 1840,002), stdev = 4,053
[info]   CI (99.9%): [1819,450, 1850,664] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   63328,010 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (63328,009, 63328,010, 63328,010), stdev = 0,001
[info]   CI (99.9%): [63328,008, 63328,011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1885,538 ±(99.9%) 1165,827 MB/sec [Average]
[info]   (min, avg, max) = (1344,031, 1885,538, 2027,434), stdev = 302,762
[info]   CI (99.9%): [719,711, 3051,365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   65059,334 ±(99.9%) 39976,318 B/op [Average]
[info]   (min, avg, max) = (46492,225, 65059,334, 69905,834), stdev = 10381,723
[info]   CI (99.9%): [25083,016, 105035,652] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,050 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,050, 0,083), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1,724 ±(99.9%) 2,464 B/op [Average]
[info]   (min, avg, max) = (1,433, 1,724, 2,869), stdev = 0,640
[info]   CI (99.9%): [≈ 0, 4,188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.time":
[info]   10,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 2,000, 3,000), stdev = 0,707
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 84,14% complete, ETA 00:21:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 93591,599 ops/s
[info] # Warmup Iteration   2: 102659,114 ops/s
[info] # Warmup Iteration   3: 104380,070 ops/s
[info] # Warmup Iteration   4: 103933,518 ops/s
[info] # Warmup Iteration   5: 104123,400 ops/s
[info] Iteration   1: 96683,082 ops/s
[info]                  ·gc.alloc.rate:                   1226,113 MB/sec
[info]                  ·gc.alloc.rate.norm:              19952,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,710 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10962,992 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,339 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 103606,653 ops/s
[info]                  ·gc.alloc.rate:                   1313,863 MB/sec
[info]                  ·gc.alloc.rate.norm:              19952,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,708 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20481,146 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,265 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 103212,061 ops/s
[info]                  ·gc.alloc.rate:                   1308,990 MB/sec
[info]                  ·gc.alloc.rate.norm:              19952,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,794 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20558,720 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,317 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 104193,803 ops/s
[info]                  ·gc.alloc.rate:                   1321,304 MB/sec
[info]                  ·gc.alloc.rate.norm:              19952,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350,038 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20385,903 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,943 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 104138,217 ops/s
[info]                  ·gc.alloc.rate:                   1320,567 MB/sec
[info]                  ·gc.alloc.rate.norm:              19952,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1351,278 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20416,019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,315 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readUPickle":
[info]   102366,763 ±(99.9%) 12332,917 ops/s [Average]
[info]   (min, avg, max) = (96683,082, 102366,763, 104193,803), stdev = 3202,819
[info]   CI (99.9%): [90033,846, 114699,680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1298,167 ±(99.9%) 156,323 MB/sec [Average]
[info]   (min, avg, max) = (1226,113, 1298,167, 1321,304), stdev = 40,597
[info]   CI (99.9%): [1141,844, 1454,491] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   19952,004 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (19952,004, 19952,004, 19952,004), stdev = 0,001
[info]   CI (99.9%): [19952,004, 19952,005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1214,506 ±(99.9%) 1164,111 MB/sec [Average]
[info]   (min, avg, max) = (673,710, 1214,506, 1351,278), stdev = 302,316
[info]   CI (99.9%): [50,395, 2378,617] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   18560,956 ±(99.9%) 16357,188 B/op [Average]
[info]   (min, avg, max) = (10962,992, 18560,956, 20558,720), stdev = 4247,910
[info]   CI (99.9%): [2203,769, 34918,144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,113 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,042, 0,083), stdev = 0,029
[info]   CI (99.9%): [≈ 0, 0,155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,636 ±(99.9%) 1,704 B/op [Average]
[info]   (min, avg, max) = (0,315, 0,636, 1,265), stdev = 0,442
[info]   CI (99.9%): [≈ 0, 2,340] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readUPickle:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readUPickle:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 84,34% complete, ETA 00:20:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 196691,157 ops/s
[info] # Warmup Iteration   2: 247314,704 ops/s
[info] # Warmup Iteration   3: 236141,546 ops/s
[info] # Warmup Iteration   4: 246049,339 ops/s
[info] # Warmup Iteration   5: 248602,916 ops/s
[info] Iteration   1: 249173,996 ops/s
[info]                  ·gc.alloc.rate:               1702,861 MB/sec
[info]                  ·gc.alloc.rate.norm:          10752,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2015,340 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12725,018 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 247009,416 ops/s
[info]                  ·gc.alloc.rate:                   1688,059 MB/sec
[info]                  ·gc.alloc.rate.norm:              10752,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,357 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8569,176 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,531 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 249968,379 ops/s
[info]                  ·gc.alloc.rate:                   1708,312 MB/sec
[info]                  ·gc.alloc.rate.norm:              10752,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022,050 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12726,648 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,524 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 249139,798 ops/s
[info]                  ·gc.alloc.rate:                   1702,588 MB/sec
[info]                  ·gc.alloc.rate.norm:              10752,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1349,996 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8525,350 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,131 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 247576,864 ops/s
[info]                  ·gc.alloc.rate:                   1691,897 MB/sec
[info]                  ·gc.alloc.rate.norm:              10752,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2027,345 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12883,772 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,132 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce":
[info]   248573,691 ±(99.9%) 4742,165 ops/s [Average]
[info]   (min, avg, max) = (247009,416, 248573,691, 249968,379), stdev = 1231,525
[info]   CI (99.9%): [243831,526, 253315,856] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1698,743 ±(99.9%) 32,463 MB/sec [Average]
[info]   (min, avg, max) = (1688,059, 1698,743, 1708,312), stdev = 8,431
[info]   CI (99.9%): [1666,280, 1731,207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   10752,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (10752,002, 10752,002, 10752,002), stdev = 0,001
[info]   CI (99.9%): [10752,002, 10752,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1752,017 ±(99.9%) 1421,424 MB/sec [Average]
[info]   (min, avg, max) = (1345,357, 1752,017, 2027,345), stdev = 369,139
[info]   CI (99.9%): [330,593, 3173,441] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   11085,993 ±(99.9%) 8927,646 B/op [Average]
[info]   (min, avg, max) = (8525,350, 11085,993, 12883,772), stdev = 2318,481
[info]   CI (99.9%): [2158,347, 20013,639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,150 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,042, 0,083), stdev = 0,039
[info]   CI (99.9%): [≈ 0, 0,192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,264 ±(99.9%) 0,950 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,264, 0,531), stdev = 0,247
[info]   CI (99.9%): [≈ 0, 1,214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.time":
[info]   9,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 84,54% complete, ETA 00:20:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 399720,150 ops/s
[info] # Warmup Iteration   2: 576119,651 ops/s
[info] # Warmup Iteration   3: 578828,706 ops/s
[info] # Warmup Iteration   4: 582338,208 ops/s
[info] # Warmup Iteration   5: 573028,890 ops/s
[info] Iteration   1: 572653,481 ops/s
[info]                  ·gc.alloc.rate:               465,893 MB/sec
[info]                  ·gc.alloc.rate.norm:          1280,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,759 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1406,015 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 576406,816 ops/s
[info]                  ·gc.alloc.rate:               468,939 MB/sec
[info]                  ·gc.alloc.rate.norm:          1280,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,766 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1396,901 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   3: 580073,785 ops/s
[info]                  ·gc.alloc.rate:      471,921 MB/sec
[info]                  ·gc.alloc.rate.norm: 1280,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 579627,196 ops/s
[info]                  ·gc.alloc.rate:                   471,580 MB/sec
[info]                  ·gc.alloc.rate.norm:              1280,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666,673 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1809,536 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,370 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6,433 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 579191,071 ops/s
[info]                  ·gc.alloc.rate:                   471,232 MB/sec
[info]                  ·gc.alloc.rate.norm:              1280,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666,713 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1810,986 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,113 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala":
[info]   577590,470 ±(99.9%) 11969,856 ops/s [Average]
[info]   (min, avg, max) = (572653,481, 577590,470, 580073,785), stdev = 3108,534
[info]   CI (99.9%): [565620,613, 589560,326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   469,913 ±(99.9%) 9,753 MB/sec [Average]
[info]   (min, avg, max) = (465,893, 469,913, 471,921), stdev = 2,533
[info]   CI (99.9%): [460,160, 479,666] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1280,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1280,001, 1280,001, 1280,001), stdev = 0,001
[info]   CI (99.9%): [1280,001, 1280,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   471,382 ±(99.9%) 1057,622 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 471,382, 666,713), stdev = 274,661
[info]   CI (99.9%): [≈ 0, 1529,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1284,688 ±(99.9%) 2875,241 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1284,688, 1810,986), stdev = 746,691
[info]   CI (99.9%): [≈ 0, 4159,929] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,482 ±(99.9%) 4,064 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,482, 2,370), stdev = 1,055
[info]   CI (99.9%): [≈ 0, 4,547] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1,309 ±(99.9%) 11,031 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,309, 6,433), stdev = 2,865
[info]   CI (99.9%): [≈ 0, 12,341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,600, 3,000), stdev = 1,140
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 84,74% complete, ETA 00:20:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 704578,002 ops/s
[info] # Warmup Iteration   2: 742656,596 ops/s
[info] # Warmup Iteration   3: 747899,739 ops/s
[info] # Warmup Iteration   4: 748553,180 ops/s
[info] # Warmup Iteration   5: 747548,293 ops/s
[info] Iteration   1: 692853,262 ops/s
[info]                  ·gc.alloc.rate:      373,445 MB/sec
[info]                  ·gc.alloc.rate.norm: 848,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 749018,741 ops/s
[info]                  ·gc.alloc.rate:               403,722 MB/sec
[info]                  ·gc.alloc.rate.norm:          848,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,758 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1074,926 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 746500,396 ops/s
[info]                  ·gc.alloc.rate:                   402,366 MB/sec
[info]                  ·gc.alloc.rate.norm:              848,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,764 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1078,561 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,066 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 746565,811 ops/s
[info]                  ·gc.alloc.rate:      402,361 MB/sec
[info]                  ·gc.alloc.rate.norm: 848,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 751560,184 ops/s
[info]                  ·gc.alloc.rate:                   405,090 MB/sec
[info]                  ·gc.alloc.rate.norm:              848,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,380 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1409,628 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1,564 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,274 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala":
[info]   737299,679 ±(99.9%) 96009,626 ops/s [Average]
[info]   (min, avg, max) = (692853,262, 737299,679, 751560,184), stdev = 24933,395
[info]   CI (99.9%): [641290,053, 833309,305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   397,397 ±(99.9%) 51,741 MB/sec [Average]
[info]   (min, avg, max) = (373,445, 397,397, 405,090), stdev = 13,437
[info]   CI (99.9%): [345,656, 449,138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   848,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (848,001, 848,001, 848,001), stdev = 0,001
[info]   CI (99.9%): [848,000, 848,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   339,380 ±(99.9%) 1219,724 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 339,380, 673,380), stdev = 316,759
[info]   CI (99.9%): [≈ 0, 1559,105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   712,623 ±(99.9%) 2559,051 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 712,623, 1409,628), stdev = 664,577
[info]   CI (99.9%): [≈ 0, 3271,674] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,319 ±(99.9%) 2,680 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,319, 1,564), stdev = 0,696
[info]   CI (99.9%): [≈ 0, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,668 ±(99.9%) 5,611 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,668, 3,274), stdev = 1,457
[info]   CI (99.9%): [≈ 0, 6,279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 84,94% complete, ETA 00:19:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 726467,652 ops/s
[info] # Warmup Iteration   2: 759978,199 ops/s
[info] # Warmup Iteration   3: 758216,995 ops/s
[info] # Warmup Iteration   4: 756005,478 ops/s
[info] # Warmup Iteration   5: 752922,880 ops/s
[info] Iteration   1: 753265,844 ops/s
[info]                  ·gc.alloc.rate:      7,661 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 759234,645 ops/s
[info]                  ·gc.alloc.rate:      7,721 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 758240,978 ops/s
[info]                  ·gc.alloc.rate:      7,711 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 606920,482 ops/s
[info]                  ·gc.alloc.rate:      6,173 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 761873,918 ops/s
[info]                  ·gc.alloc.rate:      7,749 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   727907,173 ±(99.9%) 260709,719 ops/s [Average]
[info]   (min, avg, max) = (606920,482, 727907,173, 761873,918), stdev = 67705,486
[info]   CI (99.9%): [467197,454, 988616,893] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   7,403 ±(99.9%) 2,651 MB/sec [Average]
[info]   (min, avg, max) = (6,173, 7,403, 7,749), stdev = 0,688
[info]   CI (99.9%): [4,752, 10,054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (16,001, 16,001, 16,001), stdev = 0,001
[info]   CI (99.9%): [16,000, 16,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 85,14% complete, ETA 00:19:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 25585,198 ops/s
[info] # Warmup Iteration   2: 33397,224 ops/s
[info] # Warmup Iteration   3: 33518,451 ops/s
[info] # Warmup Iteration   4: 33528,284 ops/s
[info] # Warmup Iteration   5: 33390,509 ops/s
[info] Iteration   1: 33633,867 ops/s
[info]                  ·gc.alloc.rate:                   1768,752 MB/sec
[info]                  ·gc.alloc.rate.norm:              82736,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,698 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62806,713 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,974 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 33659,598 ops/s
[info]                  ·gc.alloc.rate:                   1770,113 MB/sec
[info]                  ·gc.alloc.rate.norm:              82736,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017,039 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94277,469 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,866 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 33813,827 ops/s
[info]                  ·gc.alloc.rate:                   1778,201 MB/sec
[info]                  ·gc.alloc.rate.norm:              82736,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,018 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62673,971 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,969 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 32496,701 ops/s
[info]                  ·gc.alloc.rate:                   1708,947 MB/sec
[info]                  ·gc.alloc.rate.norm:              82736,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2023,347 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     97957,206 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,041 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 33684,648 ops/s
[info]                  ·gc.alloc.rate:                   1771,410 MB/sec
[info]                  ·gc.alloc.rate.norm:              82736,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2027,741 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94708,283 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,918 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson":
[info]   33457,728 ±(99.9%) 2085,799 ops/s [Average]
[info]   (min, avg, max) = (32496,701, 33457,728, 33813,827), stdev = 541,675
[info]   CI (99.9%): [31371,929, 35543,528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1759,485 ±(99.9%) 109,683 MB/sec [Average]
[info]   (min, avg, max) = (1708,947, 1759,485, 1778,201), stdev = 28,484
[info]   CI (99.9%): [1649,801, 1869,168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   82736,013 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (82736,013, 82736,013, 82736,014), stdev = 0,001
[info]   CI (99.9%): [82736,011, 82736,015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1751,569 ±(99.9%) 1429,732 MB/sec [Average]
[info]   (min, avg, max) = (1342,698, 1751,569, 2027,741), stdev = 371,297
[info]   CI (99.9%): [321,837, 3181,301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   82484,729 ±(99.9%) 69620,344 B/op [Average]
[info]   (min, avg, max) = (62673,971, 82484,729, 97957,206), stdev = 18080,182
[info]   CI (99.9%): [12864,384, 152105,073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,062 ±(99.9%) 0,160 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,062, 0,104), stdev = 0,042
[info]   CI (99.9%): [≈ 0, 0,223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2,954 ±(99.9%) 7,671 B/op [Average]
[info]   (min, avg, max) = (0,969, 2,954, 5,041), stdev = 1,992
[info]   CI (99.9%): [≈ 0, 10,624] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 85,34% complete, ETA 00:19:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 117721,511 ops/s
[info] # Warmup Iteration   2: 124593,472 ops/s
[info] # Warmup Iteration   3: 125963,754 ops/s
[info] # Warmup Iteration   4: 125039,346 ops/s
[info] # Warmup Iteration   5: 124971,392 ops/s
[info] Iteration   1: 125609,448 ops/s
[info]                  ·gc.alloc.rate:                   1433,354 MB/sec
[info]                  ·gc.alloc.rate.norm:              17952,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,810 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16893,131 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,043 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 125291,309 ops/s
[info]                  ·gc.alloc.rate:                   1429,651 MB/sec
[info]                  ·gc.alloc.rate.norm:              17952,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1349,351 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16943,691 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,784 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 126399,644 ops/s
[info]                  ·gc.alloc.rate:                   1442,291 MB/sec
[info]                  ·gc.alloc.rate.norm:              17952,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350,039 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16803,757 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,778 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 126167,849 ops/s
[info]                  ·gc.alloc.rate:                   1439,616 MB/sec
[info]                  ·gc.alloc.rate.norm:              17952,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1351,420 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16852,203 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,260 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 126251,084 ops/s
[info]                  ·gc.alloc.rate:                   1440,490 MB/sec
[info]                  ·gc.alloc.rate.norm:              17952,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,641 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16857,201 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,260 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeUPickle":
[info]   125943,867 ±(99.9%) 1816,295 ops/s [Average]
[info]   (min, avg, max) = (125291,309, 125943,867, 126399,644), stdev = 471,686
[info]   CI (99.9%): [124127,572, 127760,161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   1437,080 ±(99.9%) 20,583 MB/sec [Average]
[info]   (min, avg, max) = (1429,651, 1437,080, 1442,291), stdev = 5,345
[info]   CI (99.9%): [1416,497, 1457,664] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   17952,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (17952,003, 17952,003, 17952,004), stdev = 0,001
[info]   CI (99.9%): [17952,003, 17952,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   1350,452 ±(99.9%) 6,031 MB/sec [Average]
[info]   (min, avg, max) = (1348,810, 1350,452, 1352,641), stdev = 1,566
[info]   CI (99.9%): [1344,422, 1356,483] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   16869,997 ±(99.9%) 200,401 B/op [Average]
[info]   (min, avg, max) = (16803,757, 16869,997, 16943,691), stdev = 52,043
[info]   CI (99.9%): [16669,596, 17070,397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,050 ±(99.9%) 0,108 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,050, 0,083), stdev = 0,028
[info]   CI (99.9%): [≈ 0, 0,158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,625 ±(99.9%) 1,349 B/op [Average]
[info]   (min, avg, max) = (0,260, 0,625, 1,043), stdev = 0,350
[info]   CI (99.9%): [≈ 0, 1,974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeUPickle:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeUPickle:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 85,54% complete, ETA 00:19:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 54974,066 ops/s
[info] # Warmup Iteration   2: 68504,896 ops/s
[info] # Warmup Iteration   3: 67510,298 ops/s
[info] # Warmup Iteration   4: 68490,130 ops/s
[info] # Warmup Iteration   5: 68931,488 ops/s
[info] Iteration   1: 68049,839 ops/s
[info]                  ·gc.alloc.rate:                   3118,690 MB/sec
[info]                  ·gc.alloc.rate.norm:              72096,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3382,861 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     78202,962 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,333 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 68467,380 ops/s
[info]                  ·gc.alloc.rate:                   3137,816 MB/sec
[info]                  ·gc.alloc.rate.norm:              72096,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3391,261 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     77919,286 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,785 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 68896,458 ops/s
[info]                  ·gc.alloc.rate:                   3157,058 MB/sec
[info]                  ·gc.alloc.rate.norm:              72096,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2716,253 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62029,575 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,427 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 69078,806 ops/s
[info]                  ·gc.alloc.rate:                   3165,515 MB/sec
[info]                  ·gc.alloc.rate.norm:              72096,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3399,839 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     77432,838 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,269 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 68268,695 ops/s
[info]                  ·gc.alloc.rate:                   3128,463 MB/sec
[info]                  ·gc.alloc.rate.norm:              72096,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3403,086 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     78424,756 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,399 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readCirce":
[info]   68552,236 ±(99.9%) 1651,477 ops/s [Average]
[info]   (min, avg, max) = (68049,839, 68552,236, 69078,806), stdev = 428,883
[info]   CI (99.9%): [66900,759, 70203,713] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readCirce:·gc.alloc.rate":
[info]   3141,508 ±(99.9%) 75,127 MB/sec [Average]
[info]   (min, avg, max) = (3118,690, 3141,508, 3165,515), stdev = 19,510
[info]   CI (99.9%): [3066,381, 3216,636] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   72096,006 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (72096,006, 72096,006, 72096,007), stdev = 0,001
[info]   CI (99.9%): [72096,005, 72096,008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   3258,660 ±(99.9%) 1167,966 MB/sec [Average]
[info]   (min, avg, max) = (2716,253, 3258,660, 3403,086), stdev = 303,317
[info]   CI (99.9%): [2090,694, 4426,626] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   74801,883 ±(99.9%) 27530,389 B/op [Average]
[info]   (min, avg, max) = (62029,575, 74801,883, 78424,756), stdev = 7149,554
[info]   CI (99.9%): [47271,495, 102332,272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,150 ±(99.9%) 0,243 MB/sec [Average]
[info]   (min, avg, max) = (0,062, 0,150, 0,208), stdev = 0,063
[info]   CI (99.9%): [≈ 0, 0,393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3,443 ±(99.9%) 5,590 B/op [Average]
[info]   (min, avg, max) = (1,427, 3,443, 4,785), stdev = 1,452
[info]   CI (99.9%): [≈ 0, 9,033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readCirce:·gc.count":
[info]   24,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,800, 5,000), stdev = 0,447
[info]   CI (99.9%): [24,000, 24,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readCirce:·gc.time":
[info]   14,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 85,74% complete, ETA 00:18:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 81935,911 ops/s
[info] # Warmup Iteration   2: 130699,498 ops/s
[info] # Warmup Iteration   3: 131322,306 ops/s
[info] # Warmup Iteration   4: 133389,392 ops/s
[info] # Warmup Iteration   5: 132862,948 ops/s
[info] Iteration   1: 133357,741 ops/s
[info]                  ·gc.alloc.rate:                   1720,532 MB/sec
[info]                  ·gc.alloc.rate.norm:              20296,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335,557 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15754,701 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,737 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 133068,268 ops/s
[info]                  ·gc.alloc.rate:               1716,614 MB/sec
[info]                  ·gc.alloc.rate.norm:          20296,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2006,824 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23727,236 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 132940,101 ops/s
[info]                  ·gc.alloc.rate:                   1715,059 MB/sec
[info]                  ·gc.alloc.rate.norm:              20296,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013,600 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23828,943 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,739 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 132196,972 ops/s
[info]                  ·gc.alloc.rate:               1705,514 MB/sec
[info]                  ·gc.alloc.rate.norm:          20296,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345,218 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16008,400 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   5: 133140,790 ops/s
[info]                  ·gc.alloc.rate:                   1717,582 MB/sec
[info]                  ·gc.alloc.rate.norm:              20296,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2021,183 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23883,531 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,230 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJacksonScala":
[info]   132940,774 ±(99.9%) 1704,061 ops/s [Average]
[info]   (min, avg, max) = (132196,972, 132940,774, 133357,741), stdev = 442,539
[info]   CI (99.9%): [131236,713, 134644,835] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1715,060 ±(99.9%) 21,939 MB/sec [Average]
[info]   (min, avg, max) = (1705,514, 1715,060, 1720,532), stdev = 5,697
[info]   CI (99.9%): [1693,121, 1736,999] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   20296,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (20296,003, 20296,003, 20296,003), stdev = 0,001
[info]   CI (99.9%): [20296,003, 20296,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1744,476 ±(99.9%) 1420,626 MB/sec [Average]
[info]   (min, avg, max) = (1335,557, 1744,476, 2021,183), stdev = 368,932
[info]   CI (99.9%): [323,851, 3165,102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   20640,562 ±(99.9%) 16733,555 B/op [Average]
[info]   (min, avg, max) = (15754,701, 20640,562, 23883,531), stdev = 4345,651
[info]   CI (99.9%): [3907,008, 37374,117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,046 ±(99.9%) 0,174 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,046, 0,104), stdev = 0,045
[info]   CI (99.9%): [≈ 0, 0,220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,541 ±(99.9%) 2,054 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,541, 1,230), stdev = 0,533
[info]   CI (99.9%): [≈ 0, 2,596] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJacksonScala:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJacksonScala:·gc.time":
[info]   10,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 2,000, 3,000), stdev = 0,707
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 85,94% complete, ETA 00:18:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 493483,620 ops/s
[info] # Warmup Iteration   2: 527117,785 ops/s
[info] # Warmup Iteration   3: 528702,638 ops/s
[info] # Warmup Iteration   4: 523459,251 ops/s
[info] # Warmup Iteration   5: 526795,008 ops/s
[info] Iteration   1: 527746,937 ops/s
[info]                  ·gc.alloc.rate:                   1379,349 MB/sec
[info]                  ·gc.alloc.rate.norm:              4112,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,374 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4016,680 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,186 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 523930,929 ops/s
[info]                  ·gc.alloc.rate:                   1369,462 MB/sec
[info]                  ·gc.alloc.rate.norm:              4112,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,150 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4048,007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,250 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 527421,189 ops/s
[info]                  ·gc.alloc.rate:               1378,493 MB/sec
[info]                  ·gc.alloc.rate.norm:          4112,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1349,016 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4024,071 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 527619,161 ops/s
[info]                  ·gc.alloc.rate:                   1378,999 MB/sec
[info]                  ·gc.alloc.rate.norm:              4112,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350,098 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4025,823 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,186 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 527045,831 ops/s
[info]                  ·gc.alloc.rate:                   1377,537 MB/sec
[info]                  ·gc.alloc.rate.norm:              4112,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1351,478 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4034,216 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,124 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJsoniterScala":
[info]   526752,809 ±(99.9%) 6159,362 ops/s [Average]
[info]   (min, avg, max) = (523930,929, 526752,809, 527746,937), stdev = 1599,567
[info]   CI (99.9%): [520593,447, 532912,171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1376,768 ±(99.9%) 15,944 MB/sec [Average]
[info]   (min, avg, max) = (1369,462, 1376,768, 1379,349), stdev = 4,141
[info]   CI (99.9%): [1360,824, 1392,712] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4112,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4112,001, 4112,001, 4112,001), stdev = 0,001
[info]   CI (99.9%): [4112,001, 4112,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1349,223 ±(99.9%) 6,229 MB/sec [Average]
[info]   (min, avg, max) = (1347,374, 1349,223, 1351,478), stdev = 1,618
[info]   CI (99.9%): [1342,994, 1355,452] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4029,760 ±(99.9%) 46,038 B/op [Average]
[info]   (min, avg, max) = (4016,680, 4029,760, 4048,007), stdev = 11,956
[info]   CI (99.9%): [3983,722, 4075,798] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,050 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,050, 0,083), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,149 ±(99.9%) 0,364 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,149, 0,250), stdev = 0,095
[info]   CI (99.9%): [≈ 0, 0,514] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJsoniterScala:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJsoniterScala:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 86,14% complete, ETA 00:18:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9157,778 ops/s
[info] # Warmup Iteration   2: 17853,155 ops/s
[info] # Warmup Iteration   3: 17899,816 ops/s
[info] # Warmup Iteration   4: 17805,611 ops/s
[info] # Warmup Iteration   5: 17547,194 ops/s
[info] Iteration   1: 17984,371 ops/s
[info]                  ·gc.alloc.rate:                   2292,332 MB/sec
[info]                  ·gc.alloc.rate.norm:              200528,024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2680,165 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     234454,785 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,465 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 17896,389 ops/s
[info]                  ·gc.alloc.rate:                   2281,068 MB/sec
[info]                  ·gc.alloc.rate.norm:              200528,033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016,744 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     177291,356 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14,645 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 17880,303 ops/s
[info]                  ·gc.alloc.rate:                   2278,982 MB/sec
[info]                  ·gc.alloc.rate.norm:              200528,026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2695,560 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     237182,790 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7,329 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 17958,604 ops/s
[info]                  ·gc.alloc.rate:                   2288,957 MB/sec
[info]                  ·gc.alloc.rate.norm:              200528,024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2026,949 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     177574,358 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,473 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 17583,295 ops/s
[info]                  ·gc.alloc.rate:                   2241,046 MB/sec
[info]                  ·gc.alloc.rate.norm:              200528,025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2030,499 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     181688,388 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,863 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readPlayJson":
[info]   17860,593 ±(99.9%) 619,377 ops/s [Average]
[info]   (min, avg, max) = (17583,295, 17860,593, 17984,371), stdev = 160,850
[info]   CI (99.9%): [17241,215, 18479,970] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2276,477 ±(99.9%) 79,145 MB/sec [Average]
[info]   (min, avg, max) = (2241,046, 2276,477, 2292,332), stdev = 20,554
[info]   CI (99.9%): [2197,331, 2355,622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   200528,026 ±(99.9%) 0,015 B/op [Average]
[info]   (min, avg, max) = (200528,024, 200528,026, 200528,033), stdev = 0,004
[info]   CI (99.9%): [200528,012, 200528,041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2289,983 ±(99.9%) 1398,894 MB/sec [Average]
[info]   (min, avg, max) = (2016,744, 2289,983, 2695,560), stdev = 363,288
[info]   CI (99.9%): [891,090, 3688,877] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   201638,335 ±(99.9%) 120393,117 B/op [Average]
[info]   (min, avg, max) = (177291,356, 201638,335, 237182,790), stdev = 31265,710
[info]   CI (99.9%): [81245,219, 322031,452] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,079 ±(99.9%) 0,208 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,079, 0,167), stdev = 0,054
[info]   CI (99.9%): [≈ 0, 0,287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   6,955 ±(99.9%) 18,227 B/op [Average]
[info]   (min, avg, max) = (1,863, 6,955, 14,645), stdev = 4,733
[info]   CI (99.9%): [≈ 0, 25,181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readPlayJson:·gc.count":
[info]   17,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,400, 4,000), stdev = 0,548
[info]   CI (99.9%): [17,000, 17,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readPlayJson:·gc.time":
[info]   14,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 86,35% complete, ETA 00:18:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 34179,686 ops/s
[info] # Warmup Iteration   2: 44482,954 ops/s
[info] # Warmup Iteration   3: 44750,885 ops/s
[info] # Warmup Iteration   4: 44950,441 ops/s
[info] # Warmup Iteration   5: 45107,987 ops/s
[info] Iteration   1: 45163,443 ops/s
[info]                  ·gc.alloc.rate:                   2587,443 MB/sec
[info]                  ·gc.alloc.rate.norm:              90136,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2695,664 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     93905,966 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,627 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 45211,140 ops/s
[info]                  ·gc.alloc.rate:                   2590,208 MB/sec
[info]                  ·gc.alloc.rate.norm:              90136,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2702,462 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94042,327 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,449 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 45320,186 ops/s
[info]                  ·gc.alloc.rate:                   2596,534 MB/sec
[info]                  ·gc.alloc.rate.norm:              90136,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2708,879 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94035,948 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,615 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 45258,803 ops/s
[info]                  ·gc.alloc.rate:                   2593,199 MB/sec
[info]                  ·gc.alloc.rate.norm:              90136,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2713,830 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94328,984 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,343 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 45111,507 ops/s
[info]                  ·gc.alloc.rate:                   2584,325 MB/sec
[info]                  ·gc.alloc.rate.norm:              90136,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2036,880 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71042,238 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,357 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeCirce":
[info]   45213,016 ±(99.9%) 312,513 ops/s [Average]
[info]   (min, avg, max) = (45111,507, 45213,016, 45320,186), stdev = 81,159
[info]   CI (99.9%): [44900,503, 45525,529] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeCirce:·gc.alloc.rate":
[info]   2590,342 ±(99.9%) 18,379 MB/sec [Average]
[info]   (min, avg, max) = (2584,325, 2590,342, 2596,534), stdev = 4,773
[info]   CI (99.9%): [2571,963, 2608,721] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   90136,010 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (90136,010, 90136,010, 90136,010), stdev = 0,001
[info]   CI (99.9%): [90136,008, 90136,011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2571,543 ±(99.9%) 1151,203 MB/sec [Average]
[info]   (min, avg, max) = (2036,880, 2571,543, 2713,830), stdev = 298,964
[info]   CI (99.9%): [1420,340, 3722,746] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   89471,093 ±(99.9%) 39673,966 B/op [Average]
[info]   (min, avg, max) = (71042,238, 89471,093, 94328,984), stdev = 10303,203
[info]   CI (99.9%): [49797,126, 129145,059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,100 ±(99.9%) 0,132 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,100, 0,125), stdev = 0,034
[info]   CI (99.9%): [≈ 0, 0,232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3,478 ±(99.9%) 4,588 B/op [Average]
[info]   (min, avg, max) = (1,449, 3,478, 4,357), stdev = 1,192
[info]   CI (99.9%): [≈ 0, 8,066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeCirce:·gc.count":
[info]   19,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,800, 4,000), stdev = 0,447
[info]   CI (99.9%): [19,000, 19,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeCirce:·gc.time":
[info]   13,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 86,55% complete, ETA 00:17:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 160573,950 ops/s
[info] # Warmup Iteration   2: 241302,075 ops/s
[info] # Warmup Iteration   3: 240427,723 ops/s
[info] # Warmup Iteration   4: 227509,434 ops/s
[info] # Warmup Iteration   5: 241450,943 ops/s
[info] Iteration   1: 238241,521 ops/s
[info]                  ·gc.alloc.rate:                   1108,454 MB/sec
[info]                  ·gc.alloc.rate.norm:              7320,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665,689 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4396,075 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,138 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 240759,279 ops/s
[info]                  ·gc.alloc.rate:                   1120,156 MB/sec
[info]                  ·gc.alloc.rate.norm:              7320,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332,692 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8708,886 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,544 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 239637,511 ops/s
[info]                  ·gc.alloc.rate:                   1114,957 MB/sec
[info]                  ·gc.alloc.rate.norm:              7320,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334,721 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8762,815 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,273 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 240654,403 ops/s
[info]                  ·gc.alloc.rate:                   1119,668 MB/sec
[info]                  ·gc.alloc.rate.norm:              7320,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336,069 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8734,757 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,136 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 241090,434 ops/s
[info]                  ·gc.alloc.rate:               1121,657 MB/sec
[info]                  ·gc.alloc.rate.norm:          7320,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669,319 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4368,016 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJacksonScala":
[info]   240076,630 ±(99.9%) 4469,104 ops/s [Average]
[info]   (min, avg, max) = (238241,521, 240076,630, 241090,434), stdev = 1160,612
[info]   CI (99.9%): [235607,526, 244545,733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1116,978 ±(99.9%) 20,733 MB/sec [Average]
[info]   (min, avg, max) = (1108,454, 1116,978, 1121,657), stdev = 5,384
[info]   CI (99.9%): [1096,246, 1137,711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   7320,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (7320,002, 7320,002, 7320,002), stdev = 0,001
[info]   CI (99.9%): [7320,002, 7320,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1067,698 ±(99.9%) 1406,754 MB/sec [Average]
[info]   (min, avg, max) = (665,689, 1067,698, 1336,069), stdev = 365,330
[info]   CI (99.9%): [≈ 0, 2474,452] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   6994,110 ±(99.9%) 9182,148 B/op [Average]
[info]   (min, avg, max) = (4368,016, 6994,110, 8762,815), stdev = 2384,575
[info]   CI (99.9%): [≈ 0, 16176,257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,083), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,218 ±(99.9%) 0,794 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,218, 0,544), stdev = 0,206
[info]   CI (99.9%): [≈ 0, 1,013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJacksonScala:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJacksonScala:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 2,000), stdev = 0,837
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 86,75% complete, ETA 00:17:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1485907,433 ops/s
[info] # Warmup Iteration   2: 1509711,845 ops/s
[info] # Warmup Iteration   3: 1479198,507 ops/s
[info] # Warmup Iteration   4: 1506586,047 ops/s
[info] # Warmup Iteration   5: 1472589,440 ops/s
[info] Iteration   1: 1472586,153 ops/s
[info]                  ·gc.alloc.rate:                   741,341 MB/sec
[info]                  ·gc.alloc.rate.norm:              792,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,739 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     719,778 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,067 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 1480451,696 ops/s
[info]                  ·gc.alloc.rate:               745,272 MB/sec
[info]                  ·gc.alloc.rate.norm:          792,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,688 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 715,928 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 1479014,829 ops/s
[info]                  ·gc.alloc.rate:                   744,549 MB/sec
[info]                  ·gc.alloc.rate.norm:              792,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,685 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     716,620 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,044 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 1462455,233 ops/s
[info]                  ·gc.alloc.rate:               736,158 MB/sec
[info]                  ·gc.alloc.rate.norm:          792,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,641 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 724,741 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 1477129,634 ops/s
[info]                  ·gc.alloc.rate:                   743,525 MB/sec
[info]                  ·gc.alloc.rate.norm:              792,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,652 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     717,572 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,044 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScala":
[info]   1474327,509 ±(99.9%) 27987,573 ops/s [Average]
[info]   (min, avg, max) = (1462455,233, 1474327,509, 1480451,696), stdev = 7268,284
[info]   CI (99.9%): [1446339,936, 1502315,082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   742,169 ±(99.9%) 14,141 MB/sec [Average]
[info]   (min, avg, max) = (736,158, 742,169, 745,272), stdev = 3,672
[info]   CI (99.9%): [728,028, 756,310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   792,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (792,000, 792,000, 792,000), stdev = 0,001
[info]   CI (99.9%): [792,000, 792,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   673,681 ±(99.9%) 0,147 MB/sec [Average]
[info]   (min, avg, max) = (673,641, 673,681, 673,739), stdev = 0,038
[info]   CI (99.9%): [673,534, 673,828] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   718,928 ±(99.9%) 13,706 B/op [Average]
[info]   (min, avg, max) = (715,928, 718,928, 724,741), stdev = 3,560
[info]   CI (99.9%): [705,222, 732,634] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,062), stdev = 0,028
[info]   CI (99.9%): [≈ 0, 0,137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,031 ±(99.9%) 0,115 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,031, 0,067), stdev = 0,030
[info]   CI (99.9%): [≈ 0, 0,146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 86,95% complete, ETA 00:17:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1548719,012 ops/s
[info] # Warmup Iteration   2: 1528822,366 ops/s
[info] # Warmup Iteration   3: 1562651,012 ops/s
[info] # Warmup Iteration   4: 1559498,029 ops/s
[info] # Warmup Iteration   5: 1562886,306 ops/s
[info] Iteration   1: 1563292,962 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1564042,900 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1564302,620 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1545945,468 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1554640,638 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScalaPrealloc":
[info]   1558444,918 ±(99.9%) 31036,668 ops/s [Average]
[info]   (min, avg, max) = (1545945,468, 1558444,918, 1564302,620), stdev = 8060,124
[info]   CI (99.9%): [1527408,250, 1589481,585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 87,15% complete, ETA 00:17:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 23273,126 ops/s
[info] # Warmup Iteration   2: 36607,226 ops/s
[info] # Warmup Iteration   3: 36573,907 ops/s
[info] # Warmup Iteration   4: 36759,001 ops/s
[info] # Warmup Iteration   5: 36675,465 ops/s
[info] Iteration   1: 36555,936 ops/s
[info]                  ·gc.alloc.rate:                   1958,283 MB/sec
[info]                  ·gc.alloc.rate.norm:              84280,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006,743 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86365,633 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,792 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 36863,546 ops/s
[info]                  ·gc.alloc.rate:                   1974,827 MB/sec
[info]                  ·gc.alloc.rate.norm:              84280,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013,402 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     85926,242 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,332 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 36705,125 ops/s
[info]                  ·gc.alloc.rate:                   1966,283 MB/sec
[info]                  ·gc.alloc.rate.norm:              84280,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017,425 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86472,103 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,463 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 36751,075 ops/s
[info]                  ·gc.alloc.rate:               1968,748 MB/sec
[info]                  ·gc.alloc.rate.norm:          84280,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1348,061 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 57709,050 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 36506,215 ops/s
[info]                  ·gc.alloc.rate:                   1955,743 MB/sec
[info]                  ·gc.alloc.rate.norm:              84280,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2026,044 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     87309,545 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,692 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writePlayJson":
[info]   36676,379 ±(99.9%) 560,991 ops/s [Average]
[info]   (min, avg, max) = (36506,215, 36676,379, 36863,546), stdev = 145,688
[info]   CI (99.9%): [36115,388, 37237,370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1964,777 ±(99.9%) 30,003 MB/sec [Average]
[info]   (min, avg, max) = (1955,743, 1964,777, 1974,827), stdev = 7,792
[info]   CI (99.9%): [1934,774, 1994,780] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   84280,012 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (84280,012, 84280,012, 84280,013), stdev = 0,001
[info]   CI (99.9%): [84280,011, 84280,013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1882,335 ±(99.9%) 1150,380 MB/sec [Average]
[info]   (min, avg, max) = (1348,061, 1882,335, 2026,044), stdev = 298,750
[info]   CI (99.9%): [731,955, 3032,715] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   80756,514 ±(99.9%) 49648,826 B/op [Average]
[info]   (min, avg, max) = (57709,050, 80756,514, 87309,545), stdev = 12893,643
[info]   CI (99.9%): [31107,688, 130405,341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,067 ±(99.9%) 0,191 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,067, 0,125), stdev = 0,050
[info]   CI (99.9%): [≈ 0, 0,258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2,856 ±(99.9%) 8,175 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,856, 5,332), stdev = 2,123
[info]   CI (99.9%): [≈ 0, 11,031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writePlayJson:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writePlayJson:·gc.time":
[info]   12,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 2,400, 3,000), stdev = 0,894
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce
[info] # Run progress: 87,35% complete, ETA 00:16:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 333143,621 ops/s
[info] # Warmup Iteration   2: 776622,871 ops/s
[info] # Warmup Iteration   3: 791694,825 ops/s
[info] # Warmup Iteration   4: 797357,017 ops/s
[info] # Warmup Iteration   5: 792781,267 ops/s
[info] Iteration   1: 799176,515 ops/s
[info]                  ·gc.alloc.rate:                   2369,080 MB/sec
[info]                  ·gc.alloc.rate.norm:              4664,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2023,342 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3983,347 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,082 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 798489,033 ops/s
[info]                  ·gc.alloc.rate:                   2367,214 MB/sec
[info]                  ·gc.alloc.rate.norm:              4664,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2702,910 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5325,407 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,205 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 801597,745 ops/s
[info]                  ·gc.alloc.rate:                   2376,399 MB/sec
[info]                  ·gc.alloc.rate.norm:              4664,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2030,904 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3985,919 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,123 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 796037,301 ops/s
[info]                  ·gc.alloc.rate:                   2359,926 MB/sec
[info]                  ·gc.alloc.rate.norm:              4664,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2711,936 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5359,688 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,041 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 798301,277 ops/s
[info]                  ·gc.alloc.rate:                   2366,431 MB/sec
[info]                  ·gc.alloc.rate.norm:              4664,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2036,329 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4013,402 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,082 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce":
[info]   798720,374 ±(99.9%) 7680,894 ops/s [Average]
[info]   (min, avg, max) = (796037,301, 798720,374, 801597,745), stdev = 1994,704
[info]   CI (99.9%): [791039,480, 806401,268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.alloc.rate":
[info]   2367,810 ±(99.9%) 22,764 MB/sec [Average]
[info]   (min, avg, max) = (2359,926, 2367,810, 2376,399), stdev = 5,912
[info]   CI (99.9%): [2345,046, 2390,575] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   4664,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4664,001, 4664,001, 4664,001), stdev = 0,001
[info]   CI (99.9%): [4664,000, 4664,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2301,084 ±(99.9%) 1428,502 MB/sec [Average]
[info]   (min, avg, max) = (2023,342, 2301,084, 2711,936), stdev = 370,977
[info]   CI (99.9%): [872,582, 3729,586] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4533,553 ±(99.9%) 2844,476 B/op [Average]
[info]   (min, avg, max) = (3983,347, 4533,553, 5359,688), stdev = 738,701
[info]   CI (99.9%): [1689,077, 7378,028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,054 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,054, 0,104), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,107 ±(99.9%) 0,239 B/op [Average]
[info]   (min, avg, max) = (0,041, 0,107, 0,205), stdev = 0,062
[info]   CI (99.9%): [≈ 0, 0,346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.count":
[info]   17,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,400, 4,000), stdev = 0,548
[info]   CI (99.9%): [17,000, 17,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.time":
[info]   10,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala
[info] # Run progress: 87,55% complete, ETA 00:16:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 658093,561 ops/s
[info] # Warmup Iteration   2: 1666762,955 ops/s
[info] # Warmup Iteration   3: 1575034,050 ops/s
[info] # Warmup Iteration   4: 1661714,722 ops/s
[info] # Warmup Iteration   5: 1652975,384 ops/s
[info] Iteration   1: 1650259,231 ops/s
[info]                  ·gc.alloc.rate:                   1250,288 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334,369 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1272,162 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,020 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 1679619,723 ops/s
[info]                  ·gc.alloc.rate:                   1272,594 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335,395 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1250,824 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,098 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 1678773,263 ops/s
[info]                  ·gc.alloc.rate:                   1271,941 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337,088 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1253,053 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,078 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 1676289,634 ops/s
[info]                  ·gc.alloc.rate:               1270,080 MB/sec
[info]                  ·gc.alloc.rate.norm:          1192,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339,170 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1256,843 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   5: 1678395,670 ops/s
[info]                  ·gc.alloc.rate:                   1271,636 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341,463 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1257,454 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,039 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala":
[info]   1672667,504 ±(99.9%) 48465,983 ops/s [Average]
[info]   (min, avg, max) = (1650259,231, 1672667,504, 1679619,723), stdev = 12586,462
[info]   CI (99.9%): [1624201,522, 1721133,487] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1267,308 ±(99.9%) 36,809 MB/sec [Average]
[info]   (min, avg, max) = (1250,288, 1267,308, 1272,594), stdev = 9,559
[info]   CI (99.9%): [1230,498, 1304,117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1192,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1192,000, 1192,000, 1192,000), stdev = 0,001
[info]   CI (99.9%): [1192,000, 1192,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1337,497 ±(99.9%) 11,042 MB/sec [Average]
[info]   (min, avg, max) = (1334,369, 1337,497, 1341,463), stdev = 2,868
[info]   CI (99.9%): [1326,455, 1348,539] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1258,067 ±(99.9%) 32,109 B/op [Average]
[info]   (min, avg, max) = (1250,824, 1258,067, 1272,162), stdev = 8,339
[info]   CI (99.9%): [1225,958, 1290,177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,050 ±(99.9%) 0,166 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,050, 0,104), stdev = 0,043
[info]   CI (99.9%): [≈ 0, 0,216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,047 ±(99.9%) 0,156 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,047, 0,098), stdev = 0,040
[info]   CI (99.9%): [≈ 0, 0,202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala
[info] # Run progress: 87,75% complete, ETA 00:16:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6368438,435 ops/s
[info] # Warmup Iteration   2: 6925312,967 ops/s
[info] # Warmup Iteration   3: 7089308,804 ops/s
[info] # Warmup Iteration   4: 7132552,847 ops/s
[info] # Warmup Iteration   5: 7119790,892 ops/s
[info] Iteration   1: 7131103,636 ops/s
[info]                  ·gc.alloc.rate:      217,564 MB/sec
[info]                  ·gc.alloc.rate.norm: 48,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 7131520,205 ops/s
[info]                  ·gc.alloc.rate:                   217,574 MB/sec
[info]                  ·gc.alloc.rate.norm:              48,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,770 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     112,904 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,005 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,001 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 6878888,297 ops/s
[info]                  ·gc.alloc.rate:      209,877 MB/sec
[info]                  ·gc.alloc.rate.norm: 48,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 7067054,488 ops/s
[info]                  ·gc.alloc.rate:      215,627 MB/sec
[info]                  ·gc.alloc.rate.norm: 48,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 6825337,383 ops/s
[info]                  ·gc.alloc.rate:                   208,231 MB/sec
[info]                  ·gc.alloc.rate.norm:              48,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,765 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     117,969 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,005 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala":
[info]   7006780,802 ±(99.9%) 557769,494 ops/s [Average]
[info]   (min, avg, max) = (6825337,383, 7006780,802, 7131520,205), stdev = 144850,966
[info]   CI (99.9%): [6449011,307, 7564550,296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   213,774 ±(99.9%) 17,020 MB/sec [Average]
[info]   (min, avg, max) = (208,231, 213,774, 217,574), stdev = 4,420
[info]   CI (99.9%): [196,754, 230,795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   48,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (48,000, 48,000, 48,000), stdev = 0,001
[info]   CI (99.9%): [48,000, 48,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   204,707 ±(99.9%) 1079,361 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204,707, 511,770), stdev = 280,307
[info]   CI (99.9%): [≈ 0, 1284,068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   46,175 ±(99.9%) 243,563 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 46,175, 117,969), stdev = 63,253
[info]   CI (99.9%): [≈ 0, 289,738] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,005 ±(99.9%) 0,035 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,005, 0,021), stdev = 0,009
[info]   CI (99.9%): [≈ 0, 0,040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,001 ±(99.9%) 0,008 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,001, 0,005), stdev = 0,002
[info]   CI (99.9%): [≈ 0, 0,009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.count":
[info]   2,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson
[info] # Run progress: 87,95% complete, ETA 00:15:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 78033,788 ops/s
[info] # Warmup Iteration   2: 253673,424 ops/s
[info] # Warmup Iteration   3: 252929,207 ops/s
[info] # Warmup Iteration   4: 253603,909 ops/s
[info] # Warmup Iteration   5: 252023,815 ops/s
[info] Iteration   1: 254108,138 ops/s
[info]                  ·gc.alloc.rate:                   1774,072 MB/sec
[info]                  ·gc.alloc.rate.norm:              10984,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336,722 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8276,190 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,129 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 252406,222 ops/s
[info]                  ·gc.alloc.rate:                   1762,210 MB/sec
[info]                  ·gc.alloc.rate.norm:              10984,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008,754 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12520,726 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,519 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 251489,497 ops/s
[info]                  ·gc.alloc.rate:               1755,748 MB/sec
[info]                  ·gc.alloc.rate.norm:          10984,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342,670 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8399,780 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   4: 246961,169 ops/s
[info]                  ·gc.alloc.rate:                   1724,177 MB/sec
[info]                  ·gc.alloc.rate.norm:              10984,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017,452 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12852,329 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,398 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 251791,476 ops/s
[info]                  ·gc.alloc.rate:                   1757,848 MB/sec
[info]                  ·gc.alloc.rate.norm:              10984,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022,041 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12634,825 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,260 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson":
[info]   251351,300 ±(99.9%) 10224,007 ops/s [Average]
[info]   (min, avg, max) = (246961,169, 251351,300, 254108,138), stdev = 2655,142
[info]   CI (99.9%): [241127,293, 261575,307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1754,811 ±(99.9%) 71,374 MB/sec [Average]
[info]   (min, avg, max) = (1724,177, 1754,811, 1774,072), stdev = 18,536
[info]   CI (99.9%): [1683,437, 1826,185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   10984,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (10984,002, 10984,002, 10984,002), stdev = 0,001
[info]   CI (99.9%): [10984,002, 10984,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1745,528 ±(99.9%) 1426,696 MB/sec [Average]
[info]   (min, avg, max) = (1336,722, 1745,528, 2022,041), stdev = 370,508
[info]   CI (99.9%): [318,831, 3172,224] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   10936,770 ±(99.9%) 9148,152 B/op [Average]
[info]   (min, avg, max) = (8276,190, 10936,770, 12852,329), stdev = 2375,746
[info]   CI (99.9%): [1788,618, 20084,922] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,127 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,042, 0,083), stdev = 0,033
[info]   CI (99.9%): [≈ 0, 0,168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,261 ±(99.9%) 0,796 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,261, 0,519), stdev = 0,207
[info]   CI (99.9%): [≈ 0, 1,057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.time":
[info]   10,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 2,000, 3,000), stdev = 0,707
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce
[info] # Run progress: 88,15% complete, ETA 00:15:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 547680,028 ops/s
[info] # Warmup Iteration   2: 1053567,013 ops/s
[info] # Warmup Iteration   3: 1056899,100 ops/s
[info] # Warmup Iteration   4: 1064083,214 ops/s
[info] # Warmup Iteration   5: 1067815,101 ops/s
[info] Iteration   1: 1064731,875 ops/s
[info]                  ·gc.alloc.rate:                   1829,832 MB/sec
[info]                  ·gc.alloc.rate.norm:              2704,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015,393 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2978,210 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,031 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 1063284,290 ops/s
[info]                  ·gc.alloc.rate:                   1827,399 MB/sec
[info]                  ·gc.alloc.rate.norm:              2704,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018,944 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2987,430 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,154 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 1067028,944 ops/s
[info]                  ·gc.alloc.rate:                   1833,934 MB/sec
[info]                  ·gc.alloc.rate.norm:              2704,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2023,108 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2982,923 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,092 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 1066182,916 ops/s
[info]                  ·gc.alloc.rate:                   1832,446 MB/sec
[info]                  ·gc.alloc.rate.norm:              2704,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350,753 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1993,203 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,061 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 1054615,739 ops/s
[info]                  ·gc.alloc.rate:                   1812,557 MB/sec
[info]                  ·gc.alloc.rate.norm:              2704,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2028,861 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3026,685 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,062 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce":
[info]   1063168,753 ±(99.9%) 19214,386 ops/s [Average]
[info]   (min, avg, max) = (1054615,739, 1063168,753, 1067028,944), stdev = 4989,915
[info]   CI (99.9%): [1043954,367, 1082383,139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1827,234 ±(99.9%) 33,026 MB/sec [Average]
[info]   (min, avg, max) = (1812,557, 1827,234, 1833,934), stdev = 8,577
[info]   CI (99.9%): [1794,208, 1860,259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   2704,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (2704,000, 2704,000, 2704,000), stdev = 0,001
[info]   CI (99.9%): [2704,000, 2704,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1887,412 ±(99.9%) 1155,359 MB/sec [Average]
[info]   (min, avg, max) = (1350,753, 1887,412, 2028,861), stdev = 300,043
[info]   CI (99.9%): [732,052, 3042,771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2793,690 ±(99.9%) 1724,704 B/op [Average]
[info]   (min, avg, max) = (1993,203, 2793,690, 3026,685), stdev = 447,900
[info]   CI (99.9%): [1068,986, 4518,394] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,054 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,054, 0,104), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,080 ±(99.9%) 0,180 B/op [Average]
[info]   (min, avg, max) = (0,031, 0,080, 0,154), stdev = 0,047
[info]   CI (99.9%): [≈ 0, 0,260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala
[info] # Run progress: 88,35% complete, ETA 00:15:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1159953,791 ops/s
[info] # Warmup Iteration   2: 2766932,335 ops/s
[info] # Warmup Iteration   3: 2574359,333 ops/s
[info] # Warmup Iteration   4: 2758146,238 ops/s
[info] # Warmup Iteration   5: 2752870,238 ops/s
[info] Iteration   1: 2759319,919 ops/s
[info]                  ·gc.alloc.rate:               1220,683 MB/sec
[info]                  ·gc.alloc.rate.norm:          696,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1334,380 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 760,827 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 2724434,798 ops/s
[info]                  ·gc.alloc.rate:                   1205,333 MB/sec
[info]                  ·gc.alloc.rate.norm:              696,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335,490 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     771,157 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,048 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 2764651,321 ops/s
[info]                  ·gc.alloc.rate:               1223,021 MB/sec
[info]                  ·gc.alloc.rate.norm:          696,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668,054 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 380,178 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 2744480,530 ops/s
[info]                  ·gc.alloc.rate:                   1214,132 MB/sec
[info]                  ·gc.alloc.rate.norm:              696,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338,091 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     767,059 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,012 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 2382454,363 ops/s
[info]                  ·gc.alloc.rate:                   1053,970 MB/sec
[info]                  ·gc.alloc.rate.norm:              696,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,139 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     884,975 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,028 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala":
[info]   2675068,186 ±(99.9%) 632729,692 ops/s [Average]
[info]   (min, avg, max) = (2382454,363, 2675068,186, 2764651,321), stdev = 164317,892
[info]   CI (99.9%): [2042338,494, 3307797,878] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1183,428 ±(99.9%) 279,917 MB/sec [Average]
[info]   (min, avg, max) = (1053,970, 1183,428, 1223,021), stdev = 72,694
[info]   CI (99.9%): [903,510, 1463,345] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   696,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (696,000, 696,000, 696,000), stdev = 0,001
[info]   CI (99.9%): [696,000, 696,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1203,231 ±(99.9%) 1152,041 MB/sec [Average]
[info]   (min, avg, max) = (668,054, 1203,231, 1340,139), stdev = 299,181
[info]   CI (99.9%): [51,189, 2355,272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   712,839 ±(99.9%) 743,030 B/op [Average]
[info]   (min, avg, max) = (380,178, 712,839, 884,975), stdev = 192,962
[info]   CI (99.9%): [≈ 0, 1455,869] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,134 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,083), stdev = 0,035
[info]   CI (99.9%): [≈ 0, 0,163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,018 ±(99.9%) 0,079 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,018, 0,048), stdev = 0,020
[info]   CI (99.9%): [≈ 0, 0,096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala
[info] # Run progress: 88,55% complete, ETA 00:15:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5612579,582 ops/s
[info] # Warmup Iteration   2: 7790679,833 ops/s
[info] # Warmup Iteration   3: 7819187,340 ops/s
[info] # Warmup Iteration   4: 7822875,413 ops/s
[info] # Warmup Iteration   5: 7731158,577 ops/s
[info] Iteration   1: 7873635,348 ops/s
[info]                  ·gc.alloc.rate:      640,582 MB/sec
[info]                  ·gc.alloc.rate.norm: 128,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 7851672,201 ops/s
[info]                  ·gc.alloc.rate:                   638,771 MB/sec
[info]                  ·gc.alloc.rate.norm:              128,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,691 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     134,997 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1,564 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,313 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 7837968,478 ops/s
[info]                  ·gc.alloc.rate:                   637,735 MB/sec
[info]                  ·gc.alloc.rate.norm:              128,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,747 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     135,228 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,021 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 7788210,352 ops/s
[info]                  ·gc.alloc.rate:               633,683 MB/sec
[info]                  ·gc.alloc.rate.norm:          128,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,799 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 136,103 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 7867813,447 ops/s
[info]                  ·gc.alloc.rate:               640,095 MB/sec
[info]                  ·gc.alloc.rate.norm:          128,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,667 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 134,714 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala":
[info]   7843859,965 ±(99.9%) 131331,274 ops/s [Average]
[info]   (min, avg, max) = (7788210,352, 7843859,965, 7873635,348), stdev = 34106,315
[info]   CI (99.9%): [7712528,691, 7975191,239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   638,173 ±(99.9%) 10,582 MB/sec [Average]
[info]   (min, avg, max) = (633,683, 638,173, 640,582), stdev = 2,748
[info]   CI (99.9%): [627,592, 648,755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   128,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (128,000, 128,000, 128,000), stdev = 0,001
[info]   CI (99.9%): [128,000, 128,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   538,981 ±(99.9%) 1160,197 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 538,981, 673,799), stdev = 301,299
[info]   CI (99.9%): [≈ 0, 1699,177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   108,208 ±(99.9%) 232,935 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 108,208, 136,103), stdev = 60,493
[info]   CI (99.9%): [≈ 0, 341,144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,334 ±(99.9%) 2,654 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,334, 1,564), stdev = 0,689
[info]   CI (99.9%): [≈ 0, 2,988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,067 ±(99.9%) 0,532 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,067, 0,313), stdev = 0,138
[info]   CI (99.9%): [≈ 0, 0,599] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 88,76% complete, ETA 00:14:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5324450,264 ops/s
[info] # Warmup Iteration   2: 7041930,522 ops/s
[info] # Warmup Iteration   3: 7160881,504 ops/s
[info] # Warmup Iteration   4: 7156828,935 ops/s
[info] # Warmup Iteration   5: 7141429,863 ops/s
[info] Iteration   1: 7112462,017 ops/s
[info]                  ·gc.alloc.rate:                   434,005 MB/sec
[info]                  ·gc.alloc.rate.norm:              96,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,768 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     113,201 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,005 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,001 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 7199856,834 ops/s
[info]                  ·gc.alloc.rate:      439,332 MB/sec
[info]                  ·gc.alloc.rate.norm: 96,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 7171257,768 ops/s
[info]                  ·gc.alloc.rate:               437,580 MB/sec
[info]                  ·gc.alloc.rate.norm:          96,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,766 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 112,276 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   4: 7151864,409 ops/s
[info]                  ·gc.alloc.rate:                   436,529 MB/sec
[info]                  ·gc.alloc.rate.norm:              96,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,310 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     148,072 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1,605 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,353 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 7133288,875 ops/s
[info]                  ·gc.alloc.rate:      435,263 MB/sec
[info]                  ·gc.alloc.rate.norm: 96,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc":
[info]   7153745,981 ±(99.9%) 130002,333 ops/s [Average]
[info]   (min, avg, max) = (7112462,017, 7153745,981, 7199856,834), stdev = 33761,193
[info]   CI (99.9%): [7023743,648, 7283748,313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   436,542 ±(99.9%) 7,923 MB/sec [Average]
[info]   (min, avg, max) = (434,005, 436,542, 439,332), stdev = 2,058
[info]   CI (99.9%): [428,619, 444,465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   96,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (96,000, 96,000, 96,000), stdev = 0,001
[info]   CI (99.9%): [96,000, 96,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   339,369 ±(99.9%) 1219,660 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 339,369, 673,310), stdev = 316,742
[info]   CI (99.9%): [≈ 0, 1559,028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   74,710 ±(99.9%) 268,428 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 74,710, 148,072), stdev = 69,710
[info]   CI (99.9%): [≈ 0, 343,138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0,322 ±(99.9%) 2,762 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,322, 1,605), stdev = 0,717
[info]   CI (99.9%): [≈ 0, 3,083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   0,071 ±(99.9%) 0,607 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,071, 0,353), stdev = 0,158
[info]   CI (99.9%): [≈ 0, 0,678] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson
[info] # Run progress: 88,96% complete, ETA 00:14:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 95081,782 ops/s
[info] # Warmup Iteration   2: 345475,426 ops/s
[info] # Warmup Iteration   3: 351765,900 ops/s
[info] # Warmup Iteration   4: 327829,523 ops/s
[info] # Warmup Iteration   5: 352366,401 ops/s
[info] Iteration   1: 351251,078 ops/s
[info]                  ·gc.alloc.rate:                   1807,585 MB/sec
[info]                  ·gc.alloc.rate.norm:              8096,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005,266 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8981,398 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,093 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 349919,137 ops/s
[info]                  ·gc.alloc.rate:                   1800,709 MB/sec
[info]                  ·gc.alloc.rate.norm:              8096,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009,246 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9033,585 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,375 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 349812,713 ops/s
[info]                  ·gc.alloc.rate:                   1800,193 MB/sec
[info]                  ·gc.alloc.rate.norm:              8096,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015,615 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9064,821 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,187 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 353000,103 ops/s
[info]                  ·gc.alloc.rate:                   1816,484 MB/sec
[info]                  ·gc.alloc.rate.norm:              8096,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,073 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5999,398 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,093 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 349238,840 ops/s
[info]                  ·gc.alloc.rate:                   1797,097 MB/sec
[info]                  ·gc.alloc.rate.norm:              8096,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022,734 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9112,505 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,094 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson":
[info]   350644,374 ±(99.9%) 5811,382 ops/s [Average]
[info]   (min, avg, max) = (349238,840, 350644,374, 353000,103), stdev = 1509,197
[info]   CI (99.9%): [344832,993, 356455,756] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1804,414 ±(99.9%) 29,879 MB/sec [Average]
[info]   (min, avg, max) = (1797,097, 1804,414, 1816,484), stdev = 7,759
[info]   CI (99.9%): [1774,535, 1834,292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   8096,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (8096,001, 8096,001, 8096,001), stdev = 0,001
[info]   CI (99.9%): [8096,001, 8096,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1879,787 ±(99.9%) 1149,141 MB/sec [Average]
[info]   (min, avg, max) = (1346,073, 1879,787, 2022,734), stdev = 298,428
[info]   CI (99.9%): [730,646, 3028,928] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   8438,341 ±(99.9%) 5253,216 B/op [Average]
[info]   (min, avg, max) = (5999,398, 8438,341, 9112,505), stdev = 1364,244
[info]   CI (99.9%): [3185,125, 13691,558] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,037, 0,083), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,168 ±(99.9%) 0,471 B/op [Average]
[info]   (min, avg, max) = (0,093, 0,168, 0,375), stdev = 0,122
[info]   CI (99.9%): [≈ 0, 0,639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.time":
[info]   10,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 2,000, 3,000), stdev = 0,707
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 89,16% complete, ETA 00:14:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 62371,711 ops/s
[info] # Warmup Iteration   2: 73000,198 ops/s
[info] # Warmup Iteration   3: 73416,255 ops/s
[info] # Warmup Iteration   4: 69718,526 ops/s
[info] # Warmup Iteration   5: 73377,620 ops/s
[info] Iteration   1: 69503,245 ops/s
[info]                  ·gc.alloc.rate:                   2052,339 MB/sec
[info]                  ·gc.alloc.rate.norm:              46456,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2023,436 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     45801,761 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,885 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 72909,155 ops/s
[info]                  ·gc.alloc.rate:                   2153,027 MB/sec
[info]                  ·gc.alloc.rate.norm:              46456,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2027,199 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     43740,993 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,797 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 73244,554 ops/s
[info]                  ·gc.alloc.rate:                   2162,878 MB/sec
[info]                  ·gc.alloc.rate.norm:              46456,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2030,659 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     43616,112 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,342 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 73142,921 ops/s
[info]                  ·gc.alloc.rate:                   2159,713 MB/sec
[info]                  ·gc.alloc.rate.norm:              46456,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2033,375 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     43738,445 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,896 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 73429,753 ops/s
[info]                  ·gc.alloc.rate:                   2167,982 MB/sec
[info]                  ·gc.alloc.rate.norm:              46456,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2034,516 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     43596,079 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,892 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce":
[info]   72445,925 ±(99.9%) 6375,542 ops/s [Average]
[info]   (min, avg, max) = (69503,245, 72445,925, 73429,753), stdev = 1655,708
[info]   CI (99.9%): [66070,384, 78821,467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   2139,188 ±(99.9%) 188,109 MB/sec [Average]
[info]   (min, avg, max) = (2052,339, 2139,188, 2167,982), stdev = 48,851
[info]   CI (99.9%): [1951,079, 2327,297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   46456,006 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (46456,006, 46456,006, 46456,006), stdev = 0,001
[info]   CI (99.9%): [46456,005, 46456,007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2029,837 ±(99.9%) 17,543 MB/sec [Average]
[info]   (min, avg, max) = (2023,436, 2029,837, 2034,516), stdev = 4,556
[info]   CI (99.9%): [2012,294, 2047,380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   44098,678 ±(99.9%) 3675,133 B/op [Average]
[info]   (min, avg, max) = (43596,079, 44098,678, 45801,761), stdev = 954,420
[info]   CI (99.9%): [40423,545, 47773,812] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,062 ±(99.9%) 0,080 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,062, 0,083), stdev = 0,021
[info]   CI (99.9%): [≈ 0, 0,143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1,363 ±(99.9%) 1,828 B/op [Average]
[info]   (min, avg, max) = (0,892, 1,363, 1,885), stdev = 0,475
[info]   CI (99.9%): [≈ 0, 3,191] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.count":
[info]   15,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,000, 3,000), stdev = 0,001
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.time":
[info]   10,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 89,36% complete, ETA 00:14:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 72542,760 ops/s
[info] # Warmup Iteration   2: 111636,672 ops/s
[info] # Warmup Iteration   3: 113600,974 ops/s
[info] # Warmup Iteration   4: 113005,672 ops/s
[info] # Warmup Iteration   5: 113926,474 ops/s
[info] Iteration   1: 113691,339 ops/s
[info]                  ·gc.alloc.rate:                   1751,755 MB/sec
[info]                  ·gc.alloc.rate.norm:              24240,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006,790 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27769,062 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,153 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 114057,569 ops/s
[info]                  ·gc.alloc.rate:                   1757,374 MB/sec
[info]                  ·gc.alloc.rate.norm:              24240,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,102 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18484,439 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,436 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 113906,122 ops/s
[info]                  ·gc.alloc.rate:                   1755,065 MB/sec
[info]                  ·gc.alloc.rate.norm:              24240,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015,627 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27838,749 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,863 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 112795,811 ops/s
[info]                  ·gc.alloc.rate:                   1738,004 MB/sec
[info]                  ·gc.alloc.rate.norm:              24240,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019,671 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28168,437 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,871 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 114286,126 ops/s
[info]                  ·gc.alloc.rate:                   1760,896 MB/sec
[info]                  ·gc.alloc.rate.norm:              24240,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1349,498 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18576,809 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,147 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala":
[info]   113747,393 ±(99.9%) 2212,268 ops/s [Average]
[info]   (min, avg, max) = (112795,811, 113747,393, 114286,126), stdev = 574,519
[info]   CI (99.9%): [111535,125, 115959,662] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1752,619 ±(99.9%) 33,979 MB/sec [Average]
[info]   (min, avg, max) = (1738,004, 1752,619, 1760,896), stdev = 8,824
[info]   CI (99.9%): [1718,640, 1786,598] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   24240,004 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (24240,004, 24240,004, 24240,004), stdev = 0,001
[info]   CI (99.9%): [24240,003, 24240,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1746,338 ±(99.9%) 1411,634 MB/sec [Average]
[info]   (min, avg, max) = (1340,102, 1746,338, 2019,671), stdev = 366,597
[info]   CI (99.9%): [334,704, 3157,971] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   24167,499 ±(99.9%) 19823,321 B/op [Average]
[info]   (min, avg, max) = (18484,439, 24167,499, 28168,437), stdev = 5148,054
[info]   CI (99.9%): [4344,178, 43990,820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,079 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (0,062, 0,079, 0,104), stdev = 0,017
[info]   CI (99.9%): [0,012, 0,146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1,094 ±(99.9%) 0,916 B/op [Average]
[info]   (min, avg, max) = (0,863, 1,094, 1,436), stdev = 0,238
[info]   CI (99.9%): [0,178, 2,010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.time":
[info]   10,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 2,000, 3,000), stdev = 1,000
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 89,56% complete, ETA 00:13:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 156440,228 ops/s
[info] # Warmup Iteration   2: 169291,939 ops/s
[info] # Warmup Iteration   3: 170806,665 ops/s
[info] # Warmup Iteration   4: 170397,031 ops/s
[info] # Warmup Iteration   5: 170898,386 ops/s
[info] Iteration   1: 165678,365 ops/s
[info]                  ·gc.alloc.rate:                   2434,628 MB/sec
[info]                  ·gc.alloc.rate.norm:              23120,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2703,975 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25677,811 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,395 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 169929,236 ops/s
[info]                  ·gc.alloc.rate:                   2497,242 MB/sec
[info]                  ·gc.alloc.rate.norm:              23120,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2709,113 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25081,550 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,964 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 171142,178 ops/s
[info]                  ·gc.alloc.rate:                   2514,876 MB/sec
[info]                  ·gc.alloc.rate.norm:              23120,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2034,360 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18702,474 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,383 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 169977,411 ops/s
[info]                  ·gc.alloc.rate:                   2497,909 MB/sec
[info]                  ·gc.alloc.rate.norm:              23120,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2716,116 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25139,673 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,385 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 170720,405 ops/s
[info]                  ·gc.alloc.rate:                   2508,667 MB/sec
[info]                  ·gc.alloc.rate.norm:              23120,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2718,625 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25054,993 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,151 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala":
[info]   169489,519 ±(99.9%) 8436,918 ops/s [Average]
[info]   (min, avg, max) = (165678,365, 169489,519, 171142,178), stdev = 2191,041
[info]   CI (99.9%): [161052,601, 177926,437] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   2490,664 ±(99.9%) 123,972 MB/sec [Average]
[info]   (min, avg, max) = (2434,628, 2490,664, 2514,876), stdev = 32,195
[info]   CI (99.9%): [2366,692, 2614,636] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   23120,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (23120,003, 23120,003, 23120,003), stdev = 0,001
[info]   CI (99.9%): [23120,002, 23120,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   2576,438 ±(99.9%) 1167,076 MB/sec [Average]
[info]   (min, avg, max) = (2034,360, 2576,438, 2718,625), stdev = 303,086
[info]   CI (99.9%): [1409,362, 3743,514] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   23931,300 ±(99.9%) 11298,350 B/op [Average]
[info]   (min, avg, max) = (18702,474, 23931,300, 25677,811), stdev = 2934,146
[info]   CI (99.9%): [12632,950, 35229,651] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,071 ±(99.9%) 0,156 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,071, 0,125), stdev = 0,041
[info]   CI (99.9%): [≈ 0, 0,227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,656 ±(99.9%) 1,436 B/op [Average]
[info]   (min, avg, max) = (0,383, 0,656, 1,151), stdev = 0,373
[info]   CI (99.9%): [≈ 0, 2,091] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.count":
[info]   19,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,800, 4,000), stdev = 0,447
[info]   CI (99.9%): [19,000, 19,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.time":
[info]   9,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 89,76% complete, ETA 00:13:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 35299,370 ops/s
[info] # Warmup Iteration   2: 52085,425 ops/s
[info] # Warmup Iteration   3: 51480,277 ops/s
[info] # Warmup Iteration   4: 52479,967 ops/s
[info] # Warmup Iteration   5: 52480,115 ops/s
[info] Iteration   1: 52430,242 ops/s
[info]                  ·gc.alloc.rate:               2694,067 MB/sec
[info]                  ·gc.alloc.rate.norm:          80840,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2695,388 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 80879,637 B/op
[info]                  ·gc.count:                    4,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 52210,217 ops/s
[info]                  ·gc.alloc.rate:                   2682,719 MB/sec
[info]                  ·gc.alloc.rate.norm:              80840,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2702,775 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     81444,356 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,137 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 52294,518 ops/s
[info]                  ·gc.alloc.rate:                   2687,086 MB/sec
[info]                  ·gc.alloc.rate.norm:              80840,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2709,439 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     81512,475 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,759 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 52754,160 ops/s
[info]                  ·gc.alloc.rate:                   2710,594 MB/sec
[info]                  ·gc.alloc.rate.norm:              80840,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2713,980 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     80940,966 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,621 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 52509,754 ops/s
[info]                  ·gc.alloc.rate:                   2698,118 MB/sec
[info]                  ·gc.alloc.rate.norm:              80840,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2717,318 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     81415,272 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,248 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson":
[info]   52439,778 ±(99.9%) 811,432 ops/s [Average]
[info]   (min, avg, max) = (52210,217, 52439,778, 52754,160), stdev = 210,726
[info]   CI (99.9%): [51628,346, 53251,210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2694,517 ±(99.9%) 41,565 MB/sec [Average]
[info]   (min, avg, max) = (2682,719, 2694,517, 2710,594), stdev = 10,794
[info]   CI (99.9%): [2652,952, 2736,081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   80840,008 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (80840,008, 80840,008, 80840,009), stdev = 0,001
[info]   CI (99.9%): [80840,007, 80840,009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2707,780 ±(99.9%) 33,941 MB/sec [Average]
[info]   (min, avg, max) = (2695,388, 2707,780, 2717,318), stdev = 8,814
[info]   CI (99.9%): [2673,838, 2741,721] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   81238,541 ±(99.9%) 1164,775 B/op [Average]
[info]   (min, avg, max) = (80879,637, 81238,541, 81512,475), stdev = 302,488
[info]   CI (99.9%): [80073,766, 82403,316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,058 ±(99.9%) 0,208 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,058, 0,125), stdev = 0,054
[info]   CI (99.9%): [≈ 0, 0,266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1,753 ±(99.9%) 6,254 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,753, 3,759), stdev = 1,624
[info]   CI (99.9%): [≈ 0, 8,007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.count":
[info]   20,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,000, 4,000), stdev = 0,001
[info]   CI (99.9%): [20,000, 20,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.time":
[info]   12,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 89,96% complete, ETA 00:13:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 66023,320 ops/s
[info] # Warmup Iteration   2: 73900,972 ops/s
[info] # Warmup Iteration   3: 73921,696 ops/s
[info] # Warmup Iteration   4: 73310,213 ops/s
[info] # Warmup Iteration   5: 73248,247 ops/s
[info] Iteration   1: 71801,623 ops/s
[info]                  ·gc.alloc.rate:               1709,742 MB/sec
[info]                  ·gc.alloc.rate.norm:          37464,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1348,688 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 29552,570 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 74137,618 ops/s
[info]                  ·gc.alloc.rate:                   1765,451 MB/sec
[info]                  ·gc.alloc.rate.norm:              37464,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2025,806 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42988,915 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,651 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 74226,469 ops/s
[info]                  ·gc.alloc.rate:                   1767,614 MB/sec
[info]                  ·gc.alloc.rate.norm:              37464,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2028,550 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42994,455 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,324 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 74027,084 ops/s
[info]                  ·gc.alloc.rate:                   1762,765 MB/sec
[info]                  ·gc.alloc.rate.norm:              37464,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1353,428 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28764,389 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,328 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 73757,737 ops/s
[info]                  ·gc.alloc.rate:                   1756,318 MB/sec
[info]                  ·gc.alloc.rate.norm:              37464,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2032,650 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     43358,425 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,888 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readUPickle":
[info]   73590,106 ±(99.9%) 3909,139 ops/s [Average]
[info]   (min, avg, max) = (71801,623, 73590,106, 74226,469), stdev = 1015,191
[info]   CI (99.9%): [69680,967, 77499,245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1752,378 ±(99.9%) 93,220 MB/sec [Average]
[info]   (min, avg, max) = (1709,742, 1752,378, 1767,614), stdev = 24,209
[info]   CI (99.9%): [1659,158, 1845,598] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   37464,006 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (37464,006, 37464,006, 37464,006), stdev = 0,001
[info]   CI (99.9%): [37464,005, 37464,007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1757,824 ±(99.9%) 1429,886 MB/sec [Average]
[info]   (min, avg, max) = (1348,688, 1757,824, 2032,650), stdev = 371,337
[info]   CI (99.9%): [327,939, 3187,710] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   37531,751 ±(99.9%) 29458,424 B/op [Average]
[info]   (min, avg, max) = (28764,389, 37531,751, 43358,425), stdev = 7650,259
[info]   CI (99.9%): [8073,327, 66990,175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,058 ±(99.9%) 0,174 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,058, 0,125), stdev = 0,045
[info]   CI (99.9%): [≈ 0, 0,232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   1,238 ±(99.9%) 3,687 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,238, 2,651), stdev = 0,958
[info]   CI (99.9%): [≈ 0, 4,926] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readUPickle:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readUPickle:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 90,16% complete, ETA 00:13:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 185733,827 ops/s
[info] # Warmup Iteration   2: 234794,176 ops/s
[info] # Warmup Iteration   3: 238068,915 ops/s
[info] # Warmup Iteration   4: 236250,180 ops/s
[info] # Warmup Iteration   5: 239380,962 ops/s
[info] Iteration   1: 238330,436 ops/s
[info]                  ·gc.alloc.rate:                   1646,934 MB/sec
[info]                  ·gc.alloc.rate.norm:              10872,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,712 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8863,721 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,137 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 237633,290 ops/s
[info]                  ·gc.alloc.rate:                   1642,194 MB/sec
[info]                  ·gc.alloc.rate.norm:              10872,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017,192 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13354,649 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,551 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 237675,182 ops/s
[info]                  ·gc.alloc.rate:                   1642,521 MB/sec
[info]                  ·gc.alloc.rate.norm:              10872,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,865 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8915,022 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,276 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 239437,602 ops/s
[info]                  ·gc.alloc.rate:                   1654,656 MB/sec
[info]                  ·gc.alloc.rate.norm:              10872,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2024,128 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13299,634 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,274 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 237667,474 ops/s
[info]                  ·gc.alloc.rate:                   1642,409 MB/sec
[info]                  ·gc.alloc.rate.norm:              10872,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1351,426 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8945,825 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,689 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce":
[info]   238148,797 ±(99.9%) 2992,461 ops/s [Average]
[info]   (min, avg, max) = (237633,290, 238148,797, 239437,602), stdev = 777,133
[info]   CI (99.9%): [235156,335, 241141,258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1645,743 ±(99.9%) 20,643 MB/sec [Average]
[info]   (min, avg, max) = (1642,194, 1645,743, 1654,656), stdev = 5,361
[info]   CI (99.9%): [1625,100, 1666,386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   10872,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (10872,002, 10872,002, 10872,002), stdev = 0,001
[info]   CI (99.9%): [10872,002, 10872,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1616,465 ±(99.9%) 1420,886 MB/sec [Average]
[info]   (min, avg, max) = (1342,712, 1616,465, 2024,128), stdev = 368,999
[info]   CI (99.9%): [195,579, 3037,350] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   10675,770 ±(99.9%) 9320,929 B/op [Average]
[info]   (min, avg, max) = (8863,721, 10675,770, 13354,649), stdev = 2420,616
[info]   CI (99.9%): [1354,841, 19996,699] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,058 ±(99.9%) 0,132 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,058, 0,104), stdev = 0,034
[info]   CI (99.9%): [≈ 0, 0,190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,386 ±(99.9%) 0,874 B/op [Average]
[info]   (min, avg, max) = (0,137, 0,386, 0,689), stdev = 0,227
[info]   CI (99.9%): [≈ 0, 1,259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.time":
[info]   9,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 90,36% complete, ETA 00:12:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 398615,760 ops/s
[info] # Warmup Iteration   2: 599361,530 ops/s
[info] # Warmup Iteration   3: 600049,335 ops/s
[info] # Warmup Iteration   4: 601459,330 ops/s
[info] # Warmup Iteration   5: 584528,169 ops/s
[info] Iteration   1: 590173,818 ops/s
[info]                  ·gc.alloc.rate:                   510,190 MB/sec
[info]                  ·gc.alloc.rate.norm:              1360,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,792 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1364,272 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,028 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 598029,724 ops/s
[info]                  ·gc.alloc.rate:               516,959 MB/sec
[info]                  ·gc.alloc.rate.norm:          1360,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,754 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1346,308 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   3: 599038,300 ops/s
[info]                  ·gc.alloc.rate:                   517,829 MB/sec
[info]                  ·gc.alloc.rate.norm:              1360,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666,684 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1750,949 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,355 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6,186 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 593682,385 ops/s
[info]                  ·gc.alloc.rate:                   513,197 MB/sec
[info]                  ·gc.alloc.rate.norm:              1360,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666,685 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1766,754 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,166 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 601013,107 ops/s
[info]                  ·gc.alloc.rate:               519,525 MB/sec
[info]                  ·gc.alloc.rate.norm:          1360,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667,005 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1746,071 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala":
[info]   596387,467 ±(99.9%) 16899,829 ops/s [Average]
[info]   (min, avg, max) = (590173,818, 596387,467, 601013,107), stdev = 4388,832
[info]   CI (99.9%): [579487,638, 613287,295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   515,540 ±(99.9%) 14,566 MB/sec [Average]
[info]   (min, avg, max) = (510,190, 515,540, 519,525), stdev = 3,783
[info]   CI (99.9%): [500,973, 530,106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1360,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1360,001, 1360,001, 1360,001), stdev = 0,001
[info]   CI (99.9%): [1360,001, 1360,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   604,784 ±(99.9%) 326,947 MB/sec [Average]
[info]   (min, avg, max) = (511,754, 604,784, 667,005), stdev = 84,907
[info]   CI (99.9%): [277,837, 931,731] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1594,871 ±(99.9%) 843,030 B/op [Average]
[info]   (min, avg, max) = (1346,308, 1594,871, 1766,754), stdev = 218,932
[info]   CI (99.9%): [751,841, 2437,901] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,486 ±(99.9%) 4,026 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,486, 2,355), stdev = 1,045
[info]   CI (99.9%): [≈ 0, 4,511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1,276 ±(99.9%) 10,572 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,276, 6,186), stdev = 2,746
[info]   CI (99.9%): [≈ 0, 11,848] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.time":
[info]   9,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 3,000), stdev = 0,837
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 90,56% complete, ETA 00:12:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 585699,939 ops/s
[info] # Warmup Iteration   2: 589158,244 ops/s
[info] # Warmup Iteration   3: 578479,991 ops/s
[info] # Warmup Iteration   4: 582104,346 ops/s
[info] # Warmup Iteration   5: 582266,805 ops/s
[info] Iteration   1: 581037,502 ops/s
[info]                  ·gc.alloc.rate:      313,177 MB/sec
[info]                  ·gc.alloc.rate.norm: 848,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 571821,039 ops/s
[info]                  ·gc.alloc.rate:               308,208 MB/sec
[info]                  ·gc.alloc.rate.norm:          848,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,750 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1408,026 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 567340,767 ops/s
[info]                  ·gc.alloc.rate:               305,797 MB/sec
[info]                  ·gc.alloc.rate.norm:          848,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,757 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1419,145 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 551059,604 ops/s
[info]                  ·gc.alloc.rate:      297,013 MB/sec
[info]                  ·gc.alloc.rate.norm: 848,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 571565,358 ops/s
[info]                  ·gc.alloc.rate:                   308,067 MB/sec
[info]                  ·gc.alloc.rate.norm:              848,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,754 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1408,681 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,086 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala":
[info]   568564,854 ±(99.9%) 42317,896 ops/s [Average]
[info]   (min, avg, max) = (551059,604, 568564,854, 581037,502), stdev = 10989,823
[info]   CI (99.9%): [526246,958, 610882,750] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   306,452 ±(99.9%) 22,817 MB/sec [Average]
[info]   (min, avg, max) = (297,013, 306,452, 313,177), stdev = 5,925
[info]   CI (99.9%): [283,636, 329,269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   848,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (848,001, 848,001, 848,001), stdev = 0,001
[info]   CI (99.9%): [848,001, 848,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   307,052 ±(99.9%) 1079,332 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 307,052, 511,757), stdev = 280,299
[info]   CI (99.9%): [≈ 0, 1386,385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   847,170 ±(99.9%) 2977,972 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 847,170, 1419,145), stdev = 773,370
[info]   CI (99.9%): [≈ 0, 3825,142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,006 ±(99.9%) 0,054 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,006, 0,031), stdev = 0,014
[info]   CI (99.9%): [≈ 0, 0,060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,017 ±(99.9%) 0,148 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,086), stdev = 0,038
[info]   CI (99.9%): [≈ 0, 0,165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 90,76% complete, ETA 00:12:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 652022,040 ops/s
[info] # Warmup Iteration   2: 679088,113 ops/s
[info] # Warmup Iteration   3: 676860,860 ops/s
[info] # Warmup Iteration   4: 672383,696 ops/s
[info] # Warmup Iteration   5: 671829,304 ops/s
[info] Iteration   1: 675460,179 ops/s
[info]                  ·gc.alloc.rate:      6,870 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 674486,022 ops/s
[info]                  ·gc.alloc.rate:      6,860 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 673798,466 ops/s
[info]                  ·gc.alloc.rate:      6,853 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 674666,201 ops/s
[info]                  ·gc.alloc.rate:      6,861 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 672796,096 ops/s
[info]                  ·gc.alloc.rate:      6,842 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   674241,393 ±(99.9%) 3855,845 ops/s [Average]
[info]   (min, avg, max) = (672796,096, 674241,393, 675460,179), stdev = 1001,351
[info]   CI (99.9%): [670385,548, 678097,238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   6,857 ±(99.9%) 0,040 MB/sec [Average]
[info]   (min, avg, max) = (6,842, 6,857, 6,870), stdev = 0,010
[info]   CI (99.9%): [6,818, 6,897] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (16,001, 16,001, 16,001), stdev = 0,001
[info]   CI (99.9%): [16,001, 16,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 90,96% complete, ETA 00:11:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26571,739 ops/s
[info] # Warmup Iteration   2: 33580,493 ops/s
[info] # Warmup Iteration   3: 34364,086 ops/s
[info] # Warmup Iteration   4: 33843,501 ops/s
[info] # Warmup Iteration   5: 34503,279 ops/s
[info] Iteration   1: 34485,412 ops/s
[info]                  ·gc.alloc.rate:                   1819,839 MB/sec
[info]                  ·gc.alloc.rate.norm:              83024,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014,690 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     91913,418 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,950 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 32790,961 ops/s
[info]                  ·gc.alloc.rate:               1730,405 MB/sec
[info]                  ·gc.alloc.rate.norm:          83024,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344,969 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 64530,951 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 32720,674 ops/s
[info]                  ·gc.alloc.rate:                   1726,634 MB/sec
[info]                  ·gc.alloc.rate.norm:              83024,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020,983 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     97177,591 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,005 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 34551,369 ops/s
[info]                  ·gc.alloc.rate:               1823,271 MB/sec
[info]                  ·gc.alloc.rate.norm:          83024,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1349,308 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 61441,778 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 34442,580 ops/s
[info]                  ·gc.alloc.rate:                   1817,600 MB/sec
[info]                  ·gc.alloc.rate.norm:              83024,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2027,717 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     92621,677 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,756 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson":
[info]   33798,199 ±(99.9%) 3668,403 ops/s [Average]
[info]   (min, avg, max) = (32720,674, 33798,199, 34551,369), stdev = 952,673
[info]   CI (99.9%): [30129,796, 37466,602] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1783,550 ±(99.9%) 193,663 MB/sec [Average]
[info]   (min, avg, max) = (1726,634, 1783,550, 1823,271), stdev = 50,294
[info]   CI (99.9%): [1589,886, 1977,213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   83024,013 ±(99.9%) 0,003 B/op [Average]
[info]   (min, avg, max) = (83024,013, 83024,013, 83024,014), stdev = 0,001
[info]   CI (99.9%): [83024,010, 83024,016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1751,533 ±(99.9%) 1421,628 MB/sec [Average]
[info]   (min, avg, max) = (1344,969, 1751,533, 2027,717), stdev = 369,192
[info]   CI (99.9%): [329,906, 3173,161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   81537,083 ±(99.9%) 65805,236 B/op [Average]
[info]   (min, avg, max) = (61441,778, 81537,083, 97177,591), stdev = 17089,411
[info]   CI (99.9%): [15731,847, 147342,319] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,188 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,042, 0,104), stdev = 0,049
[info]   CI (99.9%): [≈ 0, 0,230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1,942 ±(99.9%) 8,760 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,942, 4,756), stdev = 2,275
[info]   CI (99.9%): [≈ 0, 10,702] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.time":
[info]   9,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 3,000), stdev = 0,837
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 91,16% complete, ETA 00:11:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 119409,512 ops/s
[info] # Warmup Iteration   2: 125081,117 ops/s
[info] # Warmup Iteration   3: 126680,756 ops/s
[info] # Warmup Iteration   4: 126334,202 ops/s
[info] # Warmup Iteration   5: 126374,732 ops/s
[info] Iteration   1: 126142,086 ops/s
[info]                  ·gc.alloc.rate:               1445,766 MB/sec
[info]                  ·gc.alloc.rate.norm:          18032,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1348,044 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16813,186 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 125819,925 ops/s
[info]                  ·gc.alloc.rate:                   1442,079 MB/sec
[info]                  ·gc.alloc.rate.norm:              18032,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,713 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16864,538 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,521 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 125997,073 ops/s
[info]                  ·gc.alloc.rate:                   1444,112 MB/sec
[info]                  ·gc.alloc.rate.norm:              18032,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350,029 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16857,225 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,780 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 126410,845 ops/s
[info]                  ·gc.alloc.rate:                   1448,818 MB/sec
[info]                  ·gc.alloc.rate.norm:              18032,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1351,347 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16818,882 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,259 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 126248,558 ops/s
[info]                  ·gc.alloc.rate:                   1446,899 MB/sec
[info]                  ·gc.alloc.rate.norm:              18032,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,632 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16857,201 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,519 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeUPickle":
[info]   126123,697 ±(99.9%) 875,321 ops/s [Average]
[info]   (min, avg, max) = (125819,925, 126123,697, 126410,845), stdev = 227,318
[info]   CI (99.9%): [125248,377, 126999,018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   1445,535 ±(99.9%) 9,940 MB/sec [Average]
[info]   (min, avg, max) = (1442,079, 1445,535, 1448,818), stdev = 2,581
[info]   CI (99.9%): [1435,595, 1455,475] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   18032,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (18032,003, 18032,003, 18032,003), stdev = 0,001
[info]   CI (99.9%): [18032,003, 18032,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   1350,153 ±(99.9%) 7,231 MB/sec [Average]
[info]   (min, avg, max) = (1348,044, 1350,153, 1352,632), stdev = 1,878
[info]   CI (99.9%): [1342,922, 1357,384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   16842,206 ±(99.9%) 93,042 B/op [Average]
[info]   (min, avg, max) = (16813,186, 16842,206, 16864,538), stdev = 24,163
[info]   CI (99.9%): [16749,165, 16935,248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,062), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,416 ±(99.9%) 1,142 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,416, 0,780), stdev = 0,297
[info]   CI (99.9%): [≈ 0, 1,558] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeUPickle:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeUPickle:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 91,37% complete, ETA 00:11:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2926724,327 ops/s
[info] # Warmup Iteration   2: 3312007,529 ops/s
[info] # Warmup Iteration   3: 3340801,601 ops/s
[info] # Warmup Iteration   4: 3341738,498 ops/s
[info] # Warmup Iteration   5: 3345218,965 ops/s
[info] Iteration   1: 3382782,458 ops/s
[info]                  ·gc.alloc.rate:                   3182,221 MB/sec
[info]                  ·gc.alloc.rate.norm:              1480,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2709,462 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1260,127 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,019 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 3350481,618 ops/s
[info]                  ·gc.alloc.rate:                   3151,769 MB/sec
[info]                  ·gc.alloc.rate.norm:              1480,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3393,002 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1593,278 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,039 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 3379038,699 ops/s
[info]                  ·gc.alloc.rate:                   3178,802 MB/sec
[info]                  ·gc.alloc.rate.norm:              1480,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3397,939 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1582,027 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,039 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 3382974,310 ops/s
[info]                  ·gc.alloc.rate:                   3182,452 MB/sec
[info]                  ·gc.alloc.rate.norm:              1480,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2721,578 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1265,671 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,019 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 3369090,250 ops/s
[info]                  ·gc.alloc.rate:                   3169,343 MB/sec
[info]                  ·gc.alloc.rate.norm:              1480,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3404,652 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1589,883 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,019 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce":
[info]   3372873,467 ±(99.9%) 52865,178 ops/s [Average]
[info]   (min, avg, max) = (3350481,618, 3372873,467, 3382974,310), stdev = 13728,919
[info]   CI (99.9%): [3320008,289, 3425738,645] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   3172,918 ±(99.9%) 49,914 MB/sec [Average]
[info]   (min, avg, max) = (3151,769, 3172,918, 3182,452), stdev = 12,963
[info]   CI (99.9%): [3123,003, 3222,832] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   1480,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1480,000, 1480,000, 1480,000), stdev = 0,001
[info]   CI (99.9%): [1480,000, 1480,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   3125,327 ±(99.9%) 1440,710 MB/sec [Average]
[info]   (min, avg, max) = (2709,462, 3125,327, 3404,652), stdev = 374,148
[info]   CI (99.9%): [1684,617, 4566,037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1458,197 ±(99.9%) 686,721 B/op [Average]
[info]   (min, avg, max) = (1260,127, 1458,197, 1593,278), stdev = 178,339
[info]   CI (99.9%): [771,476, 2144,919] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,058 ±(99.9%) 0,088 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,058, 0,083), stdev = 0,023
[info]   CI (99.9%): [≈ 0, 0,146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,027 ±(99.9%) 0,041 B/op [Average]
[info]   (min, avg, max) = (0,019, 0,027, 0,039), stdev = 0,011
[info]   CI (99.9%): [≈ 0, 0,068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.count":
[info]   23,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,600, 5,000), stdev = 0,548
[info]   CI (99.9%): [23,000, 23,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.time":
[info]   13,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 91,57% complete, ETA 00:11:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1350400,098 ops/s
[info] # Warmup Iteration   2: 8675163,948 ops/s
[info] # Warmup Iteration   3: 8848989,252 ops/s
[info] # Warmup Iteration   4: 8835733,109 ops/s
[info] # Warmup Iteration   5: 8830074,050 ops/s
[info] Iteration   1: 8828291,938 ops/s
[info]                  ·gc.alloc.rate:                   1660,964 MB/sec
[info]                  ·gc.alloc.rate.norm:              296,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005,066 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     357,322 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,004 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   2: 8851340,761 ops/s
[info]                  ·gc.alloc.rate:                   1665,293 MB/sec
[info]                  ·gc.alloc.rate.norm:              296,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339,060 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     238,013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,354 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,418 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   3: 8540017,139 ops/s
[info]                  ·gc.alloc.rate:               1606,737 MB/sec
[info]                  ·gc.alloc.rate.norm:          296,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2009,338 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 370,169 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   4: 8787179,624 ops/s
[info]                  ·gc.alloc.rate:               1653,184 MB/sec
[info]                  ·gc.alloc.rate.norm:          296,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339,378 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 239,814 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   5: 8788796,496 ops/s
[info]                  ·gc.alloc.rate:               1653,545 MB/sec
[info]                  ·gc.alloc.rate.norm:          296,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340,798 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 240,015 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava":
[info]   8759125,192 ±(99.9%) 483112,069 ops/s [Average]
[info]   (min, avg, max) = (8540017,139, 8759125,192, 8851340,761), stdev = 125462,670
[info]   CI (99.9%): [8276013,123, 9242237,260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   1647,944 ±(99.9%) 90,865 MB/sec [Average]
[info]   (min, avg, max) = (1606,737, 1647,944, 1665,293), stdev = 23,597
[info]   CI (99.9%): [1557,079, 1738,810] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   296,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (296,000, 296,000, 296,000), stdev = 0,001
[info]   CI (99.9%): [296,000, 296,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   1606,728 ±(99.9%) 1407,736 MB/sec [Average]
[info]   (min, avg, max) = (1339,060, 1606,728, 2009,338), stdev = 365,585
[info]   CI (99.9%): [198,992, 3014,464] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   289,067 ±(99.9%) 263,106 B/op [Average]
[info]   (min, avg, max) = (238,013, 289,067, 370,169), stdev = 68,328
[info]   CI (99.9%): [25,961, 552,173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,475 ±(99.9%) 4,046 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,475, 2,354), stdev = 1,051
[info]   CI (99.9%): [≈ 0, 4,521] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0,084 ±(99.9%) 0,719 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,084, 0,418), stdev = 0,187
[info]   CI (99.9%): [≈ 0, 0,804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.time":
[info]   14,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 4,000), stdev = 1,095
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 91,77% complete, ETA 00:10:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2907320,958 ops/s
[info] # Warmup Iteration   2: 4314678,922 ops/s
[info] # Warmup Iteration   3: 4386264,488 ops/s
[info] # Warmup Iteration   4: 4363004,733 ops/s
[info] # Warmup Iteration   5: 4351185,748 ops/s
[info] Iteration   1: 4350573,369 ops/s
[info]                  ·gc.alloc.rate:                   2610,504 MB/sec
[info]                  ·gc.alloc.rate.norm:              944,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2692,675 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     973,714 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,008 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 4353522,955 ops/s
[info]                  ·gc.alloc.rate:                   2612,137 MB/sec
[info]                  ·gc.alloc.rate.norm:              944,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2700,134 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     975,801 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,030 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   3: 4394125,592 ops/s
[info]                  ·gc.alloc.rate:                   2636,428 MB/sec
[info]                  ·gc.alloc.rate.norm:              944,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2706,704 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     969,163 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,030 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 4359158,403 ops/s
[info]                  ·gc.alloc.rate:                   2615,650 MB/sec
[info]                  ·gc.alloc.rate.norm:              944,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2712,246 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     978,862 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,023 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 4372517,232 ops/s
[info]                  ·gc.alloc.rate:                   2623,793 MB/sec
[info]                  ·gc.alloc.rate.norm:              944,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2716,783 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     977,456 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,007 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala":
[info]   4365979,510 ±(99.9%) 68720,407 ops/s [Average]
[info]   (min, avg, max) = (4350573,369, 4365979,510, 4394125,592), stdev = 17846,471
[info]   CI (99.9%): [4297259,104, 4434699,917] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   2619,702 ±(99.9%) 41,057 MB/sec [Average]
[info]   (min, avg, max) = (2610,504, 2619,702, 2636,428), stdev = 10,662
[info]   CI (99.9%): [2578,645, 2660,759] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   944,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (944,000, 944,000, 944,000), stdev = 0,001
[info]   CI (99.9%): [944,000, 944,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   2705,708 ±(99.9%) 36,900 MB/sec [Average]
[info]   (min, avg, max) = (2692,675, 2705,708, 2716,783), stdev = 9,583
[info]   CI (99.9%): [2668,808, 2742,609] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   974,999 ±(99.9%) 14,576 B/op [Average]
[info]   (min, avg, max) = (969,163, 974,999, 978,862), stdev = 3,785
[info]   CI (99.9%): [960,424, 989,575] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,054 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,054, 0,083), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,019 ±(99.9%) 0,044 B/op [Average]
[info]   (min, avg, max) = (0,007, 0,019, 0,030), stdev = 0,011
[info]   CI (99.9%): [≈ 0, 0,063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.count":
[info]   20,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,000, 4,000), stdev = 0,001
[info]   CI (99.9%): [20,000, 20,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.time":
[info]   16,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 3,200, 6,000), stdev = 1,643
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 91,97% complete, ETA 00:10:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7293952,879 ops/s
[info] # Warmup Iteration   2: 7603788,186 ops/s
[info] # Warmup Iteration   3: 7680174,656 ops/s
[info] # Warmup Iteration   4: 7632360,366 ops/s
[info] # Warmup Iteration   5: 7565961,714 ops/s
[info] Iteration   1: 7642592,912 ops/s
[info]                  ·gc.alloc.rate:                   1437,894 MB/sec
[info]                  ·gc.alloc.rate.norm:              296,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,398 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     277,371 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,009 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 7621867,185 ops/s
[info]                  ·gc.alloc.rate:                   1433,990 MB/sec
[info]                  ·gc.alloc.rate.norm:              296,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,724 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     278,400 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,013 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 7676969,627 ops/s
[info]                  ·gc.alloc.rate:                   1444,364 MB/sec
[info]                  ·gc.alloc.rate.norm:              296,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     276,670 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,013 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 7624412,481 ops/s
[info]                  ·gc.alloc.rate:                   1434,479 MB/sec
[info]                  ·gc.alloc.rate.norm:              296,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350,744 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     278,722 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,004 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 7617577,991 ops/s
[info]                  ·gc.alloc.rate:               1433,201 MB/sec
[info]                  ·gc.alloc.rate.norm:          296,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1352,146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 279,260 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala":
[info]   7636684,039 ±(99.9%) 94183,767 ops/s [Average]
[info]   (min, avg, max) = (7617577,991, 7636684,039, 7676969,627), stdev = 24459,225
[info]   CI (99.9%): [7542500,272, 7730867,806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1436,786 ±(99.9%) 17,713 MB/sec [Average]
[info]   (min, avg, max) = (1433,201, 1436,786, 1444,364), stdev = 4,600
[info]   CI (99.9%): [1419,073, 1454,498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   296,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (296,000, 296,000, 296,000), stdev = 0,001
[info]   CI (99.9%): [296,000, 296,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1349,811 ±(99.9%) 7,043 MB/sec [Average]
[info]   (min, avg, max) = (1347,398, 1349,811, 1352,146), stdev = 1,829
[info]   CI (99.9%): [1342,768, 1356,854] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   278,084 ±(99.9%) 4,037 B/op [Average]
[info]   (min, avg, max) = (276,670, 278,084, 279,260), stdev = 1,048
[info]   CI (99.9%): [274,048, 282,121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,008 ±(99.9%) 0,021 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,008, 0,013), stdev = 0,006
[info]   CI (99.9%): [≈ 0, 0,029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 92,17% complete, ETA 00:10:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4215770,244 ops/s
[info] # Warmup Iteration   2: 5257522,736 ops/s
[info] # Warmup Iteration   3: 5179824,012 ops/s
[info] # Warmup Iteration   4: 5232381,751 ops/s
[info] # Warmup Iteration   5: 5194120,549 ops/s
[info] Iteration   1: 5238049,366 ops/s
[info]                  ·gc.alloc.rate:                   3249,379 MB/sec
[info]                  ·gc.alloc.rate.norm:              976,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3381,170 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1015,586 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,013 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 5237289,434 ops/s
[info]                  ·gc.alloc.rate:                   3249,073 MB/sec
[info]                  ·gc.alloc.rate.norm:              976,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3389,145 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1018,077 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,025 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 5136639,071 ops/s
[info]                  ·gc.alloc.rate:                   3186,517 MB/sec
[info]                  ·gc.alloc.rate.norm:              976,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3396,405 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1040,287 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,019 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 5232918,709 ops/s
[info]                  ·gc.alloc.rate:                   3246,270 MB/sec
[info]                  ·gc.alloc.rate.norm:              976,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2720,103 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     817,807 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,025 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 5114976,349 ops/s
[info]                  ·gc.alloc.rate:                   3173,123 MB/sec
[info]                  ·gc.alloc.rate.norm:              976,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3402,970 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1046,697 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,013 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson":
[info]   5191974,586 ±(99.9%) 234569,409 ops/s [Average]
[info]   (min, avg, max) = (5114976,349, 5191974,586, 5238049,366), stdev = 60916,931
[info]   CI (99.9%): [4957405,176, 5426543,995] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3220,872 ±(99.9%) 145,527 MB/sec [Average]
[info]   (min, avg, max) = (3173,123, 3220,872, 3249,379), stdev = 37,793
[info]   CI (99.9%): [3075,345, 3366,400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   976,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (976,000, 976,000, 976,000), stdev = 0,001
[info]   CI (99.9%): [976,000, 976,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3257,959 ±(99.9%) 1158,198 MB/sec [Average]
[info]   (min, avg, max) = (2720,103, 3257,959, 3402,970), stdev = 300,780
[info]   CI (99.9%): [2099,761, 4416,157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   987,691 ±(99.9%) 369,392 B/op [Average]
[info]   (min, avg, max) = (817,807, 987,691, 1046,697), stdev = 95,930
[info]   CI (99.9%): [618,299, 1357,083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,062 ±(99.9%) 0,080 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,062, 0,083), stdev = 0,021
[info]   CI (99.9%): [≈ 0, 0,143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,019 ±(99.9%) 0,024 B/op [Average]
[info]   (min, avg, max) = (0,013, 0,019, 0,025), stdev = 0,006
[info]   CI (99.9%): [≈ 0, 0,043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.count":
[info]   24,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,800, 5,000), stdev = 0,447
[info]   CI (99.9%): [24,000, 24,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.time":
[info]   14,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 92,37% complete, ETA 00:10:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3932377,877 ops/s
[info] # Warmup Iteration   2: 4112466,320 ops/s
[info] # Warmup Iteration   3: 4148151,235 ops/s
[info] # Warmup Iteration   4: 4071131,651 ops/s
[info] # Warmup Iteration   5: 4133041,239 ops/s
[info] Iteration   1: 4132614,719 ops/s
[info]                  ·gc.alloc.rate:                   2605,679 MB/sec
[info]                  ·gc.alloc.rate.norm:              992,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2706,757 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1030,481 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,008 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 4092584,179 ops/s
[info]                  ·gc.alloc.rate:                   2580,503 MB/sec
[info]                  ·gc.alloc.rate.norm:              992,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2712,123 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1042,598 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,032 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 4118806,194 ops/s
[info]                  ·gc.alloc.rate:                   2597,104 MB/sec
[info]                  ·gc.alloc.rate.norm:              992,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2715,539 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1037,238 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,024 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 4145143,635 ops/s
[info]                  ·gc.alloc.rate:                   2613,676 MB/sec
[info]                  ·gc.alloc.rate.norm:              992,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2038,521 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     773,705 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,008 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 4132996,765 ops/s
[info]                  ·gc.alloc.rate:                   2605,947 MB/sec
[info]                  ·gc.alloc.rate.norm:              992,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2720,069 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1035,442 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,008 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readUPickle":
[info]   4124429,098 ±(99.9%) 77378,239 ops/s [Average]
[info]   (min, avg, max) = (4092584,179, 4124429,098, 4145143,635), stdev = 20094,883
[info]   CI (99.9%): [4047050,860, 4201807,337] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readUPickle:·gc.alloc.rate":
[info]   2600,582 ±(99.9%) 48,763 MB/sec [Average]
[info]   (min, avg, max) = (2580,503, 2600,582, 2613,676), stdev = 12,664
[info]   CI (99.9%): [2551,819, 2649,345] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   992,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (992,000, 992,000, 992,000), stdev = 0,001
[info]   CI (99.9%): [992,000, 992,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   2578,602 ±(99.9%) 1162,716 MB/sec [Average]
[info]   (min, avg, max) = (2038,521, 2578,602, 2720,069), stdev = 301,954
[info]   CI (99.9%): [1415,886, 3741,318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   983,893 ±(99.9%) 452,753 B/op [Average]
[info]   (min, avg, max) = (773,705, 983,893, 1042,598), stdev = 117,579
[info]   CI (99.9%): [531,139, 1436,646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,113 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,042, 0,083), stdev = 0,029
[info]   CI (99.9%): [≈ 0, 0,155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,016 ±(99.9%) 0,044 B/op [Average]
[info]   (min, avg, max) = (0,008, 0,016, 0,032), stdev = 0,011
[info]   CI (99.9%): [≈ 0, 0,060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readUPickle:·gc.count":
[info]   19,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,800, 4,000), stdev = 0,447
[info]   CI (99.9%): [19,000, 19,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readUPickle:·gc.time":
[info]   11,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 92,57% complete, ETA 00:09:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2332823,694 ops/s
[info] # Warmup Iteration   2: 2832868,937 ops/s
[info] # Warmup Iteration   3: 2844586,767 ops/s
[info] # Warmup Iteration   4: 2818190,670 ops/s
[info] # Warmup Iteration   5: 2839116,553 ops/s
[info] Iteration   1: 2704740,261 ops/s
[info]                  ·gc.alloc.rate:                   1678,046 MB/sec
[info]                  ·gc.alloc.rate.norm:              976,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,245 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     781,852 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,048 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 2799343,497 ops/s
[info]                  ·gc.alloc.rate:                   1736,706 MB/sec
[info]                  ·gc.alloc.rate.norm:              976,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019,361 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1134,847 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,047 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 2845480,759 ops/s
[info]                  ·gc.alloc.rate:                   1765,181 MB/sec
[info]                  ·gc.alloc.rate.norm:              976,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,347 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     745,525 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,035 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 2814308,381 ops/s
[info]                  ·gc.alloc.rate:                   1745,945 MB/sec
[info]                  ·gc.alloc.rate.norm:              976,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2025,511 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1132,280 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,035 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 2851878,851 ops/s
[info]                  ·gc.alloc.rate:                   1769,140 MB/sec
[info]                  ·gc.alloc.rate.norm:              976,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1119,394 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,023 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce":
[info]   2803150,350 ±(99.9%) 227724,732 ops/s [Average]
[info]   (min, avg, max) = (2704740,261, 2803150,350, 2851878,851), stdev = 59139,390
[info]   CI (99.9%): [2575425,617, 3030875,082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1739,004 ±(99.9%) 140,994 MB/sec [Average]
[info]   (min, avg, max) = (1678,046, 1739,004, 1769,140), stdev = 36,616
[info]   CI (99.9%): [1598,010, 1879,998] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   976,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (976,000, 976,000, 976,000), stdev = 0,001
[info]   CI (99.9%): [976,000, 976,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1753,305 ±(99.9%) 1430,767 MB/sec [Average]
[info]   (min, avg, max) = (1344,245, 1753,305, 2029,062), stdev = 371,566
[info]   CI (99.9%): [322,538, 3184,072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   982,780 ±(99.9%) 772,051 B/op [Average]
[info]   (min, avg, max) = (745,525, 982,780, 1134,847), stdev = 200,499
[info]   CI (99.9%): [210,728, 1754,831] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,067 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,067, 0,083), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,038 ±(99.9%) 0,040 B/op [Average]
[info]   (min, avg, max) = (0,023, 0,038, 0,048), stdev = 0,010
[info]   CI (99.9%): [≈ 0, 0,078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 92,77% complete, ETA 00:09:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1169037,673 ops/s
[info] # Warmup Iteration   2: 6943236,102 ops/s
[info] # Warmup Iteration   3: 7051564,977 ops/s
[info] # Warmup Iteration   4: 7032933,018 ops/s
[info] # Warmup Iteration   5: 6917854,586 ops/s
[info] Iteration   1: 7064787,013 ops/s
[info]                  ·gc.alloc.rate:               682,588 MB/sec
[info]                  ·gc.alloc.rate.norm:          152,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664,116 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 147,887 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 7073667,059 ops/s
[info]                  ·gc.alloc.rate:               683,440 MB/sec
[info]                  ·gc.alloc.rate.norm:          152,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664,112 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 147,701 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 7062374,011 ops/s
[info]                  ·gc.alloc.rate:               682,347 MB/sec
[info]                  ·gc.alloc.rate.norm:          152,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665,444 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 148,235 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   4: 6981682,322 ops/s
[info]                  ·gc.alloc.rate:               674,551 MB/sec
[info]                  ·gc.alloc.rate.norm:          152,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665,445 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 149,948 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 7063132,226 ops/s
[info]                  ·gc.alloc.rate:                   682,418 MB/sec
[info]                  ·gc.alloc.rate.norm:              152,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666,768 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     148,514 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,028 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,006 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava":
[info]   7049128,526 ±(99.9%) 146221,387 ops/s [Average]
[info]   (min, avg, max) = (6981682,322, 7049128,526, 7073667,059), stdev = 37973,230
[info]   CI (99.9%): [6902907,139, 7195349,913] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   681,069 ±(99.9%) 14,130 MB/sec [Average]
[info]   (min, avg, max) = (674,551, 681,069, 683,440), stdev = 3,670
[info]   CI (99.9%): [666,938, 695,199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   152,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (152,000, 152,000, 152,000), stdev = 0,001
[info]   CI (99.9%): [152,000, 152,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   665,177 ±(99.9%) 4,276 MB/sec [Average]
[info]   (min, avg, max) = (664,112, 665,177, 666,768), stdev = 1,110
[info]   CI (99.9%): [660,901, 669,453] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   148,457 ±(99.9%) 3,429 B/op [Average]
[info]   (min, avg, max) = (147,701, 148,457, 149,948), stdev = 0,891
[info]   CI (99.9%): [145,028, 151,886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,006 ±(99.9%) 0,048 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,006, 0,028), stdev = 0,013
[info]   CI (99.9%): [≈ 0, 0,054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0,001 ±(99.9%) 0,011 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,001, 0,006), stdev = 0,003
[info]   CI (99.9%): [≈ 0, 0,012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 92,97% complete, ETA 00:09:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3629703,195 ops/s
[info] # Warmup Iteration   2: 4876786,566 ops/s
[info] # Warmup Iteration   3: 4931268,311 ops/s
[info] # Warmup Iteration   4: 4973272,317 ops/s
[info] # Warmup Iteration   5: 4974461,723 ops/s
[info] Iteration   1: 4958203,186 ops/s
[info]                  ·gc.alloc.rate:                   1311,046 MB/sec
[info]                  ·gc.alloc.rate.norm:              416,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     424,579 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,013 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 4967984,706 ops/s
[info]                  ·gc.alloc.rate:               1313,576 MB/sec
[info]                  ·gc.alloc.rate.norm:          416,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338,742 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 423,970 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 4841849,262 ops/s
[info]                  ·gc.alloc.rate:                   1280,216 MB/sec
[info]                  ·gc.alloc.rate.norm:              416,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,723 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     435,662 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,014 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 4987372,819 ops/s
[info]                  ·gc.alloc.rate:                   1318,717 MB/sec
[info]                  ·gc.alloc.rate.norm:              416,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,713 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     423,570 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,026 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 4987731,347 ops/s
[info]                  ·gc.alloc.rate:                   1318,801 MB/sec
[info]                  ·gc.alloc.rate.norm:              416,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,693 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     424,167 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,013 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala":
[info]   4948628,264 ±(99.9%) 235002,073 ops/s [Average]
[info]   (min, avg, max) = (4841849,262, 4948628,264, 4987731,347), stdev = 61029,292
[info]   CI (99.9%): [4713626,191, 5183630,337] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1308,471 ±(99.9%) 62,171 MB/sec [Average]
[info]   (min, avg, max) = (1280,216, 1308,471, 1318,801), stdev = 16,146
[info]   CI (99.9%): [1246,300, 1370,642] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   416,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (416,000, 416,000, 416,000), stdev = 0,001
[info]   CI (99.9%): [416,000, 416,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1340,991 ±(99.9%) 10,590 MB/sec [Average]
[info]   (min, avg, max) = (1338,083, 1340,991, 1344,693), stdev = 2,750
[info]   CI (99.9%): [1330,401, 1351,581] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   426,390 ±(99.9%) 20,008 B/op [Average]
[info]   (min, avg, max) = (423,570, 426,390, 435,662), stdev = 5,196
[info]   CI (99.9%): [406,382, 446,397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,042, 0,083), stdev = 0,029
[info]   CI (99.9%): [≈ 0, 0,155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,013 ±(99.9%) 0,036 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,013, 0,026), stdev = 0,009
[info]   CI (99.9%): [≈ 0, 0,049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 93,17% complete, ETA 00:09:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8959000,234 ops/s
[info] # Warmup Iteration   2: 9274939,936 ops/s
[info] # Warmup Iteration   3: 9540812,198 ops/s
[info] # Warmup Iteration   4: 9599673,359 ops/s
[info] # Warmup Iteration   5: 9373944,074 ops/s
[info] Iteration   1: 9521242,961 ops/s
[info]                  ·gc.alloc.rate:                   919,886 MB/sec
[info]                  ·gc.alloc.rate.norm:              152,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,703 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     111,321 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,014 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 9434411,917 ops/s
[info]                  ·gc.alloc.rate:               911,541 MB/sec
[info]                  ·gc.alloc.rate.norm:          152,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,735 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 112,346 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 9571805,366 ops/s
[info]                  ·gc.alloc.rate:                   924,768 MB/sec
[info]                  ·gc.alloc.rate.norm:              152,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,399 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     221,466 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,014 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 9570654,318 ops/s
[info]                  ·gc.alloc.rate:               924,630 MB/sec
[info]                  ·gc.alloc.rate.norm:          152,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,707 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 110,751 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 9547678,986 ops/s
[info]                  ·gc.alloc.rate:                   922,389 MB/sec
[info]                  ·gc.alloc.rate.norm:              152,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,015 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     222,139 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,003 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala":
[info]   9529158,710 ±(99.9%) 218871,403 ops/s [Average]
[info]   (min, avg, max) = (9434411,917, 9529158,710, 9571805,366), stdev = 56840,208
[info]   CI (99.9%): [9310287,307, 9748030,112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   920,643 ±(99.9%) 21,037 MB/sec [Average]
[info]   (min, avg, max) = (911,541, 920,643, 924,768), stdev = 5,463
[info]   CI (99.9%): [899,606, 941,679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   152,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (152,000, 152,000, 152,000), stdev = 0,001
[info]   CI (99.9%): [152,000, 152,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   943,312 ±(99.9%) 1421,506 MB/sec [Average]
[info]   (min, avg, max) = (673,703, 943,312, 1348,015), stdev = 369,161
[info]   CI (99.9%): [≈ 0, 2364,818] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   155,605 ±(99.9%) 232,707 B/op [Average]
[info]   (min, avg, max) = (110,751, 155,605, 222,139), stdev = 60,433
[info]   CI (99.9%): [≈ 0, 388,311] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,164 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,083), stdev = 0,043
[info]   CI (99.9%): [≈ 0, 0,202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,006 ±(99.9%) 0,027 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,006, 0,014), stdev = 0,007
[info]   CI (99.9%): [≈ 0, 0,033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 93,37% complete, ETA 00:08:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7505847,807 ops/s
[info] # Warmup Iteration   2: 7910165,082 ops/s
[info] # Warmup Iteration   3: 7590651,762 ops/s
[info] # Warmup Iteration   4: 7831351,762 ops/s
[info] # Warmup Iteration   5: 7518243,482 ops/s
[info] Iteration   1: 7671671,712 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 7750040,354 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 7680677,618 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 7755230,418 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 7770239,945 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   7725572,010 ±(99.9%) 176398,729 ops/s [Average]
[info]   (min, avg, max) = (7671671,712, 7725572,010, 7770239,945), stdev = 45810,190
[info]   CI (99.9%): [7549173,280, 7901970,739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 93,57% complete, ETA 00:08:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4356612,883 ops/s
[info] # Warmup Iteration   2: 5375386,749 ops/s
[info] # Warmup Iteration   3: 5312737,553 ops/s
[info] # Warmup Iteration   4: 5123806,011 ops/s
[info] # Warmup Iteration   5: 5160319,516 ops/s
[info] Iteration   1: 5141188,383 ops/s
[info]                  ·gc.alloc.rate:                   1646,939 MB/sec
[info]                  ·gc.alloc.rate.norm:              504,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013,444 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     616,159 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,019 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   2: 5524014,245 ops/s
[info]                  ·gc.alloc.rate:                   1769,664 MB/sec
[info]                  ·gc.alloc.rate.norm:              504,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,739 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     382,981 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,018 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 5467522,582 ops/s
[info]                  ·gc.alloc.rate:                   1751,449 MB/sec
[info]                  ·gc.alloc.rate.norm:              504,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020,780 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     581,503 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,018 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 5490010,489 ops/s
[info]                  ·gc.alloc.rate:               1758,651 MB/sec
[info]                  ·gc.alloc.rate.norm:          504,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1349,044 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 386,614 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 5478007,788 ops/s
[info]                  ·gc.alloc.rate:                   1754,872 MB/sec
[info]                  ·gc.alloc.rate.norm:              504,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2027,092 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     582,182 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,006 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson":
[info]   5420148,697 ±(99.9%) 606031,715 ops/s [Average]
[info]   (min, avg, max) = (5141188,383, 5420148,697, 5524014,245), stdev = 157384,512
[info]   CI (99.9%): [4814116,982, 6026180,413] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1736,315 ±(99.9%) 194,187 MB/sec [Average]
[info]   (min, avg, max) = (1646,939, 1736,315, 1769,664), stdev = 50,430
[info]   CI (99.9%): [1542,128, 1930,502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   504,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (504,000, 504,000, 504,000), stdev = 0,001
[info]   CI (99.9%): [504,000, 504,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1751,020 ±(99.9%) 1420,701 MB/sec [Average]
[info]   (min, avg, max) = (1344,739, 1751,020, 2027,092), stdev = 368,952
[info]   CI (99.9%): [330,319, 3171,721] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   509,888 ±(99.9%) 443,035 B/op [Average]
[info]   (min, avg, max) = (382,981, 509,888, 616,159), stdev = 115,055
[info]   CI (99.9%): [66,853, 952,923] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,042, 0,062), stdev = 0,029
[info]   CI (99.9%): [≈ 0, 0,155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,012 ±(99.9%) 0,033 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,012, 0,019), stdev = 0,009
[info]   CI (99.9%): [≈ 0, 0,046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.time":
[info]   12,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 2,400, 6,000), stdev = 2,074
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 93,78% complete, ETA 00:08:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 413648,206 ops/s
[info] # Warmup Iteration   2: 425926,159 ops/s
[info] # Warmup Iteration   3: 426723,578 ops/s
[info] # Warmup Iteration   4: 424934,914 ops/s
[info] # Warmup Iteration   5: 424638,977 ops/s
[info] Iteration   1: 426777,700 ops/s
[info]                  ·gc.alloc.rate:               449,212 MB/sec
[info]                  ·gc.alloc.rate.norm:          1656,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,785 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1886,675 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 427032,734 ops/s
[info]                  ·gc.alloc.rate:                   449,476 MB/sec
[info]                  ·gc.alloc.rate.norm:              1656,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,780 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1885,548 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,005 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,017 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 426918,043 ops/s
[info]                  ·gc.alloc.rate:      449,350 MB/sec
[info]                  ·gc.alloc.rate.norm: 1656,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 425988,007 ops/s
[info]                  ·gc.alloc.rate:                   448,384 MB/sec
[info]                  ·gc.alloc.rate.norm:              1656,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,693 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2491,822 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1,564 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,776 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 427940,927 ops/s
[info]                  ·gc.alloc.rate:                   450,431 MB/sec
[info]                  ·gc.alloc.rate.norm:              1656,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,674 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2480,423 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,230 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeUPickle":
[info]   426931,482 ±(99.9%) 2683,878 ops/s [Average]
[info]   (min, avg, max) = (425988,007, 426931,482, 427940,927), stdev = 696,995
[info]   CI (99.9%): [424247,604, 429615,360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   449,371 ±(99.9%) 2,814 MB/sec [Average]
[info]   (min, avg, max) = (448,384, 449,371, 450,431), stdev = 0,731
[info]   CI (99.9%): [446,557, 452,184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   1656,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1656,001, 1656,001, 1656,001), stdev = 0,001
[info]   CI (99.9%): [1656,001, 1656,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   474,586 ±(99.9%) 1068,644 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 474,586, 674,693), stdev = 277,523
[info]   CI (99.9%): [≈ 0, 1543,230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   1748,894 ±(99.9%) 3937,914 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1748,894, 2491,822), stdev = 1022,664
[info]   CI (99.9%): [≈ 0, 5686,808] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,326 ±(99.9%) 2,666 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,326, 1,564), stdev = 0,692
[info]   CI (99.9%): [≈ 0, 2,993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   1,205 ±(99.9%) 9,848 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,205, 5,776), stdev = 2,558
[info]   CI (99.9%): [≈ 0, 11,053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeUPickle:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeUPickle:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 93,98% complete, ETA 00:07:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 739201,934 ops/s
[info] # Warmup Iteration   2: 974087,280 ops/s
[info] # Warmup Iteration   3: 938670,784 ops/s
[info] # Warmup Iteration   4: 972264,027 ops/s
[info] # Warmup Iteration   5: 960100,007 ops/s
[info] Iteration   1: 967679,327 ops/s
[info]                  ·gc.alloc.rate:                   1397,401 MB/sec
[info]                  ·gc.alloc.rate.norm:              2272,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,011 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2188,447 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,034 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 972906,859 ops/s
[info]                  ·gc.alloc.rate:                   1404,987 MB/sec
[info]                  ·gc.alloc.rate.norm:              2272,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,680 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2177,713 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,101 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 973485,987 ops/s
[info]                  ·gc.alloc.rate:               1405,813 MB/sec
[info]                  ·gc.alloc.rate.norm:          2272,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1347,999 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2178,566 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   4: 971406,755 ops/s
[info]                  ·gc.alloc.rate:                   1402,833 MB/sec
[info]                  ·gc.alloc.rate.norm:              2272,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1349,431 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2185,511 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,135 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 970485,965 ops/s
[info]                  ·gc.alloc.rate:                   1401,465 MB/sec
[info]                  ·gc.alloc.rate.norm:              2272,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350,726 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2189,743 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,034 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce":
[info]   971192,978 ±(99.9%) 8841,105 ops/s [Average]
[info]   (min, avg, max) = (967679,327, 971192,978, 973485,987), stdev = 2296,007
[info]   CI (99.9%): [962351,874, 980034,083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   1402,500 ±(99.9%) 12,820 MB/sec [Average]
[info]   (min, avg, max) = (1397,401, 1402,500, 1405,813), stdev = 3,329
[info]   CI (99.9%): [1389,680, 1415,320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2272,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (2272,000, 2272,000, 2272,000), stdev = 0,001
[info]   CI (99.9%): [2272,000, 2272,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1348,170 ±(99.9%) 7,464 MB/sec [Average]
[info]   (min, avg, max) = (1346,011, 1348,170, 1350,726), stdev = 1,938
[info]   CI (99.9%): [1340,705, 1355,634] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2183,996 ±(99.9%) 21,448 B/op [Average]
[info]   (min, avg, max) = (2177,713, 2183,996, 2189,743), stdev = 5,570
[info]   CI (99.9%): [2162,548, 2205,445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,083), stdev = 0,034
[info]   CI (99.9%): [≈ 0, 0,169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,061 ±(99.9%) 0,213 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,061, 0,135), stdev = 0,055
[info]   CI (99.9%): [≈ 0, 0,274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 94,18% complete, ETA 00:07:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12339,419 ops/s
[info] # Warmup Iteration   2: 1994121,646 ops/s
[info] # Warmup Iteration   3: 1915838,348 ops/s
[info] # Warmup Iteration   4: 1929095,657 ops/s
[info] # Warmup Iteration   5: 1910784,774 ops/s
[info] Iteration   1: 1935639,718 ops/s
[info]                  ·gc.alloc.rate:      364,168 MB/sec
[info]                  ·gc.alloc.rate.norm: 296,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1912594,029 ops/s
[info]                  ·gc.alloc.rate:               359,842 MB/sec
[info]                  ·gc.alloc.rate.norm:          296,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,764 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 420,968 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 1921176,561 ops/s
[info]                  ·gc.alloc.rate:               361,458 MB/sec
[info]                  ·gc.alloc.rate.norm:          296,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,777 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 419,098 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   4: 1937830,361 ops/s
[info]                  ·gc.alloc.rate:      364,587 MB/sec
[info]                  ·gc.alloc.rate.norm: 296,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1928995,478 ops/s
[info]                  ·gc.alloc.rate:                   362,933 MB/sec
[info]                  ·gc.alloc.rate.norm:              296,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664,051 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     541,585 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,033 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,027 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava":
[info]   1927247,229 ±(99.9%) 40250,843 ops/s [Average]
[info]   (min, avg, max) = (1912594,029, 1927247,229, 1937830,361), stdev = 10453,016
[info]   CI (99.9%): [1886996,386, 1967498,073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   362,598 ±(99.9%) 7,562 MB/sec [Average]
[info]   (min, avg, max) = (359,842, 362,598, 364,587), stdev = 1,964
[info]   CI (99.9%): [355,036, 370,160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   296,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (296,000, 296,000, 296,000), stdev = 0,001
[info]   CI (99.9%): [296,000, 296,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   337,518 ±(99.9%) 1210,335 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 337,518, 664,051), stdev = 314,320
[info]   CI (99.9%): [≈ 0, 1547,854] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   276,330 ±(99.9%) 989,959 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 276,330, 541,585), stdev = 257,089
[info]   CI (99.9%): [≈ 0, 1266,290] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,007 ±(99.9%) 0,056 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,007, 0,033), stdev = 0,015
[info]   CI (99.9%): [≈ 0, 0,063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0,005 ±(99.9%) 0,046 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,005, 0,027), stdev = 0,012
[info]   CI (99.9%): [≈ 0, 0,051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 94,38% complete, ETA 00:07:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 692954,142 ops/s
[info] # Warmup Iteration   2: 1233197,609 ops/s
[info] # Warmup Iteration   3: 1256454,890 ops/s
[info] # Warmup Iteration   4: 1224024,130 ops/s
[info] # Warmup Iteration   5: 1128738,306 ops/s
[info] Iteration   1: 1234702,668 ops/s
[info]                  ·gc.alloc.rate:                   740,876 MB/sec
[info]                  ·gc.alloc.rate.norm:              944,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668,094 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     851,264 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,116 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,696 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 1250585,439 ops/s
[info]                  ·gc.alloc.rate:               750,390 MB/sec
[info]                  ·gc.alloc.rate.norm:          944,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668,084 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 840,458 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 1248766,331 ops/s
[info]                  ·gc.alloc.rate:                   749,314 MB/sec
[info]                  ·gc.alloc.rate.norm:              944,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668,439 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     842,112 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,026 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 1180213,166 ops/s
[info]                  ·gc.alloc.rate:                   708,321 MB/sec
[info]                  ·gc.alloc.rate.norm:              944,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336,557 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1781,269 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,055 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 1250877,128 ops/s
[info]                  ·gc.alloc.rate:                   750,529 MB/sec
[info]                  ·gc.alloc.rate.norm:              944,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668,697 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     841,073 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,026 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala":
[info]   1233028,947 ±(99.9%) 116585,538 ops/s [Average]
[info]   (min, avg, max) = (1180213,166, 1233028,947, 1250877,128), stdev = 30276,894
[info]   CI (99.9%): [1116443,408, 1349614,485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   739,886 ±(99.9%) 69,681 MB/sec [Average]
[info]   (min, avg, max) = (708,321, 739,886, 750,529), stdev = 18,096
[info]   CI (99.9%): [670,205, 809,567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   944,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (944,000, 944,000, 944,000), stdev = 0,001
[info]   CI (99.9%): [944,000, 944,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   801,974 ±(99.9%) 1150,730 MB/sec [Average]
[info]   (min, avg, max) = (668,084, 801,974, 1336,557), stdev = 298,841
[info]   CI (99.9%): [≈ 0, 1952,705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1031,235 ±(99.9%) 1614,593 B/op [Average]
[info]   (min, avg, max) = (840,458, 1031,235, 1781,269), stdev = 419,305
[info]   CI (99.9%): [≈ 0, 2645,829] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,440 ±(99.9%) 3,609 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,440, 2,116), stdev = 0,937
[info]   CI (99.9%): [≈ 0, 4,048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,561 ±(99.9%) 4,597 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,561, 2,696), stdev = 1,194
[info]   CI (99.9%): [≈ 0, 5,158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 94,58% complete, ETA 00:07:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2521725,106 ops/s
[info] # Warmup Iteration   2: 2631693,497 ops/s
[info] # Warmup Iteration   3: 2632296,224 ops/s
[info] # Warmup Iteration   4: 2637170,540 ops/s
[info] # Warmup Iteration   5: 2629749,424 ops/s
[info] Iteration   1: 2630027,310 ops/s
[info]                  ·gc.alloc.rate:               494,776 MB/sec
[info]                  ·gc.alloc.rate.norm:          296,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,741 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 306,150 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 2637209,837 ops/s
[info]                  ·gc.alloc.rate:               496,157 MB/sec
[info]                  ·gc.alloc.rate.norm:          296,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,758 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 305,308 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 2608894,282 ops/s
[info]                  ·gc.alloc.rate:                   490,847 MB/sec
[info]                  ·gc.alloc.rate.norm:              296,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          676,368 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     407,877 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1,496 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,902 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 2637703,662 ops/s
[info]                  ·gc.alloc.rate:                   496,271 MB/sec
[info]                  ·gc.alloc.rate.norm:              296,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          676,364 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     403,416 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,037 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 2641333,864 ops/s
[info]                  ·gc.alloc.rate:      496,937 MB/sec
[info]                  ·gc.alloc.rate.norm: 296,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala":
[info]   2631033,791 ±(99.9%) 50202,308 ops/s [Average]
[info]   (min, avg, max) = (2608894,282, 2631033,791, 2641333,864), stdev = 13037,380
[info]   CI (99.9%): [2580831,483, 2681236,099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   494,998 ±(99.9%) 9,434 MB/sec [Average]
[info]   (min, avg, max) = (490,847, 494,998, 496,937), stdev = 2,450
[info]   CI (99.9%): [485,563, 504,432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   296,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (296,000, 296,000, 296,000), stdev = 0,001
[info]   CI (99.9%): [296,000, 296,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   475,246 ±(99.9%) 1070,975 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 475,246, 676,368), stdev = 278,129
[info]   CI (99.9%): [≈ 0, 1546,221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   284,550 ±(99.9%) 642,045 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 284,550, 407,877), stdev = 166,737
[info]   CI (99.9%): [≈ 0, 926,595] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,312 ±(99.9%) 2,551 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,312, 1,496), stdev = 0,662
[info]   CI (99.9%): [≈ 0, 2,862] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,188 ±(99.9%) 1,538 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,188, 0,902), stdev = 0,400
[info]   CI (99.9%): [≈ 0, 1,726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 94,78% complete, ETA 00:06:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 929635,439 ops/s
[info] # Warmup Iteration   2: 1403123,743 ops/s
[info] # Warmup Iteration   3: 1400100,239 ops/s
[info] # Warmup Iteration   4: 1395706,692 ops/s
[info] # Warmup Iteration   5: 1401945,147 ops/s
[info] Iteration   1: 1398953,736 ops/s
[info]                  ·gc.alloc.rate:                   867,877 MB/sec
[info]                  ·gc.alloc.rate.norm:              976,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669,393 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     752,789 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,047 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 1402835,828 ops/s
[info]                  ·gc.alloc.rate:                   870,278 MB/sec
[info]                  ·gc.alloc.rate.norm:              976,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339,465 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1502,184 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,047 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 1401614,052 ops/s
[info]                  ·gc.alloc.rate:               869,507 MB/sec
[info]                  ·gc.alloc.rate.norm:          976,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669,699 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 751,721 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 1404574,262 ops/s
[info]                  ·gc.alloc.rate:                   871,339 MB/sec
[info]                  ·gc.alloc.rate.norm:              976,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669,672 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     750,110 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,023 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 1406644,224 ops/s
[info]                  ·gc.alloc.rate:               872,610 MB/sec
[info]                  ·gc.alloc.rate.norm:          976,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340,676 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1499,524 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson":
[info]   1402924,420 ±(99.9%) 11234,738 ops/s [Average]
[info]   (min, avg, max) = (1398953,736, 1402924,420, 1406644,224), stdev = 2917,626
[info]   CI (99.9%): [1391689,682, 1414159,159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   870,322 ±(99.9%) 6,919 MB/sec [Average]
[info]   (min, avg, max) = (867,877, 870,322, 872,610), stdev = 1,797
[info]   CI (99.9%): [863,403, 877,241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   976,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (976,000, 976,000, 976,000), stdev = 0,001
[info]   CI (99.9%): [976,000, 976,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   937,781 ±(99.9%) 1414,104 MB/sec [Average]
[info]   (min, avg, max) = (669,393, 937,781, 1340,676), stdev = 367,238
[info]   CI (99.9%): [≈ 0, 2351,885] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1051,266 ±(99.9%) 1580,375 B/op [Average]
[info]   (min, avg, max) = (750,110, 1051,266, 1502,184), stdev = 410,418
[info]   CI (99.9%): [≈ 0, 2631,641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,021 ±(99.9%) 0,080 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,042), stdev = 0,021
[info]   CI (99.9%): [≈ 0, 0,101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,023 ±(99.9%) 0,090 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,023, 0,047), stdev = 0,023
[info]   CI (99.9%): [≈ 0, 0,113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 94,98% complete, ETA 00:06:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1036698,608 ops/s
[info] # Warmup Iteration   2: 1266839,463 ops/s
[info] # Warmup Iteration   3: 1264541,604 ops/s
[info] # Warmup Iteration   4: 1270113,090 ops/s
[info] # Warmup Iteration   5: 1192128,222 ops/s
[info] Iteration   1: 1266940,357 ops/s
[info]                  ·gc.alloc.rate:                   1430,177 MB/sec
[info]                  ·gc.alloc.rate.norm:              1776,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,710 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1674,834 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,026 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 1267637,479 ops/s
[info]                  ·gc.alloc.rate:                   1430,980 MB/sec
[info]                  ·gc.alloc.rate.norm:              1776,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1349,036 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1674,299 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,026 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 1254340,363 ops/s
[info]                  ·gc.alloc.rate:                   1415,970 MB/sec
[info]                  ·gc.alloc.rate.norm:              1776,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2025,404 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2540,391 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,078 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 1267320,926 ops/s
[info]                  ·gc.alloc.rate:               1430,606 MB/sec
[info]                  ·gc.alloc.rate.norm:          1776,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1352,031 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1678,455 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 1267851,670 ops/s
[info]                  ·gc.alloc.rate:                   1431,195 MB/sec
[info]                  ·gc.alloc.rate.norm:              1776,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,716 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1678,613 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,026 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readUPickle":
[info]   1264818,159 ±(99.9%) 22593,021 ops/s [Average]
[info]   (min, avg, max) = (1254340,363, 1264818,159, 1267851,670), stdev = 5867,336
[info]   CI (99.9%): [1242225,138, 1287411,180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1427,786 ±(99.9%) 25,477 MB/sec [Average]
[info]   (min, avg, max) = (1415,970, 1427,786, 1431,195), stdev = 6,616
[info]   CI (99.9%): [1402,308, 1453,263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   1776,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1776,000, 1776,000, 1776,000), stdev = 0,001
[info]   CI (99.9%): [1776,000, 1776,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1485,579 ±(99.9%) 1162,034 MB/sec [Average]
[info]   (min, avg, max) = (1348,710, 1485,579, 2025,404), stdev = 301,776
[info]   CI (99.9%): [323,546, 2647,613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   1849,318 ±(99.9%) 1487,606 B/op [Average]
[info]   (min, avg, max) = (1674,299, 1849,318, 2540,391), stdev = 386,326
[info]   CI (99.9%): [361,713, 3336,924] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,023
[info]   CI (99.9%): [≈ 0, 0,113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,031 ±(99.9%) 0,110 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,031, 0,078), stdev = 0,029
[info]   CI (99.9%): [≈ 0, 0,141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readUPickle:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readUPickle:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 95,18% complete, ETA 00:06:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1259888,239 ops/s
[info] # Warmup Iteration   2: 1907359,702 ops/s
[info] # Warmup Iteration   3: 1907754,532 ops/s
[info] # Warmup Iteration   4: 1907940,817 ops/s
[info] # Warmup Iteration   5: 1882824,465 ops/s
[info] Iteration   1: 1892221,236 ops/s
[info]                  ·gc.alloc.rate:                   1481,742 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013,837 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1674,412 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,035 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 1912219,018 ops/s
[info]                  ·gc.alloc.rate:                   1497,416 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,112 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1105,869 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,051 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 1909800,868 ops/s
[info]                  ·gc.alloc.rate:                   1495,458 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,046 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1108,911 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,051 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 1899569,666 ops/s
[info]                  ·gc.alloc.rate:                   1487,509 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,378 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1115,939 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,034 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 1894927,449 ops/s
[info]                  ·gc.alloc.rate:                   1484,181 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2023,779 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1679,914 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,035 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce":
[info]   1901747,647 ±(99.9%) 34253,161 ops/s [Average]
[info]   (min, avg, max) = (1892221,236, 1901747,647, 1912219,018), stdev = 8895,437
[info]   CI (99.9%): [1867494,486, 1936000,809] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1489,261 ±(99.9%) 26,560 MB/sec [Average]
[info]   (min, avg, max) = (1481,742, 1489,261, 1497,416), stdev = 6,898
[info]   CI (99.9%): [1462,701, 1515,821] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   1232,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1232,000, 1232,000, 1232,000), stdev = 0,001
[info]   CI (99.9%): [1232,000, 1232,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1615,030 ±(99.9%) 1419,407 MB/sec [Average]
[info]   (min, avg, max) = (1344,112, 1615,030, 2023,779), stdev = 368,616
[info]   CI (99.9%): [195,623, 3034,437] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1337,009 ±(99.9%) 1195,796 B/op [Average]
[info]   (min, avg, max) = (1105,869, 1337,009, 1679,914), stdev = 310,544
[info]   CI (99.9%): [141,213, 2532,805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,050 ±(99.9%) 0,044 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,050, 0,062), stdev = 0,011
[info]   CI (99.9%): [0,006, 0,094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,041 ±(99.9%) 0,036 B/op [Average]
[info]   (min, avg, max) = (0,034, 0,041, 0,051), stdev = 0,009
[info]   CI (99.9%): [0,006, 0,077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 95,38% complete, ETA 00:06:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 52684,284 ops/s
[info] # Warmup Iteration   2: 2748244,279 ops/s
[info] # Warmup Iteration   3: 2737347,265 ops/s
[info] # Warmup Iteration   4: 2718414,528 ops/s
[info] # Warmup Iteration   5: 2753972,829 ops/s
[info] Iteration   1: 2760984,357 ops/s
[info]                  ·gc.alloc.rate:                   716,037 MB/sec
[info]                  ·gc.alloc.rate.norm:              408,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664,101 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     378,407 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,016 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,009 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 2765692,979 ops/s
[info]                  ·gc.alloc.rate:               717,241 MB/sec
[info]                  ·gc.alloc.rate.norm:          408,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664,072 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 377,755 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 2758796,290 ops/s
[info]                  ·gc.alloc.rate:                   715,444 MB/sec
[info]                  ·gc.alloc.rate.norm:              408,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665,358 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     379,437 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,057 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,033 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 2757155,176 ops/s
[info]                  ·gc.alloc.rate:               715,043 MB/sec
[info]                  ·gc.alloc.rate.norm:          408,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665,380 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 379,663 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   5: 2757999,388 ops/s
[info]                  ·gc.alloc.rate:               715,222 MB/sec
[info]                  ·gc.alloc.rate.norm:          408,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666,709 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 380,326 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava":
[info]   2760125,638 ±(99.9%) 13177,480 ops/s [Average]
[info]   (min, avg, max) = (2757155,176, 2760125,638, 2765692,979), stdev = 3422,150
[info]   CI (99.9%): [2746948,158, 2773303,118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   715,797 ±(99.9%) 3,427 MB/sec [Average]
[info]   (min, avg, max) = (715,043, 715,797, 717,241), stdev = 0,890
[info]   CI (99.9%): [712,371, 719,224] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   408,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (408,000, 408,000, 408,000), stdev = 0,001
[info]   CI (99.9%): [408,000, 408,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   665,124 ±(99.9%) 4,212 MB/sec [Average]
[info]   (min, avg, max) = (664,072, 665,124, 666,709), stdev = 1,094
[info]   CI (99.9%): [660,912, 669,336] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   379,118 ±(99.9%) 3,956 B/op [Average]
[info]   (min, avg, max) = (377,755, 379,118, 380,326), stdev = 1,027
[info]   CI (99.9%): [375,162, 383,074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,015 ±(99.9%) 0,096 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,015, 0,057), stdev = 0,025
[info]   CI (99.9%): [≈ 0, 0,110] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0,008 ±(99.9%) 0,054 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,008, 0,033), stdev = 0,014
[info]   CI (99.9%): [≈ 0, 0,063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 95,58% complete, ETA 00:05:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1459519,926 ops/s
[info] # Warmup Iteration   2: 2604615,154 ops/s
[info] # Warmup Iteration   3: 2608364,441 ops/s
[info] # Warmup Iteration   4: 2653704,575 ops/s
[info] # Warmup Iteration   5: 2671132,810 ops/s
[info] Iteration   1: 2643383,815 ops/s
[info]                  ·gc.alloc.rate:                   1249,997 MB/sec
[info]                  ·gc.alloc.rate.norm:              744,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337,030 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     795,802 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,025 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 2671305,477 ops/s
[info]                  ·gc.alloc.rate:                   1263,243 MB/sec
[info]                  ·gc.alloc.rate.norm:              744,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338,031 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     788,047 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,012 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 2668331,357 ops/s
[info]                  ·gc.alloc.rate:                   1261,848 MB/sec
[info]                  ·gc.alloc.rate.norm:              744,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339,382 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     789,716 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,025 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 2669860,625 ops/s
[info]                  ·gc.alloc.rate:               1262,554 MB/sec
[info]                  ·gc.alloc.rate.norm:          744,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341,392 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 790,458 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 2680862,411 ops/s
[info]                  ·gc.alloc.rate:                   1267,745 MB/sec
[info]                  ·gc.alloc.rate.norm:              744,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,396 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     788,398 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,024 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala":
[info]   2666748,737 ±(99.9%) 53704,674 ops/s [Average]
[info]   (min, avg, max) = (2643383,815, 2666748,737, 2680862,411), stdev = 13946,933
[info]   CI (99.9%): [2613044,064, 2720453,411] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1261,077 ±(99.9%) 25,447 MB/sec [Average]
[info]   (min, avg, max) = (1249,997, 1261,077, 1267,745), stdev = 6,608
[info]   CI (99.9%): [1235,631, 1286,524] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   744,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (744,000, 744,000, 744,000), stdev = 0,001
[info]   CI (99.9%): [744,000, 744,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1339,846 ±(99.9%) 9,899 MB/sec [Average]
[info]   (min, avg, max) = (1337,030, 1339,846, 1343,396), stdev = 2,571
[info]   CI (99.9%): [1329,947, 1349,745] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   790,484 ±(99.9%) 12,049 B/op [Average]
[info]   (min, avg, max) = (788,047, 790,484, 795,802), stdev = 3,129
[info]   CI (99.9%): [778,435, 802,533] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,042), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,017 ±(99.9%) 0,042 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,025), stdev = 0,011
[info]   CI (99.9%): [≈ 0, 0,060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 95,78% complete, ETA 00:05:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3090081,451 ops/s
[info] # Warmup Iteration   2: 3870902,401 ops/s
[info] # Warmup Iteration   3: 3888486,400 ops/s
[info] # Warmup Iteration   4: 3880001,818 ops/s
[info] # Warmup Iteration   5: 3893212,006 ops/s
[info] Iteration   1: 3889574,594 ops/s
[info]                  ·gc.alloc.rate:               1008,652 MB/sec
[info]                  ·gc.alloc.rate.norm:          408,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1347,331 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 544,996 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 3911509,362 ops/s
[info]                  ·gc.alloc.rate:               1014,381 MB/sec
[info]                  ·gc.alloc.rate.norm:          408,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,691 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 270,969 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 3900060,678 ops/s
[info]                  ·gc.alloc.rate:                   1011,443 MB/sec
[info]                  ·gc.alloc.rate.norm:              408,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,426 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     543,531 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,034 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 3722693,407 ops/s
[info]                  ·gc.alloc.rate:               965,542 MB/sec
[info]                  ·gc.alloc.rate.norm:          408,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,842 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 284,739 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 3917142,032 ops/s
[info]                  ·gc.alloc.rate:                   1015,910 MB/sec
[info]                  ·gc.alloc.rate.norm:              408,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,895 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     541,731 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,017 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala":
[info]   3868196,014 ±(99.9%) 315865,295 ops/s [Average]
[info]   (min, avg, max) = (3722693,407, 3868196,014, 3917142,032), stdev = 82029,214
[info]   CI (99.9%): [3552330,719, 4184061,310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1003,186 ±(99.9%) 81,737 MB/sec [Average]
[info]   (min, avg, max) = (965,542, 1003,186, 1015,910), stdev = 21,227
[info]   CI (99.9%): [921,448, 1084,923] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   408,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (408,000, 408,000, 408,000), stdev = 0,001
[info]   CI (99.9%): [408,000, 408,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1078,237 ±(99.9%) 1421,774 MB/sec [Average]
[info]   (min, avg, max) = (673,691, 1078,237, 1348,895), stdev = 369,230
[info]   CI (99.9%): [≈ 0, 2500,011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   437,193 ±(99.9%) 560,431 B/op [Average]
[info]   (min, avg, max) = (270,969, 437,193, 544,996), stdev = 145,542
[info]   CI (99.9%): [≈ 0, 997,624] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,083), stdev = 0,037
[info]   CI (99.9%): [≈ 0, 0,168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,010 ±(99.9%) 0,058 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,010, 0,034), stdev = 0,015
[info]   CI (99.9%): [≈ 0, 0,068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 95,98% complete, ETA 00:05:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3229217,702 ops/s
[info] # Warmup Iteration   2: 4003268,467 ops/s
[info] # Warmup Iteration   3: 4031016,438 ops/s
[info] # Warmup Iteration   4: 4020611,223 ops/s
[info] # Warmup Iteration   5: 3865278,153 ops/s
[info] Iteration   1: 4033635,509 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 4033795,691 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 4035272,060 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 4029093,252 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 4030242,986 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   4032407,900 ±(99.9%) 10061,562 ops/s [Average]
[info]   (min, avg, max) = (4029093,252, 4032407,900, 4035272,060), stdev = 2612,956
[info]   CI (99.9%): [4022346,338, 4042469,461] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 96,18% complete, ETA 00:05:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2116369,614 ops/s
[info] # Warmup Iteration   2: 2640408,062 ops/s
[info] # Warmup Iteration   3: 2644448,815 ops/s
[info] # Warmup Iteration   4: 2605615,217 ops/s
[info] # Warmup Iteration   5: 2633926,737 ops/s
[info] Iteration   1: 2618372,370 ops/s
[info]                  ·gc.alloc.rate:                   1264,861 MB/sec
[info]                  ·gc.alloc.rate.norm:              760,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,084 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     807,602 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,038 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 2603913,574 ops/s
[info]                  ·gc.alloc.rate:                   1257,825 MB/sec
[info]                  ·gc.alloc.rate.norm:              760,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,732 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     812,511 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,038 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 2639793,671 ops/s
[info]                  ·gc.alloc.rate:                   1275,143 MB/sec
[info]                  ·gc.alloc.rate.norm:              760,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,052 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     802,263 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,037 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 2602112,721 ops/s
[info]                  ·gc.alloc.rate:                   1256,984 MB/sec
[info]                  ·gc.alloc.rate.norm:              760,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,402 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     814,669 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,025 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 2636144,946 ops/s
[info]                  ·gc.alloc.rate:               1273,432 MB/sec
[info]                  ·gc.alloc.rate.norm:          760,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1348,711 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 804,928 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson":
[info]   2620067,457 ±(99.9%) 67627,958 ops/s [Average]
[info]   (min, avg, max) = (2602112,721, 2620067,457, 2639793,671), stdev = 17562,766
[info]   CI (99.9%): [2552439,498, 2687695,415] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1265,649 ±(99.9%) 32,653 MB/sec [Average]
[info]   (min, avg, max) = (1256,984, 1265,649, 1275,143), stdev = 8,480
[info]   CI (99.9%): [1232,996, 1298,302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   760,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (760,000, 760,000, 760,000), stdev = 0,001
[info]   CI (99.9%): [760,000, 760,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1346,196 ±(99.9%) 7,308 MB/sec [Average]
[info]   (min, avg, max) = (1344,084, 1346,196, 1348,711), stdev = 1,898
[info]   CI (99.9%): [1338,889, 1353,504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   808,395 ±(99.9%) 19,875 B/op [Average]
[info]   (min, avg, max) = (802,263, 808,395, 814,669), stdev = 5,161
[info]   CI (99.9%): [788,520, 828,269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,046 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,046, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,028 ±(99.9%) 0,063 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,028, 0,038), stdev = 0,016
[info]   CI (99.9%): [≈ 0, 0,090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce
[info] # Run progress: 96,39% complete, ETA 00:04:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6865,434 ops/s
[info] # Warmup Iteration   2: 10920,676 ops/s
[info] # Warmup Iteration   3: 11242,388 ops/s
[info] # Warmup Iteration   4: 12001,265 ops/s
[info] # Warmup Iteration   5: 12001,840 ops/s
[info] Iteration   1: 11930,607 ops/s
[info]                  ·gc.alloc.rate:                   1681,378 MB/sec
[info]                  ·gc.alloc.rate.norm:              221722,939 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012,722 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     265417,230 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10,984 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 12060,635 ops/s
[info]                  ·gc.alloc.rate:                   1699,827 MB/sec
[info]                  ·gc.alloc.rate.norm:              221736,036 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,617 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     175269,687 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,019 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,527 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 12085,794 ops/s
[info]                  ·gc.alloc.rate:                   1703,407 MB/sec
[info]                  ·gc.alloc.rate.norm:              221736,036 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018,990 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     262816,220 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8,132 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 11894,097 ops/s
[info]                  ·gc.alloc.rate:                   1676,334 MB/sec
[info]                  ·gc.alloc.rate.norm:              221736,036 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,978 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     178302,870 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16,526 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 12036,290 ops/s
[info]                  ·gc.alloc.rate:                   1696,322 MB/sec
[info]                  ·gc.alloc.rate.norm:              221734,064 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2025,624 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     264778,722 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13,609 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce":
[info]   12001,485 ±(99.9%) 324,312 ops/s [Average]
[info]   (min, avg, max) = (11894,097, 12001,485, 12085,794), stdev = 84,223
[info]   CI (99.9%): [11677,172, 12325,797] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.alloc.rate":
[info]   1691,454 ±(99.9%) 45,837 MB/sec [Average]
[info]   (min, avg, max) = (1676,334, 1691,454, 1703,407), stdev = 11,904
[info]   CI (99.9%): [1645,616, 1737,291] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   221733,022 ±(99.9%) 21,952 B/op [Average]
[info]   (min, avg, max) = (221722,939, 221733,022, 221736,036), stdev = 5,701
[info]   CI (99.9%): [221711,070, 221754,974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1749,786 ±(99.9%) 1420,199 MB/sec [Average]
[info]   (min, avg, max) = (1343,617, 1749,786, 2025,624), stdev = 368,821
[info]   CI (99.9%): [329,587, 3169,985] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   229316,946 ±(99.9%) 184735,737 B/op [Average]
[info]   (min, avg, max) = (175269,687, 229316,946, 265417,230), stdev = 47975,284
[info]   CI (99.9%): [44581,209, 414052,683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,079 ±(99.9%) 0,156 MB/sec [Average]
[info]   (min, avg, max) = (0,019, 0,079, 0,125), stdev = 0,041
[info]   CI (99.9%): [≈ 0, 0,235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   10,355 ±(99.9%) 20,673 B/op [Average]
[info]   (min, avg, max) = (2,527, 10,355, 16,526), stdev = 5,369
[info]   CI (99.9%): [≈ 0, 31,028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.time":
[info]   9,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 3,000), stdev = 0,837
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala
[info] # Run progress: 96,59% complete, ETA 00:04:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7242,619 ops/s
[info] # Warmup Iteration   2: 14741,760 ops/s
[info] # Warmup Iteration   3: 14804,349 ops/s
[info] # Warmup Iteration   4: 14999,775 ops/s
[info] # Warmup Iteration   5: 14772,577 ops/s
[info] Iteration   1: 15065,370 ops/s
[info]                  ·gc.alloc.rate:      238,247 MB/sec
[info]                  ·gc.alloc.rate.norm: 24880,029 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 15099,786 ops/s
[info]                  ·gc.alloc.rate:               238,789 MB/sec
[info]                  ·gc.alloc.rate.norm:          24880,031 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,755 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 53320,954 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   3: 15081,369 ops/s
[info]                  ·gc.alloc.rate:      238,487 MB/sec
[info]                  ·gc.alloc.rate.norm: 24879,246 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 15066,839 ops/s
[info]                  ·gc.alloc.rate:                   238,105 MB/sec
[info]                  ·gc.alloc.rate.norm:              24864,029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,734 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     53437,715 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,172 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 15129,283 ops/s
[info]                  ·gc.alloc.rate:      239,084 MB/sec
[info]                  ·gc.alloc.rate.norm: 24864,029 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala":
[info]   15088,529 ±(99.9%) 102,706 ops/s [Average]
[info]   (min, avg, max) = (15065,370, 15088,529, 15129,283), stdev = 26,672
[info]   CI (99.9%): [14985,823, 15191,236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   238,542 ±(99.9%) 1,536 MB/sec [Average]
[info]   (min, avg, max) = (238,105, 238,542, 239,084), stdev = 0,399
[info]   CI (99.9%): [237,006, 240,079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   24873,472 ±(99.9%) 33,219 B/op [Average]
[info]   (min, avg, max) = (24864,029, 24873,472, 24880,031), stdev = 8,627
[info]   CI (99.9%): [24840,253, 24906,692] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   204,698 ±(99.9%) 1079,312 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204,698, 511,755), stdev = 280,294
[info]   CI (99.9%): [≈ 0, 1284,009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   21351,734 ±(99.9%) 112581,642 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 21351,734, 53437,715), stdev = 29237,095
[info]   CI (99.9%): [≈ 0, 133933,375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,004 ±(99.9%) 0,036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,004, 0,021), stdev = 0,009
[info]   CI (99.9%): [≈ 0, 0,040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,434 ±(99.9%) 3,741 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,434, 2,172), stdev = 0,971
[info]   CI (99.9%): [≈ 0, 4,175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.count":
[info]   2,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 3,000), stdev = 1,414
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala
[info] # Run progress: 96,79% complete, ETA 00:04:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 23702,440 ops/s
[info] # Warmup Iteration   2: 39263,726 ops/s
[info] # Warmup Iteration   3: 41167,875 ops/s
[info] # Warmup Iteration   4: 41201,206 ops/s
[info] # Warmup Iteration   5: 41153,895 ops/s
[info] Iteration   1: 41195,813 ops/s
[info]                  ·gc.alloc.rate:      440,323 MB/sec
[info]                  ·gc.alloc.rate.norm: 16816,011 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 41177,278 ops/s
[info]                  ·gc.alloc.rate:               440,129 MB/sec
[info]                  ·gc.alloc.rate.norm:          16816,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,750 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19552,441 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 40986,133 ops/s
[info]                  ·gc.alloc.rate:                   438,083 MB/sec
[info]                  ·gc.alloc.rate.norm:              16816,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,757 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19644,014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,599 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 41053,321 ops/s
[info]                  ·gc.alloc.rate:                   438,801 MB/sec
[info]                  ·gc.alloc.rate.norm:              16816,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,367 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25805,169 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1,667 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63,872 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 41303,112 ops/s
[info]                  ·gc.alloc.rate:      441,462 MB/sec
[info]                  ·gc.alloc.rate.norm: 16816,010 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala":
[info]   41143,131 ±(99.9%) 480,365 ops/s [Average]
[info]   (min, avg, max) = (40986,133, 41143,131, 41303,112), stdev = 124,749
[info]   CI (99.9%): [40662,766, 41623,497] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   439,760 ±(99.9%) 5,123 MB/sec [Average]
[info]   (min, avg, max) = (438,083, 439,760, 441,462), stdev = 1,330
[info]   CI (99.9%): [434,637, 444,882] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   16816,011 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (16816,010, 16816,011, 16816,011), stdev = 0,001
[info]   CI (99.9%): [16816,009, 16816,012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   339,375 ±(99.9%) 1219,703 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 339,375, 673,367), stdev = 316,753
[info]   CI (99.9%): [≈ 0, 1559,078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   13000,325 ±(99.9%) 46728,233 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 13000,325, 25805,169), stdev = 12135,174
[info]   CI (99.9%): [≈ 0, 59728,558] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,342 ±(99.9%) 2,853 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,342, 1,667), stdev = 0,741
[info]   CI (99.9%): [≈ 0, 3,195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   13,094 ±(99.9%) 109,336 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 13,094, 63,872), stdev = 28,394
[info]   CI (99.9%): [≈ 0, 122,430] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson
[info] # Run progress: 96,99% complete, ETA 00:03:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1389,466 ops/s
[info] # Warmup Iteration   2: 3380,184 ops/s
[info] # Warmup Iteration   3: 3442,245 ops/s
[info] # Warmup Iteration   4: 3821,658 ops/s
[info] # Warmup Iteration   5: 3846,131 ops/s
[info] Iteration   1: 3830,535 ops/s
[info]                  ·gc.alloc.rate:                   1208,357 MB/sec
[info]                  ·gc.alloc.rate.norm:              496232,113 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336,993 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     549058,589 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17,107 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 3814,397 ops/s
[info]                  ·gc.alloc.rate:               1203,283 MB/sec
[info]                  ·gc.alloc.rate.norm:          496232,113 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340,295 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 552735,606 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     8,000 ms
[info] Iteration   3: 3775,379 ops/s
[info]                  ·gc.alloc.rate:                   1190,971 MB/sec
[info]                  ·gc.alloc.rate.norm:              496232,123 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,949 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     559555,254 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17,356 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         9,000 ms
[info] Iteration   4: 3839,941 ops/s
[info]                  ·gc.alloc.rate:               1211,377 MB/sec
[info]                  ·gc.alloc.rate.norm:          496232,112 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,088 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 275316,036 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 3853,276 ops/s
[info]                  ·gc.alloc.rate:                   1215,524 MB/sec
[info]                  ·gc.alloc.rate.norm:              496232,112 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,893 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     549863,024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34,009 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson":
[info]   3822,706 ±(99.9%) 115,547 ops/s [Average]
[info]   (min, avg, max) = (3775,379, 3822,706, 3853,276), stdev = 30,007
[info]   CI (99.9%): [3707,158, 3938,253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1205,902 ±(99.9%) 36,447 MB/sec [Average]
[info]   (min, avg, max) = (1190,971, 1205,902, 1215,524), stdev = 9,465
[info]   CI (99.9%): [1169,455, 1242,350] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   496232,115 ±(99.9%) 0,018 B/op [Average]
[info]   (min, avg, max) = (496232,112, 496232,115, 496232,123), stdev = 0,005
[info]   CI (99.9%): [496232,097, 496232,132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1207,844 ±(99.9%) 1153,339 MB/sec [Average]
[info]   (min, avg, max) = (672,088, 1207,844, 1346,893), stdev = 299,519
[info]   CI (99.9%): [54,504, 2361,183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   497305,702 ±(99.9%) 478114,185 B/op [Average]
[info]   (min, avg, max) = (275316,036, 497305,702, 559555,254), stdev = 124164,735
[info]   CI (99.9%): [19191,517, 975419,887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,134 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,083), stdev = 0,035
[info]   CI (99.9%): [≈ 0, 0,168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   13,694 ±(99.9%) 54,891 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 13,694, 34,009), stdev = 14,255
[info]   CI (99.9%): [≈ 0, 68,585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.time":
[info]   23,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 4,600, 9,000), stdev = 3,647
[info]   CI (99.9%): [23,000, 23,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala
[info] # Run progress: 97,19% complete, ETA 00:03:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 32834,295 ops/s
[info] # Warmup Iteration   2: 65708,468 ops/s
[info] # Warmup Iteration   3: 64415,221 ops/s
[info] # Warmup Iteration   4: 66099,124 ops/s
[info] # Warmup Iteration   5: 66375,133 ops/s
[info] Iteration   1: 66227,766 ops/s
[info]                  ·gc.alloc.rate:                   846,146 MB/sec
[info]                  ·gc.alloc.rate.norm:              20099,989 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663,746 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15767,108 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,484 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 66073,428 ops/s
[info]                  ·gc.alloc.rate:               844,176 MB/sec
[info]                  ·gc.alloc.rate.norm:          20100,023 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663,742 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15803,851 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 65652,111 ops/s
[info]                  ·gc.alloc.rate:                   838,778 MB/sec
[info]                  ·gc.alloc.rate.norm:              20100,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1327,787 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31818,340 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,996 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 65801,654 ops/s
[info]                  ·gc.alloc.rate:               840,673 MB/sec
[info]                  ·gc.alloc.rate.norm:          20099,937 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664,025 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15876,411 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 65798,126 ops/s
[info]                  ·gc.alloc.rate:                   840,614 MB/sec
[info]                  ·gc.alloc.rate.norm:              20100,020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665,037 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15901,759 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,498 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala":
[info]   65910,617 ±(99.9%) 899,856 ops/s [Average]
[info]   (min, avg, max) = (65652,111, 65910,617, 66227,766), stdev = 233,690
[info]   CI (99.9%): [65010,761, 66810,473] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   842,077 ±(99.9%) 11,545 MB/sec [Average]
[info]   (min, avg, max) = (838,778, 842,077, 846,146), stdev = 2,998
[info]   CI (99.9%): [830,532, 853,623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   20099,996 ±(99.9%) 0,138 B/op [Average]
[info]   (min, avg, max) = (20099,937, 20099,996, 20100,023), stdev = 0,036
[info]   CI (99.9%): [20099,858, 20100,133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   796,867 ±(99.9%) 1142,846 MB/sec [Average]
[info]   (min, avg, max) = (663,742, 796,867, 1327,787), stdev = 296,794
[info]   CI (99.9%): [≈ 0, 1939,713] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   19033,494 ±(99.9%) 27521,136 B/op [Average]
[info]   (min, avg, max) = (15767,108, 19033,494, 31818,340), stdev = 7147,152
[info]   CI (99.9%): [≈ 0, 46554,630] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,146 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,083), stdev = 0,038
[info]   CI (99.9%): [≈ 0, 0,179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,796 ±(99.9%) 3,482 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,796, 1,996), stdev = 0,904
[info]   CI (99.9%): [≈ 0, 4,277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 4,000), stdev = 1,342
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala
[info] # Run progress: 97,39% complete, ETA 00:03:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 71924,039 ops/s
[info] # Warmup Iteration   2: 86772,674 ops/s
[info] # Warmup Iteration   3: 86007,777 ops/s
[info] # Warmup Iteration   4: 85779,154 ops/s
[info] # Warmup Iteration   5: 86556,174 ops/s
[info] Iteration   1: 86844,153 ops/s
[info]                  ·gc.alloc.rate:               569,665 MB/sec
[info]                  ·gc.alloc.rate.norm:          10320,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,748 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9270,781 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 87116,642 ops/s
[info]                  ·gc.alloc.rate:                   571,437 MB/sec
[info]                  ·gc.alloc.rate.norm:              10320,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,003 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12154,264 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1,687 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30,475 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 87015,823 ops/s
[info]                  ·gc.alloc.rate:                   570,793 MB/sec
[info]                  ·gc.alloc.rate.norm:              10320,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,025 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12168,368 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,882 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 86898,832 ops/s
[info]                  ·gc.alloc.rate:               570,021 MB/sec
[info]                  ·gc.alloc.rate.norm:          10320,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,050 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12185,309 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 87068,228 ops/s
[info]                  ·gc.alloc.rate:      571,137 MB/sec
[info]                  ·gc.alloc.rate.norm: 10320,005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala":
[info]   86988,736 ±(99.9%) 440,723 ops/s [Average]
[info]   (min, avg, max) = (86844,153, 86988,736, 87116,642), stdev = 114,454
[info]   CI (99.9%): [86548,013, 87429,459] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   570,611 ±(99.9%) 2,879 MB/sec [Average]
[info]   (min, avg, max) = (569,665, 570,611, 571,437), stdev = 0,748
[info]   CI (99.9%): [567,732, 573,489] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   10320,005 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (10320,005, 10320,005, 10320,005), stdev = 0,001
[info]   CI (99.9%): [10320,004, 10320,006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   506,165 ±(99.9%) 1122,253 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506,165, 673,050), stdev = 291,446
[info]   CI (99.9%): [≈ 0, 1628,418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   9155,744 ±(99.9%) 20292,398 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9155,744, 12185,309), stdev = 5269,871
[info]   CI (99.9%): [≈ 0, 29448,142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,358 ±(99.9%) 2,866 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,358, 1,687), stdev = 0,744
[info]   CI (99.9%): [≈ 0, 3,225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   6,471 ±(99.9%) 51,764 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6,471, 30,475), stdev = 13,443
[info]   CI (99.9%): [≈ 0, 58,236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 97,59% complete, ETA 00:03:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 80184,396 ops/s
[info] # Warmup Iteration   2: 95727,906 ops/s
[info] # Warmup Iteration   3: 95030,118 ops/s
[info] # Warmup Iteration   4: 95044,842 ops/s
[info] # Warmup Iteration   5: 95242,582 ops/s
[info] Iteration   1: 95232,126 ops/s
[info]                  ·gc.alloc.rate:      11,623 MB/sec
[info]                  ·gc.alloc.rate.norm: 192,005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 95173,318 ops/s
[info]                  ·gc.alloc.rate:      11,615 MB/sec
[info]                  ·gc.alloc.rate.norm: 192,005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 95126,612 ops/s
[info]                  ·gc.alloc.rate:      11,610 MB/sec
[info]                  ·gc.alloc.rate.norm: 192,005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 95384,457 ops/s
[info]                  ·gc.alloc.rate:      11,641 MB/sec
[info]                  ·gc.alloc.rate.norm: 192,005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 95184,400 ops/s
[info]                  ·gc.alloc.rate:      11,617 MB/sec
[info]                  ·gc.alloc.rate.norm: 192,005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc":
[info]   95220,182 ±(99.9%) 381,975 ops/s [Average]
[info]   (min, avg, max) = (95126,612, 95220,182, 95384,457), stdev = 99,198
[info]   CI (99.9%): [94838,207, 95602,158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   11,621 ±(99.9%) 0,047 MB/sec [Average]
[info]   (min, avg, max) = (11,610, 11,621, 11,641), stdev = 0,012
[info]   CI (99.9%): [11,574, 11,668] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   192,005 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (192,005, 192,005, 192,005), stdev = 0,001
[info]   CI (99.9%): [192,005, 192,005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 97,79% complete, ETA 00:02:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 331060,658 ops/s
[info] # Warmup Iteration   2: 372460,024 ops/s
[info] # Warmup Iteration   3: 379553,629 ops/s
[info] # Warmup Iteration   4: 364383,756 ops/s
[info] # Warmup Iteration   5: 370743,287 ops/s
[info] Iteration   1: 378612,290 ops/s
[info]                  ·gc.alloc.rate:                   2208,196 MB/sec
[info]                  ·gc.alloc.rate.norm:              9176,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2024,377 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8412,155 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,260 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 376942,993 ops/s
[info]                  ·gc.alloc.rate:                   2198,480 MB/sec
[info]                  ·gc.alloc.rate.norm:              9176,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2027,686 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8463,144 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,261 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 375958,666 ops/s
[info]                  ·gc.alloc.rate:                   2192,765 MB/sec
[info]                  ·gc.alloc.rate.norm:              9176,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2708,175 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11332,821 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,261 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 379175,995 ops/s
[info]                  ·gc.alloc.rate:                   2211,587 MB/sec
[info]                  ·gc.alloc.rate.norm:              9176,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2034,580 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8441,586 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,259 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 377138,328 ops/s
[info]                  ·gc.alloc.rate:                   2199,682 MB/sec
[info]                  ·gc.alloc.rate.norm:              9176,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2036,577 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8495,604 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,261 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce":
[info]   377565,654 ±(99.9%) 5035,874 ops/s [Average]
[info]   (min, avg, max) = (375958,666, 377565,654, 379175,995), stdev = 1307,800
[info]   CI (99.9%): [372529,780, 382601,528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   2202,142 ±(99.9%) 29,405 MB/sec [Average]
[info]   (min, avg, max) = (2192,765, 2202,142, 2211,587), stdev = 7,636
[info]   CI (99.9%): [2172,737, 2231,547] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   9176,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (9176,001, 9176,001, 9176,001), stdev = 0,001
[info]   CI (99.9%): [9176,001, 9176,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2166,279 ±(99.9%) 1166,628 MB/sec [Average]
[info]   (min, avg, max) = (2024,377, 2166,279, 2708,175), stdev = 302,970
[info]   CI (99.9%): [999,651, 3332,907] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   9029,062 ±(99.9%) 4960,405 B/op [Average]
[info]   (min, avg, max) = (8412,155, 9029,062, 11332,821), stdev = 1288,201
[info]   CI (99.9%): [4068,657, 13989,467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,062 ±(99.9%) 0,001 MB/sec [Average]
[info]   (min, avg, max) = (0,062, 0,062, 0,062), stdev = 0,001
[info]   CI (99.9%): [0,062, 0,062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,260 ±(99.9%) 0,003 B/op [Average]
[info]   (min, avg, max) = (0,259, 0,260, 0,261), stdev = 0,001
[info]   CI (99.9%): [0,257, 0,264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.count":
[info]   16,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,200, 4,000), stdev = 0,447
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.time":
[info]   10,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 97,99% complete, ETA 00:02:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 329971,269 ops/s
[info] # Warmup Iteration   2: 520166,041 ops/s
[info] # Warmup Iteration   3: 499923,871 ops/s
[info] # Warmup Iteration   4: 528488,570 ops/s
[info] # Warmup Iteration   5: 530191,552 ops/s
[info] Iteration   1: 519057,651 ops/s
[info]                  ·gc.alloc.rate:               633,474 MB/sec
[info]                  ·gc.alloc.rate.norm:          1920,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,817 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1551,270 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   2: 531704,157 ops/s
[info]                  ·gc.alloc.rate:                   648,893 MB/sec
[info]                  ·gc.alloc.rate.norm:              1920,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667,078 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1973,810 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,303 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6,816 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 517572,109 ops/s
[info]                  ·gc.alloc.rate:                   631,660 MB/sec
[info]                  ·gc.alloc.rate.norm:              1920,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667,094 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2027,708 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,253 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 514714,989 ops/s
[info]                  ·gc.alloc.rate:               628,170 MB/sec
[info]                  ·gc.alloc.rate.norm:          1920,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667,091 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2038,965 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 525198,960 ops/s
[info]                  ·gc.alloc.rate:                   640,936 MB/sec
[info]                  ·gc.alloc.rate.norm:              1920,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667,037 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1998,189 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,125 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala":
[info]   521649,573 ±(99.9%) 26196,058 ops/s [Average]
[info]   (min, avg, max) = (514714,989, 521649,573, 531704,157), stdev = 6803,033
[info]   CI (99.9%): [495453,515, 547845,631] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   636,627 ±(99.9%) 31,937 MB/sec [Average]
[info]   (min, avg, max) = (628,170, 636,627, 648,893), stdev = 8,294
[info]   CI (99.9%): [604,690, 668,563] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1920,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1920,001, 1920,001, 1920,001), stdev = 0,001
[info]   CI (99.9%): [1920,001, 1920,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   636,024 ±(99.9%) 267,363 MB/sec [Average]
[info]   (min, avg, max) = (511,817, 636,024, 667,094), stdev = 69,433
[info]   CI (99.9%): [368,660, 903,387] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1917,988 ±(99.9%) 795,472 B/op [Average]
[info]   (min, avg, max) = (1551,270, 1917,988, 2038,965), stdev = 206,582
[info]   CI (99.9%): [1122,516, 2713,460] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,486 ±(99.9%) 3,915 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,486, 2,303), stdev = 1,017
[info]   CI (99.9%): [≈ 0, 4,401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1,439 ±(99.9%) 11,581 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,439, 6,816), stdev = 3,008
[info]   CI (99.9%): [≈ 0, 13,020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,400, 3,000), stdev = 1,140
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 98,19% complete, ETA 00:02:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1266675,957 ops/s
[info] # Warmup Iteration   2: 1342287,437 ops/s
[info] # Warmup Iteration   3: 1347332,102 ops/s
[info] # Warmup Iteration   4: 1343983,085 ops/s
[info] # Warmup Iteration   5: 1351025,460 ops/s
[info] Iteration   1: 1351661,528 ops/s
[info]                  ·gc.alloc.rate:                   707,891 MB/sec
[info]                  ·gc.alloc.rate.norm:              824,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,676 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     784,173 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1,585 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,845 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 1358599,955 ops/s
[info]                  ·gc.alloc.rate:                   711,533 MB/sec
[info]                  ·gc.alloc.rate.norm:              824,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,682 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     780,167 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,024 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 1360245,485 ops/s
[info]                  ·gc.alloc.rate:               712,396 MB/sec
[info]                  ·gc.alloc.rate.norm:          824,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,684 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 779,224 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 1357643,068 ops/s
[info]                  ·gc.alloc.rate:                   711,053 MB/sec
[info]                  ·gc.alloc.rate.norm:              824,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,671 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     780,681 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,048 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 1351039,873 ops/s
[info]                  ·gc.alloc.rate:                   707,584 MB/sec
[info]                  ·gc.alloc.rate.norm:              824,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,351 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1569,025 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,073 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala":
[info]   1355837,982 ±(99.9%) 16197,615 ops/s [Average]
[info]   (min, avg, max) = (1351039,873, 1355837,982, 1360245,485), stdev = 4206,469
[info]   CI (99.9%): [1339640,367, 1372035,596] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   710,091 ±(99.9%) 8,489 MB/sec [Average]
[info]   (min, avg, max) = (707,584, 710,091, 712,396), stdev = 2,205
[info]   CI (99.9%): [701,602, 718,581] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   824,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (824,000, 824,000, 824,000), stdev = 0,001
[info]   CI (99.9%): [824,000, 824,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   808,413 ±(99.9%) 1160,104 MB/sec [Average]
[info]   (min, avg, max) = (673,671, 808,413, 1347,351), stdev = 301,275
[info]   CI (99.9%): [≈ 0, 1968,517] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   938,654 ±(99.9%) 1356,941 B/op [Average]
[info]   (min, avg, max) = (779,224, 938,654, 1569,025), stdev = 352,393
[info]   CI (99.9%): [≈ 0, 2295,595] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,342 ±(99.9%) 2,677 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,342, 1,585), stdev = 0,695
[info]   CI (99.9%): [≈ 0, 3,019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,398 ±(99.9%) 3,116 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,398, 1,845), stdev = 0,809
[info]   CI (99.9%): [≈ 0, 3,514] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 98,39% complete, ETA 00:02:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 90373,010 ops/s
[info] # Warmup Iteration   2: 126150,652 ops/s
[info] # Warmup Iteration   3: 126264,054 ops/s
[info] # Warmup Iteration   4: 125908,361 ops/s
[info] # Warmup Iteration   5: 126220,039 ops/s
[info] Iteration   1: 126205,990 ops/s
[info]                  ·gc.alloc.rate:                   4388,307 MB/sec
[info]                  ·gc.alloc.rate.norm:              54704,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4072,346 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50765,284 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,038 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 124880,756 ops/s
[info]                  ·gc.alloc.rate:                   4342,156 MB/sec
[info]                  ·gc.alloc.rate.norm:              54704,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4760,715 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     59977,157 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,049 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   3: 126298,221 ops/s
[info]                  ·gc.alloc.rate:                   4391,260 MB/sec
[info]                  ·gc.alloc.rate.norm:              54704,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4084,748 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50885,629 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,778 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   4: 125990,195 ops/s
[info]                  ·gc.alloc.rate:                   4380,726 MB/sec
[info]                  ·gc.alloc.rate.norm:              54704,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4768,425 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     59545,370 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,780 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 126352,089 ops/s
[info]                  ·gc.alloc.rate:                   4393,029 MB/sec
[info]                  ·gc.alloc.rate.norm:              54704,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4089,654 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50926,235 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,259 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson":
[info]   125945,450 ±(99.9%) 2352,724 ops/s [Average]
[info]   (min, avg, max) = (124880,756, 125945,450, 126352,089), stdev = 610,995
[info]   CI (99.9%): [123592,726, 128298,175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   4379,096 ±(99.9%) 81,552 MB/sec [Average]
[info]   (min, avg, max) = (4342,156, 4379,096, 4393,029), stdev = 21,179
[info]   CI (99.9%): [4297,544, 4460,647] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   54704,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (54704,003, 54704,003, 54704,004), stdev = 0,001
[info]   CI (99.9%): [54704,003, 54704,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   4355,178 ±(99.9%) 1439,316 MB/sec [Average]
[info]   (min, avg, max) = (4072,346, 4355,178, 4768,425), stdev = 373,786
[info]   CI (99.9%): [2915,862, 5794,494] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   54419,935 ±(99.9%) 18786,105 B/op [Average]
[info]   (min, avg, max) = (50765,284, 54419,935, 59977,157), stdev = 4878,692
[info]   CI (99.9%): [35633,830, 73206,040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,062 ±(99.9%) 0,098 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,062, 0,083), stdev = 0,026
[info]   CI (99.9%): [≈ 0, 0,161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,781 ±(99.9%) 1,234 B/op [Average]
[info]   (min, avg, max) = (0,259, 0,781, 1,049), stdev = 0,320
[info]   CI (99.9%): [≈ 0, 2,015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   32,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (6,000, 6,400, 7,000), stdev = 0,548
[info]   CI (99.9%): [32,000, 32,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   19,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 3,800, 5,000), stdev = 0,837
[info]   CI (99.9%): [19,000, 19,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 98,59% complete, ETA 00:01:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 613484,536 ops/s
[info] # Warmup Iteration   2: 670765,663 ops/s
[info] # Warmup Iteration   3: 677604,305 ops/s
[info] # Warmup Iteration   4: 676770,511 ops/s
[info] # Warmup Iteration   5: 667490,949 ops/s
[info] Iteration   1: 613596,264 ops/s
[info]                  ·gc.alloc.rate:                   1790,984 MB/sec
[info]                  ·gc.alloc.rate.norm:              4592,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2024,876 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5191,689 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,107 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 676441,006 ops/s
[info]                  ·gc.alloc.rate:                   1974,497 MB/sec
[info]                  ·gc.alloc.rate.norm:              4592,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2028,064 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4716,578 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,145 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 672362,951 ops/s
[info]                  ·gc.alloc.rate:                   1962,425 MB/sec
[info]                  ·gc.alloc.rate.norm:              4592,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2030,436 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4751,144 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,097 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 677860,050 ops/s
[info]                  ·gc.alloc.rate:                   1978,425 MB/sec
[info]                  ·gc.alloc.rate.norm:              4592,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2033,389 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4719,574 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,145 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 676794,485 ops/s
[info]                  ·gc.alloc.rate:                   1975,330 MB/sec
[info]                  ·gc.alloc.rate.norm:              4592,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2034,747 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4730,126 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,048 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readUPickle":
[info]   663410,951 ±(99.9%) 107530,897 ops/s [Average]
[info]   (min, avg, max) = (613596,264, 663410,951, 677860,050), stdev = 27925,433
[info]   CI (99.9%): [555880,054, 770941,848] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readUPickle:·gc.alloc.rate":
[info]   1936,332 ±(99.9%) 313,752 MB/sec [Average]
[info]   (min, avg, max) = (1790,984, 1936,332, 1978,425), stdev = 81,480
[info]   CI (99.9%): [1622,580, 2250,084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   4592,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4592,001, 4592,001, 4592,001), stdev = 0,001
[info]   CI (99.9%): [4592,001, 4592,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   2030,302 ±(99.9%) 15,374 MB/sec [Average]
[info]   (min, avg, max) = (2024,876, 2030,302, 2034,747), stdev = 3,992
[info]   CI (99.9%): [2014,929, 2045,676] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   4821,822 ±(99.9%) 797,874 B/op [Average]
[info]   (min, avg, max) = (4716,578, 4821,822, 5191,689), stdev = 207,205
[info]   CI (99.9%): [4023,948, 5619,697] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,046 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,046, 0,062), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,109 ±(99.9%) 0,154 B/op [Average]
[info]   (min, avg, max) = (0,048, 0,109, 0,145), stdev = 0,040
[info]   CI (99.9%): [≈ 0, 0,263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readUPickle:·gc.count":
[info]   15,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,000, 3,000), stdev = 0,001
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readUPickle:·gc.time":
[info]   9,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 98,80% complete, ETA 00:01:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 317426,145 ops/s
[info] # Warmup Iteration   2: 415426,327 ops/s
[info] # Warmup Iteration   3: 404843,900 ops/s
[info] # Warmup Iteration   4: 404959,265 ops/s
[info] # Warmup Iteration   5: 405146,379 ops/s
[info] Iteration   1: 397626,644 ops/s
[info]                  ·gc.alloc.rate:               1362,694 MB/sec
[info]                  ·gc.alloc.rate.norm:          5392,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341,686 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5308,875 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 402987,215 ops/s
[info]                  ·gc.alloc.rate:                   1381,128 MB/sec
[info]                  ·gc.alloc.rate.norm:              5392,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,008 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5243,179 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,325 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 404945,527 ops/s
[info]                  ·gc.alloc.rate:               1387,841 MB/sec
[info]                  ·gc.alloc.rate.norm:          5392,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344,688 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5224,344 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 405492,650 ops/s
[info]                  ·gc.alloc.rate:                   1389,703 MB/sec
[info]                  ·gc.alloc.rate.norm:              5392,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,009 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5222,468 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,242 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 405880,830 ops/s
[info]                  ·gc.alloc.rate:               1390,969 MB/sec
[info]                  ·gc.alloc.rate.norm:          5392,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1347,633 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5224,012 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce":
[info]   403386,573 ±(99.9%) 13118,138 ops/s [Average]
[info]   (min, avg, max) = (397626,644, 403386,573, 405880,830), stdev = 3406,739
[info]   CI (99.9%): [390268,435, 416504,712] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   1382,467 ±(99.9%) 45,001 MB/sec [Average]
[info]   (min, avg, max) = (1362,694, 1382,467, 1390,969), stdev = 11,687
[info]   CI (99.9%): [1337,466, 1427,468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5392,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (5392,001, 5392,001, 5392,001), stdev = 0,001
[info]   CI (99.9%): [5392,001, 5392,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1344,604 ±(99.9%) 9,075 MB/sec [Average]
[info]   (min, avg, max) = (1341,686, 1344,604, 1347,633), stdev = 2,357
[info]   CI (99.9%): [1335,529, 1353,680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5244,576 ±(99.9%) 142,231 B/op [Average]
[info]   (min, avg, max) = (5222,468, 5244,576, 5308,875), stdev = 36,937
[info]   CI (99.9%): [5102,345, 5386,806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,156 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,083), stdev = 0,041
[info]   CI (99.9%): [≈ 0, 0,185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,114 ±(99.9%) 0,609 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,114, 0,325), stdev = 0,158
[info]   CI (99.9%): [≈ 0, 0,723] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 99,00% complete, ETA 00:01:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 477364,657 ops/s
[info] # Warmup Iteration   2: 644205,370 ops/s
[info] # Warmup Iteration   3: 712780,977 ops/s
[info] # Warmup Iteration   4: 713502,451 ops/s
[info] # Warmup Iteration   5: 709453,051 ops/s
[info] Iteration   1: 710614,636 ops/s
[info]                  ·gc.alloc.rate:                   542,015 MB/sec
[info]                  ·gc.alloc.rate.norm:              1200,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,769 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1133,039 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,069 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 714913,123 ops/s
[info]                  ·gc.alloc.rate:      545,296 MB/sec
[info]                  ·gc.alloc.rate.norm: 1200,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 705190,538 ops/s
[info]                  ·gc.alloc.rate:                   537,879 MB/sec
[info]                  ·gc.alloc.rate.norm:              1200,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666,685 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1487,364 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,303 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,138 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 713871,595 ops/s
[info]                  ·gc.alloc.rate:                   544,486 MB/sec
[info]                  ·gc.alloc.rate.norm:              1200,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666,698 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1469,345 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,184 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 714628,863 ops/s
[info]                  ·gc.alloc.rate:               545,054 MB/sec
[info]                  ·gc.alloc.rate.norm:          1200,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667,000 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1468,481 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala":
[info]   711843,751 ±(99.9%) 15767,201 ops/s [Average]
[info]   (min, avg, max) = (705190,538, 711843,751, 714913,123), stdev = 4094,692
[info]   CI (99.9%): [696076,549, 727610,952] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   542,946 ±(99.9%) 12,005 MB/sec [Average]
[info]   (min, avg, max) = (537,879, 542,946, 545,296), stdev = 3,118
[info]   CI (99.9%): [530,941, 554,950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1200,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1200,001, 1200,001, 1200,001), stdev = 0,001
[info]   CI (99.9%): [1200,001, 1200,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   502,430 ±(99.9%) 1111,980 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 502,430, 667,000), stdev = 288,778
[info]   CI (99.9%): [≈ 0, 1614,410] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1111,646 ±(99.9%) 2460,090 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1111,646, 1487,364), stdev = 638,878
[info]   CI (99.9%): [≈ 0, 3571,735] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,484 ±(99.9%) 3,919 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,484, 2,303), stdev = 1,018
[info]   CI (99.9%): [≈ 0, 4,403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1,078 ±(99.9%) 8,745 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,078, 5,138), stdev = 2,271
[info]   CI (99.9%): [≈ 0, 9,823] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 3,000), stdev = 1,304
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 99,20% complete, ETA 00:01:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1940460,994 ops/s
[info] # Warmup Iteration   2: 2050654,851 ops/s
[info] # Warmup Iteration   3: 2026035,503 ops/s
[info] # Warmup Iteration   4: 2050990,063 ops/s
[info] # Warmup Iteration   5: 2015893,354 ops/s
[info] Iteration   1: 2028994,119 ops/s
[info]                  ·gc.alloc.rate:               938,862 MB/sec
[info]                  ·gc.alloc.rate.norm:          728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,055 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 521,892 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 2026152,563 ops/s
[info]                  ·gc.alloc.rate:                   937,626 MB/sec
[info]                  ·gc.alloc.rate.norm:              728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,572 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1045,518 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,065 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 2034497,446 ops/s
[info]                  ·gc.alloc.rate:               941,448 MB/sec
[info]                  ·gc.alloc.rate.norm:          728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,423 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 520,743 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 2029082,193 ops/s
[info]                  ·gc.alloc.rate:                   938,971 MB/sec
[info]                  ·gc.alloc.rate.norm:              728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,557 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1044,784 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,048 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 2019682,202 ops/s
[info]                  ·gc.alloc.rate:               934,552 MB/sec
[info]                  ·gc.alloc.rate.norm:          728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,063 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 525,084 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala":
[info]   2027681,705 ±(99.9%) 20778,180 ops/s [Average]
[info]   (min, avg, max) = (2019682,202, 2027681,705, 2034497,446), stdev = 5396,027
[info]   CI (99.9%): [2006903,525, 2048459,884] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   938,292 ±(99.9%) 9,660 MB/sec [Average]
[info]   (min, avg, max) = (934,552, 938,292, 941,448), stdev = 2,509
[info]   CI (99.9%): [928,631, 947,952] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   728,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (728,000, 728,000, 728,000), stdev = 0,001
[info]   CI (99.9%): [728,000, 728,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   942,934 ±(99.9%) 1420,577 MB/sec [Average]
[info]   (min, avg, max) = (673,055, 942,934, 1347,557), stdev = 368,919
[info]   CI (99.9%): [≈ 0, 2363,511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   731,604 ±(99.9%) 1102,179 B/op [Average]
[info]   (min, avg, max) = (520,743, 731,604, 1045,518), stdev = 286,232
[info]   CI (99.9%): [≈ 0, 1833,783] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,156 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,083), stdev = 0,041
[info]   CI (99.9%): [≈ 0, 0,185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,023 ±(99.9%) 0,121 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,023, 0,065), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 99,40% complete, ETA 00:00:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1526238,104 ops/s
[info] # Warmup Iteration   2: 2077224,437 ops/s
[info] # Warmup Iteration   3: 2110182,727 ops/s
[info] # Warmup Iteration   4: 2077150,326 ops/s
[info] # Warmup Iteration   5: 2086732,727 ops/s
[info] Iteration   1: 2089399,849 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2078366,037 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2088890,427 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2085925,733 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2085920,670 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   2085700,543 ±(99.9%) 16977,188 ops/s [Average]
[info]   (min, avg, max) = (2078366,037, 2085700,543, 2089399,849), stdev = 4408,922
[info]   CI (99.9%): [2068723,355, 2102677,732] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 99,60% complete, ETA 00:00:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 312044,429 ops/s
[info] # Warmup Iteration   2: 378938,783 ops/s
[info] # Warmup Iteration   3: 383248,178 ops/s
[info] # Warmup Iteration   4: 381807,177 ops/s
[info] # Warmup Iteration   5: 383114,115 ops/s
[info] Iteration   1: 381270,242 ops/s
[info]                  ·gc.alloc.rate:               564,182 MB/sec
[info]                  ·gc.alloc.rate.norm:          2328,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,798 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2111,847 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 381706,021 ops/s
[info]                  ·gc.alloc.rate:                   564,791 MB/sec
[info]                  ·gc.alloc.rate.norm:              2328,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670,027 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2761,774 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,006 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8,268 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 382354,483 ops/s
[info]                  ·gc.alloc.rate:                   565,759 MB/sec
[info]                  ·gc.alloc.rate.norm:              2328,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670,028 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2757,051 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,257 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 381407,503 ops/s
[info]                  ·gc.alloc.rate:      564,369 MB/sec
[info]                  ·gc.alloc.rate.norm: 2328,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 382158,703 ops/s
[info]                  ·gc.alloc.rate:                   565,453 MB/sec
[info]                  ·gc.alloc.rate.norm:              2328,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669,673 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2757,079 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,171 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson":
[info]   381779,390 ±(99.9%) 1803,570 ops/s [Average]
[info]   (min, avg, max) = (381270,242, 381779,390, 382354,483), stdev = 468,381
[info]   CI (99.9%): [379975,820, 383582,960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   564,911 ±(99.9%) 2,620 MB/sec [Average]
[info]   (min, avg, max) = (564,182, 564,911, 565,759), stdev = 0,680
[info]   CI (99.9%): [562,291, 567,531] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2328,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (2328,001, 2328,001, 2328,001), stdev = 0,001
[info]   CI (99.9%): [2328,001, 2328,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   504,305 ±(99.9%) 1117,108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 504,305, 670,028), stdev = 290,109
[info]   CI (99.9%): [≈ 0, 1621,413] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2077,550 ±(99.9%) 4600,284 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2077,550, 2761,774), stdev = 1194,679
[info]   CI (99.9%): [≈ 0, 6677,834] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,422 ±(99.9%) 3,411 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,422, 2,006), stdev = 0,886
[info]   CI (99.9%): [≈ 0, 3,833] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1,739 ±(99.9%) 14,060 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,739, 8,268), stdev = 3,651
[info]   CI (99.9%): [≈ 0, 15,799] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 99,80% complete, ETA 00:00:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 178663,328 ops/s
[info] # Warmup Iteration   2: 188419,769 ops/s
[info] # Warmup Iteration   3: 189064,237 ops/s
[info] # Warmup Iteration   4: 189629,328 ops/s
[info] # Warmup Iteration   5: 190064,167 ops/s
[info] Iteration   1: 183605,405 ops/s
[info]                  ·gc.alloc.rate:                   1082,983 MB/sec
[info]                  ·gc.alloc.rate.norm:              9280,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,697 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11556,884 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,357 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 189543,093 ops/s
[info]                  ·gc.alloc.rate:                   1118,057 MB/sec
[info]                  ·gc.alloc.rate.norm:              9280,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,722 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11194,545 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,691 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 189963,412 ops/s
[info]                  ·gc.alloc.rate:               1120,469 MB/sec
[info]                  ·gc.alloc.rate.norm:          9280,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,325 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5584,929 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 189445,599 ops/s
[info]                  ·gc.alloc.rate:                   1117,419 MB/sec
[info]                  ·gc.alloc.rate.norm:              9280,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1349,996 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11211,521 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,346 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 190001,671 ops/s
[info]                  ·gc.alloc.rate:               1120,700 MB/sec
[info]                  ·gc.alloc.rate.norm:          9280,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,315 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5591,971 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeUPickle":
[info]   188511,836 ±(99.9%) 10604,164 ops/s [Average]
[info]   (min, avg, max) = (183605,405, 188511,836, 190001,671), stdev = 2753,868
[info]   CI (99.9%): [177907,672, 199116,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeUPickle:·gc.alloc.rate":
[info]   1111,926 ±(99.9%) 62,548 MB/sec [Average]
[info]   (min, avg, max) = (1082,983, 1111,926, 1120,700), stdev = 16,244
[info]   CI (99.9%): [1049,378, 1174,474] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   9280,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (9280,002, 9280,002, 9280,002), stdev = 0,001
[info]   CI (99.9%): [9280,002, 9280,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   1079,411 ±(99.9%) 1422,196 MB/sec [Average]
[info]   (min, avg, max) = (674,325, 1079,411, 1349,996), stdev = 369,340
[info]   CI (99.9%): [≈ 0, 2501,608] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   9027,970 ±(99.9%) 12103,212 B/op [Average]
[info]   (min, avg, max) = (5584,929, 9027,970, 11556,884), stdev = 3143,166
[info]   CI (99.9%): [≈ 0, 21131,182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,134 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,083), stdev = 0,035
[info]   CI (99.9%): [≈ 0, 0,167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,279 ±(99.9%) 1,116 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,279, 0,691), stdev = 0,290
[info]   CI (99.9%): [≈ 0, 1,395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeUPickle:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeUPickle:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # Run complete. Total time: 02:12:30
[info] REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
[info] why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
[info] experiments, perform baseline and negative tests that provide experimental control, make sure
[info] the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
[info] Do not assume the numbers tell you what you want them to tell.
[info] Benchmark                                                                                      (size)   Mode  Cnt         Score         Error   Units
[info] AdtBenchmark.readCirce                                                                            N/A  thrpt    5    842868,217 ±   26695,133   ops/s
[info] AdtBenchmark.readCirce:·gc.alloc.rate                                                             N/A  thrpt    5      2220,209 ±      70,428  MB/sec
[info] AdtBenchmark.readCirce:·gc.alloc.rate.norm                                                        N/A  thrpt    5      4144,001 ±       0,001    B/op
[info] AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                    N/A  thrpt    5      2296,887 ±    1420,928  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                               N/A  thrpt    5      4285,878 ±    2607,917    B/op
[info] AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                                N/A  thrpt    5         0,071 ±       0,072  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                           N/A  thrpt    5         0,132 ±       0,133    B/op
[info] AdtBenchmark.readCirce:·gc.count                                                                  N/A  thrpt    5        17,000                counts
[info] AdtBenchmark.readCirce:·gc.time                                                                   N/A  thrpt    5        11,000                    ms
[info] AdtBenchmark.readJacksonScala                                                                     N/A  thrpt    5   1797292,078 ±  127504,785   ops/s
[info] AdtBenchmark.readJacksonScala:·gc.alloc.rate                                                      N/A  thrpt    5      1279,464 ±      90,718  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                 N/A  thrpt    5      1120,000 ±       0,001    B/op
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                             N/A  thrpt    5      1203,592 ±    1153,623  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                        N/A  thrpt    5      1055,500 ±    1033,990    B/op
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                         N/A  thrpt    5         0,029 ±       0,122  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                    N/A  thrpt    5         0,025 ±       0,106    B/op
[info] AdtBenchmark.readJacksonScala:·gc.count                                                           N/A  thrpt    5         9,000                counts
[info] AdtBenchmark.readJacksonScala:·gc.time                                                            N/A  thrpt    5         7,000                    ms
[info] AdtBenchmark.readJsoniterScala                                                                    N/A  thrpt    5   4119143,396 ±   51259,948   ops/s
[info] AdtBenchmark.readJsoniterScala:·gc.alloc.rate                                                     N/A  thrpt    5       272,292 ±       3,429  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                N/A  thrpt    5       104,000 ±       0,001    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                            N/A  thrpt    5       307,059 ±    1079,357  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                       N/A  thrpt    5       117,509 ±     413,062    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                        N/A  thrpt    5         0,010 ±       0,082  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                   N/A  thrpt    5         0,004 ±       0,031    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.count                                                          N/A  thrpt    5         3,000                counts
[info] AdtBenchmark.readJsoniterScala:·gc.time                                                           N/A  thrpt    5         3,000                    ms
[info] AdtBenchmark.readPlayJson                                                                         N/A  thrpt    5    190533,223 ±    4739,223   ops/s
[info] AdtBenchmark.readPlayJson:·gc.alloc.rate                                                          N/A  thrpt    5      1585,006 ±      39,389  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.alloc.rate.norm                                                     N/A  thrpt    5     13088,002 ±       0,001    B/op
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                                 N/A  thrpt    5      1608,126 ±    1403,035  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                            N/A  thrpt    5     13275,098 ±   11492,152    B/op
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                             N/A  thrpt    5         0,042 ±       0,188  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                        N/A  thrpt    5         0,345 ±       1,570    B/op
[info] AdtBenchmark.readPlayJson:·gc.count                                                               N/A  thrpt    5        12,000                counts
[info] AdtBenchmark.readPlayJson:·gc.time                                                                N/A  thrpt    5        11,000                    ms
[info] AdtBenchmark.writeCirce                                                                           N/A  thrpt    5    636702,788 ±    9786,950   ops/s
[info] AdtBenchmark.writeCirce:·gc.alloc.rate                                                            N/A  thrpt    5      2077,426 ±      26,008  MB/sec
[info] AdtBenchmark.writeCirce:·gc.alloc.rate.norm                                                       N/A  thrpt    5      5136,001 ±       0,001    B/op
[info] AdtBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                                   N/A  thrpt    5      2024,063 ±      26,121  MB/sec
[info] AdtBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                              N/A  thrpt    5      5004,119 ±      94,440    B/op
[info] AdtBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                               N/A  thrpt    5         0,062 ±       0,126  MB/sec
[info] AdtBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                          N/A  thrpt    5         0,154 ±       0,312    B/op
[info] AdtBenchmark.writeCirce:·gc.count                                                                 N/A  thrpt    5        15,000                counts
[info] AdtBenchmark.writeCirce:·gc.time                                                                  N/A  thrpt    5         9,000                    ms
[info] AdtBenchmark.writeJacksonScala                                                                    N/A  thrpt    5   2378401,200 ±    7407,934   ops/s
[info] AdtBenchmark.writeJacksonScala:·gc.alloc.rate                                                     N/A  thrpt    5       774,013 ±       2,384  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                N/A  thrpt    5       512,000 ±       0,001    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                            N/A  thrpt    5       800,302 ±    1148,964  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                       N/A  thrpt    5       529,514 ±     762,419    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                        N/A  thrpt    5         0,479 ±       3,950  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                                   N/A  thrpt    5         0,317 ±       2,612    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.count                                                          N/A  thrpt    5         6,000                counts
[info] AdtBenchmark.writeJacksonScala:·gc.time                                                           N/A  thrpt    5         6,000                    ms
[info] AdtBenchmark.writeJsoniterScala                                                                   N/A  thrpt    5  20346044,403 ±  374873,582   ops/s
[info] AdtBenchmark.writeJsoniterScala:·gc.alloc.rate                                                    N/A  thrpt    5      1034,571 ±      19,039  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                               N/A  thrpt    5        80,000 ±       0,001    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                           N/A  thrpt    5       943,319 ±    1420,451  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                      N/A  thrpt    5        72,915 ±     109,417    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                       N/A  thrpt    5         0,017 ±       0,088  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                  N/A  thrpt    5         0,001 ±       0,007    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.count                                                         N/A  thrpt    5         7,000                counts
[info] AdtBenchmark.writeJsoniterScala:·gc.time                                                          N/A  thrpt    5         4,000                    ms
[info] AdtBenchmark.writeJsoniterScalaPrealloc                                                           N/A  thrpt    5  22946484,756 ±  339187,134   ops/s
[info] AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                            N/A  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                       N/A  thrpt    5        ≈ 10⁻⁵                  B/op
[info] AdtBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                 N/A  thrpt    5           ≈ 0                counts
[info] AdtBenchmark.writePlayJson                                                                        N/A  thrpt    5    360823,227 ±    6867,772   ops/s
[info] AdtBenchmark.writePlayJson:·gc.alloc.rate                                                         N/A  thrpt    5      1117,391 ±      21,362  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.alloc.rate.norm                                                    N/A  thrpt    5      4872,001 ±       0,001    B/op
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                                N/A  thrpt    5      1202,403 ±    1150,298  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                           N/A  thrpt    5      5238,132 ±    4956,078    B/op
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                            N/A  thrpt    5         0,029 ±       0,134  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                       N/A  thrpt    5         0,127 ±       0,583    B/op
[info] AdtBenchmark.writePlayJson:·gc.count                                                              N/A  thrpt    5         9,000                counts
[info] AdtBenchmark.writePlayJson:·gc.time                                                               N/A  thrpt    5         7,000                    ms
[info] AnyRefsBenchmark.readCirce                                                                        N/A  thrpt    5   1834920,694 ±   35347,654   ops/s
[info] AnyRefsBenchmark.readCirce:·gc.alloc.rate                                                         N/A  thrpt    5      2836,473 ±      54,591  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.alloc.rate.norm                                                    N/A  thrpt    5      2432,000 ±       0,001    B/op
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                N/A  thrpt    5      2849,353 ±    1186,719  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                           N/A  thrpt    5      2444,052 ±    1066,518    B/op
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                            N/A  thrpt    5         0,071 ±       0,091  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                       N/A  thrpt    5         0,061 ±       0,078    B/op
[info] AnyRefsBenchmark.readCirce:·gc.count                                                              N/A  thrpt    5        21,000                counts
[info] AnyRefsBenchmark.readCirce:·gc.time                                                               N/A  thrpt    5        12,000                    ms
[info] AnyRefsBenchmark.readDslJsonJava                                                                  N/A  thrpt    5  10681702,316 ±  131700,768   ops/s
[info] AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate                                                   N/A  thrpt    5      1303,570 ±      16,042  MB/sec
[info] AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                              N/A  thrpt    5       192,000 ±       0,001    B/op
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5      1203,470 ±    1148,991  MB/sec
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5       177,316 ±     169,995    B/op
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5         0,476 ±       3,966  MB/sec
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5         0,070 ±       0,584    B/op
[info] AnyRefsBenchmark.readDslJsonJava:·gc.count                                                        N/A  thrpt    5         9,000                counts
[info] AnyRefsBenchmark.readDslJsonJava:·gc.time                                                         N/A  thrpt    5        14,000                    ms
[info] AnyRefsBenchmark.readJacksonScala                                                                 N/A  thrpt    5   2940106,916 ±   68993,906   ops/s
[info] AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate                                                  N/A  thrpt    5      2063,119 ±      48,344  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                             N/A  thrpt    5      1104,000 ±       0,001    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                         N/A  thrpt    5      2018,925 ±      28,336  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                    N/A  thrpt    5      1080,397 ±      37,696    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                     N/A  thrpt    5         0,050 ±       0,091  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                N/A  thrpt    5         0,027 ±       0,049    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.count                                                       N/A  thrpt    5        15,000                counts
[info] AnyRefsBenchmark.readJacksonScala:·gc.time                                                        N/A  thrpt    5        13,000                    ms
[info] AnyRefsBenchmark.readJsoniterScala                                                                N/A  thrpt    5  11008133,149 ± 1045529,297   ops/s
[info] AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate                                                 N/A  thrpt    5      1399,392 ±     132,993  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                            N/A  thrpt    5       200,000 ±       0,001    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                        N/A  thrpt    5      1487,103 ±    1163,712  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                   N/A  thrpt    5       212,362 ±     158,959    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                    N/A  thrpt    5         0,050 ±       0,166  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                               N/A  thrpt    5         0,007 ±       0,024    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.count                                                      N/A  thrpt    5        11,000                counts
[info] AnyRefsBenchmark.readJsoniterScala:·gc.time                                                       N/A  thrpt    5         6,000                    ms
[info] AnyRefsBenchmark.readPlayJson                                                                     N/A  thrpt    5    707882,420 ±   52506,575   ops/s
[info] AnyRefsBenchmark.readPlayJson:·gc.alloc.rate                                                      N/A  thrpt    5      1871,803 ±     138,849  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                 N/A  thrpt    5      4160,001 ±       0,001    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                             N/A  thrpt    5      1880,476 ±    1149,178  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                        N/A  thrpt    5      4171,872 ±    2354,383    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                         N/A  thrpt    5         0,054 ±       0,134  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                    N/A  thrpt    5         0,121 ±       0,303    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.count                                                           N/A  thrpt    5        14,000                counts
[info] AnyRefsBenchmark.readPlayJson:·gc.time                                                            N/A  thrpt    5        11,000                    ms
[info] AnyRefsBenchmark.writeCirce                                                                       N/A  thrpt    5   2262222,162 ±   56229,516   ops/s
[info] AnyRefsBenchmark.writeCirce:·gc.alloc.rate                                                        N/A  thrpt    5      2220,099 ±      55,135  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.alloc.rate.norm                                                   N/A  thrpt    5      1544,000 ±       0,001    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                               N/A  thrpt    5      2297,416 ±    1423,919  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                          N/A  thrpt    5      1597,107 ±     968,002    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                           N/A  thrpt    5         0,062 ±       0,150  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                      N/A  thrpt    5         0,043 ±       0,105    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.count                                                             N/A  thrpt    5        17,000                counts
[info] AnyRefsBenchmark.writeCirce:·gc.time                                                              N/A  thrpt    5         9,000                    ms
[info] AnyRefsBenchmark.writeDslJsonJava                                                                 N/A  thrpt    5  20771774,564 ± 3168192,784   ops/s
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate                                                  N/A  thrpt    5       633,746 ±      96,597  MB/sec
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                             N/A  thrpt    5        48,000 ±       0,001    B/op
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                         N/A  thrpt    5       531,783 ±    1144,707  MB/sec
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                                    N/A  thrpt    5        40,492 ±      87,525    B/op
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                                     N/A  thrpt    5         0,008 ±       0,072  MB/sec
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                                N/A  thrpt    5         0,001 ±       0,005    B/op
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.count                                                       N/A  thrpt    5         4,000                counts
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.time                                                        N/A  thrpt    5         6,000                    ms
[info] AnyRefsBenchmark.writeJacksonScala                                                                N/A  thrpt    5   6582783,451 ±  792439,116   ops/s
[info] AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate                                                 N/A  thrpt    5      1807,565 ±     217,515  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                            N/A  thrpt    5       432,000 ±       0,001    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                        N/A  thrpt    5      1879,235 ±    1163,518  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                   N/A  thrpt    5       450,119 ±     297,997    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                    N/A  thrpt    5         0,062 ±       0,127  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                               N/A  thrpt    5         0,015 ±       0,030    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.count                                                      N/A  thrpt    5        14,000                counts
[info] AnyRefsBenchmark.writeJacksonScala:·gc.time                                                       N/A  thrpt    5        13,000                    ms
[info] AnyRefsBenchmark.writeJsoniterScala                                                               N/A  thrpt    5  30450724,878 ± 8219606,016   ops/s
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                N/A  thrpt    5       929,028 ±     250,792  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                           N/A  thrpt    5        48,000 ±       0,001    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                       N/A  thrpt    5       943,312 ±    1421,660  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                  N/A  thrpt    5        49,678 ±      85,605    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                   N/A  thrpt    5         0,025 ±       0,105  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                              N/A  thrpt    5         0,001 ±       0,006    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.count                                                     N/A  thrpt    5         7,000                counts
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.time                                                      N/A  thrpt    5         5,000                    ms
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc                                                       N/A  thrpt    5  29823254,912 ±  341919,614   ops/s
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                        N/A  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                   N/A  thrpt    5        ≈ 10⁻⁵                  B/op
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                             N/A  thrpt    5           ≈ 0                counts
[info] AnyRefsBenchmark.writePlayJson                                                                    N/A  thrpt    5   1491986,416 ±   74671,862   ops/s
[info] AnyRefsBenchmark.writePlayJson:·gc.alloc.rate                                                     N/A  thrpt    5      2215,339 ±     110,568  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                N/A  thrpt    5      2336,000 ±       0,001    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                            N/A  thrpt    5      2156,278 ±    1162,495  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                       N/A  thrpt    5      2273,243 ±    1197,999    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                        N/A  thrpt    5         0,071 ±       0,122  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                   N/A  thrpt    5         0,074 ±       0,126    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.count                                                          N/A  thrpt    5        16,000                counts
[info] AnyRefsBenchmark.writePlayJson:·gc.time                                                           N/A  thrpt    5        16,000                    ms
[info] ArrayBufferOfBooleansBenchmark.readCirce                                                          128  thrpt    5    374012,016 ±   35057,525   ops/s
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate                                           128  thrpt    5      2236,516 ±     209,526  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                      128  thrpt    5      9408,001 ±       0,001    B/op
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                                  128  thrpt    5      2301,712 ±    1434,365  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      9675,309 ±    5722,693    B/op
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,058 ±       0,154  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0,245 ±       0,640    B/op
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.count                                                128  thrpt    5        17,000                counts
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.time                                                 128  thrpt    5        10,000                    ms
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala                                                   128  thrpt    5    560398,577 ±    3661,194   ops/s
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                    128  thrpt    5       763,728 ±       4,999  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                               128  thrpt    5      2144,001 ±       0,001    B/op
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                           128  thrpt    5       800,296 ±    1147,447  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5      2246,453 ±    3217,155    B/op
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0,502 ±       4,234  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         1,409 ±      11,878    B/op
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.count                                         128  thrpt    5         6,000                counts
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.time                                          128  thrpt    5         6,000                    ms
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala                                                  128  thrpt    5   1142764,130 ±  299367,671   ops/s
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                   128  thrpt    5       761,212 ±     199,386  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                              128  thrpt    5      1048,000 ±       0,001    B/op
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                          128  thrpt    5       673,304 ±       1,073  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5       930,769 ±     268,615    B/op
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0,037 ±       0,143  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5         0,050 ±       0,192    B/op
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.count                                        128  thrpt    5         5,000                counts
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.time                                         128  thrpt    5         3,000                    ms
[info] ArrayBufferOfBooleansBenchmark.readPlayJson                                                       128  thrpt    5    125623,457 ±   16156,579   ops/s
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                        128  thrpt    5      4351,506 ±     559,621  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                   128  thrpt    5     54496,003 ±       0,001    B/op
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                               128  thrpt    5      4355,299 ±    1424,405  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     54547,018 ±   16391,108    B/op
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0,071 ±       0,108  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0,881 ±       1,283    B/op
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.count                                             128  thrpt    5        32,000                counts
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.time                                              128  thrpt    5        20,000                    ms
[info] ArrayBufferOfBooleansBenchmark.readUPickle                                                        128  thrpt    5    686249,472 ±   10422,462   ops/s
[info] ArrayBufferOfBooleansBenchmark.readUPickle:·gc.alloc.rate                                         128  thrpt    5      2100,656 ±      31,822  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readUPickle:·gc.alloc.rate.norm                                    128  thrpt    5      4816,001 ±       0,001    B/op
[info] ArrayBufferOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                128  thrpt    5      2166,698 ±    1159,688  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      4968,678 ±    2708,783    B/op
[info] ArrayBufferOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0,058 ±       0,088  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0,134 ±       0,201    B/op
[info] ArrayBufferOfBooleansBenchmark.readUPickle:·gc.count                                              128  thrpt    5        16,000                counts
[info] ArrayBufferOfBooleansBenchmark.readUPickle:·gc.time                                               128  thrpt    5         9,000                    ms
[info] ArrayBufferOfBooleansBenchmark.writeCirce                                                         128  thrpt    5    370528,941 ±   28543,381   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                          128  thrpt    5      1260,553 ±      97,522  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                     128  thrpt    5      5352,001 ±       0,001    B/op
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1209,905 ±    1159,286  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      5145,017 ±    5024,558    B/op
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,042 ±       0,127  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0,179 ±       0,554    B/op
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.count                                               128  thrpt    5         9,000                counts
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.time                                                128  thrpt    5         6,000                    ms
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala                                                  128  thrpt    5    742980,836 ±    4535,175   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                   128  thrpt    5       555,353 ±       3,384  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                              128  thrpt    5      1176,001 ±       0,001    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                          128  thrpt    5       502,427 ±    1111,969  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5      1064,222 ±    2354,247    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0,493 ±       3,988  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5         1,045 ±       8,454    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.count                                        128  thrpt    5         4,000                counts
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.time                                         128  thrpt    5         6,000                    ms
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala                                                 128  thrpt    5   2406153,267 ±   41103,280   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                  128  thrpt    5      1113,394 ±      19,064  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                             128  thrpt    5       728,000 ±       0,001    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                         128  thrpt    5      1213,066 ±    1161,003  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5       793,398 ±     762,062    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0,042 ±       0,127  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         0,027 ±       0,083    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.count                                       128  thrpt    5         9,000                counts
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.time                                        128  thrpt    5         6,000                    ms
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc                                         128  thrpt    5   2924641,969 ±   73126,228   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                          128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                     128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                               128  thrpt    5           ≈ 0                counts
[info] ArrayBufferOfBooleansBenchmark.writePlayJson                                                      128  thrpt    5    434267,416 ±   11873,338   ops/s
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                       128  thrpt    5       624,912 ±      17,089  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                  128  thrpt    5      2264,001 ±       0,001    B/op
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                              128  thrpt    5       535,876 ±    1153,514  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5      1939,370 ±    4175,133    B/op
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0,416 ±       3,402  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         1,504 ±      12,302    B/op
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.count                                            128  thrpt    5         4,000                counts
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.time                                             128  thrpt    5         4,000                    ms
[info] ArrayBufferOfBooleansBenchmark.writeUPickle                                                       128  thrpt    5    183452,360 ±    1729,753   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.alloc.rate                                        128  thrpt    5      1074,595 ±      10,114  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.alloc.rate.norm                                   128  thrpt    5      9216,002 ±       0,001    B/op
[info] ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                               128  thrpt    5      1079,193 ±    1422,522  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      9255,920 ±   12205,792    B/op
[info] ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0,021 ±       0,098  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0,179 ±       0,844    B/op
[info] ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.count                                             128  thrpt    5         8,000                counts
[info] ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.time                                              128  thrpt    5         5,000                    ms
[info] ArrayOfBigDecimalsBenchmark.readCirce                                                             128  thrpt    5     20728,005 ±     292,155   ops/s
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate                                              128  thrpt    5      1468,425 ±      20,942  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate.norm                                         128  thrpt    5    111448,022 ±       0,014    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1482,592 ±    1168,435  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5    112486,319 ±   87545,073    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,042 ±       0,150  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         3,157 ±      11,388    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.count                                                   128  thrpt    5        11,000                counts
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.time                                                    128  thrpt    5         7,000                    ms
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala                                                      128  thrpt    5     33852,498 ±     269,880   ops/s
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate                                       128  thrpt    5       909,050 ±       7,302  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                  128  thrpt    5     42248,013 ±       0,002    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                              128  thrpt    5       935,632 ±    1409,265  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5     43505,387 ±   65802,936    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0,025 ±       0,132  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         1,163 ±       6,134    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.count                                            128  thrpt    5         7,000                counts
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.time                                             128  thrpt    5         5,000                    ms
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala                                                     128  thrpt    5     38976,531 ±     351,426   ops/s
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate                                      128  thrpt    5       580,918 ±       5,197  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                 128  thrpt    5     23448,011 ±       0,001    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                             128  thrpt    5       640,911 ±     277,979  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5     25869,760 ±   11225,735    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0,365 ±       2,741  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5        14,679 ±     110,202    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.count                                           128  thrpt    5         5,000                counts
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.time                                            128  thrpt    5         5,000                    ms
[info] ArrayOfBigDecimalsBenchmark.readPlayJson                                                          128  thrpt    5     28166,126 ±     492,290   ops/s
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate                                           128  thrpt    5      1458,337 ±      25,417  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate.norm                                      128  thrpt    5     81456,016 ±       0,002    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1476,537 ±    1148,571  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     82438,640 ±   63095,308    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,033 ±       0,091  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         1,862 ±       5,096    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.count                                                128  thrpt    5        11,000                counts
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.time                                                 128  thrpt    5         7,000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeCirce                                                            128  thrpt    5     30768,269 ±    3011,206   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate                                             128  thrpt    5      2107,289 ±     206,264  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate.norm                                        128  thrpt    5    107752,014 ±       0,001    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5      2161,436 ±    1182,738  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5    110488,884 ±   57756,050    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,058 ±       0,067  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         2,985 ±       3,441    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.count                                                  128  thrpt    5        16,000                counts
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.time                                                   128  thrpt    5        11,000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala                                                     128  thrpt    5     30800,761 ±     367,257   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate                                      128  thrpt    5      1806,751 ±      21,466  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5     92288,014 ±       0,002    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5      1879,904 ±    1156,815  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5     96060,223 ±   59921,131    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0,029 ±       0,166  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         1,491 ±       8,506    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.count                                           128  thrpt    5        14,000                counts
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.time                                            128  thrpt    5        12,000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala                                                    128  thrpt    5     34479,951 ±     504,851   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate                                     128  thrpt    5      1913,893 ±      28,000  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5     87328,013 ±       0,002    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5      1892,854 ±    1172,674  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5     86374,547 ±   53659,068    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0,046 ±       0,088  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         2,091 ±       4,011    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.count                                          128  thrpt    5        14,000                counts
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.time                                           128  thrpt    5         9,000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc                                            128  thrpt    5     34649,563 ±     539,490   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                             128  thrpt    5      1856,007 ±      28,796  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                        128  thrpt    5     84272,012 ±       0,001    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                    128  thrpt    5      1891,889 ±    1159,311  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm               128  thrpt    5     85918,459 ±   53040,468    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                128  thrpt    5         0,046 ±       0,119  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm           128  thrpt    5         2,083 ±       5,425    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                  128  thrpt    5        14,000                counts
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.time                                   128  thrpt    5         8,000                    ms
[info] ArrayOfBigDecimalsBenchmark.writePlayJson                                                         128  thrpt    5      9343,137 ±     517,145   ops/s
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate                                          128  thrpt    5      1321,627 ±      73,301  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate.norm                                     128  thrpt    5    222544,048 ±       0,007    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1342,215 ±       9,440  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5    226045,718 ±   11739,040    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,042 ±       0,057  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         7,012 ±       9,475    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.count                                               128  thrpt    5        10,000                counts
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.time                                                128  thrpt    5         7,000                    ms
[info] ArrayOfBigIntsBenchmark.readCirce                                                                 128  thrpt    5     19883,512 ±     438,088   ops/s
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate                                                  128  thrpt    5      1715,735 ±      37,904  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate.norm                                             128  thrpt    5    135760,024 ±       0,017    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5      1754,569 ±    1423,143  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5    138897,035 ±  113922,028    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0,042 ±       0,113  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         3,301 ±       8,994    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.count                                                       128  thrpt    5        13,000                counts
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.time                                                        128  thrpt    5         8,000                    ms
[info] ArrayOfBigIntsBenchmark.readJacksonScala                                                          128  thrpt    5     46221,207 ±    2040,259   ops/s
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate                                           128  thrpt    5      1276,510 ±      56,343  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5     43448,009 ±       0,001    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1205,759 ±    1148,821  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     41070,760 ±   39496,617    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,058 ±       0,154  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         1,997 ±       5,402    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.count                                                128  thrpt    5         9,000                counts
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.time                                                 128  thrpt    5         6,000                    ms
[info] ArrayOfBigIntsBenchmark.readJsoniterScala                                                         128  thrpt    5     66845,025 ±    9377,437   ops/s
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                          128  thrpt    5       864,052 ±     121,165  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5     20336,007 ±       0,001    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5       942,506 ±    1419,967  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     22370,947 ±   35948,133    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,029 ±       0,134  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0,692 ±       3,140    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.count                                               128  thrpt    5         7,000                counts
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.time                                                128  thrpt    5         4,000                    ms
[info] ArrayOfBigIntsBenchmark.readPlayJson                                                              128  thrpt    5     35593,721 ±     177,285   ops/s
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate                                               128  thrpt    5      2415,328 ±      12,251  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                          128  thrpt    5    106760,012 ±       0,002    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5      2428,390 ±    1402,822  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5    107341,886 ±   62143,501    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,067 ±       0,067  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         2,946 ±       2,972    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.count                                                    128  thrpt    5        18,000                counts
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.time                                                     128  thrpt    5        14,000                    ms
[info] ArrayOfBigIntsBenchmark.writeJacksonScala                                                         128  thrpt    5     30079,697 ±     326,667   ops/s
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                          128  thrpt    5      1871,415 ±      20,276  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5     97880,015 ±       0,002    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1882,428 ±    1150,640  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     98447,560 ±   59982,022    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,058 ±       0,119  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         3,048 ±       6,194    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.count                                               128  thrpt    5        14,000                counts
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.time                                                128  thrpt    5        11,000                    ms
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala                                                        128  thrpt    5     42159,901 ±     382,228   ops/s
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                         128  thrpt    5      1806,358 ±      16,364  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5     67408,011 ±       0,002    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5      1892,015 ±    1163,852  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     70610,474 ±   43568,628    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0,042 ±       0,150  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         1,553 ±       5,592    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.count                                              128  thrpt    5        14,000                counts
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.time                                               128  thrpt    5         8,000                    ms
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc                                                128  thrpt    5     42098,528 ±     762,187   ops/s
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                 128  thrpt    5      1730,369 ±      31,623  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                            128  thrpt    5     64664,010 ±       0,001    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                        128  thrpt    5      1756,349 ±    1431,109  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5     65627,699 ±   53322,342    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0,029 ±       0,134  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5         1,088 ±       4,995    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                      128  thrpt    5        13,000                counts
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.time                                       128  thrpt    5         8,000                    ms
[info] ArrayOfBooleansBenchmark.readCirce                                                                128  thrpt    5    367188,361 ±    3938,289   ops/s
[info] ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate                                                 128  thrpt    5      2031,414 ±      21,762  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                            128  thrpt    5      8704,001 ±       0,001    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5      2028,196 ±      18,699  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5      8690,248 ±     101,433    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0,037 ±       0,067  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         0,160 ±       0,286    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.count                                                      128  thrpt    5        15,000                counts
[info] ArrayOfBooleansBenchmark.readCirce:·gc.time                                                       128  thrpt    5         9,000                    ms
[info] ArrayOfBooleansBenchmark.readDslJsonJava                                                          128  thrpt    5   1569124,725 ±   15313,626   ops/s
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate                                           128  thrpt    5       494,691 ±       4,832  MB/sec
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                      128  thrpt    5       496,000 ±       0,001    B/op
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                  128  thrpt    5       501,045 ±    1108,192  MB/sec
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5       502,680 ±    1111,354    B/op
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,007 ±       0,031  MB/sec
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0,007 ±       0,031    B/op
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.count                                                128  thrpt    5         4,000                counts
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.time                                                 128  thrpt    5         7,000                    ms
[info] ArrayOfBooleansBenchmark.readJacksonScala                                                         128  thrpt    5    782009,413 ±    6937,580   ops/s
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                          128  thrpt    5       648,151 ±       5,732  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5      1304,001 ±       0,001    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5       534,557 ±    1150,674  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      1075,540 ±    2315,216    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,448 ±       3,680  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0,902 ±       7,407    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.count                                               128  thrpt    5         4,000                counts
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.time                                                128  thrpt    5         4,000                    ms
[info] ArrayOfBooleansBenchmark.readJsoniterScala                                                        128  thrpt    5   1911698,865 ±   39554,924   ops/s
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                         128  thrpt    5       369,386 ±       7,639  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5       304,000 ±       0,001    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5       441,727 ±     988,292  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5       363,723 ±     813,537    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0,321 ±       2,698  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0,264 ±       2,220    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.count                                              128  thrpt    5         4,000                counts
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.time                                               128  thrpt    5         6,000                    ms
[info] ArrayOfBooleansBenchmark.readPlayJson                                                             128  thrpt    5    118711,690 ±    1554,321   ops/s
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                              128  thrpt    5      4316,975 ±      61,974  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                         128  thrpt    5     57212,046 ±     310,334    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5      4354,248 ±    1444,675  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     57709,290 ±   19315,116    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,071 ±       0,122  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0,938 ±       1,608    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.count                                                   128  thrpt    5        32,000                counts
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.time                                                    128  thrpt    5        18,000                    ms
[info] ArrayOfBooleansBenchmark.readUPickle                                                              128  thrpt    5    702432,896 ±   57798,015   ops/s
[info] ArrayOfBooleansBenchmark.readUPickle:·gc.alloc.rate                                               128  thrpt    5      1835,905 ±     151,036  MB/sec
[info] ArrayOfBooleansBenchmark.readUPickle:·gc.alloc.rate.norm                                          128  thrpt    5      4112,001 ±       0,001    B/op
[info] ArrayOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1758,769 ±    1429,836  MB/sec
[info] ArrayOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5      3932,946 ±    3048,836    B/op
[info] ArrayOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,046 ±       0,067  MB/sec
[info] ArrayOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0,102 ±       0,145    B/op
[info] ArrayOfBooleansBenchmark.readUPickle:·gc.count                                                    128  thrpt    5        13,000                counts
[info] ArrayOfBooleansBenchmark.readUPickle:·gc.time                                                     128  thrpt    5         8,000                    ms
[info] ArrayOfBooleansBenchmark.writeCirce                                                               128  thrpt    5    405838,395 ±   51319,463   ops/s
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                                128  thrpt    5      1384,694 ±     175,100  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                           128  thrpt    5      5368,001 ±       0,001    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1344,758 ±       9,679  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5      5217,973 ±     703,282    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0,029 ±       0,108  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0,114 ±       0,418    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.count                                                     128  thrpt    5        10,000                counts
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.time                                                      128  thrpt    5         6,000                    ms
[info] ArrayOfBooleansBenchmark.writeDslJsonJava                                                         128  thrpt    5   1674727,722 ±   25463,872   ops/s
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate                                          128  thrpt    5       774,943 ±      11,770  MB/sec
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                     128  thrpt    5       728,000 ±       0,001    B/op
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                 128  thrpt    5       665,631 ±       4,265  MB/sec
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5       625,317 ±      10,174    B/op
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,006 ±       0,053  MB/sec
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0,006 ±       0,050    B/op
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.count                                               128  thrpt    5         5,000                counts
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.time                                                128  thrpt    5         9,000                    ms
[info] ArrayOfBooleansBenchmark.writeJacksonScala                                                        128  thrpt    5    987201,613 ±   10771,453   ops/s
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                         128  thrpt    5       697,741 ±       7,604  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5      1112,000 ±       0,001    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5       668,220 ±       0,713  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      1064,958 ±      11,030    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0,444 ±       3,600  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0,710 ±       5,760    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.count                                              128  thrpt    5         5,000                counts
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.time                                               128  thrpt    5         4,000                    ms
[info] ArrayOfBooleansBenchmark.writeJsoniterScala                                                       128  thrpt    5   2864087,174 ±   42625,828   ops/s
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                        128  thrpt    5      1325,285 ±      19,727  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5       728,000 ±       0,001    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5      1348,302 ±       6,937  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5       740,653 ±      11,806    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0,046 ±       0,105  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0,025 ±       0,057    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.count                                             128  thrpt    5        10,000                counts
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.time                                              128  thrpt    5         6,000                    ms
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc                                               128  thrpt    5   2480511,150 ±    9578,095   ops/s
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                           128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                     128  thrpt    5           ≈ 0                counts
[info] ArrayOfBooleansBenchmark.writePlayJson                                                            128  thrpt    5    564117,557 ±    3159,361   ops/s
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                             128  thrpt    5       659,736 ±       3,672  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                        128  thrpt    5      1840,001 ±       0,001    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5       669,815 ±       0,712  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      1868,113 ±      11,413    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,421 ±       3,447  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         1,177 ±       9,634    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.count                                                  128  thrpt    5         5,000                counts
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.time                                                   128  thrpt    5         4,000                    ms
[info] ArrayOfBooleansBenchmark.writeUPickle                                                             128  thrpt    5    186521,528 ±    2608,357   ops/s
[info] ArrayOfBooleansBenchmark.writeUPickle:·gc.alloc.rate                                              128  thrpt    5      1094,463 ±      15,161  MB/sec
[info] ArrayOfBooleansBenchmark.writeUPickle:·gc.alloc.rate.norm                                         128  thrpt    5      9232,002 ±       0,001    B/op
[info] ArrayOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1079,071 ±    1422,173  MB/sec
[info] ArrayOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      9108,691 ±   12076,016    B/op
[info] ArrayOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,029 ±       0,108  MB/sec
[info] ArrayOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0,246 ±       0,909    B/op
[info] ArrayOfBooleansBenchmark.writeUPickle:·gc.count                                                   128  thrpt    5         8,000                counts
[info] ArrayOfBooleansBenchmark.writeUPickle:·gc.time                                                    128  thrpt    5         5,000                    ms
[info] ArrayOfBytesBenchmark.readCirce                                                                   128  thrpt    5    172192,049 ±    9487,831   ops/s
[info] ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate                                                    128  thrpt    5      2119,850 ±     116,718  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate.norm                                               128  thrpt    5     19368,003 ±       0,001    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5      2164,983 ±    1146,842  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5     19775,769 ±   10205,233    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0,067 ±       0,223  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5         0,610 ±       2,026    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.count                                                         128  thrpt    5        16,000                counts
[info] ArrayOfBytesBenchmark.readCirce:·gc.time                                                          128  thrpt    5         9,000                    ms
[info] ArrayOfBytesBenchmark.readJacksonScala                                                            128  thrpt    5    474440,004 ±    2577,467   ops/s
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate                                             128  thrpt    5       393,236 ±       2,142  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5      1304,001 ±       0,001    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       440,688 ±     983,714  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      1462,067 ±    3263,870    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,439 ±       3,633  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         1,456 ±      12,054    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.count                                                  128  thrpt    5         4,000                counts
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.time                                                   128  thrpt    5         8,000                    ms
[info] ArrayOfBytesBenchmark.readJsoniterScala                                                           128  thrpt    5   1116136,256 ±    9032,961   ops/s
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       215,665 ±       1,758  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5       304,000 ±       0,001    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       204,707 ±    1079,361  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5       289,148 ±    1524,595    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,014 ±       0,118  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0,019 ±       0,166    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.count                                                 128  thrpt    5         2,000                counts
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.time                                                  128  thrpt    5         3,000                    ms
[info] ArrayOfBytesBenchmark.readPlayJson                                                                128  thrpt    5     92546,881 ±     759,816   ops/s
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate                                                 128  thrpt    5      3820,732 ±      31,227  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate.norm                                            128  thrpt    5     64952,005 ±       0,001    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5      3806,116 ±    1443,297  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     64700,301 ±   24377,745    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0,087 ±       0,215  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         1,488 ±       3,667    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.count                                                      128  thrpt    5        28,000                counts
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.time                                                       128  thrpt    5        17,000                    ms
[info] ArrayOfBytesBenchmark.readUPickle                                                                 128  thrpt    5    168625,280 ±    1629,438   ops/s
[info] ArrayOfBytesBenchmark.readUPickle:·gc.alloc.rate                                                  128  thrpt    5      1318,756 ±      12,688  MB/sec
[info] ArrayOfBytesBenchmark.readUPickle:·gc.alloc.rate.norm                                             128  thrpt    5     12304,003 ±       0,001    B/op
[info] ArrayOfBytesBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                         128  thrpt    5      1214,655 ±    1160,321  MB/sec
[info] ArrayOfBytesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     11334,913 ±   10853,962    B/op
[info] ArrayOfBytesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0,029 ±       0,108  MB/sec
[info] ArrayOfBytesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         0,272 ±       1,005    B/op
[info] ArrayOfBytesBenchmark.readUPickle:·gc.count                                                       128  thrpt    5         9,000                counts
[info] ArrayOfBytesBenchmark.readUPickle:·gc.time                                                        128  thrpt    5         6,000                    ms
[info] ArrayOfBytesBenchmark.writeCirce                                                                  128  thrpt    5    269079,480 ±    6295,817   ops/s
[info] ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate                                                   128  thrpt    5      1484,467 ±      34,710  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate.norm                                              128  thrpt    5      8680,002 ±       0,001    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5      1480,527 ±    1164,884  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5      8654,009 ±    6716,931    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0,037 ±       0,132  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         0,218 ±       0,767    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.count                                                        128  thrpt    5        11,000                counts
[info] ArrayOfBytesBenchmark.writeCirce:·gc.time                                                         128  thrpt    5         7,000                    ms
[info] ArrayOfBytesBenchmark.writeJacksonScala                                                           128  thrpt    5   1789994,340 ±   37711,971   ops/s
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate                                            128  thrpt    5       919,325 ±      19,387  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5       808,000 ±       0,001    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       802,507 ±    1150,236  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5       704,721 ±     998,912    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,021 ±       0,098  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0,018 ±       0,086    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.count                                                 128  thrpt    5         6,000                counts
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.time                                                  128  thrpt    5         5,000                    ms
[info] ArrayOfBytesBenchmark.writeJsoniterScala                                                          128  thrpt    5   2183717,523 ±   10747,543   ops/s
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       588,509 ±       2,890  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5       424,000 ±       0,001    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       640,914 ±     277,992  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5       461,715 ±     198,797    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,339 ±       2,639  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0,244 ±       1,902    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.count                                                128  thrpt    5         5,000                counts
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.time                                                 128  thrpt    5         5,000                    ms
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc                                                  128  thrpt    5   2183933,632 ±   11346,323   ops/s
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        128  thrpt    5           ≈ 0                counts
[info] ArrayOfBytesBenchmark.writePlayJson                                                               128  thrpt    5     42615,569 ±    1492,073   ops/s
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate                                                128  thrpt    5      1859,699 ±      65,253  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate.norm                                           128  thrpt    5     68656,010 ±       0,001    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1886,792 ±    1155,042  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     69585,021 ±   40851,788    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0,058 ±       0,174  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         2,144 ±       6,385    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.count                                                     128  thrpt    5        14,000                counts
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.time                                                      128  thrpt    5         9,000                    ms
[info] ArrayOfBytesBenchmark.writeUPickle                                                                128  thrpt    5    133409,932 ±    9857,188   ops/s
[info] ArrayOfBytesBenchmark.writeUPickle:·gc.alloc.rate                                                 128  thrpt    5      1214,974 ±      89,677  MB/sec
[info] ArrayOfBytesBenchmark.writeUPickle:·gc.alloc.rate.norm                                            128  thrpt    5     14328,003 ±       0,001    B/op
[info] ArrayOfBytesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1214,673 ±    1162,372  MB/sec
[info] ArrayOfBytesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     14344,547 ±   13962,558    B/op
[info] ArrayOfBytesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0,029 ±       0,122  MB/sec
[info] ArrayOfBytesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         0,350 ±       1,493    B/op
[info] ArrayOfBytesBenchmark.writeUPickle:·gc.count                                                      128  thrpt    5         9,000                counts
[info] ArrayOfBytesBenchmark.writeUPickle:·gc.time                                                       128  thrpt    5         5,000                    ms
[info] ArrayOfCharsBenchmark.readCirce                                                                   128  thrpt    5    244410,685 ±    2948,340   ops/s
[info] ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate                                                    128  thrpt    5      2602,407 ±      30,859  MB/sec
[info] ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate.norm                                               128  thrpt    5     16752,002 ±       0,001    B/op
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5      2576,889 ±    1173,471  MB/sec
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5     16588,105 ±    7564,220    B/op
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0,071 ±       0,091  MB/sec
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5         0,456 ±       0,588    B/op
[info] ArrayOfCharsBenchmark.readCirce:·gc.count                                                         128  thrpt    5        19,000                counts
[info] ArrayOfCharsBenchmark.readCirce:·gc.time                                                          128  thrpt    5        12,000                    ms
[info] ArrayOfCharsBenchmark.readJacksonScala                                                            128  thrpt    5    353149,689 ±    5276,654   ops/s
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate                                             128  thrpt    5      1768,781 ±      26,560  MB/sec
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5      7880,001 ±       0,001    B/op
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1749,268 ±    1429,643  MB/sec
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      7796,243 ±    6434,956    B/op
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,050 ±       0,146  MB/sec
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0,222 ±       0,647    B/op
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.count                                                  128  thrpt    5        13,000                counts
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.time                                                   128  thrpt    5         9,000                    ms
[info] ArrayOfCharsBenchmark.readJsoniterScala                                                           128  thrpt    5   1254064,388 ±   44154,416   ops/s
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       433,620 ±      15,252  MB/sec
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5       544,000 ±       0,001    B/op
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       474,048 ±    1066,788  MB/sec
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5       593,199 ±    1331,378    B/op
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,334 ±       2,740  MB/sec
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0,418 ±       3,433    B/op
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.count                                                 128  thrpt    5         4,000                counts
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.time                                                  128  thrpt    5         6,000                    ms
[info] ArrayOfCharsBenchmark.readPlayJson                                                                128  thrpt    5     89165,321 ±    1691,112   ops/s
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate                                                 128  thrpt    5      3631,771 ±      69,098  MB/sec
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate.norm                                            128  thrpt    5     64080,005 ±       0,001    B/op
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5      3529,664 ±    1173,827  MB/sec
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     62292,143 ±   21511,371    B/op
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0,083 ±       0,127  MB/sec
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         1,470 ±       2,243    B/op
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.count                                                      128  thrpt    5        26,000                counts
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.time                                                       128  thrpt    5        19,000                    ms
[info] ArrayOfCharsBenchmark.readUPickle                                                                 128  thrpt    5    160547,310 ±    3189,807   ops/s
[info] ArrayOfCharsBenchmark.readUPickle:·gc.alloc.rate                                                  128  thrpt    5      2223,804 ±      44,104  MB/sec
[info] ArrayOfCharsBenchmark.readUPickle:·gc.alloc.rate.norm                                             128  thrpt    5     21792,003 ±       0,001    B/op
[info] ArrayOfCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                         128  thrpt    5      2303,687 ±    1428,032  MB/sec
[info] ArrayOfCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     22579,903 ±   14150,098    B/op
[info] ArrayOfCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0,058 ±       0,105  MB/sec
[info] ArrayOfCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         0,571 ±       1,016    B/op
[info] ArrayOfCharsBenchmark.readUPickle:·gc.count                                                       128  thrpt    5        17,000                counts
[info] ArrayOfCharsBenchmark.readUPickle:·gc.time                                                        128  thrpt    5         9,000                    ms
[info] ArrayOfCharsBenchmark.writeCirce                                                                  128  thrpt    5    244745,761 ±    3992,981   ops/s
[info] ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate                                                   128  thrpt    5      2410,551 ±      39,585  MB/sec
[info] ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate.norm                                              128  thrpt    5     15496,002 ±       0,001    B/op
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5      2436,070 ±    1434,875  MB/sec
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     15665,791 ±    9389,674    B/op
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0,050 ±       0,091  MB/sec
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         0,322 ±       0,593    B/op
[info] ArrayOfCharsBenchmark.writeCirce:·gc.count                                                        128  thrpt    5        18,000                counts
[info] ArrayOfCharsBenchmark.writeCirce:·gc.time                                                         128  thrpt    5        11,000                    ms
[info] ArrayOfCharsBenchmark.writeJacksonScala                                                           128  thrpt    5   1285827,765 ±  110452,980   ops/s
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate                                            128  thrpt    5       751,881 ±      64,526  MB/sec
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5       920,000 ±       0,001    B/op
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       801,896 ±    1149,857  MB/sec
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5       980,571 ±    1389,445    B/op
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,440 ±       3,698  MB/sec
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0,535 ±       4,499    B/op
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.count                                                 128  thrpt    5         6,000                counts
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.time                                                  128  thrpt    5         5,000                    ms
[info] ArrayOfCharsBenchmark.writeJsoniterScala                                                          128  thrpt    5   3000424,364 ±  235838,407   ops/s
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                                           128  thrpt    5      1022,209 ±      80,366  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5       536,000 ±       0,001    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1077,505 ±    1418,881  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5       562,582 ±     712,360    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,029 ±       0,134  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0,015 ±       0,070    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.count                                                128  thrpt    5         8,000                counts
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.time                                                 128  thrpt    5         5,000                    ms
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc                                                  128  thrpt    5   2711307,310 ±   37176,468   ops/s
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        128  thrpt    5           ≈ 0                counts
[info] ArrayOfCharsBenchmark.writePlayJson                                                               128  thrpt    5    308562,742 ±    2702,307   ops/s
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate                                                128  thrpt    5      2526,140 ±      22,105  MB/sec
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                                           128  thrpt    5     12880,001 ±       0,001    B/op
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5      2432,302 ±    1427,349  MB/sec
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     12399,205 ±    7206,907    B/op
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0,046 ±       0,067  MB/sec
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0,234 ±       0,341    B/op
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.count                                                     128  thrpt    5        18,000                counts
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.time                                                      128  thrpt    5        14,000                    ms
[info] ArrayOfCharsBenchmark.writeUPickle                                                                128  thrpt    5     96992,497 ±    1685,222   ops/s
[info] ArrayOfCharsBenchmark.writeUPickle:·gc.alloc.rate                                                 128  thrpt    5       922,301 ±      16,137  MB/sec
[info] ArrayOfCharsBenchmark.writeUPickle:·gc.alloc.rate.norm                                            128  thrpt    5     14960,005 ±       0,001    B/op
[info] ArrayOfCharsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                        128  thrpt    5       944,042 ±    1422,379  MB/sec
[info] ArrayOfCharsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     15315,162 ±   23104,273    B/op
[info] ArrayOfCharsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0,033 ±       0,146  MB/sec
[info] ArrayOfCharsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         0,541 ±       2,363    B/op
[info] ArrayOfCharsBenchmark.writeUPickle:·gc.count                                                      128  thrpt    5         7,000                counts
[info] ArrayOfCharsBenchmark.writeUPickle:·gc.time                                                       128  thrpt    5         5,000                    ms
[info] ArrayOfDoublesBenchmark.readCirce                                                                 128  thrpt    5     27815,965 ±    3021,925   ops/s
[info] ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate                                                  128  thrpt    5      1752,890 ±     190,307  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate.norm                                             128  thrpt    5     99144,016 ±       0,003    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5      1755,974 ±    1428,061  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     99098,163 ±   75143,788    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0,071 ±       0,201  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         3,976 ±      11,231    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.count                                                       128  thrpt    5        13,000                counts
[info] ArrayOfDoublesBenchmark.readCirce:·gc.time                                                        128  thrpt    5         9,000                    ms
[info] ArrayOfDoublesBenchmark.readDslJsonJava                                                           128  thrpt    5     98695,403 ±   15748,489   ops/s
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate                                            128  thrpt    5       930,985 ±     148,586  MB/sec
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                       128  thrpt    5     14840,004 ±       0,001    B/op
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                   128  thrpt    5       933,920 ±    1411,038  MB/sec
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     15045,784 ±   24601,705    B/op
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,006 ±       0,026  MB/sec
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0,091 ±       0,405    B/op
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.count                                                 128  thrpt    5         7,000                counts
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.time                                                  128  thrpt    5        11,000                    ms
[info] ArrayOfDoublesBenchmark.readJacksonScala                                                          128  thrpt    5     64060,387 ±    3983,601   ops/s
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate                                           128  thrpt    5      1123,167 ±      69,860  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5     27584,007 ±       0,001    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1070,815 ±    1410,553  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     26196,557 ±   33330,972    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,046 ±       0,164  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         1,113 ±       3,995    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.count                                                128  thrpt    5         8,000                counts
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.time                                                 128  thrpt    5         6,000                    ms
[info] ArrayOfDoublesBenchmark.readJsoniterScala                                                         128  thrpt    5    130119,363 ±    2331,450   ops/s
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate                                          128  thrpt    5       875,342 ±      15,665  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5     10584,003 ±       0,001    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5       943,154 ±    1420,861  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     11416,460 ±   17354,776    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,042 ±       0,204  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0,505 ±       2,473    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.count                                               128  thrpt    5         7,000                counts
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.time                                                128  thrpt    5         4,000                    ms
[info] ArrayOfDoublesBenchmark.readPlayJson                                                              128  thrpt    5     37766,700 ±    1830,454   ops/s
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate                                               128  thrpt    5      1933,352 ±      93,503  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate.norm                                          128  thrpt    5     80536,012 ±       0,001    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5      2020,993 ±      25,117  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     84198,704 ±    4653,009    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,054 ±       0,146  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         2,247 ±       6,011    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.count                                                    128  thrpt    5        15,000                counts
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.time                                                     128  thrpt    5        10,000                    ms
[info] ArrayOfDoublesBenchmark.readUPickle                                                               128  thrpt    5     58390,106 ±    5956,576   ops/s
[info] ArrayOfDoublesBenchmark.readUPickle:·gc.alloc.rate                                                128  thrpt    5      1300,467 ±     132,542  MB/sec
[info] ArrayOfDoublesBenchmark.readUPickle:·gc.alloc.rate.norm                                           128  thrpt    5     35040,007 ±       0,001    B/op
[info] ArrayOfDoublesBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1214,523 ±    1162,671  MB/sec
[info] ArrayOfDoublesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     32673,161 ±   30645,591    B/op
[info] ArrayOfDoublesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0,025 ±       0,105  MB/sec
[info] ArrayOfDoublesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0,661 ±       2,762    B/op
[info] ArrayOfDoublesBenchmark.readUPickle:·gc.count                                                     128  thrpt    5         9,000                counts
[info] ArrayOfDoublesBenchmark.readUPickle:·gc.time                                                      128  thrpt    5         5,000                    ms
[info] ArrayOfDoublesBenchmark.writeCirce                                                                128  thrpt    5     43475,267 ±     385,772   ops/s
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate                                                 128  thrpt    5       685,943 ±       6,073  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate.norm                                            128  thrpt    5     24824,010 ±       0,001    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5       670,533 ±       0,725  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     24266,421 ±     216,594    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0,379 ±       3,088  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5        13,758 ±     111,995    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.count                                                      128  thrpt    5         5,000                counts
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.time                                                       128  thrpt    5         4,000                    ms
[info] ArrayOfDoublesBenchmark.writeJacksonScala                                                         128  thrpt    5     46193,546 ±     358,060   ops/s
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate                                          128  thrpt    5       464,599 ±       3,606  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5     15824,010 ±       0,001    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5       471,895 ±    1059,402  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     16083,135 ±   36088,169    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,431 ±       3,626  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5        14,702 ±     123,563    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.count                                               128  thrpt    5         4,000                counts
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.time                                                128  thrpt    5         7,000                    ms
[info] ArrayOfDoublesBenchmark.writeJsoniterScala                                                        128  thrpt    5     49181,154 ±     769,860   ops/s
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate                                         128  thrpt    5       482,655 ±       7,530  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5     15440,009 ±       0,002    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5       474,034 ±    1066,777  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     15172,688 ±   34186,657    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0,336 ±       2,715  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5        10,811 ±      87,475    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.count                                              128  thrpt    5         4,000                counts
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.time                                               128  thrpt    5         5,000                    ms
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc                                                128  thrpt    5     49482,375 ±     681,148   ops/s
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                 128  thrpt    5       429,005 ±       5,922  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                            128  thrpt    5     13640,009 ±       0,001    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                        128  thrpt    5       339,389 ±    1219,750  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5     10808,023 ±   38882,465    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0,320 ±       2,755  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5        10,227 ±      88,053    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                      128  thrpt    5         3,000                counts
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.time                                       128  thrpt    5         5,000                    ms
[info] ArrayOfDoublesBenchmark.writeUPickle                                                              128  thrpt    5     37804,338 ±     378,737   ops/s
[info] ArrayOfDoublesBenchmark.writeUPickle:·gc.alloc.rate                                               128  thrpt    5      1025,143 ±      10,175  MB/sec
[info] ArrayOfDoublesBenchmark.writeUPickle:·gc.alloc.rate.norm                                          128  thrpt    5     42664,012 ±       0,002    B/op
[info] ArrayOfDoublesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1078,930 ±    1422,275  MB/sec
[info] ArrayOfDoublesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     44933,758 ±   59573,835    B/op
[info] ArrayOfDoublesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,033 ±       0,185  MB/sec
[info] ArrayOfDoublesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         1,390 ±       7,701    B/op
[info] ArrayOfDoublesBenchmark.writeUPickle:·gc.count                                                    128  thrpt    5         8,000                counts
[info] ArrayOfDoublesBenchmark.writeUPickle:·gc.time                                                     128  thrpt    5         5,000                    ms
[info] ArrayOfDurationsBenchmark.readCirce                                                               128  thrpt    5     17584,185 ±     300,724   ops/s
[info] ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate                                                128  thrpt    5      1255,976 ±      21,575  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate.norm                                           128  thrpt    5    112376,027 ±       0,017    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1211,717 ±    1157,568  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5    108453,922 ±  104063,043    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0,033 ±       0,122  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         2,980 ±      10,836    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.count                                                     128  thrpt    5         9,000                counts
[info] ArrayOfDurationsBenchmark.readCirce:·gc.time                                                      128  thrpt    5         6,000                    ms
[info] ArrayOfDurationsBenchmark.readJacksonScala                                                        128  thrpt    5     17785,210 ±     182,854   ops/s
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate                                         128  thrpt    5      1079,307 ±      11,166  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5     95474,409 ±      57,173    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5      1070,858 ±    1413,778  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     94724,261 ±  125026,312    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0,017 ±       0,143  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         1,468 ±      12,640    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.count                                              128  thrpt    5         8,000                counts
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.time                                               128  thrpt    5         5,000                    ms
[info] ArrayOfDurationsBenchmark.readJsoniterScala                                                       128  thrpt    5     87888,676 ±     457,676   ops/s
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate                                        128  thrpt    5       228,818 ±       1,189  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5      4096,005 ±       0,001    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5       204,706 ±    1079,353  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      3667,882 ±   19339,688    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0,003 ±       0,026  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0,054 ±       0,461    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.count                                             128  thrpt    5         2,000                counts
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.time                                              128  thrpt    5         3,000                    ms
[info] ArrayOfDurationsBenchmark.readPlayJson                                                            128  thrpt    5     14929,348 ±     525,425   ops/s
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate                                             128  thrpt    5      1431,327 ±      50,356  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate.norm                                        128  thrpt    5    150831,814 ±       1,866    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1476,883 ±    1167,670  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5    155576,295 ±  121169,529    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,046 ±       0,183  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         4,813 ±      19,132    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.count                                                  128  thrpt    5        11,000                counts
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.time                                                   128  thrpt    5         7,000                    ms
[info] ArrayOfDurationsBenchmark.readUPickle                                                             128  thrpt    5     15678,146 ±     370,943   ops/s
[info] ArrayOfDurationsBenchmark.readUPickle:·gc.alloc.rate                                              128  thrpt    5      1098,209 ±      26,279  MB/sec
[info] ArrayOfDurationsBenchmark.readUPickle:·gc.alloc.rate.norm                                         128  thrpt    5    110202,080 ±      49,172    B/op
[info] ArrayOfDurationsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1078,368 ±    1420,839  MB/sec
[info] ArrayOfDurationsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5    108194,259 ±  142354,281    B/op
[info] ArrayOfDurationsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,021 ±       0,113  MB/sec
[info] ArrayOfDurationsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         2,096 ±      11,428    B/op
[info] ArrayOfDurationsBenchmark.readUPickle:·gc.count                                                   128  thrpt    5         8,000                counts
[info] ArrayOfDurationsBenchmark.readUPickle:·gc.time                                                    128  thrpt    5         5,000                    ms
[info] ArrayOfDurationsBenchmark.writeCirce                                                              128  thrpt    5     62150,613 ±    1399,861   ops/s
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate                                               128  thrpt    5      1541,272 ±      34,483  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate.norm                                          128  thrpt    5     39016,007 ±       0,001    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1480,337 ±    1159,061  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     37465,007 ±   29066,770    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,054 ±       0,091  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         1,373 ±       2,343    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.count                                                    128  thrpt    5        11,000                counts
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.time                                                     128  thrpt    5         7,000                    ms
[info] ArrayOfDurationsBenchmark.writeJacksonScala                                                       128  thrpt    5     86428,434 ±    2416,347   ops/s
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate                                        128  thrpt    5      1309,232 ±      36,594  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5     23832,005 ±       0,001    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5      1340,192 ±      11,167  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     24396,474 ±     616,433    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0,042 ±       0,057  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0,758 ±       1,028    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.count                                             128  thrpt    5        10,000                counts
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.time                                              128  thrpt    5         7,000                    ms
[info] ArrayOfDurationsBenchmark.writeJsoniterScala                                                      128  thrpt    5    237374,489 ±    1830,052   ops/s
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate                                       128  thrpt    5       376,578 ±       2,901  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5      2496,002 ±       0,001    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5       441,726 ±     988,289  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5      2925,955 ±    6546,076    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0,320 ±       2,722  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         2,121 ±      18,030    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.count                                            128  thrpt    5         4,000                counts
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.time                                             128  thrpt    5         6,000                    ms
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc                                              128  thrpt    5    256223,402 ±     873,353   ops/s
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                               128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                          128  thrpt    5         0,002 ±       0,001    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                    128  thrpt    5           ≈ 0                counts
[info] ArrayOfDurationsBenchmark.writePlayJson                                                           128  thrpt    5     80179,661 ±    4707,624   ops/s
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate                                            128  thrpt    5      1514,242 ±      88,917  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate.norm                                       128  thrpt    5     29712,007 ±       0,015    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1479,293 ±    1152,617  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     29097,318 ±   24611,908    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,037 ±       0,105  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0,739 ±       2,059    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.count                                                 128  thrpt    5        11,000                counts
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.time                                                  128  thrpt    5         7,000                    ms
[info] ArrayOfDurationsBenchmark.writeUPickle                                                            128  thrpt    5     19059,066 ±    1156,101   ops/s
[info] ArrayOfDurationsBenchmark.writeUPickle:·gc.alloc.rate                                             128  thrpt    5       662,519 ±      40,134  MB/sec
[info] ArrayOfDurationsBenchmark.writeUPickle:·gc.alloc.rate.norm                                        128  thrpt    5     54687,769 ±       2,186    B/op
[info] ArrayOfDurationsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                    128  thrpt    5       673,843 ±       0,566  MB/sec
[info] ArrayOfDurationsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     55633,537 ±    3373,346    B/op
[info] ArrayOfDurationsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,353 ±       2,864  MB/sec
[info] ArrayOfDurationsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5        28,940 ±     234,433    B/op
[info] ArrayOfDurationsBenchmark.writeUPickle:·gc.count                                                  128  thrpt    5         5,000                counts
[info] ArrayOfDurationsBenchmark.writeUPickle:·gc.time                                                   128  thrpt    5         4,000                    ms
[info] ArrayOfEnumsBenchmark.readCirce                                                                   128  thrpt    5     29777,060 ±     188,658   ops/s
[info] ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate                                                    128  thrpt    5       661,662 ±       4,123  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate.norm                                               128  thrpt    5     34960,015 ±       0,002    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5       669,601 ±       1,022  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5     35379,548 ±     216,460    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0,386 ±       3,098  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5        20,423 ±     164,061    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.count                                                         128  thrpt    5         5,000                counts
[info] ArrayOfEnumsBenchmark.readCirce:·gc.time                                                          128  thrpt    5         5,000                    ms
[info] ArrayOfEnumsBenchmark.readJacksonScala                                                            128  thrpt    5     31403,133 ±     167,088   ops/s
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate                                             128  thrpt    5       432,751 ±       2,294  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5     21680,014 ±       0,002    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       338,337 ±    1214,412  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     16966,542 ±   60909,658    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,445 ±       3,755  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5        22,327 ±     188,404    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.count                                                  128  thrpt    5         3,000                counts
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.time                                                   128  thrpt    5         7,000                    ms
[info] ArrayOfEnumsBenchmark.readJsoniterScala                                                           128  thrpt    5     33709,089 ±      57,987   ops/s
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       307,167 ±       0,541  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5     14336,013 ±       0,002    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       307,057 ±    1079,349  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     14330,714 ±   50374,490    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,012 ±       0,108  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0,583 ±       5,019    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.count                                                 128  thrpt    5         3,000                counts
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.time                                                  128  thrpt    5         6,000                    ms
[info] ArrayOfEnumsBenchmark.readPlayJson                                                                128  thrpt    5     24790,520 ±      69,536   ops/s
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate                                                 128  thrpt    5      1385,745 ±       3,925  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm                                            128  thrpt    5     87944,018 ±       0,002    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1338,641 ±      12,452  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     84954,660 ±     786,877    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0,046 ±       0,132  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         2,908 ±       8,368    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.count                                                      128  thrpt    5        10,000                counts
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.time                                                       128  thrpt    5         8,000                    ms
[info] ArrayOfEnumsBenchmark.readUPickle                                                                 128  thrpt    5     27335,833 ±     206,909   ops/s
[info] ArrayOfEnumsBenchmark.readUPickle:·gc.alloc.rate                                                  128  thrpt    5       628,697 ±       4,747  MB/sec
[info] ArrayOfEnumsBenchmark.readUPickle:·gc.alloc.rate.norm                                             128  thrpt    5     36184,016 ±       0,002    B/op
[info] ArrayOfEnumsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                         128  thrpt    5       538,405 ±    1158,958  MB/sec
[info] ArrayOfEnumsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     30986,375 ±   66701,157    B/op
[info] ArrayOfEnumsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0,348 ±       2,732  MB/sec
[info] ArrayOfEnumsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5        20,084 ±     157,644    B/op
[info] ArrayOfEnumsBenchmark.readUPickle:·gc.count                                                       128  thrpt    5         4,000                counts
[info] ArrayOfEnumsBenchmark.readUPickle:·gc.time                                                        128  thrpt    5         3,000                    ms
[info] ArrayOfEnumsBenchmark.writeCirce                                                                  128  thrpt    5    183726,762 ±   19724,978   ops/s
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate                                                   128  thrpt    5      1202,340 ±     129,068  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate.norm                                              128  thrpt    5     10296,002 ±       0,001    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5      1209,108 ±    1158,362  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     10381,512 ±   10265,970    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0,046 ±       0,164  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         0,389 ±       1,399    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.count                                                        128  thrpt    5         9,000                counts
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.time                                                         128  thrpt    5         6,000                    ms
[info] ArrayOfEnumsBenchmark.writeJacksonScala                                                           128  thrpt    5    609193,159 ±   27493,266   ops/s
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate                                            128  thrpt    5       616,456 ±      27,810  MB/sec
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5      1592,001 ±       0,001    B/op
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       636,691 ±     268,811  MB/sec
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      1642,758 ±     631,477    B/op
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,450 ±       3,654  MB/sec
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         1,155 ±       9,373    B/op
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.count                                                 128  thrpt    5         5,000                counts
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.time                                                  128  thrpt    5         6,000                    ms
[info] ArrayOfEnumsBenchmark.writeJsoniterScala                                                          128  thrpt    5    649381,694 ±    9816,626   ops/s
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       498,603 ±       7,535  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5      1208,001 ±       0,001    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       474,059 ±    1066,827  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      1149,288 ±    2589,686    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,332 ±       2,685  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0,811 ±       6,551    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.count                                                128  thrpt    5         4,000                counts
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.time                                                 128  thrpt    5         5,000                    ms
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc                                                  128  thrpt    5    665293,973 ±    1138,028   ops/s
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              128  thrpt    5         0,001 ±       0,001    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        128  thrpt    5           ≈ 0                counts
[info] ArrayOfEnumsBenchmark.writePlayJson                                                               128  thrpt    5    359235,020 ±   35267,644   ops/s
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate                                                128  thrpt    5       993,754 ±      97,545  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm                                           128  thrpt    5      4352,001 ±       0,001    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5       934,866 ±    1406,119  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5      4085,047 ±    6016,948    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0,021 ±       0,179  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0,088 ±       0,761    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.count                                                     128  thrpt    5         7,000                counts
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.time                                                      128  thrpt    5         5,000                    ms
[info] ArrayOfEnumsBenchmark.writeUPickle                                                                128  thrpt    5     45548,939 ±     825,284   ops/s
[info] ArrayOfEnumsBenchmark.writeUPickle:·gc.alloc.rate                                                 128  thrpt    5       484,515 ±       8,785  MB/sec
[info] ArrayOfEnumsBenchmark.writeUPickle:·gc.alloc.rate.norm                                            128  thrpt    5     16736,010 ±       0,001    B/op
[info] ArrayOfEnumsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                        128  thrpt    5       474,033 ±    1066,749  MB/sec
[info] ArrayOfEnumsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     16383,892 ±   36805,364    B/op
[info] ArrayOfEnumsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0,345 ±       2,859  MB/sec
[info] ArrayOfEnumsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5        11,894 ±      98,579    B/op
[info] ArrayOfEnumsBenchmark.writeUPickle:·gc.count                                                      128  thrpt    5         4,000                counts
[info] ArrayOfEnumsBenchmark.writeUPickle:·gc.time                                                       128  thrpt    5         6,000                    ms
[info] ArrayOfFloatsBenchmark.readCirce                                                                  128  thrpt    5     40309,680 ±     482,282   ops/s
[info] ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate                                                   128  thrpt    5      1900,705 ±      23,052  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate.norm                                              128  thrpt    5     74184,011 ±       0,001    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5      1892,471 ±    1169,286  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     73863,766 ±   45663,077    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0,029 ±       0,072  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         1,139 ±       2,804    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.count                                                        128  thrpt    5        14,000                counts
[info] ArrayOfFloatsBenchmark.readCirce:·gc.time                                                         128  thrpt    5         9,000                    ms
[info] ArrayOfFloatsBenchmark.readDslJsonJava                                                            128  thrpt    5    319745,464 ±    2914,224   ops/s
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate                                             128  thrpt    5       331,697 ±       3,079  MB/sec
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                        128  thrpt    5      1632,001 ±       0,001    B/op
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                    128  thrpt    5       307,080 ±    1079,428  MB/sec
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      1512,848 ±    5317,886    B/op
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,004 ±       0,024  MB/sec
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0,021 ±       0,116    B/op
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.count                                                  128  thrpt    5         3,000                counts
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.time                                                   128  thrpt    5         5,000                    ms
[info] ArrayOfFloatsBenchmark.readJacksonScala                                                           128  thrpt    5    104324,472 ±    4538,906   ops/s
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate                                            128  thrpt    5      1217,980 ±      52,925  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5     18368,004 ±       0,001    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1205,637 ±    1155,122  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     18207,810 ±   17743,924    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,037 ±       0,143  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0,567 ±       2,170    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.count                                                 128  thrpt    5         9,000                counts
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.time                                                  128  thrpt    5         6,000                    ms
[info] ArrayOfFloatsBenchmark.readJsoniterScala                                                          128  thrpt    5    431938,013 ±   30262,734   ops/s
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       281,133 ±      19,704  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5      1024,001 ±       0,001    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       307,065 ±    1079,378  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      1111,519 ±    3907,192    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,019 ±       0,129  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0,068 ±       0,469    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.count                                                128  thrpt    5         3,000                counts
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.time                                                 128  thrpt    5         4,000                    ms
[info] ArrayOfFloatsBenchmark.readPlayJson                                                               128  thrpt    5     43114,440 ±    1299,643   ops/s
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate                                                128  thrpt    5      2260,991 ±      68,120  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate.norm                                           128  thrpt    5     82504,010 ±       0,002    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5      2296,190 ±    1432,909  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     83877,308 ±   54958,933    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0,062 ±       0,179  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         2,279 ±       6,587    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.count                                                     128  thrpt    5        17,000                counts
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.time                                                      128  thrpt    5        12,000                    ms
[info] ArrayOfFloatsBenchmark.readUPickle                                                                128  thrpt    5     65931,566 ±    1758,543   ops/s
[info] ArrayOfFloatsBenchmark.readUPickle:·gc.alloc.rate                                                 128  thrpt    5      1463,056 ±      39,006  MB/sec
[info] ArrayOfFloatsBenchmark.readUPickle:·gc.alloc.rate.norm                                            128  thrpt    5     34912,007 ±       0,001    B/op
[info] ArrayOfFloatsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1485,845 ±    1170,683  MB/sec
[info] ArrayOfFloatsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     35479,580 ±   28618,263    B/op
[info] ArrayOfFloatsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0,037 ±       0,119  MB/sec
[info] ArrayOfFloatsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         0,893 ±       2,827    B/op
[info] ArrayOfFloatsBenchmark.readUPickle:·gc.count                                                      128  thrpt    5        11,000                counts
[info] ArrayOfFloatsBenchmark.readUPickle:·gc.time                                                       128  thrpt    5         8,000                    ms
[info] ArrayOfFloatsBenchmark.writeCirce                                                                 128  thrpt    5     92344,252 ±   20450,878   ops/s
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate                                                  128  thrpt    5       738,142 ±     163,404  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate.norm                                             128  thrpt    5     12576,005 ±       0,002    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5       670,547 ±       0,774  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     11456,938 ±    2728,951    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0,017 ±       0,067  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         0,295 ±       1,251    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.count                                                       128  thrpt    5         5,000                counts
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.time                                                        128  thrpt    5         4,000                    ms
[info] ArrayOfFloatsBenchmark.writeDslJsonJava                                                           128  thrpt    5    122664,788 ±    7120,000   ops/s
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate                                            128  thrpt    5       454,103 ±      26,337  MB/sec
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                       128  thrpt    5      5824,004 ±       0,001    B/op
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                   128  thrpt    5       470,362 ±    1054,082  MB/sec
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      6038,165 ±   13469,317    B/op
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,007 ±       0,041  MB/sec
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0,095 ±       0,528    B/op
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.count                                                 128  thrpt    5         4,000                counts
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.time                                                  128  thrpt    5         8,000                    ms
[info] ArrayOfFloatsBenchmark.writeJacksonScala                                                          128  thrpt    5    109887,540 ±    4790,617   ops/s
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate                                           128  thrpt    5       433,594 ±      18,905  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5      6208,004 ±       0,001    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       338,318 ±    1214,323  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      4874,013 ±   17509,575    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,419 ±       3,608  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         6,054 ±      52,130    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.count                                                128  thrpt    5         3,000                counts
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.time                                                 128  thrpt    5         6,000                    ms
[info] ArrayOfFloatsBenchmark.writeJsoniterScala                                                         128  thrpt    5    124966,839 ±    1658,448   ops/s
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate                                          128  thrpt    5       462,606 ±       6,135  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5      5824,004 ±       0,001    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5       474,048 ±    1066,802  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      5974,081 ±   13432,069    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,335 ±       2,694  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         4,221 ±      33,974    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.count                                               128  thrpt    5         4,000                counts
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.time                                                128  thrpt    5         5,000                    ms
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc                                                 128  thrpt    5    125598,249 ±    1438,897   ops/s
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                  128  thrpt    5       365,957 ±       4,239  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                             128  thrpt    5      4584,003 ±       0,001    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                         128  thrpt    5       307,080 ±    1079,428  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5      3846,715 ±   13521,910    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0,003 ±       0,026  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         0,037 ±       0,321    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                       128  thrpt    5         3,000                counts
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.time                                        128  thrpt    5         5,000                    ms
[info] ArrayOfInstantsBenchmark.readCirce                                                                128  thrpt    5     10740,422 ±     145,751   ops/s
[info] ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate                                                 128  thrpt    5      1783,885 ±      24,324  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate.norm                                            128  thrpt    5    261304,867 ±       7,080    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1755,162 ±    1431,339  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5    257143,813 ±  210594,233    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0,050 ±       0,146  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         7,318 ±      21,380    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.count                                                      128  thrpt    5        13,000                counts
[info] ArrayOfInstantsBenchmark.readCirce:·gc.time                                                       128  thrpt    5         8,000                    ms
[info] ArrayOfInstantsBenchmark.readJacksonScala                                                         128  thrpt    5     10711,500 ±    1470,517   ops/s
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate                                          128  thrpt    5      1650,992 ±     226,521  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5    242481,933 ±      54,437    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1612,793 ±    1416,568  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5    237378,928 ±  217321,167    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,058 ±       0,154  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         8,539 ±      22,599    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.count                                               128  thrpt    5        12,000                counts
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.time                                                128  thrpt    5        10,000                    ms
[info] ArrayOfInstantsBenchmark.readJsoniterScala                                                        128  thrpt    5    224386,885 ±   64322,045   ops/s
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate                                         128  thrpt    5       584,202 ±     167,460  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5      4096,002 ±       0,001    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5       641,368 ±     278,859  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      4485,485 ±     765,908    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0,342 ±       2,612  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         2,315 ±      17,641    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.count                                              128  thrpt    5         5,000                counts
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.time                                               128  thrpt    5         5,000                    ms
[info] ArrayOfInstantsBenchmark.readPlayJson                                                             128  thrpt    5      6134,424 ±      47,033   ops/s
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate                                              128  thrpt    5      1633,978 ±      12,491  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate.norm                                         128  thrpt    5    419048,071 ±       0,010    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1612,763 ±    1408,012  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5    413531,406 ±  359340,193    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,042 ±       0,127  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5        10,671 ±      32,484    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.count                                                   128  thrpt    5        12,000                counts
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.time                                                    128  thrpt    5         8,000                    ms
[info] ArrayOfInstantsBenchmark.readUPickle                                                              128  thrpt    5     10496,455 ±     219,172   ops/s
[info] ArrayOfInstantsBenchmark.readUPickle:·gc.alloc.rate                                               128  thrpt    5      1716,415 ±      35,752  MB/sec
[info] ArrayOfInstantsBenchmark.readUPickle:·gc.alloc.rate.norm                                          128  thrpt    5    257266,628 ±      40,340    B/op
[info] ArrayOfInstantsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1756,182 ±    1424,300  MB/sec
[info] ArrayOfInstantsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5    263216,067 ±  213198,801    B/op
[info] ArrayOfInstantsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,033 ±       0,072  MB/sec
[info] ArrayOfInstantsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         4,988 ±      10,688    B/op
[info] ArrayOfInstantsBenchmark.readUPickle:·gc.count                                                    128  thrpt    5        13,000                counts
[info] ArrayOfInstantsBenchmark.readUPickle:·gc.time                                                     128  thrpt    5         7,000                    ms
[info] ArrayOfInstantsBenchmark.writeCirce                                                               128  thrpt    5     28122,928 ±     123,367   ops/s
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate                                                128  thrpt    5      2016,749 ±       8,791  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate.norm                                           128  thrpt    5    112824,016 ±       0,002    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5      2024,593 ±      22,138  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5    113263,179 ±    1635,286    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0,058 ±       0,088  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         3,261 ±       4,900    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.count                                                     128  thrpt    5        15,000                counts
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.time                                                      128  thrpt    5        10,000                    ms
[info] ArrayOfInstantsBenchmark.writeJacksonScala                                                        128  thrpt    5     33718,286 ±     217,173   ops/s
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate                                         128  thrpt    5      1954,911 ±      12,565  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5     91216,013 ±       0,002    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5      2019,792 ±      26,940  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     94243,488 ±    1277,777    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0,050 ±       0,091  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         2,331 ±       4,257    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.count                                              128  thrpt    5        15,000                counts
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.time                                               128  thrpt    5        11,000                    ms
[info] ArrayOfInstantsBenchmark.writeJsoniterScala                                                       128  thrpt    5    409035,273 ±    1631,960   ops/s
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate                                        128  thrpt    5       904,728 ±       3,574  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5      3480,001 ±       0,001    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5       807,891 ±    1158,345  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      3106,763 ±    4440,813    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0,021 ±       0,139  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0,080 ±       0,533    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.count                                             128  thrpt    5         6,000                counts
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.time                                              128  thrpt    5         4,000                    ms
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc                                               128  thrpt    5    472332,142 ±    1986,686   ops/s
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                           128  thrpt    5         0,001 ±       0,001    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                     128  thrpt    5           ≈ 0                counts
[info] ArrayOfInstantsBenchmark.writePlayJson                                                            128  thrpt    5     33571,117 ±     126,662   ops/s
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate                                             128  thrpt    5      2071,884 ±       7,728  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate.norm                                        128  thrpt    5     97096,013 ±       0,002    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5      2024,609 ±      22,356  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     94880,677 ±    1217,945    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,087 ±       0,174  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         4,097 ±       8,138    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.count                                                  128  thrpt    5        15,000                counts
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.time                                                   128  thrpt    5        10,000                    ms
[info] ArrayOfInstantsBenchmark.writeUPickle                                                             128  thrpt    5     11429,688 ±     797,152   ops/s
[info] ArrayOfInstantsBenchmark.writeUPickle:·gc.alloc.rate                                              128  thrpt    5       955,847 ±      66,640  MB/sec
[info] ArrayOfInstantsBenchmark.writeUPickle:·gc.alloc.rate.norm                                         128  thrpt    5    131565,266 ±      19,486    B/op
[info] ArrayOfInstantsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                     128  thrpt    5       942,755 ±    1420,309  MB/sec
[info] ArrayOfInstantsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5    129578,712 ±  192569,481    B/op
[info] ArrayOfInstantsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,025 ±       0,143  MB/sec
[info] ArrayOfInstantsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         3,416 ±      19,575    B/op
[info] ArrayOfInstantsBenchmark.writeUPickle:·gc.count                                                   128  thrpt    5         7,000                counts
[info] ArrayOfInstantsBenchmark.writeUPickle:·gc.time                                                    128  thrpt    5         4,000                    ms
[info] ArrayOfIntsBenchmark.readCirce                                                                    128  thrpt    5    108482,399 ±    1111,347   ops/s
[info] ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate                                                     128  thrpt    5      1870,580 ±      19,227  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate.norm                                                128  thrpt    5     27128,004 ±       0,001    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                            128  thrpt    5      1756,920 ±    1425,600  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                       128  thrpt    5     25476,969 ±   20616,616    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                        128  thrpt    5         0,042 ±       0,127  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                   128  thrpt    5         0,604 ±       1,833    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.count                                                          128  thrpt    5        13,000                counts
[info] ArrayOfIntsBenchmark.readCirce:·gc.time                                                           128  thrpt    5         7,000                    ms
[info] ArrayOfIntsBenchmark.readDslJsonJava                                                              128  thrpt    5    467417,170 ±   31771,425   ops/s
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate                                               128  thrpt    5       484,865 ±      32,963  MB/sec
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                          128  thrpt    5      1632,001 ±       0,001    B/op
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                      128  thrpt    5       501,041 ±    1108,180  MB/sec
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5      1692,656 ±    3756,448    B/op
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,008 ±       0,072  MB/sec
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0,028 ±       0,240    B/op
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.count                                                    128  thrpt    5         4,000                counts
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.time                                                     128  thrpt    5         7,000                    ms
[info] ArrayOfIntsBenchmark.readJacksonScala                                                             128  thrpt    5    339284,724 ±    7804,734   ops/s
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate                                              128  thrpt    5       479,608 ±      11,034  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                         128  thrpt    5      2224,001 ±       0,001    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5       471,903 ±    1059,423  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      2192,196 ±    4927,687    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,448 ±       3,726  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         2,074 ±      17,233    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.count                                                   128  thrpt    5         4,000                counts
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.time                                                    128  thrpt    5         8,000                    ms
[info] ArrayOfIntsBenchmark.readJsoniterScala                                                            128  thrpt    5    777784,777 ±   10814,063   ops/s
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                             128  thrpt    5       506,228 ±       7,037  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                        128  thrpt    5      1024,001 ±       0,001    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       506,573 ±    1123,358  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      1025,977 ±    2276,297    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,322 ±       2,552  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0,653 ±       5,170    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.count                                                  128  thrpt    5         4,000                counts
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.time                                                   128  thrpt    5         5,000                    ms
[info] ArrayOfIntsBenchmark.readPlayJson                                                                 128  thrpt    5     80258,466 ±     904,760   ops/s
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate                                                  128  thrpt    5      3410,660 ±      38,442  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                             128  thrpt    5     66856,006 ±       0,001    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                         128  thrpt    5      3394,608 ±      34,028  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     66541,848 ±    1046,952    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0,058 ±       0,143  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         1,142 ±       2,805    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.count                                                       128  thrpt    5        25,000                counts
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.time                                                        128  thrpt    5        16,000                    ms
[info] ArrayOfIntsBenchmark.readUPickle                                                                  128  thrpt    5    142588,837 ±    1117,077   ops/s
[info] ArrayOfIntsBenchmark.readUPickle:·gc.alloc.rate                                                   128  thrpt    5      1602,482 ±      12,753  MB/sec
[info] ArrayOfIntsBenchmark.readUPickle:·gc.alloc.rate.norm                                              128  thrpt    5     17680,003 ±       0,001    B/op
[info] ArrayOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                          128  thrpt    5      1621,729 ±    1427,208  MB/sec
[info] ArrayOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     17893,066 ±   15762,349    B/op
[info] ArrayOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0,029 ±       0,072  MB/sec
[info] ArrayOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         0,321 ±       0,791    B/op
[info] ArrayOfIntsBenchmark.readUPickle:·gc.count                                                        128  thrpt    5        12,000                counts
[info] ArrayOfIntsBenchmark.readUPickle:·gc.time                                                         128  thrpt    5         7,000                    ms
[info] ArrayOfIntsBenchmark.writeCirce                                                                   128  thrpt    5    235722,884 ±   14052,381   ops/s
[info] ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate                                                    128  thrpt    5      1916,616 ±     114,187  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm                                               128  thrpt    5     12792,002 ±       0,001    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5      1889,587 ±    1161,351  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5     12588,700 ±    7151,767    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0,054 ±       0,156  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5         0,359 ±       1,035    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.count                                                         128  thrpt    5        14,000                counts
[info] ArrayOfIntsBenchmark.writeCirce:·gc.time                                                          128  thrpt    5        10,000                    ms
[info] ArrayOfIntsBenchmark.writeDslJsonJava                                                             128  thrpt    5   1044091,030 ±    4756,865   ops/s
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate                                              128  thrpt    5       568,078 ±       2,593  MB/sec
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                         128  thrpt    5       856,000 ±       0,001    B/op
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                     128  thrpt    5       634,121 ±     263,381  MB/sec
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5       955,521 ±     397,068    B/op
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,007 ±       0,061  MB/sec
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0,011 ±       0,092    B/op
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.count                                                   128  thrpt    5         5,000                counts
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.time                                                    128  thrpt    5         8,000                    ms
[info] ArrayOfIntsBenchmark.writeJacksonScala                                                            128  thrpt    5    876309,308 ±   21505,424   ops/s
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                             128  thrpt    5       690,645 ±      16,928  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5      1240,001 ±       0,001    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       668,215 ±       0,680  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      1199,767 ±      29,077    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,444 ±       3,644  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0,802 ±       6,584    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.count                                                  128  thrpt    5         5,000                counts
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.time                                                   128  thrpt    5         5,000                    ms
[info] ArrayOfIntsBenchmark.writeJsoniterScala                                                           128  thrpt    5   1111945,992 ±   80225,525   ops/s
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       604,978 ±      43,634  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5       856,000 ±       0,001    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       538,534 ±    1159,234  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5       763,982 ±    1645,937    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,336 ±       2,579  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0,477 ±       3,665    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.count                                                 128  thrpt    5         4,000                counts
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.time                                                  128  thrpt    5         3,000                    ms
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc                                                   128  thrpt    5   1108438,522 ±    3528,451   ops/s
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                    128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                               128  thrpt    5        ≈ 10⁻³                  B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                         128  thrpt    5           ≈ 0                counts
[info] ArrayOfIntsBenchmark.writePlayJson                                                                128  thrpt    5     33693,867 ±     638,222   ops/s
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate                                                 128  thrpt    5      1860,517 ±      34,896  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm                                            128  thrpt    5     86872,013 ±       0,002    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1886,793 ±    1154,928  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     88140,323 ±   54881,410    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0,062 ±       0,113  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         2,919 ±       5,289    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.count                                                      128  thrpt    5        14,000                counts
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.time                                                       128  thrpt    5         8,000                    ms
[info] ArrayOfIntsBenchmark.writeUPickle                                                                 128  thrpt    5    119838,728 ±    1137,219   ops/s
[info] ArrayOfIntsBenchmark.writeUPickle:·gc.alloc.rate                                                  128  thrpt    5      1528,300 ±      14,658  MB/sec
[info] ArrayOfIntsBenchmark.writeUPickle:·gc.alloc.rate.norm                                             128  thrpt    5     20064,004 ±       0,001    B/op
[info] ArrayOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                         128  thrpt    5      1621,400 ±    1425,655  MB/sec
[info] ArrayOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     21291,287 ±   18830,997    B/op
[info] ArrayOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0,033 ±       0,044  MB/sec
[info] ArrayOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         0,438 ±       0,578    B/op
[info] ArrayOfIntsBenchmark.writeUPickle:·gc.count                                                       128  thrpt    5        12,000                counts
[info] ArrayOfIntsBenchmark.writeUPickle:·gc.time                                                        128  thrpt    5         7,000                    ms
[info] ArrayOfJavaEnumsBenchmark.readCirce                                                               128  thrpt    5    139342,147 ±    1043,915   ops/s
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate                                                128  thrpt    5      1919,426 ±      14,411  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate.norm                                           128  thrpt    5     21672,003 ±       0,001    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1888,930 ±    1172,992  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     21330,749 ±   13314,494    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0,046 ±       0,105  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0,518 ±       1,182    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.count                                                     128  thrpt    5        14,000                counts
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.time                                                      128  thrpt    5         9,000                    ms
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala                                                        128  thrpt    5    217578,646 ±    4400,239   ops/s
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate                                         128  thrpt    5      1298,902 ±      26,276  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5      9392,002 ±       0,001    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5      1338,918 ±      11,319  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      9681,508 ±     160,601    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0,033 ±       0,122  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0,241 ±       0,879    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.count                                              128  thrpt    5        10,000                counts
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.time                                               128  thrpt    5         7,000                    ms
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala                                                       128  thrpt    5    296291,351 ±   21919,527   ops/s
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate                                        128  thrpt    5       964,224 ±      71,322  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5      5120,001 ±       0,001    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5       942,884 ±    1419,469  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      4996,474 ±    7379,000    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0,017 ±       0,067  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0,089 ±       0,355    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.count                                             128  thrpt    5         7,000                counts
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.time                                              128  thrpt    5         5,000                    ms
[info] ArrayOfJavaEnumsBenchmark.readPlayJson                                                            128  thrpt    5     75031,534 ±    2124,363   ops/s
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate                                             128  thrpt    5      3119,465 ±      87,954  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm                                        128  thrpt    5     65408,006 ±       0,001    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5      3116,194 ±    1406,858  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     65355,501 ±   30079,871    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,100 ±       0,105  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         2,097 ±       2,198    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.count                                                  128  thrpt    5        23,000                counts
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.time                                                   128  thrpt    5        18,000                    ms
[info] ArrayOfJavaEnumsBenchmark.readUPickle                                                             128  thrpt    5    119322,997 ±     744,629   ops/s
[info] ArrayOfJavaEnumsBenchmark.readUPickle:·gc.alloc.rate                                              128  thrpt    5      1812,352 ±      11,313  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readUPickle:·gc.alloc.rate.norm                                         128  thrpt    5     23896,004 ±       0,001    B/op
[info] ArrayOfJavaEnumsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1757,227 ±    1422,512  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     23174,996 ±   18878,083    B/op
[info] ArrayOfJavaEnumsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,037 ±       0,105  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0,494 ±       1,378    B/op
[info] ArrayOfJavaEnumsBenchmark.readUPickle:·gc.count                                                   128  thrpt    5        13,000                counts
[info] ArrayOfJavaEnumsBenchmark.readUPickle:·gc.time                                                    128  thrpt    5         8,000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeCirce                                                              128  thrpt    5    185368,160 ±    2743,430   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate                                               128  thrpt    5      1213,127 ±      17,863  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate.norm                                          128  thrpt    5     10296,002 ±       0,001    B/op
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1209,185 ±    1158,387  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     10267,961 ±    9900,556    B/op
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,046 ±       0,164  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0,389 ±       1,394    B/op
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.count                                                    128  thrpt    5         9,000                counts
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.time                                                     128  thrpt    5         6,000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala                                                       128  thrpt    5    627430,355 ±   17963,229   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate                                        128  thrpt    5       634,866 ±      18,167  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5      1592,001 ±       0,001    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5       636,366 ±     268,222  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      1594,790 ±     633,503    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0,456 ±       3,663  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         1,142 ±       9,162    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.count                                             128  thrpt    5         5,000                counts
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.time                                              128  thrpt    5         7,000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala                                                      128  thrpt    5    628249,790 ±   26911,431   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate                                       128  thrpt    5       482,390 ±      20,645  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5      1208,001 ±       0,001    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5       474,085 ±    1066,852  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5      1186,305 ±    2662,551    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0,336 ±       2,758  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0,840 ±       6,900    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.count                                            128  thrpt    5         4,000                counts
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.time                                             128  thrpt    5         5,000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc                                              128  thrpt    5    640384,365 ±    2487,831   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                               128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                          128  thrpt    5         0,001 ±       0,001    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                    128  thrpt    5           ≈ 0                counts
[info] ArrayOfJavaEnumsBenchmark.writePlayJson                                                           128  thrpt    5    390406,943 ±    1064,654   ops/s
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate                                            128  thrpt    5      1075,962 ±       2,963  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm                                       128  thrpt    5      4336,001 ±       0,001    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1069,152 ±    1411,814  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      4309,250 ±    5697,901    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,037 ±       0,174  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0,151 ±       0,701    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.count                                                 128  thrpt    5         8,000                counts
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.time                                                  128  thrpt    5         6,000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeUPickle                                                            128  thrpt    5     46809,685 ±     271,700   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.alloc.rate                                             128  thrpt    5       497,930 ±       2,877  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.alloc.rate.norm                                        128  thrpt    5     16736,009 ±       0,001    B/op
[info] ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                    128  thrpt    5       474,158 ±    1067,212  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     15939,058 ±   35882,328    B/op
[info] ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,342 ±       2,855  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5        11,498 ±      96,019    B/op
[info] ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.count                                                  128  thrpt    5         4,000                counts
[info] ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.time                                                   128  thrpt    5         6,000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readCirce                                                          128  thrpt    5     10268,358 ±     890,581   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate                                           128  thrpt    5      1345,731 ±     116,773  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                                      128  thrpt    5    206184,043 ±       0,005    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1347,361 ±       8,071  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5    206520,922 ±   18672,957    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,021 ±       0,098  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         3,248 ±      15,654    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.count                                                128  thrpt    5        10,000                counts
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.time                                                 128  thrpt    5         6,000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala                                                   128  thrpt    5     10765,593 ±     260,508   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                                    128  thrpt    5      1290,712 ±      31,462  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                               128  thrpt    5    188617,616 ±      55,054    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                           128  thrpt    5      1340,009 ±      10,852  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5    195827,059 ±    4356,090    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0,033 ±       0,122  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         4,851 ±      17,644    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.count                                         128  thrpt    5        10,000                counts
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.time                                          128  thrpt    5         7,000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala                                                  128  thrpt    5    247095,391 ±    4381,079   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                   128  thrpt    5      1608,252 ±      28,668  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                              128  thrpt    5     10240,002 ±       0,001    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                          128  thrpt    5      1621,047 ±    1427,879  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5     10322,993 ±    9124,324    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0,058 ±       0,067  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5         0,371 ±       0,425    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.count                                        128  thrpt    5        12,000                counts
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.time                                         128  thrpt    5         7,000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson                                                       128  thrpt    5      8670,003 ±     177,624   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate                                        128  thrpt    5      1615,157 ±      33,031  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                   128  thrpt    5    293080,373 ±       2,778    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                               128  thrpt    5      1612,790 ±    1412,866  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5    292878,229 ±  261447,336    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0,033 ±       0,122  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         6,052 ±      22,075    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.count                                             128  thrpt    5        12,000                counts
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.time                                              128  thrpt    5         9,000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readUPickle                                                        128  thrpt    5     10010,694 ±     235,089   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.alloc.rate                                         128  thrpt    5      1294,076 ±      30,454  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.alloc.rate.norm                                    128  thrpt    5    203369,763 ±      40,087    B/op
[info] ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                128  thrpt    5      1348,341 ±       6,867  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5    211903,746 ±    4918,746    B/op
[info] ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0,042 ±       0,098  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         6,537 ±      15,381    B/op
[info] ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.count                                              128  thrpt    5        10,000                counts
[info] ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.time                                               128  thrpt    5         7,000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeCirce                                                         128  thrpt    5     21607,754 ±     408,566   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate                                          128  thrpt    5      1147,871 ±      21,179  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                     128  thrpt    5     83580,396 ±      37,680    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1208,326 ±    1156,693  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     88012,525 ±   84607,023    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,042 ±       0,098  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         3,033 ±       7,139    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.count                                               128  thrpt    5         9,000                counts
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.time                                                128  thrpt    5         6,000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala                                                  128  thrpt    5     25354,917 ±     196,174   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                   128  thrpt    5      1074,856 ±       8,298  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                              128  thrpt    5     66696,017 ±       0,002    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                          128  thrpt    5      1070,713 ±    1413,223  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5     66447,796 ±   87801,367    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0,029 ±       0,156  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5         1,808 ±       9,686    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.count                                        128  thrpt    5         8,000                counts
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.time                                         128  thrpt    5         6,000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala                                                 128  thrpt    5    793646,974 ±   14418,751   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                  128  thrpt    5      1432,652 ±      26,018  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                             128  thrpt    5      2840,001 ±       0,001    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                         128  thrpt    5      1484,261 ±    1157,004  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5      2942,108 ±    2286,387    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0,062 ±       0,127  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         0,124 ±       0,251    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.count                                       128  thrpt    5        11,000                counts
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.time                                        128  thrpt    5         7,000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc                                         128  thrpt    5    702740,484 ±   63644,556   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                          128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                     128  thrpt    5         0,001 ±       0,001    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                               128  thrpt    5           ≈ 0                counts
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson                                                      128  thrpt    5     23956,684 ±     371,330   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate                                       128  thrpt    5      1104,869 ±      17,109  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                  128  thrpt    5     72560,018 ±       0,002    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                              128  thrpt    5      1072,739 ±    1412,790  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5     70480,220 ±   93150,552    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0,012 ±       0,108  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0,818 ±       7,047    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.count                                            128  thrpt    5         8,000                counts
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.time                                             128  thrpt    5         5,000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeUPickle                                                       128  thrpt    5     15170,513 ±      26,135   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.alloc.rate                                        128  thrpt    5       907,623 ±       1,562  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.alloc.rate.norm                                   128  thrpt    5     94127,707 ±       2,790    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                               128  thrpt    5       808,376 ±    1160,028  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     83832,655 ±  120257,850    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0,017 ±       0,105  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         1,727 ±      10,840    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.count                                             128  thrpt    5         6,000                counts
[info] ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.time                                              128  thrpt    5         3,000                    ms
[info] ArrayOfLocalDatesBenchmark.readCirce                                                              128  thrpt    5     26408,789 ±     226,512   ops/s
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate                                               128  thrpt    5      1480,076 ±      12,809  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate.norm                                          128  thrpt    5     88168,017 ±       0,003    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1482,717 ±    1168,344  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     88316,100 ±   69315,885    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,037 ±       0,200  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         2,231 ±      11,880    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.count                                                    128  thrpt    5        11,000                counts
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.time                                                     128  thrpt    5         7,000                    ms
[info] ArrayOfLocalDatesBenchmark.readJacksonScala                                                       128  thrpt    5     28538,461 ±     980,818   ops/s
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate                                        128  thrpt    5      1322,049 ±      45,137  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5     72880,016 ±       0,002    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5      1340,079 ±      10,797  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     73878,056 ±    2288,752    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0,037 ±       0,088  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         2,066 ±       4,831    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.count                                             128  thrpt    5        10,000                counts
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.time                                              128  thrpt    5         8,000                    ms
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala                                                      128  thrpt    5    443967,263 ±   10905,121   ops/s
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate                                       128  thrpt    5      1155,827 ±      28,367  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5      4096,001 ±       0,001    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5      1213,323 ±    1160,152  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5      4301,264 ±    4130,754    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0,037 ±       0,143  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0,133 ±       0,507    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.count                                            128  thrpt    5         9,000                counts
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.time                                             128  thrpt    5         4,000                    ms
[info] ArrayOfLocalDatesBenchmark.readPlayJson                                                           128  thrpt    5     17953,958 ±     109,819   ops/s
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate                                            128  thrpt    5      1837,181 ±      11,167  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate.norm                                       128  thrpt    5    160984,026 ±       0,015    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1750,302 ±    1415,439  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5    153386,125 ±  124341,595    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,062 ±       0,127  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         5,470 ±      11,077    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.count                                                 128  thrpt    5        13,000                counts
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.time                                                  128  thrpt    5         9,000                    ms
[info] ArrayOfLocalDatesBenchmark.readUPickle                                                            128  thrpt    5     24666,461 ±     229,639   ops/s
[info] ArrayOfLocalDatesBenchmark.readUPickle:·gc.alloc.rate                                             128  thrpt    5      1372,084 ±      12,711  MB/sec
[info] ArrayOfLocalDatesBenchmark.readUPickle:·gc.alloc.rate.norm                                        128  thrpt    5     87512,018 ±       0,003    B/op
[info] ArrayOfLocalDatesBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1349,033 ±       6,562  MB/sec
[info] ArrayOfLocalDatesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     86042,214 ±     923,829    B/op
[info] ArrayOfLocalDatesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,029 ±       0,122  MB/sec
[info] ArrayOfLocalDatesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         1,858 ±       7,741    B/op
[info] ArrayOfLocalDatesBenchmark.readUPickle:·gc.count                                                  128  thrpt    5        10,000                counts
[info] ArrayOfLocalDatesBenchmark.readUPickle:·gc.time                                                   128  thrpt    5         6,000                    ms
[info] ArrayOfLocalDatesBenchmark.writeCirce                                                             128  thrpt    5     49484,532 ±    1135,139   ops/s
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate                                              128  thrpt    5      1573,907 ±      36,020  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate.norm                                         128  thrpt    5     50040,009 ±       0,002    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1615,362 ±    1415,049  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     51406,117 ±   46063,920    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,033 ±       0,166  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         1,065 ±       5,339    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.count                                                   128  thrpt    5        12,000                counts
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.time                                                    128  thrpt    5         8,000                    ms
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala                                                      128  thrpt    5    137429,949 ±   13548,878   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate                                       128  thrpt    5      1343,827 ±     132,426  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                  128  thrpt    5     15384,003 ±       0,001    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                              128  thrpt    5      1341,197 ±      12,159  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5     15361,723 ±    1475,678    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0,033 ±       0,091  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0,383 ±       1,046    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.count                                            128  thrpt    5        10,000                counts
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.time                                             128  thrpt    5         8,000                    ms
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala                                                     128  thrpt    5   1254667,005 ±  321721,505   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate                                      128  thrpt    5      1346,217 ±     345,233  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                 128  thrpt    5      1688,000 ±       0,001    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                             128  thrpt    5      1349,086 ±       6,875  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5      1698,253 ±     481,102    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0,033 ±       0,072  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0,042 ±       0,092    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.count                                           128  thrpt    5        10,000                counts
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.time                                            128  thrpt    5         6,000                    ms
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc                                             128  thrpt    5    938637,956 ±    6382,504   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                              128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                         128  thrpt    5        ≈ 10⁻³                  B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                   128  thrpt    5           ≈ 0                counts
[info] ArrayOfLocalDatesBenchmark.writePlayJson                                                          128  thrpt    5     50619,904 ±    6858,813   ops/s
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate                                           128  thrpt    5      1342,665 ±     181,963  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate.norm                                      128  thrpt    5     41728,009 ±       0,002    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1343,572 ±      10,495  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     41795,141 ±    5331,209    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,037 ±       0,200  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         1,129 ±       5,986    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.count                                                128  thrpt    5        10,000                counts
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.time                                                 128  thrpt    5         6,000                    ms
[info] ArrayOfLocalDatesBenchmark.writeUPickle                                                           128  thrpt    5     29078,503 ±     322,130   ops/s
[info] ArrayOfLocalDatesBenchmark.writeUPickle:·gc.alloc.rate                                            128  thrpt    5       665,359 ±       7,369  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeUPickle:·gc.alloc.rate.norm                                       128  thrpt    5     36000,015 ±       0,002    B/op
[info] ArrayOfLocalDatesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                   128  thrpt    5       673,656 ±       0,040  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     36449,189 ±     404,548    B/op
[info] ArrayOfLocalDatesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,350 ±       2,837  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5        18,951 ±     153,496    B/op
[info] ArrayOfLocalDatesBenchmark.writeUPickle:·gc.count                                                 128  thrpt    5         5,000                counts
[info] ArrayOfLocalDatesBenchmark.writeUPickle:·gc.time                                                  128  thrpt    5         4,000                    ms
[info] ArrayOfLocalTimesBenchmark.readCirce                                                              128  thrpt    5     16395,228 ±     393,438   ops/s
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate                                               128  thrpt    5      1489,687 ±      35,507  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate.norm                                          128  thrpt    5    142951,830 ±       1,695    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1483,166 ±    1165,695  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5    142394,422 ±  113826,548    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,062 ±       0,188  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         5,981 ±      17,927    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.count                                                    128  thrpt    5        11,000                counts
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.time                                                     128  thrpt    5         7,000                    ms
[info] ArrayOfLocalTimesBenchmark.readJacksonScala                                                       128  thrpt    5     17882,613 ±     333,982   ops/s
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate                                        128  thrpt    5      1457,009 ±      26,962  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5    128185,884 ±      55,704    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5      1475,675 ±    1148,238  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5    129797,878 ±  100060,257    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0,046 ±       0,154  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         4,021 ±      13,505    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.count                                             128  thrpt    5        11,000                counts
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.time                                              128  thrpt    5         8,000                    ms
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala                                                      128  thrpt    5    482728,997 ±   94164,906   ops/s
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                       128  thrpt    5      1256,783 ±     245,176  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5      4096,001 ±       0,001    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5      1213,986 ±    1163,037  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5      3938,292 ±    3519,716    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0,029 ±       0,091  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0,095 ±       0,313    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.count                                            128  thrpt    5         9,000                counts
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.time                                             128  thrpt    5         5,000                    ms
[info] ArrayOfLocalTimesBenchmark.readPlayJson                                                           128  thrpt    5     12900,262 ±     174,446   ops/s
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate                                            128  thrpt    5      1773,423 ±      23,956  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                       128  thrpt    5    216280,271 ±       2,010    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1884,163 ±    1158,803  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5    229818,673 ±  142071,149    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,042 ±       0,139  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         5,075 ±      16,894    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.count                                                 128  thrpt    5        14,000                counts
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.time                                                  128  thrpt    5         9,000                    ms
[info] ArrayOfLocalTimesBenchmark.readUPickle                                                            128  thrpt    5     16552,981 ±      18,074   ops/s
[info] ArrayOfLocalTimesBenchmark.readUPickle:·gc.alloc.rate                                             128  thrpt    5      1448,093 ±       1,473  MB/sec
[info] ArrayOfLocalTimesBenchmark.readUPickle:·gc.alloc.rate.norm                                        128  thrpt    5    137632,672 ±      46,049    B/op
[info] ArrayOfLocalTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1484,113 ±    1154,967  MB/sec
[info] ArrayOfLocalTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5    141054,652 ±  109726,819    B/op
[info] ArrayOfLocalTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,050 ±       0,166  MB/sec
[info] ArrayOfLocalTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         4,750 ±      15,807    B/op
[info] ArrayOfLocalTimesBenchmark.readUPickle:·gc.count                                                  128  thrpt    5        11,000                counts
[info] ArrayOfLocalTimesBenchmark.readUPickle:·gc.time                                                   128  thrpt    5         6,000                    ms
[info] ArrayOfLocalTimesBenchmark.writeCirce                                                             128  thrpt    5     38039,056 ±     266,316   ops/s
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate                                              128  thrpt    5      1445,078 ±      10,142  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                         128  thrpt    5     59768,012 ±       0,001    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1479,275 ±    1151,907  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     61171,843 ±   47318,990    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,054 ±       0,072  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         2,239 ±       2,962    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.count                                                   128  thrpt    5        11,000                counts
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.time                                                    128  thrpt    5         7,000                    ms
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala                                                      128  thrpt    5     43631,522 ±    4740,392   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                       128  thrpt    5      1299,848 ±     141,292  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                  128  thrpt    5     46872,010 ±       0,002    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                              128  thrpt    5      1340,125 ±      11,309  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5     48356,217 ±    5441,358    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0,042 ±       0,057  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         1,493 ±       1,957    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.count                                            128  thrpt    5        10,000                counts
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.time                                             128  thrpt    5         7,000                    ms
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala                                                     128  thrpt    5   1416605,736 ±   72096,081   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                      128  thrpt    5      1289,383 ±      65,683  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                 128  thrpt    5      1432,000 ±       0,001    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                             128  thrpt    5      1214,014 ±    1163,030  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5      1349,906 ±    1311,981    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0,050 ±       0,146  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0,056 ±       0,163    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.count                                           128  thrpt    5         9,000                counts
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.time                                            128  thrpt    5         6,000                    ms
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc                                             128  thrpt    5   1387952,559 ±   21545,142   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                              128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                         128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                   128  thrpt    5           ≈ 0                counts
[info] ArrayOfLocalTimesBenchmark.writePlayJson                                                          128  thrpt    5      3954,572 ±      77,216   ops/s
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate                                           128  thrpt    5       539,277 ±      10,528  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                      128  thrpt    5    214544,111 ±       0,016    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                  128  thrpt    5       606,614 ±    1432,684  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5    241741,713 ±  571146,282    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,420 ±       3,386  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5       167,325 ±    1348,846    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.count                                                128  thrpt    5         5,000                counts
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.time                                                 128  thrpt    5         8,000                    ms
[info] ArrayOfLocalTimesBenchmark.writeUPickle                                                           128  thrpt    5     32704,368 ±     832,552   ops/s
[info] ArrayOfLocalTimesBenchmark.writeUPickle:·gc.alloc.rate                                            128  thrpt    5       737,685 ±      18,844  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeUPickle:·gc.alloc.rate.norm                                       128  thrpt    5     35488,014 ±       0,002    B/op
[info] ArrayOfLocalTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                   128  thrpt    5       808,278 ±    1160,453  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     38879,979 ±   55729,956    B/op
[info] ArrayOfLocalTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,353 ±       2,908  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5        16,984 ±     139,784    B/op
[info] ArrayOfLocalTimesBenchmark.writeUPickle:·gc.count                                                 128  thrpt    5         6,000                counts
[info] ArrayOfLocalTimesBenchmark.writeUPickle:·gc.time                                                  128  thrpt    5         4,000                    ms
[info] ArrayOfLongsBenchmark.readCirce                                                                   128  thrpt    5     86884,165 ±    1358,622   ops/s
[info] ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate                                                    128  thrpt    5      1616,118 ±      25,262  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate.norm                                               128  thrpt    5     29264,005 ±       0,001    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5      1619,850 ±    1426,435  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5     29334,084 ±   25881,588    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0,033 ±       0,091  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5         0,604 ±       1,663    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.count                                                         128  thrpt    5        12,000                counts
[info] ArrayOfLongsBenchmark.readCirce:·gc.time                                                          128  thrpt    5         8,000                    ms
[info] ArrayOfLongsBenchmark.readDslJsonJava                                                             128  thrpt    5    371024,385 ±    1675,215   ops/s
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate                                              128  thrpt    5       743,314 ±       3,368  MB/sec
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                         128  thrpt    5      3152,001 ±       0,001    B/op
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                     128  thrpt    5       798,440 ±    1140,084  MB/sec
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      3385,115 ±    4821,887    B/op
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,008 ±       0,048  MB/sec
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0,034 ±       0,205    B/op
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.count                                                   128  thrpt    5         6,000                counts
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.time                                                    128  thrpt    5        10,000                    ms
[info] ArrayOfLongsBenchmark.readJacksonScala                                                            128  thrpt    5    279404,784 ±    7753,948   ops/s
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate                                             128  thrpt    5       613,747 ±      16,976  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5      3456,002 ±       0,001    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       636,624 ±     268,782  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      3582,757 ±    1430,937    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,448 ±       3,591  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         2,516 ±      20,162    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.count                                                  128  thrpt    5         5,000                counts
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.time                                                   128  thrpt    5         7,000                    ms
[info] ArrayOfLongsBenchmark.readJsoniterScala                                                           128  thrpt    5    544439,056 ±    7318,106   ops/s
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       686,570 ±       9,209  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5      1984,001 ±       0,001    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       673,701 ±       0,102  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      1946,832 ±      26,445    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,339 ±       2,693  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0,977 ±       7,769    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.count                                                 128  thrpt    5         5,000                counts
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.time                                                  128  thrpt    5         4,000                    ms
[info] ArrayOfLongsBenchmark.readPlayJson                                                                128  thrpt    5     78522,285 ±    2411,647   ops/s
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate                                                 128  thrpt    5      3402,267 ±     104,378  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate.norm                                            128  thrpt    5     68168,006 ±       0,001    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5      3394,470 ±      33,920  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     68015,714 ±    2448,208    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0,104 ±       0,220  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         2,082 ±       4,375    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.count                                                      128  thrpt    5        25,000                counts
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.time                                                       128  thrpt    5        15,000                    ms
[info] ArrayOfLongsBenchmark.writeCirce                                                                  128  thrpt    5    203421,839 ±    1358,222   ops/s
[info] ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate                                                   128  thrpt    5      2075,964 ±      13,795  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate.norm                                              128  thrpt    5     16056,002 ±       0,001    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5      2026,184 ±      20,554  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     15671,001 ±     132,400    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0,050 ±       0,044  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         0,387 ±       0,340    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.count                                                        128  thrpt    5        15,000                counts
[info] ArrayOfLongsBenchmark.writeCirce:·gc.time                                                         128  thrpt    5        10,000                    ms
[info] ArrayOfLongsBenchmark.writeDslJsonJava                                                            128  thrpt    5    844759,889 ±    1839,198   ops/s
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate                                             128  thrpt    5       661,516 ±       1,431  MB/sec
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                        128  thrpt    5      1232,001 ±       0,001    B/op
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                    128  thrpt    5       665,112 ±       4,320  MB/sec
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      1238,698 ±      10,029    B/op
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,009 ±       0,043  MB/sec
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0,016 ±       0,080    B/op
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.count                                                  128  thrpt    5         5,000                counts
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.time                                                   128  thrpt    5         8,000                    ms
[info] ArrayOfLongsBenchmark.writeJacksonScala                                                           128  thrpt    5    521559,151 ±   14135,333   ops/s
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate                                            128  thrpt    5       535,737 ±      14,518  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5      1616,001 ±       0,001    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       503,279 ±    1114,284  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      1514,864 ±    3356,947    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,436 ±       3,519  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         1,304 ±      10,527    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.count                                                 128  thrpt    5         4,000                counts
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.time                                                  128  thrpt    5         6,000                    ms
[info] ArrayOfLongsBenchmark.writeJsoniterScala                                                          128  thrpt    5    686109,203 ±    3434,108   ops/s
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       537,269 ±       2,700  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5      1232,001 ±       0,001    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       506,295 ±    1122,602  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      1161,436 ±    2574,791    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,321 ±       2,577  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0,737 ±       5,910    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.count                                                128  thrpt    5         4,000                counts
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.time                                                 128  thrpt    5         5,000                    ms
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc                                                  128  thrpt    5    769226,933 ±    5003,425   ops/s
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              128  thrpt    5         0,001 ±       0,001    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        128  thrpt    5           ≈ 0                counts
[info] ArrayOfLongsBenchmark.writePlayJson                                                               128  thrpt    5     26834,379 ±     353,851   ops/s
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate                                                128  thrpt    5      1721,205 ±      22,731  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate.norm                                           128  thrpt    5    100912,016 ±       0,002    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1750,244 ±    1419,880  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5    102615,655 ±   83261,159    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0,062 ±       0,204  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         3,657 ±      11,939    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.count                                                     128  thrpt    5        13,000                counts
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.time                                                      128  thrpt    5         8,000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readCirce                                                         128  thrpt    5      8030,410 ±     142,037   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate                                          128  thrpt    5      1270,353 ±      22,385  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                                     128  thrpt    5    248881,142 ±       9,363    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1211,312 ±    1157,342  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5    237402,422 ±  227870,885    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,025 ±       0,088  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         4,894 ±      17,159    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.count                                               128  thrpt    5         9,000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.time                                                128  thrpt    5         7,000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala                                                  128  thrpt    5      8355,007 ±      28,554   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                                   128  thrpt    5      1220,742 ±       4,192  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                              128  thrpt    5    229862,539 ±      63,411    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                          128  thrpt    5      1339,273 ±       9,393  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5    252181,633 ±    1376,311    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0,054 ±       0,156  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5        10,193 ±      29,410    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.count                                        128  thrpt    5        10,000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.time                                         128  thrpt    5         6,000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala                                                 128  thrpt    5    183865,392 ±    3637,398   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                  128  thrpt    5      1781,956 ±      35,276  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                             128  thrpt    5     15248,002 ±       0,001    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                         128  thrpt    5      1757,139 ±    1422,588  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5     15043,901 ±   12343,353    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0,037 ±       0,105  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         0,321 ±       0,893    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.count                                       128  thrpt    5        13,000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.time                                        128  thrpt    5         8,000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson                                                      128  thrpt    5      7719,456 ±     849,084   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate                                       128  thrpt    5      1409,362 ±     154,962  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                  128  thrpt    5    287232,439 ±       3,298    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                              128  thrpt    5      1341,932 ±      10,739  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5    273674,984 ±   31260,119    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0,037 ±       0,105  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         7,652 ±      21,549    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.count                                            128  thrpt    5        10,000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.time                                             128  thrpt    5         7,000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readUPickle                                                       128  thrpt    5      8394,843 ±     759,811   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.alloc.rate                                        128  thrpt    5      1207,130 ±     109,261  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.alloc.rate.norm                                   128  thrpt    5    226219,853 ±      46,244    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space                               128  thrpt    5      1213,273 ±    1162,912  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5    227766,416 ±  222940,938    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0,025 ±       0,132  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         4,765 ±      25,138    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.count                                             128  thrpt    5         9,000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.time                                              128  thrpt    5         6,000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce                                                        128  thrpt    5     18504,627 ±     224,066   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate                                         128  thrpt    5      1091,754 ±      13,196  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                    128  thrpt    5     92822,911 ±     107,157    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                128  thrpt    5      1073,777 ±    1415,802  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     91269,177 ±  120059,268    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0,021 ±       0,113  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         1,769 ±       9,623    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.count                                              128  thrpt    5         8,000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.time                                               128  thrpt    5         5,000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala                                                 128  thrpt    5     20535,569 ±     340,576   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                  128  thrpt    5       963,386 ±      15,907  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                             128  thrpt    5     73808,023 ±       0,013    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                         128  thrpt    5       936,290 ±    1409,803  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5     71697,493 ±  107511,111    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0,029 ±       0,176  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         2,231 ±      13,447    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.count                                       128  thrpt    5         7,000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.time                                        128  thrpt    5         5,000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala                                                128  thrpt    5    531966,225 ±   17132,175   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                 128  thrpt    5      1206,431 ±      38,866  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                            128  thrpt    5      3568,001 ±       0,001    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                        128  thrpt    5      1213,386 ±    1161,049  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5      3586,661 ±    3409,108    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0,037 ±       0,164  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5         0,111 ±       0,487    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.count                                      128  thrpt    5         9,000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.time                                       128  thrpt    5         5,000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc                                        128  thrpt    5    647601,707 ±    6625,775   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                         128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                    128  thrpt    5         0,001 ±       0,001    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                              128  thrpt    5           ≈ 0                counts
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson                                                     128  thrpt    5     19794,950 ±     539,226   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate                                      128  thrpt    5      1002,474 ±      26,943  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                 128  thrpt    5     79674,777 ±      23,721    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                             128  thrpt    5      1072,262 ±    1414,004  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5     85278,545 ±  113076,041    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0,037 ±       0,143  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         2,985 ±      11,417    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.count                                           128  thrpt    5         8,000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.time                                            128  thrpt    5         5,000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeUPickle                                                      128  thrpt    5     11440,357 ±     123,743   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.alloc.rate                                       128  thrpt    5       953,823 ±      10,262  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.alloc.rate.norm                                  128  thrpt    5    131173,339 ±      18,979    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                              128  thrpt    5       942,776 ±    1420,212  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5    129648,458 ±  195229,395    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0,017 ±       0,105  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         2,287 ±      14,339    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.count                                            128  thrpt    5         7,000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.time                                             128  thrpt    5         4,000                    ms
[info] ArrayOfOffsetTimesBenchmark.readCirce                                                             128  thrpt    5     13377,503 ±    1477,396   ops/s
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate                                              128  thrpt    5      1379,761 ±     152,135  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate.norm                                         128  thrpt    5    162264,035 ±       0,020    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1347,100 ±       8,818  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5    158535,744 ±   18965,617    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,017 ±       0,105  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         1,943 ±      12,216    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.count                                                   128  thrpt    5        10,000                counts
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.time                                                    128  thrpt    5         6,000                    ms
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala                                                      128  thrpt    5     14052,930 ±     584,536   ops/s
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate                                       128  thrpt    5      1304,753 ±      54,550  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                  128  thrpt    5    146069,118 ±      58,976    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                              128  thrpt    5      1339,780 ±      11,623  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5    150005,371 ±    6727,005    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0,050 ±       0,176  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         5,566 ±      19,566    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.count                                            128  thrpt    5        10,000                counts
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.time                                             128  thrpt    5         8,000                    ms
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala                                                     128  thrpt    5    305836,215 ±    6166,550   ops/s
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                      128  thrpt    5      1769,763 ±      35,624  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                 128  thrpt    5      9104,001 ±       0,001    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                             128  thrpt    5      1757,241 ±    1422,480  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5      9044,807 ±    7425,244    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0,042 ±       0,127  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0,214 ±       0,649    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.count                                           128  thrpt    5        13,000                counts
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.time                                            128  thrpt    5         8,000                    ms
[info] ArrayOfOffsetTimesBenchmark.readPlayJson                                                          128  thrpt    5     12032,127 ±     308,062   ops/s
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate                                           128  thrpt    5      1545,151 ±      39,483  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                      128  thrpt    5    202040,045 ±       0,051    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1474,248 ±    1160,453  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5    192717,720 ±  150053,704    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,050 ±       0,091  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         6,524 ±      11,849    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.count                                                128  thrpt    5        11,000                counts
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.time                                                 128  thrpt    5         8,000                    ms
[info] ArrayOfOffsetTimesBenchmark.readUPickle                                                           128  thrpt    5     12559,617 ±     262,357   ops/s
[info] ArrayOfOffsetTimesBenchmark.readUPickle:·gc.alloc.rate                                            128  thrpt    5      1283,412 ±      26,903  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readUPickle:·gc.alloc.rate.norm                                       128  thrpt    5    160762,415 ±      39,834    B/op
[info] ArrayOfOffsetTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1347,913 ±       6,272  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5    168846,426 ±    4041,238    B/op
[info] ArrayOfOffsetTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,033 ±       0,122  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         4,171 ±      15,178    B/op
[info] ArrayOfOffsetTimesBenchmark.readUPickle:·gc.count                                                 128  thrpt    5        10,000                counts
[info] ArrayOfOffsetTimesBenchmark.readUPickle:·gc.time                                                  128  thrpt    5         6,000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeCirce                                                            128  thrpt    5     29585,940 ±     235,520   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate                                             128  thrpt    5      1298,591 ±      10,363  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                        128  thrpt    5     69056,015 ±       0,002    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1343,600 ±       9,489  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     71449,814 ±     827,929    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,042 ±       0,098  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         2,213 ±       5,212    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.count                                                  128  thrpt    5        10,000                counts
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.time                                                   128  thrpt    5         7,000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala                                                     128  thrpt    5     89531,339 ±    1003,741   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                      128  thrpt    5      1830,550 ±      20,484  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5     32168,005 ±       0,001    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5      1884,302 ±    1166,130  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5     33115,471 ±   20557,863    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0,046 ±       0,119  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0,804 ±       2,086    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.count                                           128  thrpt    5        14,000                counts
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.time                                            128  thrpt    5        10,000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala                                                    128  thrpt    5    769372,211 ±    8011,787   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                     128  thrpt    5      1056,253 ±      11,000  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5      2160,001 ±       0,001    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5      1077,835 ±    1421,820  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5      2204,961 ±    2917,695    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0,029 ±       0,134  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0,060 ±       0,274    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.count                                          128  thrpt    5         8,000                counts
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.time                                           128  thrpt    5         5,000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc                                            128  thrpt    5    792729,286 ±  433439,117   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                             128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                        128  thrpt    5         0,001 ±       0,001    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                  128  thrpt    5           ≈ 0                counts
[info] ArrayOfOffsetTimesBenchmark.writePlayJson                                                         128  thrpt    5     81788,303 ±    6922,203   ops/s
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate                                          128  thrpt    5      1974,574 ±     167,297  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                     128  thrpt    5     37984,005 ±       0,001    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1884,018 ±    1146,218  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     36152,748 ±   19567,250    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,050 ±       0,122  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0,957 ±       2,305    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.count                                               128  thrpt    5        14,000                counts
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.time                                                128  thrpt    5        11,000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeUPickle                                                          128  thrpt    5     22185,967 ±     268,965   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.alloc.rate                                           128  thrpt    5       734,826 ±       8,963  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.alloc.rate.norm                                      128  thrpt    5     52111,797 ±       1,916    B/op
[info] ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                  128  thrpt    5       807,836 ±    1159,822  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     57264,651 ±   81764,079    B/op
[info] ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,350 ±       2,793  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5        24,960 ±     199,149    B/op
[info] ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.count                                                128  thrpt    5         6,000                counts
[info] ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.time                                                 128  thrpt    5         5,000                    ms
[info] ArrayOfPeriodsBenchmark.readCirce                                                                 128  thrpt    5     16377,351 ±     100,616   ops/s
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate                                                  128  thrpt    5       864,010 ±       5,357  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate.norm                                             128  thrpt    5     83000,029 ±       0,016    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5       806,475 ±    1157,196  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     77484,585 ±  111386,784    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0,029 ±       0,108  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         2,800 ±      10,337    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.count                                                       128  thrpt    5         6,000                counts
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.time                                                        128  thrpt    5         4,000                    ms
[info] ArrayOfPeriodsBenchmark.readJacksonScala                                                          128  thrpt    5     19001,447 ±     395,952   ops/s
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate                                           128  thrpt    5       810,774 ±      16,893  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5     67129,935 ±      55,838    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       801,896 ±    1150,561  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     66448,804 ±   96286,857    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,446 ±       3,662  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5        36,861 ±     302,542    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.count                                                128  thrpt    5         6,000                counts
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.time                                                 128  thrpt    5         6,000                    ms
[info] ArrayOfPeriodsBenchmark.readJsoniterScala                                                         128  thrpt    5    110049,159 ±    1949,813   ops/s
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate                                          128  thrpt    5       276,438 ±       4,912  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5      3952,004 ±       0,001    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5       307,075 ±    1079,412  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      4400,984 ±   15470,323    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,003 ±       0,028  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0,047 ±       0,404    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.count                                               128  thrpt    5         3,000                counts
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.time                                                128  thrpt    5         4,000                    ms
[info] ArrayOfPeriodsBenchmark.readPlayJson                                                              128  thrpt    5     15888,291 ±     389,764   ops/s
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate                                               128  thrpt    5      1236,658 ±      30,341  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate.norm                                          128  thrpt    5    122456,030 ±       0,017    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1205,929 ±    1155,802  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5    119505,785 ±  115621,218    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,025 ±       0,174  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         2,473 ±      17,208    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.count                                                    128  thrpt    5         9,000                counts
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.time                                                     128  thrpt    5         6,000                    ms
[info] ArrayOfPeriodsBenchmark.readUPickle                                                               128  thrpt    5     16911,284 ±     270,359   ops/s
[info] ArrayOfPeriodsBenchmark.readUPickle:·gc.alloc.rate                                                128  thrpt    5       847,562 ±      12,984  MB/sec
[info] ArrayOfPeriodsBenchmark.readUPickle:·gc.alloc.rate.norm                                           128  thrpt    5     78850,172 ±      48,903    B/op
[info] ArrayOfPeriodsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                       128  thrpt    5       808,012 ±    1159,813  MB/sec
[info] ArrayOfPeriodsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     75148,046 ±  107446,977    B/op
[info] ArrayOfPeriodsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0,021 ±       0,113  MB/sec
[info] ArrayOfPeriodsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         1,935 ±      10,536    B/op
[info] ArrayOfPeriodsBenchmark.readUPickle:·gc.count                                                     128  thrpt    5         6,000                counts
[info] ArrayOfPeriodsBenchmark.readUPickle:·gc.time                                                      128  thrpt    5         4,000                    ms
[info] ArrayOfPeriodsBenchmark.writeCirce                                                                128  thrpt    5     51897,434 ±   10471,566   ops/s
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate                                                 128  thrpt    5      1556,225 ±     314,283  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate.norm                                            128  thrpt    5     47176,008 ±       0,002    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1481,227 ±    1164,398  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     44839,878 ±   31420,898    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0,029 ±       0,044  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         0,879 ±       1,248    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.count                                                      128  thrpt    5        11,000                counts
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.time                                                       128  thrpt    5       130,000                    ms
[info] ArrayOfPeriodsBenchmark.writeJacksonScala                                                         128  thrpt    5     81269,329 ±     729,883   ops/s
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate                                          128  thrpt    5      1677,006 ±      14,838  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5     32464,005 ±       0,001    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1613,076 ±    1418,172  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     31229,427 ±   27520,888    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,046 ±       0,067  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0,887 ±       1,299    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.count                                               128  thrpt    5        12,000                counts
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.time                                                128  thrpt    5         9,000                    ms
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala                                                        128  thrpt    5    301932,491 ±    9750,904   ops/s
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate                                         128  thrpt    5       578,801 ±      18,673  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5      3016,001 ±       0,001    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5       641,042 ±     278,232  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      3338,014 ±    1359,411    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0,336 ±       2,602  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         1,743 ±      13,508    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.count                                              128  thrpt    5         5,000                counts
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.time                                               128  thrpt    5         6,000                    ms
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc                                                128  thrpt    5    293981,093 ±   87700,361   ops/s
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                 128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                            128  thrpt    5         0,001 ±       0,001    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                      128  thrpt    5           ≈ 0                counts
[info] ArrayOfPeriodsBenchmark.writePlayJson                                                             128  thrpt    5     75246,187 ±    3975,103   ops/s
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate                                              128  thrpt    5      1687,001 ±      88,946  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate.norm                                         128  thrpt    5     35272,006 ±       0,001    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1750,453 ±    1420,142  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     36579,436 ±   29228,365    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,042 ±       0,150  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0,875 ±       3,165    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.count                                                   128  thrpt    5        13,000                counts
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.time                                                    128  thrpt    5         9,000                    ms
[info] ArrayOfPeriodsBenchmark.writeUPickle                                                              128  thrpt    5     16357,195 ±     211,424   ops/s
[info] ArrayOfPeriodsBenchmark.writeUPickle:·gc.alloc.rate                                               128  thrpt    5       653,414 ±       8,388  MB/sec
[info] ArrayOfPeriodsBenchmark.writeUPickle:·gc.alloc.rate.norm                                          128  thrpt    5     62847,728 ±       2,578    B/op
[info] ArrayOfPeriodsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                      128  thrpt    5       673,692 ±       0,145  MB/sec
[info] ArrayOfPeriodsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     64798,717 ±     840,075    B/op
[info] ArrayOfPeriodsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,348 ±       2,775  MB/sec
[info] ArrayOfPeriodsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5        33,529 ±     267,192    B/op
[info] ArrayOfPeriodsBenchmark.writeUPickle:·gc.count                                                    128  thrpt    5         5,000                counts
[info] ArrayOfPeriodsBenchmark.writeUPickle:·gc.time                                                     128  thrpt    5         3,000                    ms
[info] ArrayOfShortsBenchmark.readCirce                                                                  128  thrpt    5    142492,174 ±    2252,458   ops/s
[info] ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate                                                   128  thrpt    5      2133,804 ±      33,545  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate.norm                                              128  thrpt    5     23560,003 ±       0,001    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5      2164,812 ±    1146,628  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     23911,089 ±   13010,772    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0,071 ±       0,122  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         0,782 ±       1,349    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.count                                                        128  thrpt    5        16,000                counts
[info] ArrayOfShortsBenchmark.readCirce:·gc.time                                                         128  thrpt    5        10,000                    ms
[info] ArrayOfShortsBenchmark.readDslJsonJava                                                            128  thrpt    5    614165,340 ±    4085,066   ops/s
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate                                             128  thrpt    5       340,405 ±       2,270  MB/sec
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                        128  thrpt    5       872,001 ±       0,001    B/op
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                    128  thrpt    5       307,063 ±    1079,369  MB/sec
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5       787,087 ±    2766,733    B/op
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,007 ±       0,058  MB/sec
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0,019 ±       0,150    B/op
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.count                                                  128  thrpt    5         3,000                counts
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.time                                                   128  thrpt    5         5,000                    ms
[info] ArrayOfShortsBenchmark.readJacksonScala                                                           128  thrpt    5    437624,837 ±    9125,387   ops/s
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate                                            128  thrpt    5       447,278 ±       9,313  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5      1608,001 ±       0,001    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       471,907 ±    1059,425  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      1697,459 ±    3801,470    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,440 ±       3,730  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         1,578 ±      13,380    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.count                                                 128  thrpt    5         4,000                counts
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.time                                                  128  thrpt    5         7,000                    ms
[info] ArrayOfShortsBenchmark.readJsoniterScala                                                          128  thrpt    5   1028042,758 ±   22942,254   ops/s
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       355,464 ±       7,937  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5       544,000 ±       0,001    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       307,060 ±    1079,358  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5       471,386 ±    1657,031    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,008 ±       0,052  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0,013 ±       0,081    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.count                                                128  thrpt    5         3,000                counts
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.time                                                 128  thrpt    5         5,000                    ms
[info] ArrayOfShortsBenchmark.readPlayJson                                                               128  thrpt    5     83757,727 ±    3603,584   ops/s
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate                                                128  thrpt    5      3482,179 ±     149,561  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate.norm                                           128  thrpt    5     65408,005 ±       0,001    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5      3530,686 ±    1137,868  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     66311,873 ±   20655,031    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0,067 ±       0,036  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         1,253 ±       0,732    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.count                                                     128  thrpt    5        26,000                counts
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.time                                                      128  thrpt    5        16,000                    ms
[info] ArrayOfShortsBenchmark.readUPickle                                                                128  thrpt    5    157843,988 ±    1253,979   ops/s
[info] ArrayOfShortsBenchmark.readUPickle:·gc.alloc.rate                                                 128  thrpt    5      1531,406 ±      12,137  MB/sec
[info] ArrayOfShortsBenchmark.readUPickle:·gc.alloc.rate.norm                                            128  thrpt    5     15264,003 ±       0,001    B/op
[info] ArrayOfShortsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1620,989 ±    1424,980  MB/sec
[info] ArrayOfShortsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     16161,665 ±   14311,393    B/op
[info] ArrayOfShortsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0,021 ±       0,057  MB/sec
[info] ArrayOfShortsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         0,208 ±       0,565    B/op
[info] ArrayOfShortsBenchmark.readUPickle:·gc.count                                                      128  thrpt    5        12,000                counts
[info] ArrayOfShortsBenchmark.readUPickle:·gc.time                                                       128  thrpt    5         7,000                    ms
[info] ArrayOfShortsBenchmark.writeCirce                                                                 128  thrpt    5    282822,931 ±    4702,945   ops/s
[info] ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate                                                  128  thrpt    5      1866,652 ±      31,005  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate.norm                                             128  thrpt    5     10384,002 ±       0,001    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5      1888,569 ±    1156,483  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     10508,666 ±    6496,857    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0,067 ±       0,105  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         0,371 ±       0,583    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.count                                                       128  thrpt    5        14,000                counts
[info] ArrayOfShortsBenchmark.writeCirce:·gc.time                                                        128  thrpt    5         9,000                    ms
[info] ArrayOfShortsBenchmark.writeDslJsonJava                                                           128  thrpt    5   1556200,469 ±   44480,989   ops/s
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate                                            128  thrpt    5       530,199 ±      15,173  MB/sec
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                       128  thrpt    5       536,000 ±       0,001    B/op
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                   128  thrpt    5       500,996 ±    1108,059  MB/sec
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5       507,263 ±    1122,641    B/op
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,003 ±       0,020  MB/sec
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0,003 ±       0,020    B/op
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.count                                                 128  thrpt    5         4,000                counts
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.time                                                  128  thrpt    5         7,000                    ms
[info] ArrayOfShortsBenchmark.writeJacksonScala                                                          128  thrpt    5   1476540,586 ±   15621,452   ops/s
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate                                           128  thrpt    5       863,406 ±       9,180  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5       920,000 ±       0,001    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       936,009 ±    1411,913  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5       997,791 ±    1510,482    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,037 ±       0,119  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0,040 ±       0,127    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.count                                                128  thrpt    5         7,000                counts
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.time                                                 128  thrpt    5         4,000                    ms
[info] ArrayOfShortsBenchmark.writeJsoniterScala                                                         128  thrpt    5   1524539,820 ±   10050,569   ops/s
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate                                          128  thrpt    5       519,402 ±       3,423  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5       536,000 ±       0,001    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5       474,200 ±    1067,328  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5       489,602 ±    1101,793    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,338 ±       2,754  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0,349 ±       2,847    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.count                                               128  thrpt    5         4,000                counts
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.time                                                128  thrpt    5         5,000                    ms
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc                                                 128  thrpt    5   1485424,223 ±  491694,847   ops/s
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                  128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                             128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                       128  thrpt    5           ≈ 0                counts
[info] ArrayOfShortsBenchmark.writePlayJson                                                              128  thrpt    5     38850,024 ±     699,816   ops/s
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate                                               128  thrpt    5      1875,325 ±      33,912  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate.norm                                          128  thrpt    5     75944,011 ±       0,001    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1886,849 ±    1149,969  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     76370,525 ±   45578,351    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,062 ±       0,150  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         2,526 ±       6,042    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.count                                                    128  thrpt    5        14,000                counts
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.time                                                     128  thrpt    5         9,000                    ms
[info] ArrayOfShortsBenchmark.writeUPickle                                                               128  thrpt    5    133843,852 ±    2068,719   ops/s
[info] ArrayOfShortsBenchmark.writeUPickle:·gc.alloc.rate                                                128  thrpt    5      1203,248 ±      18,557  MB/sec
[info] ArrayOfShortsBenchmark.writeUPickle:·gc.alloc.rate.norm                                           128  thrpt    5     14144,003 ±       0,001    B/op
[info] ArrayOfShortsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1214,653 ±    1163,064  MB/sec
[info] ArrayOfShortsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     14282,502 ±   13728,409    B/op
[info] ArrayOfShortsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0,033 ±       0,146  MB/sec
[info] ArrayOfShortsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0,392 ±       1,717    B/op
[info] ArrayOfShortsBenchmark.writeUPickle:·gc.count                                                     128  thrpt    5         9,000                counts
[info] ArrayOfShortsBenchmark.writeUPickle:·gc.time                                                      128  thrpt    5         5,000                    ms
[info] ArrayOfUUIDsBenchmark.readCirce                                                                   128  thrpt    5     19971,013 ±     857,294   ops/s
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate                                                    128  thrpt    5      2096,994 ±      89,983  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate.norm                                               128  thrpt    5    165196,628 ±      29,223    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5      2164,830 ±    1174,531  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5    170475,213 ±   89417,377    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0,037 ±       0,105  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5         2,963 ±       8,296    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.count                                                         128  thrpt    5        16,000                counts
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.time                                                          128  thrpt    5        10,000                    ms
[info] ArrayOfUUIDsBenchmark.readJacksonScala                                                            128  thrpt    5    104992,755 ±   18675,369   ops/s
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate                                             128  thrpt    5      1378,504 ±     245,184  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5     20656,004 ±       0,001    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1341,051 ±      11,284  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     20131,975 ±    3876,202    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,050 ±       0,146  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0,761 ±       2,265    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.count                                                  128  thrpt    5        10,000                counts
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.time                                                   128  thrpt    5         7,000                    ms
[info] ArrayOfUUIDsBenchmark.readJsoniterScala                                                           128  thrpt    5    311078,443 ±   12476,995   ops/s
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate                                            128  thrpt    5      1012,325 ±      40,567  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5      5120,001 ±       0,001    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       943,157 ±    1420,839  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      4770,215 ±    7183,684    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,021 ±       0,113  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0,105 ±       0,572    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.count                                                 128  thrpt    5         7,000                counts
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.time                                                  128  thrpt    5         4,000                    ms
[info] ArrayOfUUIDsBenchmark.readPlayJson                                                                128  thrpt    5     18916,253 ±    1127,360   ops/s
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate                                                 128  thrpt    5      2412,484 ±     143,546  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate.norm                                            128  thrpt    5    200640,025 ±       0,016    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5      2433,322 ±    1433,426  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5    202178,389 ±  112618,600    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0,058 ±       0,067  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         4,841 ±       5,444    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.count                                                      128  thrpt    5        18,000                counts
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.time                                                       128  thrpt    5        11,000                    ms
[info] ArrayOfUUIDsBenchmark.readUPickle                                                                 128  thrpt    5     17167,903 ±     768,997   ops/s
[info] ArrayOfUUIDsBenchmark.readUPickle:·gc.alloc.rate                                                  128  thrpt    5      1747,475 ±      78,011  MB/sec
[info] ArrayOfUUIDsBenchmark.readUPickle:·gc.alloc.rate.norm                                             128  thrpt    5    160135,252 ±      41,389    B/op
[info] ArrayOfUUIDsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                         128  thrpt    5      1758,130 ±    1433,025  MB/sec
[info] ArrayOfUUIDsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5    161283,259 ±  134740,253    B/op
[info] ArrayOfUUIDsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0,046 ±       0,174  MB/sec
[info] ArrayOfUUIDsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         4,212 ±      16,116    B/op
[info] ArrayOfUUIDsBenchmark.readUPickle:·gc.count                                                       128  thrpt    5        13,000                counts
[info] ArrayOfUUIDsBenchmark.readUPickle:·gc.time                                                        128  thrpt    5         8,000                    ms
[info] ArrayOfUUIDsBenchmark.writeCirce                                                                  128  thrpt    5     22566,324 ±     368,595   ops/s
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate                                                   128  thrpt    5      1826,652 ±      29,721  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate.norm                                              128  thrpt    5    127352,723 ±       6,061    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5      1888,123 ±    1161,294  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5    131592,536 ±   79847,607    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0,046 ±       0,119  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         3,196 ±       8,310    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.count                                                        128  thrpt    5        14,000                counts
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.time                                                         128  thrpt    5         9,000                    ms
[info] ArrayOfUUIDsBenchmark.writeJacksonScala                                                           128  thrpt    5     97624,002 ±    5449,375   ops/s
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate                                            128  thrpt    5      1337,801 ±      74,650  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5     21560,000 ±       0,036    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1340,282 ±      11,979  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     21603,444 ±    1158,591    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,021 ±       0,080  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0,333 ±       1,283    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.count                                                 128  thrpt    5        10,000                counts
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.time                                                  128  thrpt    5         8,000                    ms
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala                                                          128  thrpt    5    356373,591 ±    3598,551   ops/s
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate                                           128  thrpt    5      1136,209 ±      11,517  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5      5016,001 ±       0,001    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1078,347 ±    1422,389  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      4759,665 ±    6268,213    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,037 ±       0,143  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0,165 ±       0,633    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.count                                                128  thrpt    5         8,000                counts
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.time                                                 128  thrpt    5         5,000                    ms
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc                                                  128  thrpt    5    419230,156 ±    1339,289   ops/s
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              128  thrpt    5         0,001 ±       0,001    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        128  thrpt    5           ≈ 0                counts
[info] ArrayOfUUIDsBenchmark.writePlayJson                                                               128  thrpt    5     28800,228 ±     282,201   ops/s
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate                                                128  thrpt    5      1963,981 ±      19,293  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate.norm                                           128  thrpt    5    107288,015 ±       0,189    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5      2023,318 ±      22,945  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5    110530,190 ±    1804,515    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0,046 ±       0,105  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         2,503 ±       5,713    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.count                                                     128  thrpt    5        15,000                counts
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.time                                                      128  thrpt    5         9,000                    ms
[info] ArrayOfUUIDsBenchmark.writeUPickle                                                                128  thrpt    5      8497,504 ±     378,892   ops/s
[info] ArrayOfUUIDsBenchmark.writeUPickle:·gc.alloc.rate                                                 128  thrpt    5       872,092 ±      38,888  MB/sec
[info] ArrayOfUUIDsBenchmark.writeUPickle:·gc.alloc.rate.norm                                            128  thrpt    5    161461,974 ±      49,085    B/op
[info] ArrayOfUUIDsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                        128  thrpt    5       944,115 ±    1422,619  MB/sec
[info] ArrayOfUUIDsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5    175112,135 ±  267635,603    B/op
[info] ArrayOfUUIDsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0,037 ±       0,200  MB/sec
[info] ArrayOfUUIDsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         6,963 ±      37,208    B/op
[info] ArrayOfUUIDsBenchmark.writeUPickle:·gc.count                                                      128  thrpt    5         7,000                counts
[info] ArrayOfUUIDsBenchmark.writeUPickle:·gc.time                                                       128  thrpt    5         4,000                    ms
[info] ArrayOfYearMonthsBenchmark.readCirce                                                              128  thrpt    5     26632,139 ±     568,987   ops/s
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.alloc.rate                                               128  thrpt    5      1427,114 ±      30,489  MB/sec
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.alloc.rate.norm                                          128  thrpt    5     84304,016 ±       0,002    B/op
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1482,290 ±    1159,783  MB/sec
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     87581,061 ±   69005,612    B/op
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,042 ±       0,188  MB/sec
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         2,463 ±      11,133    B/op
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.count                                                    128  thrpt    5        11,000                counts
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.time                                                     128  thrpt    5         7,000                    ms
[info] ArrayOfYearMonthsBenchmark.readJacksonScala                                                       128  thrpt    5     31019,346 ±      88,322   ops/s
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.alloc.rate                                        128  thrpt    5      1235,052 ±       3,527  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5     62640,015 ±       0,004    B/op
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5      1205,656 ±    1155,152  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     61154,459 ±   58655,797    B/op
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0,025 ±       0,105  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         1,268 ±       5,302    B/op
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.count                                             128  thrpt    5         9,000                counts
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.time                                              128  thrpt    5         7,000                    ms
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala                                                      128  thrpt    5    569727,947 ±    4318,900   ops/s
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.alloc.rate                                       128  thrpt    5      1483,247 ±      11,266  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5      4096,001 ±       0,001    B/op
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5      1484,866 ±    1162,142  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5      4100,701 ±    3216,022    B/op
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0,033 ±       0,072  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0,092 ±       0,198    B/op
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.count                                            128  thrpt    5        11,000                counts
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.time                                             128  thrpt    5         6,000                    ms
[info] ArrayOfYearMonthsBenchmark.readPlayJson                                                           128  thrpt    5     23669,833 ±     408,204   ops/s
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.alloc.rate                                            128  thrpt    5      1785,159 ±      30,728  MB/sec
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.alloc.rate.norm                                       128  thrpt    5    118656,019 ±       0,002    B/op
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1880,588 ±    1156,851  MB/sec
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5    125041,439 ±   77880,560    B/op
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,042 ±       0,080  MB/sec
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         2,767 ±       5,316    B/op
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.count                                                 128  thrpt    5        14,000                counts
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.time                                                  128  thrpt    5        12,000                    ms
[info] ArrayOfYearMonthsBenchmark.readUPickle                                                            128  thrpt    5     29395,245 ±     111,461   ops/s
[info] ArrayOfYearMonthsBenchmark.readUPickle:·gc.alloc.rate                                             128  thrpt    5      1441,967 ±       5,439  MB/sec
[info] ArrayOfYearMonthsBenchmark.readUPickle:·gc.alloc.rate.norm                                        128  thrpt    5     77176,015 ±       0,002    B/op
[info] ArrayOfYearMonthsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1484,155 ±    1154,482  MB/sec
[info] ArrayOfYearMonthsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     79443,374 ±   62072,186    B/op
[info] ArrayOfYearMonthsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,033 ±       0,091  MB/sec
[info] ArrayOfYearMonthsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         1,783 ±       4,893    B/op
[info] ArrayOfYearMonthsBenchmark.readUPickle:·gc.count                                                  128  thrpt    5        11,000                counts
[info] ArrayOfYearMonthsBenchmark.readUPickle:·gc.time                                                   128  thrpt    5         6,000                    ms
[info] ArrayOfYearMonthsBenchmark.writeCirce                                                             128  thrpt    5     64625,622 ±    1259,617   ops/s
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.alloc.rate                                              128  thrpt    5      1792,574 ±      34,850  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.alloc.rate.norm                                         128  thrpt    5     43640,007 ±       0,001    B/op
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1752,532 ±    1426,672  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     42639,394 ±   34178,837    B/op
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,058 ±       0,132  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         1,418 ±       3,190    B/op
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.count                                                   128  thrpt    5        13,000                counts
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.time                                                    128  thrpt    5         9,000                    ms
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala                                                      128  thrpt    5    172885,051 ±    2162,733   ops/s
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.alloc.rate                                       128  thrpt    5      1535,775 ±      19,078  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                  128  thrpt    5     13976,003 ±       0,001    B/op
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                              128  thrpt    5      1476,841 ±    1156,520  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5     13438,119 ±   10475,459    B/op
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0,042 ±       0,127  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0,380 ±       1,158    B/op
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.count                                            128  thrpt    5        11,000                counts
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.time                                             128  thrpt    5         8,000                    ms
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala                                                     128  thrpt    5   1524973,898 ±   26682,474   ops/s
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.alloc.rate                                      128  thrpt    5      1263,937 ±      22,064  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                 128  thrpt    5      1304,000 ±       0,001    B/op
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                             128  thrpt    5      1348,301 ±       6,933  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5      1391,059 ±      22,955    B/op
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0,062 ±       0,098  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0,064 ±       0,101    B/op
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.count                                           128  thrpt    5        10,000                counts
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.time                                            128  thrpt    5         5,000                    ms
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc                                             128  thrpt    5   1640606,005 ±    6986,711   ops/s
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                              128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                         128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                   128  thrpt    5           ≈ 0                counts
[info] ArrayOfYearMonthsBenchmark.writePlayJson                                                          128  thrpt    5    140849,230 ±    2102,118   ops/s
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.alloc.rate                                           128  thrpt    5      1771,897 ±      26,498  MB/sec
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.alloc.rate.norm                                      128  thrpt    5     19792,003 ±       0,001    B/op
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1881,116 ±    1156,548  MB/sec
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     21018,074 ±   13061,229    B/op
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,058 ±       0,105  MB/sec
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0,652 ±       1,175    B/op
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.count                                                128  thrpt    5        14,000                counts
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.time                                                 128  thrpt    5        12,000                    ms
[info] ArrayOfYearMonthsBenchmark.writeUPickle                                                           128  thrpt    5     36689,288 ±     139,183   ops/s
[info] ArrayOfYearMonthsBenchmark.writeUPickle:·gc.alloc.rate                                            128  thrpt    5       761,899 ±       2,892  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeUPickle:·gc.alloc.rate.norm                                       128  thrpt    5     32672,012 ±       0,002    B/op
[info] ArrayOfYearMonthsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                   128  thrpt    5       673,126 ±       1,143  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     28865,216 ±     151,781    B/op
[info] ArrayOfYearMonthsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,025 ±       0,105  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         1,072 ±       4,488    B/op
[info] ArrayOfYearMonthsBenchmark.writeUPickle:·gc.count                                                 128  thrpt    5         5,000                counts
[info] ArrayOfYearMonthsBenchmark.writeUPickle:·gc.time                                                  128  thrpt    5         3,000                    ms
[info] ArrayOfYearsBenchmark.readJacksonScala                                                            128  thrpt    5     38226,305 ±    1143,136   ops/s
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.alloc.rate                                             128  thrpt    5      1372,704 ±      41,101  MB/sec
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5     56496,012 ±       0,002    B/op
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1340,970 ±      11,571  MB/sec
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     55192,792 ±    1825,673    B/op
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,025 ±       0,105  MB/sec
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         1,023 ±       4,273    B/op
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.count                                                  128  thrpt    5        10,000                counts
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.time                                                   128  thrpt    5         7,000                    ms
[info] ArrayOfYearsBenchmark.readJsoniterScala                                                           128  thrpt    5    847023,178 ±  163167,755   ops/s
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.alloc.rate                                            128  thrpt    5      1653,869 ±     318,526  MB/sec
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5      3072,001 ±       0,001    B/op
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1756,430 ±    1425,036  MB/sec
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      3282,212 ±    3006,031    B/op
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,046 ±       0,105  MB/sec
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0,084 ±       0,186    B/op
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.count                                                 128  thrpt    5        13,000                counts
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.time                                                  128  thrpt    5         8,000                    ms
[info] ArrayOfYearsBenchmark.readPlayJson                                                                128  thrpt    5     28356,125 ±     286,064   ops/s
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.alloc.rate                                                 128  thrpt    5      2027,854 ±      20,475  MB/sec
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.alloc.rate.norm                                            128  thrpt    5    112512,015 ±       0,002    B/op
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5      2018,672 ±      28,654  MB/sec
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5    112003,544 ±    2315,929    B/op
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0,058 ±       0,132  MB/sec
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         3,233 ±       7,299    B/op
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.count                                                      128  thrpt    5        15,000                counts
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.time                                                       128  thrpt    5        12,000                    ms
[info] ArrayOfYearsBenchmark.readUPickle                                                                 128  thrpt    5     38712,191 ±    1000,557   ops/s
[info] ArrayOfYearsBenchmark.readUPickle:·gc.alloc.rate                                                  128  thrpt    5      1743,124 ±      44,970  MB/sec
[info] ArrayOfYearsBenchmark.readUPickle:·gc.alloc.rate.norm                                             128  thrpt    5     70840,011 ±       0,002    B/op
[info] ArrayOfYearsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                         128  thrpt    5      1756,834 ±    1430,898  MB/sec
[info] ArrayOfYearsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     71319,460 ±   56468,240    B/op
[info] ArrayOfYearsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0,046 ±       0,154  MB/sec
[info] ArrayOfYearsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         1,856 ±       6,230    B/op
[info] ArrayOfYearsBenchmark.readUPickle:·gc.count                                                       128  thrpt    5        13,000                counts
[info] ArrayOfYearsBenchmark.readUPickle:·gc.time                                                        128  thrpt    5         8,000                    ms
[info] ArrayOfYearsBenchmark.writeJacksonScala                                                           128  thrpt    5    240117,158 ±   16337,802   ops/s
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.alloc.rate                                            128  thrpt    5      1136,714 ±      77,291  MB/sec
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5      7448,002 ±       0,001    B/op
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1204,893 ±    1153,533  MB/sec
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      7904,625 ±    7685,017    B/op
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,042 ±       0,098  MB/sec
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0,274 ±       0,652    B/op
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.count                                                 128  thrpt    5         9,000                counts
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.time                                                  128  thrpt    5         7,000                    ms
[info] ArrayOfYearsBenchmark.writeJsoniterScala                                                          128  thrpt    5   1836945,926 ±   53568,491   ops/s
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.alloc.rate                                           128  thrpt    5      1074,169 ±      31,283  MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5       920,000 ±       0,001    B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1077,827 ±    1421,167  MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5       921,827 ±    1200,727    B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,029 ±       0,156  MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0,025 ±       0,133    B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.count                                                128  thrpt    5         8,000                counts
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.time                                                 128  thrpt    5         4,000                    ms
[info] ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc                                                  128  thrpt    5   1724826,661 ±    7330,124   ops/s
[info] ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        128  thrpt    5           ≈ 0                counts
[info] ArrayOfYearsBenchmark.writePlayJson                                                               128  thrpt    5    197544,261 ±    3400,280   ops/s
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.alloc.rate                                                128  thrpt    5      1279,710 ±      21,963  MB/sec
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.alloc.rate.norm                                           128  thrpt    5     10192,002 ±       0,001    B/op
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1338,337 ±      12,180  MB/sec
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     10659,038 ±     145,716    B/op
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0,042 ±       0,127  MB/sec
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0,332 ±       1,010    B/op
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.count                                                     128  thrpt    5        10,000                counts
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.time                                                      128  thrpt    5         8,000                    ms
[info] ArrayOfYearsBenchmark.writeUPickle                                                                128  thrpt    5     55257,883 ±    2676,173   ops/s
[info] ArrayOfYearsBenchmark.writeUPickle:·gc.alloc.rate                                                 128  thrpt    5       580,490 ±      28,122  MB/sec
[info] ArrayOfYearsBenchmark.writeUPickle:·gc.alloc.rate.norm                                            128  thrpt    5     16528,008 ±       0,001    B/op
[info] ArrayOfYearsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                        128  thrpt    5       641,012 ±     278,258  MB/sec
[info] ArrayOfYearsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     18259,177 ±    8177,494    B/op
[info] ArrayOfYearsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0,350 ±       2,840  MB/sec
[info] ArrayOfYearsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         9,975 ±      80,920    B/op
[info] ArrayOfYearsBenchmark.writeUPickle:·gc.count                                                      128  thrpt    5         5,000                counts
[info] ArrayOfYearsBenchmark.writeUPickle:·gc.time                                                       128  thrpt    5         6,000                    ms
[info] ArrayOfZoneIdsBenchmark.readCirce                                                                 128  thrpt    5     77626,895 ±    3884,660   ops/s
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate                                                  128  thrpt    5      1746,616 ±      87,375  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate.norm                                             128  thrpt    5     35400,006 ±       0,001    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5      1616,814 ±    1420,929  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     32819,217 ±   29894,390    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0,062 ±       0,150  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         1,261 ±       3,009    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.count                                                       128  thrpt    5        12,000                counts
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.time                                                        128  thrpt    5         8,000                    ms
[info] ArrayOfZoneIdsBenchmark.readJacksonScala                                                          128  thrpt    5    101018,028 ±    1382,763   ops/s
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate                                           128  thrpt    5      1259,044 ±      17,124  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5     19608,004 ±       0,001    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1203,434 ±    1148,865  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     18748,121 ±   17972,372    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,029 ±       0,091  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0,455 ±       1,426    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.count                                                128  thrpt    5         9,000                counts
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.time                                                 128  thrpt    5         7,000                    ms
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala                                                         128  thrpt    5    117676,405 ±    1809,702   ops/s
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate                                          128  thrpt    5      1376,854 ±      21,053  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5     18408,004 ±       0,001    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1346,142 ±       7,603  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     17997,601 ±     269,562    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,017 ±       0,067  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0,223 ±       0,895    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.count                                               128  thrpt    5        10,000                counts
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.time                                                128  thrpt    5         6,000                    ms
[info] ArrayOfZoneIdsBenchmark.readPlayJson                                                              128  thrpt    5     53065,009 ±     464,603   ops/s
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate                                               128  thrpt    5      2527,805 ±      22,268  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate.norm                                          128  thrpt    5     74944,008 ±       0,001    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5      2431,828 ±    1428,024  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     72088,081 ±   42018,455    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,058 ±       0,154  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         1,729 ±       4,574    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.count                                                    128  thrpt    5        18,000                counts
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.time                                                     128  thrpt    5        13,000                    ms
[info] ArrayOfZoneIdsBenchmark.readUPickle                                                               128  thrpt    5     68663,295 ±    4332,112   ops/s
[info] ArrayOfZoneIdsBenchmark.readUPickle:·gc.alloc.rate                                                128  thrpt    5      1495,770 ±      94,469  MB/sec
[info] ArrayOfZoneIdsBenchmark.readUPickle:·gc.alloc.rate.norm                                           128  thrpt    5     34272,006 ±       0,001    B/op
[info] ArrayOfZoneIdsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1481,704 ±    1160,560  MB/sec
[info] ArrayOfZoneIdsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     33944,386 ±   26281,377    B/op
[info] ArrayOfZoneIdsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0,046 ±       0,143  MB/sec
[info] ArrayOfZoneIdsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         1,058 ±       3,338    B/op
[info] ArrayOfZoneIdsBenchmark.readUPickle:·gc.count                                                     128  thrpt    5        11,000                counts
[info] ArrayOfZoneIdsBenchmark.readUPickle:·gc.time                                                      128  thrpt    5         7,000                    ms
[info] ArrayOfZoneIdsBenchmark.writeCirce                                                                128  thrpt    5    132784,936 ±   14813,101   ops/s
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate                                                 128  thrpt    5      1246,395 ±     138,987  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate.norm                                            128  thrpt    5     14768,003 ±       0,001    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1206,424 ±    1150,418  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     14220,435 ±   12555,612    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0,042 ±       0,127  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         0,487 ±       1,479    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.count                                                      128  thrpt    5         9,000                counts
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.time                                                       128  thrpt    5         7,000                    ms
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala                                                         128  thrpt    5    377877,768 ±    7376,465   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate                                          128  thrpt    5       561,049 ±      10,987  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5      2336,001 ±       0,001    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5       502,428 ±    1111,982  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      2093,034 ±    4632,173    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,521 ±       4,309  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         2,161 ±      17,876    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.count                                               128  thrpt    5         4,000                counts
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.time                                                128  thrpt    5         7,000                    ms
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala                                                        128  thrpt    5    738341,236 ±   54433,638   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate                                         128  thrpt    5       916,091 ±      67,501  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5      1952,001 ±       0,001    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5       940,668 ±    1417,513  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      2003,719 ±    3005,908    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0,025 ±       0,088  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0,054 ±       0,189    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.count                                              128  thrpt    5         7,000                counts
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.time                                               128  thrpt    5         4,000                    ms
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc                                                128  thrpt    5    772837,141 ±   25240,609   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                 128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                            128  thrpt    5         0,001 ±       0,001    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                      128  thrpt    5           ≈ 0                counts
[info] ArrayOfZoneIdsBenchmark.writePlayJson                                                             128  thrpt    5    241744,737 ±    7597,409   ops/s
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate                                              128  thrpt    5       790,435 ±      24,736  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate.norm                                         128  thrpt    5      5144,002 ±       0,001    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5       802,205 ±    1150,714  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      5220,148 ±    7476,173    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,033 ±       0,122  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0,216 ±       0,789    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.count                                                   128  thrpt    5         6,000                counts
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.time                                                    128  thrpt    5         4,000                    ms
[info] ArrayOfZoneIdsBenchmark.writeUPickle                                                              128  thrpt    5     28491,964 ±    1706,313   ops/s
[info] ArrayOfZoneIdsBenchmark.writeUPickle:·gc.alloc.rate                                               128  thrpt    5       384,075 ±      22,995  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeUPickle:·gc.alloc.rate.norm                                          128  thrpt    5     21208,015 ±       0,003    B/op
[info] ArrayOfZoneIdsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                      128  thrpt    5       441,521 ±     987,404  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     24450,642 ±   54308,618    B/op
[info] ArrayOfZoneIdsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,437 ±       3,571  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5        23,771 ±     194,242    B/op
[info] ArrayOfZoneIdsBenchmark.writeUPickle:·gc.count                                                    128  thrpt    5         4,000                counts
[info] ArrayOfZoneIdsBenchmark.writeUPickle:·gc.time                                                     128  thrpt    5         7,000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readCirce                                                             128  thrpt    5    141416,317 ±     673,565   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate                                              128  thrpt    5      1940,039 ±       9,247  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate.norm                                         128  thrpt    5     21584,003 ±       0,001    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1888,699 ±    1161,947  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     21013,483 ±   12943,042    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,029 ±       0,072  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0,324 ±       0,798    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.count                                                   128  thrpt    5        14,000                counts
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.time                                                    128  thrpt    5         9,000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala                                                      128  thrpt    5    210139,908 ±   11817,913   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate                                       128  thrpt    5      1253,395 ±      70,438  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                  128  thrpt    5      9384,002 ±       0,001    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                              128  thrpt    5      1205,660 ±    1151,599  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5      9036,534 ±    8747,658    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0,058 ±       0,143  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0,438 ±       1,080    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.count                                            128  thrpt    5         9,000                counts
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.time                                             128  thrpt    5         6,000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala                                                     128  thrpt    5    564094,509 ±   24717,981   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate                                      128  thrpt    5      1095,761 ±      48,080  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                 128  thrpt    5      3056,001 ±       0,001    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                             128  thrpt    5      1078,448 ±    1420,820  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5      3015,992 ±    4061,903    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0,025 ±       0,143  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0,070 ±       0,400    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.count                                           128  thrpt    5         8,000                counts
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.time                                            128  thrpt    5         5,000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson                                                          128  thrpt    5     76532,130 ±    1699,790   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate                                           128  thrpt    5      3181,439 ±      70,941  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate.norm                                      128  thrpt    5     65400,006 ±       0,001    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                  128  thrpt    5      3117,210 ±    1442,503  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     64052,265 ±   28553,597    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,058 ±       0,119  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         1,197 ±       2,429    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.count                                                128  thrpt    5        23,000                counts
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.time                                                 128  thrpt    5        18,000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readUPickle                                                           128  thrpt    5    104422,072 ±    1311,938   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.alloc.rate                                            128  thrpt    5      1583,401 ±      19,766  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.alloc.rate.norm                                       128  thrpt    5     23856,004 ±       0,001    B/op
[info] ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1485,494 ±    1162,331  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     22376,986 ±   17389,753    B/op
[info] ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,021 ±       0,179  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0,313 ±       2,696    B/op
[info] ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.count                                                 128  thrpt    5        11,000                counts
[info] ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.time                                                  128  thrpt    5         6,000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeCirce                                                            128  thrpt    5    187961,102 ±    3018,444   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate                                             128  thrpt    5      1202,324 ±      19,337  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate.norm                                        128  thrpt    5     10064,002 ±       0,001    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1209,076 ±    1159,655  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     10127,443 ±    9794,647    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,037 ±       0,143  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0,315 ±       1,203    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.count                                                  128  thrpt    5         9,000                counts
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.time                                                   128  thrpt    5         5,000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala                                                     128  thrpt    5    593121,165 ±   11458,557   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate                                      128  thrpt    5       585,092 ±      11,298  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5      1552,001 ±       0,001    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5       636,636 ±     268,810  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5      1688,450 ±     702,259    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0,438 ±       3,591  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         1,168 ±       9,587    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.count                                           128  thrpt    5         5,000                counts
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.time                                            128  thrpt    5         7,000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala                                                    128  thrpt    5   1247846,095 ±  170342,920   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate                                     128  thrpt    5       926,420 ±     126,438  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5      1168,000 ±       0,001    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5       942,779 ±    1420,807  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5      1185,065 ±    1729,351    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0,029 ±       0,122  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0,036 ±       0,151    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.count                                          128  thrpt    5         7,000                counts
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.time                                           128  thrpt    5         4,000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc                                            128  thrpt    5   1241276,154 ±    6496,959   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                             128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                        128  thrpt    5        ≈ 10⁻³                  B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                  128  thrpt    5           ≈ 0                counts
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson                                                         128  thrpt    5    390530,346 ±    3611,781   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate                                          128  thrpt    5      1066,363 ±       9,884  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate.norm                                     128  thrpt    5      4296,001 ±       0,001    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1068,308 ±    1405,886  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      4304,702 ±    5674,468    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,029 ±       0,122  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0,118 ±       0,491    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.count                                               128  thrpt    5         8,000                counts
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.time                                                128  thrpt    5         6,000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeUPickle                                                          128  thrpt    5     48920,797 ±    1056,197   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.alloc.rate                                           128  thrpt    5       369,404 ±       7,928  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.alloc.rate.norm                                      128  thrpt    5     11880,009 ±       0,002    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                  128  thrpt    5       441,801 ±     988,561  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     14227,580 ±   31789,273    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,338 ±       2,908  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5        10,838 ±      93,320    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.count                                                128  thrpt    5         4,000                counts
[info] ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.time                                                 128  thrpt    5         7,000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readCirce                                                          128  thrpt    5       764,691 ±      11,470   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate                                           128  thrpt    5      1596,408 ±      24,218  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                                      128  thrpt    5   3283721,158 ±       4,777    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1604,404 ±    1416,664  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5   3300294,888 ± 2916428,822    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,037 ±       0,036  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5        77,102 ±      74,251    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.count                                                128  thrpt    5        12,000                counts
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.time                                                 128  thrpt    5         8,000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala                                                   128  thrpt    5       769,296 ±       8,287   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                                    128  thrpt    5      1595,188 ±      17,385  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                               128  thrpt    5   3261491,172 ±     141,645    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                           128  thrpt    5      1598,111 ±    1396,930  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5   3268547,755 ± 2880435,007    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0,029 ±       0,072  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5        59,634 ±     146,926    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.count                                         128  thrpt    5        12,000                counts
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.time                                          128  thrpt    5         9,000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala                                                  128  thrpt    5     43806,548 ±    2842,188   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                   128  thrpt    5       771,394 ±      50,022  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                              128  thrpt    5     27704,010 ±       0,001    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                          128  thrpt    5       801,906 ±    1155,658  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5     28843,402 ±   42255,255    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0,748 ±       6,262  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5        27,065 ±     226,712    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.count                                        128  thrpt    5         6,000                counts
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.time                                         128  thrpt    5         6,000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson                                                       128  thrpt    5       754,427 ±      43,195   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate                                        128  thrpt    5      1614,998 ±      92,145  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                   128  thrpt    5   3366955,050 ±      49,978    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                               128  thrpt    5      1599,220 ±    1392,044  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5   3342425,598 ± 3083736,259    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0,033 ±       0,122  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5        69,811 ±     255,443    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.count                                             128  thrpt    5        12,000                counts
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.time                                              128  thrpt    5         9,000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readUPickle                                                        128  thrpt    5       743,080 ±      15,054   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.alloc.rate                                         128  thrpt    5      1540,094 ±      30,963  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.alloc.rate.norm                                    128  thrpt    5   3259920,572 ±      92,465    B/op
[info] ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                128  thrpt    5      1605,897 ±    1416,652  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5   3399096,164 ± 2995160,387    B/op
[info] ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0,037 ±       0,119  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5        79,387 ±     253,059    B/op
[info] ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.count                                              128  thrpt    5        12,000                counts
[info] ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.time                                               128  thrpt    5         8,000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeCirce                                                         128  thrpt    5     14485,523 ±     366,561   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate                                          128  thrpt    5      1180,421 ±      29,024  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                     128  thrpt    5    128205,105 ±     130,741    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1197,413 ±    1144,707  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5    130088,865 ±  124812,520    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,037 ±       0,067  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         4,077 ±       7,386    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.count                                               128  thrpt    5         9,000                counts
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.time                                                128  thrpt    5         7,000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala                                                  128  thrpt    5     16769,847 ±     201,397   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                   128  thrpt    5      1056,532 ±      12,611  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                              128  thrpt    5     99120,005 ±       0,334    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                          128  thrpt    5      1060,668 ±    1396,140  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5     99487,993 ±  130730,391    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0,025 ±       0,105  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5         2,341 ±       9,784    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.count                                        128  thrpt    5         8,000                counts
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.time                                         128  thrpt    5         9,000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala                                                 128  thrpt    5    278962,234 ±    5215,964   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                  128  thrpt    5      1011,361 ±      18,933  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                             128  thrpt    5      5704,002 ±       0,001    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                         128  thrpt    5      1068,027 ±    1407,884  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5      6021,016 ±    7908,003    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0,042 ±       0,160  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         0,235 ±       0,905    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.count                                       128  thrpt    5         8,000                counts
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.time                                        128  thrpt    5         5,000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc                                         128  thrpt    5    313915,830 ±    1507,886   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                          128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                     128  thrpt    5         0,001 ±       0,001    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                               128  thrpt    5           ≈ 0                counts
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson                                                      128  thrpt    5     16490,532 ±    1042,537   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate                                       128  thrpt    5      1121,657 ±      71,207  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                  128  thrpt    5    107014,722 ±      32,805    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                              128  thrpt    5      1063,338 ±    1400,286  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5    101479,538 ±  133906,009    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0,021 ±       0,080  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         1,978 ±       7,565    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.count                                            128  thrpt    5         8,000                counts
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.time                                             128  thrpt    5         5,000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeUPickle                                                       128  thrpt    5      8088,783 ±     161,086   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.alloc.rate                                        128  thrpt    5       854,326 ±      17,053  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.alloc.rate.norm                                   128  thrpt    5    166171,049 ±      47,010    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                               128  thrpt    5       934,639 ±    1410,177  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5    181970,787 ±  276760,085    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0,021 ±       0,113  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         4,032 ±      21,935    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.count                                             128  thrpt    5         7,000                counts
[info] ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.time                                              128  thrpt    5         5,000                    ms
[info] BitSetBenchmark.readJsoniterScala                                                                 128  thrpt    5   1166158,577 ±   19125,528   ops/s
[info] BitSetBenchmark.readJsoniterScala:·gc.alloc.rate                                                  128  thrpt    5        47,439 ±       0,776  MB/sec
[info] BitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                             128  thrpt    5        64,000 ±       0,001    B/op
[info] BitSetBenchmark.readJsoniterScala:·gc.count                                                       128  thrpt    5           ≈ 0                counts
[info] BitSetBenchmark.readPlayJson                                                                      128  thrpt    5     81029,625 ±     785,844   ops/s
[info] BitSetBenchmark.readPlayJson:·gc.alloc.rate                                                       128  thrpt    5      3550,816 ±      34,212  MB/sec
[info] BitSetBenchmark.readPlayJson:·gc.alloc.rate.norm                                                  128  thrpt    5     68944,005 ±       0,001    B/op
[info] BitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                              128  thrpt    5      3528,354 ±    1158,114  MB/sec
[info] BitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                         128  thrpt    5     68511,577 ±   22706,249    B/op
[info] BitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                          128  thrpt    5         0,062 ±       0,098  MB/sec
[info] BitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                     128  thrpt    5         1,213 ±       1,910    B/op
[info] BitSetBenchmark.readPlayJson:·gc.count                                                            128  thrpt    5        26,000                counts
[info] BitSetBenchmark.readPlayJson:·gc.time                                                             128  thrpt    5        19,000                    ms
[info] BitSetBenchmark.writeJacksonScala                                                                 128  thrpt    5   1688807,234 ±   38763,386   ops/s
[info] BitSetBenchmark.writeJacksonScala:·gc.alloc.rate                                                  128  thrpt    5       970,351 ±      22,271  MB/sec
[info] BitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                             128  thrpt    5       904,000 ±       0,001    B/op
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                         128  thrpt    5       935,632 ±    1409,219  MB/sec
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5       871,139 ±    1305,375    B/op
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0,033 ±       0,166  MB/sec
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         0,031 ±       0,154    B/op
[info] BitSetBenchmark.writeJacksonScala:·gc.count                                                       128  thrpt    5         7,000                counts
[info] BitSetBenchmark.writeJacksonScala:·gc.time                                                        128  thrpt    5         5,000                    ms
[info] BitSetBenchmark.writeJsoniterScala                                                                128  thrpt    5   2005272,327 ±   51716,492   ops/s
[info] BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate                                                 128  thrpt    5       560,821 ±      14,464  MB/sec
[info] BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                            128  thrpt    5       440,000 ±       0,001    B/op
[info] BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                        128  thrpt    5       506,439 ±    1122,997  MB/sec
[info] BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5       397,911 ±     883,023    B/op
[info] BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0,327 ±       2,664  MB/sec
[info] BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         0,257 ±       2,090    B/op
[info] BitSetBenchmark.writeJsoniterScala:·gc.count                                                      128  thrpt    5         4,000                counts
[info] BitSetBenchmark.writeJsoniterScala:·gc.time                                                       128  thrpt    5         5,000                    ms
[info] BitSetBenchmark.writeJsoniterScalaPrealloc                                                        128  thrpt    5   2039608,677 ±   10960,614   ops/s
[info] BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                         128  thrpt    5        20,742 ±       0,112  MB/sec
[info] BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                    128  thrpt    5        16,000 ±       0,001    B/op
[info] BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count                                              128  thrpt    5           ≈ 0                counts
[info] BitSetBenchmark.writePlayJson                                                                     128  thrpt    5     41607,324 ±    2500,512   ops/s
[info] BitSetBenchmark.writePlayJson:·gc.alloc.rate                                                      128  thrpt    5      1815,579 ±     109,085  MB/sec
[info] BitSetBenchmark.writePlayJson:·gc.alloc.rate.norm                                                 128  thrpt    5     68648,011 ±       0,002    B/op
[info] BitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                             128  thrpt    5      1747,587 ±    1418,170  MB/sec
[info] BitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                        128  thrpt    5     66201,339 ±   56079,722    B/op
[info] BitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                         128  thrpt    5         0,042 ±       0,113  MB/sec
[info] BitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                    128  thrpt    5         1,584 ±       4,365    B/op
[info] BitSetBenchmark.writePlayJson:·gc.count                                                           128  thrpt    5        13,000                counts
[info] BitSetBenchmark.writePlayJson:·gc.time                                                            128  thrpt    5        11,000                    ms
[info] ExtractFieldsBenchmark.readCirce                                                                  N/A  thrpt    5    878785,906 ±   15623,997   ops/s
[info] ExtractFieldsBenchmark.readCirce:·gc.alloc.rate                                                   N/A  thrpt    5      2864,443 ±      50,524  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.alloc.rate.norm                                              N/A  thrpt    5      5128,000 ±       0,001    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5      2849,266 ±    1171,232  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5      5100,052 ±    2054,004    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5         0,062 ±       0,113  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5         0,112 ±       0,202    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.count                                                        N/A  thrpt    5        21,000                counts
[info] ExtractFieldsBenchmark.readCirce:·gc.time                                                         N/A  thrpt    5        11,000                    ms
[info] ExtractFieldsBenchmark.readDslJsonJava                                                            N/A  thrpt    5   5877554,874 ±  186410,992   ops/s
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate                                             N/A  thrpt    5       358,637 ±      11,379  MB/sec
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                        N/A  thrpt    5        96,000 ±       0,001    B/op
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                    N/A  thrpt    5       439,870 ±     980,287  MB/sec
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                               N/A  thrpt    5       117,920 ±     261,887    B/op
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                N/A  thrpt    5         0,011 ±       0,048  MB/sec
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                           N/A  thrpt    5         0,003 ±       0,013    B/op
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.count                                                  N/A  thrpt    5         4,000                counts
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.time                                                   N/A  thrpt    5         7,000                    ms
[info] ExtractFieldsBenchmark.readJacksonScala                                                           N/A  thrpt    5   1081663,361 ±  172862,613   ops/s
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate                                            N/A  thrpt    5      1342,024 ±     214,410  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                       N/A  thrpt    5      1952,000 ±       0,001    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                   N/A  thrpt    5      1338,032 ±      13,175  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                              N/A  thrpt    5      1949,020 ±     328,286    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                               N/A  thrpt    5         0,029 ±       0,072  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                          N/A  thrpt    5         0,042 ±       0,102    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.count                                                 N/A  thrpt    5        10,000                counts
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.time                                                  N/A  thrpt    5         7,000                    ms
[info] ExtractFieldsBenchmark.readJsoniterScala                                                          N/A  thrpt    5   8386337,619 ±  218245,677   ops/s
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate                                           N/A  thrpt    5       383,802 ±       9,959  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                      N/A  thrpt    5        72,000 ±       0,001    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                  N/A  thrpt    5       442,360 ±     990,985  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                             N/A  thrpt    5        83,057 ±     185,710    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                              N/A  thrpt    5         0,303 ±       2,513  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         N/A  thrpt    5         0,057 ±       0,470    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.count                                                N/A  thrpt    5         4,000                counts
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.time                                                 N/A  thrpt    5         6,000                    ms
[info] ExtractFieldsBenchmark.readPlayJson                                                               N/A  thrpt    5    304295,256 ±   29144,495   ops/s
[info] ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate                                                N/A  thrpt    5      1570,551 ±     150,521  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate.norm                                           N/A  thrpt    5      8120,001 ±       0,001    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                       N/A  thrpt    5      1607,926 ±    1412,277  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                  N/A  thrpt    5      8300,300 ±    6942,191    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                   N/A  thrpt    5         0,050 ±       0,146  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                              N/A  thrpt    5         0,257 ±       0,740    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.count                                                     N/A  thrpt    5        12,000                counts
[info] ExtractFieldsBenchmark.readPlayJson:·gc.time                                                      N/A  thrpt    5         9,000                    ms
[info] ExtractFieldsBenchmark.readUPickle                                                                N/A  thrpt    5    658953,713 ±   16298,060   ops/s
[info] ExtractFieldsBenchmark.readUPickle:·gc.alloc.rate                                                 N/A  thrpt    5      1424,073 ±      35,067  MB/sec
[info] ExtractFieldsBenchmark.readUPickle:·gc.alloc.rate.norm                                            N/A  thrpt    5      3400,001 ±       0,001    B/op
[info] ExtractFieldsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                        N/A  thrpt    5      1484,424 ±    1168,905  MB/sec
[info] ExtractFieldsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                   N/A  thrpt    5      3543,148 ±    2760,249    B/op
[info] ExtractFieldsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                    N/A  thrpt    5         0,037 ±       0,119  MB/sec
[info] ExtractFieldsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                               N/A  thrpt    5         0,089 ±       0,284    B/op
[info] ExtractFieldsBenchmark.readUPickle:·gc.count                                                      N/A  thrpt    5        11,000                counts
[info] ExtractFieldsBenchmark.readUPickle:·gc.time                                                       N/A  thrpt    5         6,000                    ms
[info] GeoJSONBenchmark.readCirce                                                                        N/A  thrpt    5      4073,147 ±      69,970   ops/s
[info] GeoJSONBenchmark.readCirce:·gc.alloc.rate                                                         N/A  thrpt    5      2021,070 ±      34,569  MB/sec
[info] GeoJSONBenchmark.readCirce:·gc.alloc.rate.norm                                                    N/A  thrpt    5    780640,108 ±       0,014    B/op
[info] GeoJSONBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                N/A  thrpt    5      2020,540 ±      26,682  MB/sec
[info] GeoJSONBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                           N/A  thrpt    5    780447,622 ±   16661,867    B/op
[info] GeoJSONBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                            N/A  thrpt    5         0,121 ±       0,318  MB/sec
[info] GeoJSONBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                       N/A  thrpt    5        46,564 ±     122,026    B/op
[info] GeoJSONBenchmark.readCirce:·gc.count                                                              N/A  thrpt    5        15,000                counts
[info] GeoJSONBenchmark.readCirce:·gc.time                                                               N/A  thrpt    5        11,000                    ms
[info] GeoJSONBenchmark.readJacksonScala                                                                 N/A  thrpt    5      5677,845 ±     150,699   ops/s
[info] GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate                                                  N/A  thrpt    5      2378,475 ±      63,437  MB/sec
[info] GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate.norm                                             N/A  thrpt    5    659032,079 ±       0,018    B/op
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                         N/A  thrpt    5      2423,709 ±    1418,604  MB/sec
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                    N/A  thrpt    5    671660,772 ±  395651,239    B/op
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                     N/A  thrpt    5         0,058 ±       0,067  MB/sec
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                N/A  thrpt    5        16,163 ±      18,773    B/op
[info] GeoJSONBenchmark.readJacksonScala:·gc.count                                                       N/A  thrpt    5        18,000                counts
[info] GeoJSONBenchmark.readJacksonScala:·gc.time                                                        N/A  thrpt    5        16,000                    ms
[info] GeoJSONBenchmark.readJsoniterScala                                                                N/A  thrpt    5     47404,466 ±     742,706   ops/s
[info] GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate                                                 N/A  thrpt    5       788,949 ±      12,307  MB/sec
[info] GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                            N/A  thrpt    5     26184,009 ±       0,001    B/op
[info] GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                        N/A  thrpt    5       807,798 ±    1158,772  MB/sec
[info] GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                   N/A  thrpt    5     26824,454 ±   38740,916    B/op
[info] GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                    N/A  thrpt    5         0,025 ±       0,088  MB/sec
[info] GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                               N/A  thrpt    5         0,831 ±       2,926    B/op
[info] GeoJSONBenchmark.readJsoniterScala:·gc.count                                                      N/A  thrpt    5         6,000                counts
[info] GeoJSONBenchmark.readJsoniterScala:·gc.time                                                       N/A  thrpt    5         3,000                    ms
[info] GeoJSONBenchmark.writeCirce                                                                       N/A  thrpt    5      4605,739 ±      28,550   ops/s
[info] GeoJSONBenchmark.writeCirce:·gc.alloc.rate                                                        N/A  thrpt    5       982,073 ±       6,137  MB/sec
[info] GeoJSONBenchmark.writeCirce:·gc.alloc.rate.norm                                                   N/A  thrpt    5    335456,097 ±       0,014    B/op
[info] GeoJSONBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                               N/A  thrpt    5       936,889 ±    1410,948  MB/sec
[info] GeoJSONBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                          N/A  thrpt    5    320036,248 ±  482142,058    B/op
[info] GeoJSONBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                           N/A  thrpt    5         0,046 ±       0,242  MB/sec
[info] GeoJSONBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                      N/A  thrpt    5        15,575 ±      82,621    B/op
[info] GeoJSONBenchmark.writeCirce:·gc.count                                                             N/A  thrpt    5         7,000                counts
[info] GeoJSONBenchmark.writeCirce:·gc.time                                                              N/A  thrpt    5         5,000                    ms
[info] GeoJSONBenchmark.writeJacksonScala                                                                N/A  thrpt    5      5303,180 ±      79,087   ops/s
[info] GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate                                                 N/A  thrpt    5       590,770 ±       8,717  MB/sec
[info] GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                            N/A  thrpt    5    175253,686 ±       3,777    B/op
[info] GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                        N/A  thrpt    5       633,689 ±     262,320  MB/sec
[info] GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                   N/A  thrpt    5    187931,735 ±   75675,282    B/op
[info] GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                    N/A  thrpt    5         0,564 ±       4,681  MB/sec
[info] GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                               N/A  thrpt    5       167,576 ±    1390,037    B/op
[info] GeoJSONBenchmark.writeJacksonScala:·gc.count                                                      N/A  thrpt    5         5,000                counts
[info] GeoJSONBenchmark.writeJacksonScala:·gc.time                                                       N/A  thrpt    5         8,000                    ms
[info] GeoJSONBenchmark.writeJsoniterScala                                                               N/A  thrpt    5      6889,682 ±     520,816   ops/s
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate                                                N/A  thrpt    5       222,231 ±      16,818  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                           N/A  thrpt    5     50745,806 ±      14,155    B/op
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                       N/A  thrpt    5       204,705 ±    1079,349  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                  N/A  thrpt    5     47444,149 ±  250251,036    B/op
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                   N/A  thrpt    5         0,011 ±       0,093  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                              N/A  thrpt    5         2,439 ±      21,003    B/op
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.count                                                     N/A  thrpt    5         2,000                counts
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.time                                                      N/A  thrpt    5         3,000                    ms
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc                                                       N/A  thrpt    5      7032,130 ±      76,506   ops/s
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                        N/A  thrpt    5       175,419 ±       1,943  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                   N/A  thrpt    5     39245,952 ±      40,018    B/op
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                               N/A  thrpt    5       204,698 ±    1079,313  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                          N/A  thrpt    5     45925,670 ±  242152,869    B/op
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                           N/A  thrpt    5         0,542 ±       4,668  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm                      N/A  thrpt    5       121,561 ±    1046,681    B/op
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.count                                             N/A  thrpt    5         2,000                counts
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.time                                              N/A  thrpt    5         3,000                    ms
[info] GoogleMapsAPIBenchmark.readCirce                                                                  N/A  thrpt    5      8724,266 ±     369,357   ops/s
[info] GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate                                                   N/A  thrpt    5      2178,003 ±      92,277  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate.norm                                              N/A  thrpt    5    392765,942 ±      48,993    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5      2296,981 ±    1423,508  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5    414125,801 ±  252854,820    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5         0,072 ±       0,121  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5        13,009 ±      21,385    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.count                                                        N/A  thrpt    5        17,000                counts
[info] GoogleMapsAPIBenchmark.readCirce:·gc.time                                                         N/A  thrpt    5        12,000                    ms
[info] GoogleMapsAPIBenchmark.readDslJsonJava                                                            N/A  thrpt    5     12799,878 ±     402,513   ops/s
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate                                             N/A  thrpt    5       315,942 ±       9,962  MB/sec
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                        N/A  thrpt    5     38832,037 ±       0,021    B/op
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                    N/A  thrpt    5       307,066 ±    1079,380  MB/sec
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                               N/A  thrpt    5     37877,226 ±  133153,681    B/op
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                N/A  thrpt    5         0,011 ±       0,058  MB/sec
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                           N/A  thrpt    5         1,323 ±       7,267    B/op
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.count                                                  N/A  thrpt    5         3,000                counts
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.time                                                   N/A  thrpt    5         5,000                    ms
[info] GoogleMapsAPIBenchmark.readJacksonScala                                                           N/A  thrpt    5     15789,247 ±     283,864   ops/s
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate                                            N/A  thrpt    5       426,972 ±       7,667  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm                                       N/A  thrpt    5     42544,030 ±       0,017    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                   N/A  thrpt    5       337,510 ±    1210,294  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                              N/A  thrpt    5     33732,855 ±  120916,973    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                               N/A  thrpt    5         0,530 ±       4,451  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                          N/A  thrpt    5        52,875 ±     444,150    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.count                                                 N/A  thrpt    5         3,000                counts
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.time                                                  N/A  thrpt    5         8,000                    ms
[info] GoogleMapsAPIBenchmark.readJsoniterScala                                                          N/A  thrpt    5     24839,356 ±      86,646   ops/s
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate                                           N/A  thrpt    5       505,981 ±       1,751  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                      N/A  thrpt    5     32048,018 ±       0,002    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                  N/A  thrpt    5       474,037 ±    1066,783  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                             N/A  thrpt    5     30025,359 ±   67541,764    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                              N/A  thrpt    5         0,359 ±       2,958  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         N/A  thrpt    5        22,717 ±     187,127    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.count                                                N/A  thrpt    5         4,000                counts
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.time                                                 N/A  thrpt    5         6,000                    ms
[info] GoogleMapsAPIBenchmark.readPlayJson                                                               N/A  thrpt    5      2638,937 ±     171,102   ops/s
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate                                                N/A  thrpt    5      1652,636 ±     106,940  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate.norm                                           N/A  thrpt    5    985216,168 ±       0,025    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                       N/A  thrpt    5      1613,932 ±    1418,846  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                  N/A  thrpt    5    963868,349 ±  883139,294    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                   N/A  thrpt    5         0,017 ±       0,036  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                              N/A  thrpt    5         9,960 ±      21,452    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.count                                                     N/A  thrpt    5        12,000                counts
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.time                                                      N/A  thrpt    5        10,000                    ms
[info] GoogleMapsAPIBenchmark.readUPickle                                                                N/A  thrpt    5      7222,563 ±      33,483   ops/s
[info] GoogleMapsAPIBenchmark.readUPickle:·gc.alloc.rate                                                 N/A  thrpt    5      1151,116 ±       5,385  MB/sec
[info] GoogleMapsAPIBenchmark.readUPickle:·gc.alloc.rate.norm                                            N/A  thrpt    5    250743,228 ±      41,257    B/op
[info] GoogleMapsAPIBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                        N/A  thrpt    5      1210,584 ±    1157,213  MB/sec
[info] GoogleMapsAPIBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                   N/A  thrpt    5    263663,152 ±  251633,155    B/op
[info] GoogleMapsAPIBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                    N/A  thrpt    5         0,037 ±       0,143  MB/sec
[info] GoogleMapsAPIBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                               N/A  thrpt    5         8,159 ±      31,226    B/op
[info] GoogleMapsAPIBenchmark.readUPickle:·gc.count                                                      N/A  thrpt    5         9,000                counts
[info] GoogleMapsAPIBenchmark.readUPickle:·gc.time                                                       N/A  thrpt    5         5,000                    ms
[info] GoogleMapsAPIBenchmark.writeCirce                                                                 N/A  thrpt    5      9854,718 ±     120,694   ops/s
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate                                                  N/A  thrpt    5      2195,387 ±      26,683  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate.norm                                             N/A  thrpt    5    350488,946 ±      81,915    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                         N/A  thrpt    5      2160,350 ±    1174,901  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                    N/A  thrpt    5    344884,647 ±  187059,492    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                     N/A  thrpt    5         0,050 ±       0,134  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                N/A  thrpt    5         7,980 ±      21,427    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.count                                                       N/A  thrpt    5        16,000                counts
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.time                                                        N/A  thrpt    5        12,000                    ms
[info] GoogleMapsAPIBenchmark.writeDslJsonJava                                                           N/A  thrpt    5     61457,138 ±     331,581   ops/s
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate                                            N/A  thrpt    5       574,711 ±       3,088  MB/sec
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                       N/A  thrpt    5     14712,007 ±       0,001    B/op
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                   N/A  thrpt    5       633,450 ±     261,946  MB/sec
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                              N/A  thrpt    5     16214,318 ±    6653,564    B/op
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                               N/A  thrpt    5         0,016 ±       0,066  MB/sec
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                          N/A  thrpt    5         0,399 ±       1,699    B/op
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.count                                                 N/A  thrpt    5         5,000                counts
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.time                                                  N/A  thrpt    5         8,000                    ms
[info] GoogleMapsAPIBenchmark.writeJacksonScala                                                          N/A  thrpt    5     45598,609 ±     451,735   ops/s
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate                                           N/A  thrpt    5       679,135 ±       6,712  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                      N/A  thrpt    5     23431,840 ±       0,194    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                  N/A  thrpt    5       664,633 ±       1,045  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                             N/A  thrpt    5     22931,603 ±     234,194    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                              N/A  thrpt    5         0,545 ±       4,472  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                         N/A  thrpt    5        18,849 ±     154,578    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.count                                                N/A  thrpt    5         5,000                counts
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.time                                                 N/A  thrpt    5         5,000                    ms
[info] GoogleMapsAPIBenchmark.writeJsoniterScala                                                         N/A  thrpt    5     90926,085 ±     701,108   ops/s
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate                                          N/A  thrpt    5       683,809 ±       5,329  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                     N/A  thrpt    5     11832,005 ±       0,001    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                 N/A  thrpt    5       673,165 ±       0,738  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                            N/A  thrpt    5     11647,855 ±      83,033    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                             N/A  thrpt    5         0,362 ±       2,851  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        N/A  thrpt    5         6,253 ±      49,223    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.count                                               N/A  thrpt    5         5,000                counts
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.time                                                N/A  thrpt    5         4,000                    ms
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc                                                 N/A  thrpt    5    115700,424 ±     331,561   ops/s
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                  N/A  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                             N/A  thrpt    5         0,004 ±       0,001    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count                                       N/A  thrpt    5           ≈ 0                counts
[info] GoogleMapsAPIBenchmark.writePlayJson                                                              N/A  thrpt    5      6671,519 ±      36,655   ops/s
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate                                               N/A  thrpt    5      1998,001 ±      11,139  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate.norm                                          N/A  thrpt    5    471168,044 ±       1,289    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                      N/A  thrpt    5      1880,974 ±    1149,123  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                 N/A  thrpt    5    443631,475 ±  272423,203    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                  N/A  thrpt    5         0,029 ±       0,044  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                             N/A  thrpt    5         6,873 ±      10,333    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.count                                                    N/A  thrpt    5        14,000                counts
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.time                                                     N/A  thrpt    5        12,000                    ms
[info] GoogleMapsAPIBenchmark.writeUPickle                                                               N/A  thrpt    5      5011,562 ±     178,912   ops/s
[info] GoogleMapsAPIBenchmark.writeUPickle:·gc.alloc.rate                                                N/A  thrpt    5       519,465 ±      18,474  MB/sec
[info] GoogleMapsAPIBenchmark.writeUPickle:·gc.alloc.rate.norm                                           N/A  thrpt    5    163072,089 ±       0,013    B/op
[info] GoogleMapsAPIBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                       N/A  thrpt    5       505,479 ±    1120,376  MB/sec
[info] GoogleMapsAPIBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                  N/A  thrpt    5    159076,247 ±  353558,103    B/op
[info] GoogleMapsAPIBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                   N/A  thrpt    5         0,378 ±       3,034  MB/sec
[info] GoogleMapsAPIBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                              N/A  thrpt    5       120,073 ±     965,290    B/op
[info] GoogleMapsAPIBenchmark.writeUPickle:·gc.count                                                     N/A  thrpt    5         4,000                counts
[info] GoogleMapsAPIBenchmark.writeUPickle:·gc.time                                                      N/A  thrpt    5         5,000                    ms
[info] IntBenchmark.readCirce                                                                            N/A  thrpt    5   5562555,367 ±   56786,205   ops/s
[info] IntBenchmark.readCirce:·gc.alloc.rate                                                             N/A  thrpt    5      3535,601 ±      36,117  MB/sec
[info] IntBenchmark.readCirce:·gc.alloc.rate.norm                                                        N/A  thrpt    5      1000,000 ±       0,001    B/op
[info] IntBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                    N/A  thrpt    5      3535,517 ±    1174,191  MB/sec
[info] IntBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                               N/A  thrpt    5       999,930 ±     328,956    B/op
[info] IntBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                                N/A  thrpt    5         0,075 ±       0,072  MB/sec
[info] IntBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                           N/A  thrpt    5         0,021 ±       0,020    B/op
[info] IntBenchmark.readCirce:·gc.count                                                                  N/A  thrpt    5        26,000                counts
[info] IntBenchmark.readCirce:·gc.time                                                                   N/A  thrpt    5        15,000                    ms
[info] IntBenchmark.readDslJsonJava                                                                      N/A  thrpt    5  44069766,760 ±  144709,132   ops/s
[info] IntBenchmark.readDslJsonJava:·gc.alloc.rate                                                       N/A  thrpt    5       448,181 ±       1,446  MB/sec
[info] IntBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                  N/A  thrpt    5        16,000 ±       0,001    B/op
[info] IntBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                              N/A  thrpt    5       470,324 ±    1053,998  MB/sec
[info] IntBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                         N/A  thrpt    5        16,795 ±      37,640    B/op
[info] IntBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                          N/A  thrpt    5         0,008 ±       0,072  MB/sec
[info] IntBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                                     N/A  thrpt    5        ≈ 10⁻⁴                  B/op
[info] IntBenchmark.readDslJsonJava:·gc.count                                                            N/A  thrpt    5         4,000                counts
[info] IntBenchmark.readDslJsonJava:·gc.time                                                             N/A  thrpt    5         7,000                    ms
[info] IntBenchmark.readJacksonScala                                                                     N/A  thrpt    5   9430371,275 ±  149092,642   ops/s
[info] IntBenchmark.readJacksonScala:·gc.alloc.rate                                                      N/A  thrpt    5      3548,472 ±      56,057  MB/sec
[info] IntBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                 N/A  thrpt    5       592,000 ±       0,001    B/op
[info] IntBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                             N/A  thrpt    5      3530,237 ±    1158,286  MB/sec
[info] IntBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                        N/A  thrpt    5       588,929 ±     191,079    B/op
[info] IntBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                         N/A  thrpt    5         0,071 ±       0,122  MB/sec
[info] IntBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                    N/A  thrpt    5         0,012 ±       0,020    B/op
[info] IntBenchmark.readJacksonScala:·gc.count                                                           N/A  thrpt    5        26,000                counts
[info] IntBenchmark.readJacksonScala:·gc.time                                                            N/A  thrpt    5        16,000                    ms
[info] IntBenchmark.readJsoniterScala                                                                    N/A  thrpt    5  54246526,440 ± 1273031,346   ops/s
[info] IntBenchmark.readJsoniterScala:·gc.alloc.rate                                                     N/A  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] IntBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                N/A  thrpt    5        ≈ 10⁻⁵                  B/op
[info] IntBenchmark.readJsoniterScala:·gc.count                                                          N/A  thrpt    5           ≈ 0                counts
[info] IntBenchmark.readNaiveScala                                                                       N/A  thrpt    5  19051252,321 ±   73745,820   ops/s
[info] IntBenchmark.readNaiveScala:·gc.alloc.rate                                                        N/A  thrpt    5      1259,321 ±       4,822  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.alloc.rate.norm                                                   N/A  thrpt    5       104,000 ±       0,001    B/op
[info] IntBenchmark.readNaiveScala:·gc.churn.PS_Eden_Space                                               N/A  thrpt    5      1215,298 ±    1161,559  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.churn.PS_Eden_Space.norm                                          N/A  thrpt    5       100,366 ±      95,952    B/op
[info] IntBenchmark.readNaiveScala:·gc.churn.PS_Survivor_Space                                           N/A  thrpt    5         0,033 ±       0,091  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.churn.PS_Survivor_Space.norm                                      N/A  thrpt    5         0,003 ±       0,008    B/op
[info] IntBenchmark.readNaiveScala:·gc.count                                                             N/A  thrpt    5         9,000                counts
[info] IntBenchmark.readNaiveScala:·gc.time                                                              N/A  thrpt    5         5,000                    ms
[info] IntBenchmark.readPlayJson                                                                         N/A  thrpt    5   8405273,690 ±   93629,724   ops/s
[info] IntBenchmark.readPlayJson:·gc.alloc.rate                                                          N/A  thrpt    5      4060,449 ±      44,891  MB/sec
[info] IntBenchmark.readPlayJson:·gc.alloc.rate.norm                                                     N/A  thrpt    5       760,000 ±       0,001    B/op
[info] IntBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                                 N/A  thrpt    5      4080,452 ±      31,105  MB/sec
[info] IntBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                            N/A  thrpt    5       763,748 ±       9,624    B/op
[info] IntBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                             N/A  thrpt    5         0,062 ±       0,113  MB/sec
[info] IntBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                        N/A  thrpt    5         0,012 ±       0,021    B/op
[info] IntBenchmark.readPlayJson:·gc.count                                                               N/A  thrpt    5        30,000                counts
[info] IntBenchmark.readPlayJson:·gc.time                                                                N/A  thrpt    5        18,000                    ms
[info] IntBenchmark.readUPickle                                                                          N/A  thrpt    5   9673064,455 ±  124238,093   ops/s
[info] IntBenchmark.readUPickle:·gc.alloc.rate                                                           N/A  thrpt    5      4377,658 ±      56,821  MB/sec
[info] IntBenchmark.readUPickle:·gc.alloc.rate.norm                                                      N/A  thrpt    5       712,000 ±       0,001    B/op
[info] IntBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                                  N/A  thrpt    5      4358,116 ±    1440,251  MB/sec
[info] IntBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                             N/A  thrpt    5       708,878 ±     237,283    B/op
[info] IntBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                              N/A  thrpt    5         0,075 ±       0,091  MB/sec
[info] IntBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                                         N/A  thrpt    5         0,012 ±       0,015    B/op
[info] IntBenchmark.readUPickle:·gc.count                                                                N/A  thrpt    5        32,000                counts
[info] IntBenchmark.readUPickle:·gc.time                                                                 N/A  thrpt    5        19,000                    ms
[info] IntBenchmark.writeCirce                                                                           N/A  thrpt    5  13838969,924 ±  260808,535   ops/s
[info] IntBenchmark.writeCirce:·gc.alloc.rate                                                            N/A  thrpt    5      2603,681 ±      48,854  MB/sec
[info] IntBenchmark.writeCirce:·gc.alloc.rate.norm                                                       N/A  thrpt    5       296,000 ±       0,001    B/op
[info] IntBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                                   N/A  thrpt    5      2573,531 ±    1151,630  MB/sec
[info] IntBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                              N/A  thrpt    5       292,537 ±     129,580    B/op
[info] IntBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                               N/A  thrpt    5         0,054 ±       0,134  MB/sec
[info] IntBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                          N/A  thrpt    5         0,006 ±       0,015    B/op
[info] IntBenchmark.writeCirce:·gc.count                                                                 N/A  thrpt    5        19,000                counts
[info] IntBenchmark.writeCirce:·gc.time                                                                  N/A  thrpt    5        12,000                    ms
[info] IntBenchmark.writeDslJsonJava                                                                     N/A  thrpt    5  66723865,654 ± 1186256,051   ops/s
[info] IntBenchmark.writeDslJsonJava:·gc.alloc.rate                                                      N/A  thrpt    5      2035,738 ±      36,063  MB/sec
[info] IntBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                                 N/A  thrpt    5        48,000 ±       0,001    B/op
[info] IntBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                             N/A  thrpt    5      2010,785 ±      12,699  MB/sec
[info] IntBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                                        N/A  thrpt    5        47,412 ±       0,779    B/op
[info] IntBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                                         N/A  thrpt    5         0,495 ±       4,039  MB/sec
[info] IntBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                                    N/A  thrpt    5         0,012 ±       0,095    B/op
[info] IntBenchmark.writeDslJsonJava:·gc.count                                                           N/A  thrpt    5        15,000                counts
[info] IntBenchmark.writeDslJsonJava:·gc.time                                                            N/A  thrpt    5        15,000                    ms
[info] IntBenchmark.writeJacksonScala                                                                    N/A  thrpt    5  12714373,653 ±  325637,829   ops/s
[info] IntBenchmark.writeJacksonScala:·gc.alloc.rate                                                     N/A  thrpt    5      3103,150 ±      79,222  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                N/A  thrpt    5       384,000 ±       0,001    B/op
[info] IntBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                            N/A  thrpt    5      3117,216 ±    1442,343  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                       N/A  thrpt    5       385,840 ±     182,091    B/op
[info] IntBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                        N/A  thrpt    5         0,067 ±       0,200  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                                   N/A  thrpt    5         0,008 ±       0,025    B/op
[info] IntBenchmark.writeJacksonScala:·gc.count                                                          N/A  thrpt    5        23,000                counts
[info] IntBenchmark.writeJacksonScala:·gc.time                                                           N/A  thrpt    5        16,000                    ms
[info] IntBenchmark.writeJsoniterScala                                                                   N/A  thrpt    5  49196603,183 ± 7378652,674   ops/s
[info] IntBenchmark.writeJsoniterScala:·gc.alloc.rate                                                    N/A  thrpt    5      1000,668 ±     150,107  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                               N/A  thrpt    5        32,000 ±       0,001    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                           N/A  thrpt    5      1078,226 ±    1421,895  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                      N/A  thrpt    5        34,263 ±      42,389    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                       N/A  thrpt    5         0,033 ±       0,166  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                  N/A  thrpt    5         0,001 ±       0,005    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.count                                                         N/A  thrpt    5         8,000                counts
[info] IntBenchmark.writeJsoniterScala:·gc.time                                                          N/A  thrpt    5         5,000                    ms
[info] IntBenchmark.writeJsoniterScalaPrealloc                                                           N/A  thrpt    5  63779231,634 ± 3772047,338   ops/s
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                            N/A  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                       N/A  thrpt    5        ≈ 10⁻⁵                  B/op
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                 N/A  thrpt    5           ≈ 0                counts
[info] IntBenchmark.writeNaiveScala                                                                      N/A  thrpt    5  14975300,154 ±  265505,093   ops/s
[info] IntBenchmark.writeNaiveScala:·gc.alloc.rate                                                       N/A  thrpt    5      2512,952 ±      44,263  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.alloc.rate.norm                                                  N/A  thrpt    5       264,000 ±       0,001    B/op
[info] IntBenchmark.writeNaiveScala:·gc.churn.PS_Eden_Space                                              N/A  thrpt    5      2581,084 ±    1168,789  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.churn.PS_Eden_Space.norm                                         N/A  thrpt    5       271,083 ±     120,118    B/op
[info] IntBenchmark.writeNaiveScala:·gc.churn.PS_Survivor_Space                                          N/A  thrpt    5         0,062 ±       0,150  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.churn.PS_Survivor_Space.norm                                     N/A  thrpt    5         0,007 ±       0,016    B/op
[info] IntBenchmark.writeNaiveScala:·gc.count                                                            N/A  thrpt    5        19,000                counts
[info] IntBenchmark.writeNaiveScala:·gc.time                                                             N/A  thrpt    5         8,000                    ms
[info] IntBenchmark.writePlayJson                                                                        N/A  thrpt    5   2545760,910 ±   32661,717   ops/s
[info] IntBenchmark.writePlayJson:·gc.alloc.rate                                                         N/A  thrpt    5      2200,729 ±      28,574  MB/sec
[info] IntBenchmark.writePlayJson:·gc.alloc.rate.norm                                                    N/A  thrpt    5      1360,000 ±       0,001    B/op
[info] IntBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                                N/A  thrpt    5      2298,662 ±    1417,605  MB/sec
[info] IntBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                           N/A  thrpt    5      1420,644 ±     879,770    B/op
[info] IntBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                            N/A  thrpt    5         0,071 ±       0,122  MB/sec
[info] IntBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                       N/A  thrpt    5         0,044 ±       0,076    B/op
[info] IntBenchmark.writePlayJson:·gc.count                                                              N/A  thrpt    5        17,000                counts
[info] IntBenchmark.writePlayJson:·gc.time                                                               N/A  thrpt    5        10,000                    ms
[info] IntBenchmark.writeUPickle                                                                         N/A  thrpt    5   8701194,472 ±  476762,580   ops/s
[info] IntBenchmark.writeUPickle:·gc.alloc.rate                                                          N/A  thrpt    5      2787,378 ±     152,776  MB/sec
[info] IntBenchmark.writeUPickle:·gc.alloc.rate.norm                                                     N/A  thrpt    5       504,000 ±       0,001    B/op
[info] IntBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                                 N/A  thrpt    5      2715,699 ±      20,268  MB/sec
[info] IntBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                            N/A  thrpt    5       491,122 ±      28,199    B/op
[info] IntBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                             N/A  thrpt    5         0,062 ±       0,080  MB/sec
[info] IntBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                                        N/A  thrpt    5         0,011 ±       0,015    B/op
[info] IntBenchmark.writeUPickle:·gc.count                                                               N/A  thrpt    5        20,000                counts
[info] IntBenchmark.writeUPickle:·gc.time                                                                N/A  thrpt    5        11,000                    ms
[info] IntMapOfBooleansBenchmark.readJsoniterScala                                                       128  thrpt    5    178108,114 ±    5100,066   ops/s
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                        128  thrpt    5      3268,703 ±      94,331  MB/sec
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5     28872,002 ±       0,001    B/op
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5      3262,403 ±    1163,310  MB/sec
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     28815,972 ±   10238,915    B/op
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0,092 ±       0,156  MB/sec
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0,811 ±       1,402    B/op
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.count                                             128  thrpt    5        24,000                counts
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.time                                              128  thrpt    5        15,000                    ms
[info] IntMapOfBooleansBenchmark.readPlayJson                                                            128  thrpt    5     28356,120 ±    1650,052   ops/s
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                             128  thrpt    5      2206,045 ±     128,287  MB/sec
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                        128  thrpt    5    122400,015 ±       0,002    B/op
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5      2155,611 ±    1147,136  MB/sec
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5    119593,506 ±   62720,474    B/op
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,075 ±       0,122  MB/sec
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         4,157 ±       6,677    B/op
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.count                                                  128  thrpt    5        16,000                counts
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.time                                                   128  thrpt    5        13,000                    ms
[info] IntMapOfBooleansBenchmark.writeJacksonScala                                                       128  thrpt    5    148569,493 ±    2222,718   ops/s
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                        128  thrpt    5      1439,166 ±      21,354  MB/sec
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5     15240,003 ±       0,001    B/op
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5      1473,484 ±    1160,991  MB/sec
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     15598,637 ±   12147,002    B/op
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0,037 ±       0,143  MB/sec
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0,397 ±       1,516    B/op
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.count                                             128  thrpt    5        11,000                counts
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.time                                              128  thrpt    5         9,000                    ms
[info] IntMapOfBooleansBenchmark.writeJsoniterScala                                                      128  thrpt    5    574247,630 ±    7601,219   ops/s
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                       128  thrpt    5      1188,434 ±      15,772  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5      3256,001 ±       0,001    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5      1213,105 ±    1161,899  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5      3322,832 ±    3173,514    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0,029 ±       0,134  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0,080 ±       0,366    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.count                                            128  thrpt    5         9,000                counts
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.time                                             128  thrpt    5         6,000                    ms
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc                                              128  thrpt    5    599613,433 ±   32011,122   ops/s
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                               128  thrpt    5       585,401 ±      31,260  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                          128  thrpt    5      1536,001 ±       0,001    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                      128  thrpt    5       640,907 ±     278,001  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                 128  thrpt    5      1679,807 ±     653,707    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                  128  thrpt    5         0,338 ±       2,552  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm             128  thrpt    5         0,882 ±       6,660    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                    128  thrpt    5         5,000                counts
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.time                                     128  thrpt    5         5,000                    ms
[info] IntMapOfBooleansBenchmark.writePlayJson                                                           128  thrpt    5     21483,440 ±    1729,562   ops/s
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                            128  thrpt    5       478,371 ±      38,535  MB/sec
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                       128  thrpt    5     35032,022 ±       0,012    B/op
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5       471,386 ±    1057,648  MB/sec
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     34196,651 ±   76663,306    B/op
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,478 ±       3,974  MB/sec
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5        34,759 ±     288,736    B/op
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.count                                                 128  thrpt    5         4,000                counts
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.time                                                  128  thrpt    5         7,000                    ms
[info] ListOfBooleansBenchmark.readCirce                                                                 128  thrpt    5    374707,292 ±    3445,917   ops/s
[info] ListOfBooleansBenchmark.readCirce:·gc.alloc.rate                                                  128  thrpt    5      2720,821 ±      25,147  MB/sec
[info] ListOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                             128  thrpt    5     11424,001 ±       0,001    B/op
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5      2713,905 ±      23,296  MB/sec
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     11395,042 ±     179,716    B/op
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0,042 ±       0,098  MB/sec
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         0,175 ±       0,411    B/op
[info] ListOfBooleansBenchmark.readCirce:·gc.count                                                       128  thrpt    5        20,000                counts
[info] ListOfBooleansBenchmark.readCirce:·gc.time                                                        128  thrpt    5        12,000                    ms
[info] ListOfBooleansBenchmark.readJacksonScala                                                          128  thrpt    5    375924,277 ±    2398,143   ops/s
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                           128  thrpt    5       995,922 ±       6,370  MB/sec
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5      4168,001 ±       0,001    B/op
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       935,022 ±    1407,623  MB/sec
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      3914,023 ±    5903,469    B/op
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,021 ±       0,098  MB/sec
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0,087 ±       0,411    B/op
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.count                                                128  thrpt    5         7,000                counts
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.time                                                 128  thrpt    5         6,000                    ms
[info] ListOfBooleansBenchmark.readJsoniterScala                                                         128  thrpt    5   1300499,729 ±  196220,900   ops/s
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                          128  thrpt    5      2539,412 ±     383,079  MB/sec
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5      3072,000 ±       0,001    B/op
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5      2577,809 ±    1174,239  MB/sec
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      3111,240 ±    1056,125    B/op
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,042 ±       0,057  MB/sec
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0,051 ±       0,077    B/op
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.count                                               128  thrpt    5        19,000                counts
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.time                                                128  thrpt    5        12,000                    ms
[info] ListOfBooleansBenchmark.readPlayJson                                                              128  thrpt    5    125564,172 ±    1958,522   ops/s
[info] ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                               128  thrpt    5      4547,982 ±      71,421  MB/sec
[info] ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                          128  thrpt    5     56984,003 ±       0,001    B/op
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5      4492,297 ±    1446,457  MB/sec
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     56295,116 ±   18592,387    B/op
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,075 ±       0,091  MB/sec
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0,940 ±       1,159    B/op
[info] ListOfBooleansBenchmark.readPlayJson:·gc.count                                                    128  thrpt    5        33,000                counts
[info] ListOfBooleansBenchmark.readPlayJson:·gc.time                                                     128  thrpt    5        22,000                    ms
[info] ListOfBooleansBenchmark.readUPickle                                                               128  thrpt    5    635279,070 ±   72336,024   ops/s
[info] ListOfBooleansBenchmark.readUPickle:·gc.alloc.rate                                                128  thrpt    5      2774,858 ±     315,894  MB/sec
[info] ListOfBooleansBenchmark.readUPickle:·gc.alloc.rate.norm                                           128  thrpt    5      6872,001 ±       0,001    B/op
[info] ListOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                       128  thrpt    5      2716,052 ±      19,178  MB/sec
[info] ListOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5      6731,238 ±     794,542    B/op
[info] ListOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0,054 ±       0,044  MB/sec
[info] ListOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0,134 ±       0,095    B/op
[info] ListOfBooleansBenchmark.readUPickle:·gc.count                                                     128  thrpt    5        20,000                counts
[info] ListOfBooleansBenchmark.readUPickle:·gc.time                                                      128  thrpt    5        11,000                    ms
[info] ListOfBooleansBenchmark.writeCirce                                                                128  thrpt    5    410222,672 ±    2733,019   ops/s
[info] ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                                 128  thrpt    5      1393,369 ±       9,232  MB/sec
[info] ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                            128  thrpt    5      5344,001 ±       0,001    B/op
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1344,763 ±       9,580  MB/sec
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5      5157,596 ±      49,674    B/op
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0,050 ±       0,122  MB/sec
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         0,192 ±       0,467    B/op
[info] ListOfBooleansBenchmark.writeCirce:·gc.count                                                      128  thrpt    5        10,000                counts
[info] ListOfBooleansBenchmark.writeCirce:·gc.time                                                       128  thrpt    5         7,000                    ms
[info] ListOfBooleansBenchmark.writeJacksonScala                                                         128  thrpt    5    827681,857 ±   15164,912   ops/s
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                          128  thrpt    5       614,449 ±      11,203  MB/sec
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5      1168,001 ±       0,001    B/op
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5       636,096 ±     267,647  MB/sec
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      1209,110 ±     507,052    B/op
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,488 ±       3,910  MB/sec
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0,933 ±       7,488    B/op
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.count                                               128  thrpt    5         5,000                counts
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.time                                                128  thrpt    5         7,000                    ms
[info] ListOfBooleansBenchmark.writeJsoniterScala                                                        128  thrpt    5   2288227,432 ±   37565,719   ops/s
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                         128  thrpt    5      1058,810 ±      17,344  MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5       728,000 ±       0,001    B/op
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5       943,369 ±    1420,745  MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5       648,161 ±     970,222    B/op
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0,033 ±       0,185  MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0,023 ±       0,126    B/op
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.count                                              128  thrpt    5         7,000                counts
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.time                                               128  thrpt    5         4,000                    ms
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc                                                128  thrpt    5   2723081,129 ±    6260,082   ops/s
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                 128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                            128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                      128  thrpt    5           ≈ 0                counts
[info] ListOfBooleansBenchmark.writePlayJson                                                             128  thrpt    5    412321,380 ±   26134,770   ops/s
[info] ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                              128  thrpt    5       593,334 ±      37,618  MB/sec
[info] ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                         128  thrpt    5      2264,001 ±       0,001    B/op
[info] ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5       638,233 ±     272,234  MB/sec
[info] ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      2436,752 ±    1083,717    B/op
[info] ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,423 ±       3,422  MB/sec
[info] ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         1,601 ±      12,932    B/op
[info] ListOfBooleansBenchmark.writePlayJson:·gc.count                                                   128  thrpt    5         5,000                counts
[info] ListOfBooleansBenchmark.writePlayJson:·gc.time                                                    128  thrpt    5         7,000                    ms
[info] ListOfBooleansBenchmark.writeUPickle                                                              128  thrpt    5    183864,396 ±    2216,881   ops/s
[info] ListOfBooleansBenchmark.writeUPickle:·gc.alloc.rate                                               128  thrpt    5      1077,041 ±      12,896  MB/sec
[info] ListOfBooleansBenchmark.writeUPickle:·gc.alloc.rate.norm                                          128  thrpt    5      9216,002 ±       0,001    B/op
[info] ListOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1079,310 ±    1422,762  MB/sec
[info] ListOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5      9238,214 ±   12208,428    B/op
[info] ListOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,017 ±       0,105  MB/sec
[info] ListOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0,143 ±       0,893    B/op
[info] ListOfBooleansBenchmark.writeUPickle:·gc.count                                                    128  thrpt    5         8,000                counts
[info] ListOfBooleansBenchmark.writeUPickle:·gc.time                                                     128  thrpt    5         4,000                    ms
[info] MapOfIntsToBooleansBenchmark.readCirce                                                            128  thrpt    5     69477,903 ±    1510,414   ops/s
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate                                             128  thrpt    5      2149,025 ±      46,698  MB/sec
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                        128  thrpt    5     48664,006 ±       0,001    B/op
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5      2164,190 ±    1147,818  MB/sec
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     49002,378 ±   25749,665    B/op
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,058 ±       0,132  MB/sec
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         1,319 ±       2,968    B/op
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.count                                                  128  thrpt    5        16,000                counts
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.time                                                   128  thrpt    5        10,000                    ms
[info] MapOfIntsToBooleansBenchmark.readJacksonScala                                                     128  thrpt    5     92069,468 ±    1272,426   ops/s
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                      128  thrpt    5      1656,402 ±      22,804  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5     28304,005 ±       0,001    B/op
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5      1611,484 ±    1421,260  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5     27531,802 ±   24175,441    B/op
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0,042 ±       0,098  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0,712 ±       1,674    B/op
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count                                           128  thrpt    5        12,000                counts
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time                                            128  thrpt    5         8,000                    ms
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala                                                    128  thrpt    5    100871,357 ±    3918,968   ops/s
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                     128  thrpt    5      1547,505 ±      60,055  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5     24136,004 ±       0,001    B/op
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5      1619,417 ±    1420,227  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5     25274,724 ±   22516,025    B/op
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0,042 ±       0,098  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0,650 ±       1,521    B/op
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count                                          128  thrpt    5        12,000                counts
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time                                           128  thrpt    5         7,000                    ms
[info] MapOfIntsToBooleansBenchmark.readPlayJson                                                         128  thrpt    5     28419,175 ±    1357,262   ops/s
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate                                          128  thrpt    5      1981,809 ±      94,605  MB/sec
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                     128  thrpt    5    109712,015 ±       0,002    B/op
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1883,355 ±    1165,619  MB/sec
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5    104115,674 ±   60815,640    B/op
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,067 ±       0,088  MB/sec
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         3,698 ±       4,969    B/op
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.count                                               128  thrpt    5        14,000                counts
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.time                                                128  thrpt    5        11,000                    ms
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala                                                    128  thrpt    5    161556,984 ±    2452,758   ops/s
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                     128  thrpt    5      1257,685 ±      19,099  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                128  thrpt    5     12248,003 ±       0,001    B/op
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                            128  thrpt    5      1203,516 ±    1151,304  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5     11725,289 ±   11274,237    B/op
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0,042 ±       0,170  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0,405 ±       1,652    B/op
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count                                          128  thrpt    5         9,000                counts
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time                                           128  thrpt    5         7,000                    ms
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala                                                   128  thrpt    5    626670,125 ±   23912,620   ops/s
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                    128  thrpt    5       691,491 ±      26,352  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                               128  thrpt    5      1736,001 ±       0,001    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                           128  thrpt    5       673,049 ±       0,196  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5      1689,835 ±      64,993    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0,338 ±       2,685  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         0,850 ±       6,758    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count                                         128  thrpt    5         5,000                counts
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time                                          128  thrpt    5         4,000                    ms
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc                                           128  thrpt    5    621989,559 ±  134921,010   ops/s
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                            128  thrpt    5         6,326 ±       1,372  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                       128  thrpt    5        16,001 ±       0,001    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                 128  thrpt    5           ≈ 0                counts
[info] MapOfIntsToBooleansBenchmark.writePlayJson                                                        128  thrpt    5     21664,633 ±     494,060   ops/s
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate                                         128  thrpt    5       422,154 ±       9,627  MB/sec
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                    128  thrpt    5     30656,022 ±       0,012    B/op
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                128  thrpt    5       338,053 ±    1213,016  MB/sec
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     24580,279 ±   88128,284    B/op
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0,467 ±       3,953  MB/sec
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5        33,845 ±     286,519    B/op
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.count                                              128  thrpt    5         3,000                counts
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.time                                               128  thrpt    5         7,000                    ms
[info] MissingReqFieldBenchmark.readCirce                                                                N/A  thrpt    5   2454766,852 ±   68772,917   ops/s
[info] MissingReqFieldBenchmark.readCirce:·gc.alloc.rate                                                 N/A  thrpt    5      3682,270 ±     103,024  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.alloc.rate.norm                                            N/A  thrpt    5      2360,000 ±       0,001    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space                                        N/A  thrpt    5      3670,833 ±    1437,548  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                   N/A  thrpt    5      2352,440 ±     907,327    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                    N/A  thrpt    5         0,054 ±       0,072  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                               N/A  thrpt    5         0,035 ±       0,046    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.count                                                      N/A  thrpt    5        27,000                counts
[info] MissingReqFieldBenchmark.readCirce:·gc.time                                                       N/A  thrpt    5        16,000                    ms
[info] MissingReqFieldBenchmark.readDslJsonJava                                                          N/A  thrpt    5    924083,340 ±   11001,232   ops/s
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate                                           N/A  thrpt    5       563,893 ±       6,670  MB/sec
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                      N/A  thrpt    5       960,000 ±       0,001    B/op
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                  N/A  thrpt    5       501,102 ±    1108,325  MB/sec
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                             N/A  thrpt    5       853,341 ±    1887,078    B/op
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                              N/A  thrpt    5         0,018 ±       0,102  MB/sec
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                         N/A  thrpt    5         0,031 ±       0,174    B/op
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.count                                                N/A  thrpt    5         4,000                counts
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.time                                                 N/A  thrpt    5         7,000                    ms
[info] MissingReqFieldBenchmark.readJacksonScala                                                         N/A  thrpt    5    334489,027 ±   24637,481   ops/s
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate                                          N/A  thrpt    5       826,618 ±      60,883  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate.norm                                     N/A  thrpt    5      3888,001 ±       0,001    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                 N/A  thrpt    5       934,044 ±    1407,249  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                            N/A  thrpt    5      4406,219 ±    6791,134    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                             N/A  thrpt    5         0,498 ±       4,021  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                        N/A  thrpt    5         2,334 ±      18,828    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.count                                               N/A  thrpt    5         7,000                counts
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.time                                                N/A  thrpt    5         7,000                    ms
[info] MissingReqFieldBenchmark.readJsoniterScala                                                        N/A  thrpt    5    731325,603 ±   18407,621   ops/s
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate                                         N/A  thrpt    5       654,488 ±      16,483  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                    N/A  thrpt    5      1408,001 ±       0,001    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                N/A  thrpt    5       675,964 ±       1,383  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                           N/A  thrpt    5      1454,254 ±      38,238    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                            N/A  thrpt    5         0,321 ±       2,586  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       N/A  thrpt    5         0,698 ±       5,624    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.count                                              N/A  thrpt    5         5,000                counts
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.time                                               N/A  thrpt    5         3,000                    ms
[info] MissingReqFieldBenchmark.readJsoniterStackless                                                    N/A  thrpt    5   4492452,725 ±  214543,467   ops/s
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate                                     N/A  thrpt    5      2627,050 ±     125,473  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate.norm                                N/A  thrpt    5       920,000 ±       0,001    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space                            N/A  thrpt    5      2716,295 ±      17,069  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space.norm                       N/A  thrpt    5       951,369 ±      45,225    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space                        N/A  thrpt    5         0,058 ±       0,067  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space.norm                   N/A  thrpt    5         0,020 ±       0,025    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.count                                          N/A  thrpt    5        20,000                counts
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.time                                           N/A  thrpt    5        12,000                    ms
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump                                              N/A  thrpt    5   9252523,733 ±  147930,056   ops/s
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate                               N/A  thrpt    5       988,000 ±      15,832  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate.norm                          N/A  thrpt    5       168,000 ±       0,001    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space                      N/A  thrpt    5      1081,115 ±    1425,098  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space.norm                 N/A  thrpt    5       184,020 ±     244,597    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space                  N/A  thrpt    5         0,025 ±       0,105  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space.norm             N/A  thrpt    5         0,004 ±       0,018    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.count                                    N/A  thrpt    5         8,000                counts
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.time                                     N/A  thrpt    5         4,000                    ms
[info] MissingReqFieldBenchmark.readPlayJson                                                             N/A  thrpt    5    196542,568 ±    2178,672   ops/s
[info] MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate                                              N/A  thrpt    5      1688,985 ±      18,744  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate.norm                                         N/A  thrpt    5     13520,002 ±       0,001    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                     N/A  thrpt    5      1609,009 ±    1413,543  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                N/A  thrpt    5     12884,692 ±   11425,324    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                 N/A  thrpt    5         0,054 ±       0,072  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                            N/A  thrpt    5         0,433 ±       0,575    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.count                                                   N/A  thrpt    5        12,000                counts
[info] MissingReqFieldBenchmark.readPlayJson:·gc.time                                                    N/A  thrpt    5         9,000                    ms
[info] MissingReqFieldBenchmark.readUPickle                                                              N/A  thrpt    5    320882,585 ±  123343,713   ops/s
[info] MissingReqFieldBenchmark.readUPickle:·gc.alloc.rate                                               N/A  thrpt    5       579,234 ±     222,606  MB/sec
[info] MissingReqFieldBenchmark.readUPickle:·gc.alloc.rate.norm                                          N/A  thrpt    5      2840,001 ±       0,001    B/op
[info] MissingReqFieldBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                      N/A  thrpt    5       640,922 ±     278,016  MB/sec
[info] MissingReqFieldBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                 N/A  thrpt    5      3179,251 ±    2189,701    B/op
[info] MissingReqFieldBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                  N/A  thrpt    5         0,352 ±       2,856  MB/sec
[info] MissingReqFieldBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                             N/A  thrpt    5         1,648 ±      13,357    B/op
[info] MissingReqFieldBenchmark.readUPickle:·gc.count                                                    N/A  thrpt    5         5,000                counts
[info] MissingReqFieldBenchmark.readUPickle:·gc.time                                                     N/A  thrpt    5         6,000                    ms
[info] MutableBitSetBenchmark.readJsoniterScala                                                          128  thrpt    5   1257783,677 ±   12705,628   ops/s
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate                                           128  thrpt    5        70,352 ±       0,713  MB/sec
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5        88,000 ±       0,001    B/op
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       102,351 ±     881,270  MB/sec
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5       128,621 ±    1107,463    B/op
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.count                                                128  thrpt    5         1,000                counts
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.time                                                 128  thrpt    5         2,000                    ms
[info] MutableBitSetBenchmark.readPlayJson                                                               128  thrpt    5     71136,147 ±     768,032   ops/s
[info] MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate                                                128  thrpt    5      3212,828 ±      34,716  MB/sec
[info] MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate.norm                                           128  thrpt    5     71056,006 ±       0,001    B/op
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5      3253,219 ±    1178,399  MB/sec
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     71955,406 ±   26320,663    B/op
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0,067 ±       0,154  MB/sec
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         1,472 ±       3,400    B/op
[info] MutableBitSetBenchmark.readPlayJson:·gc.count                                                     128  thrpt    5        24,000                counts
[info] MutableBitSetBenchmark.readPlayJson:·gc.time                                                      128  thrpt    5        18,000                    ms
[info] MutableBitSetBenchmark.writeJacksonScala                                                          128  thrpt    5   1759710,800 ±   47964,894   ops/s
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate                                           128  thrpt    5       984,239 ±      26,800  MB/sec
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5       880,000 ±       0,001    B/op
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       935,620 ±    1408,711  MB/sec
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5       838,003 ±    1279,940    B/op
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,017 ±       0,067  MB/sec
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0,015 ±       0,060    B/op
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.count                                                128  thrpt    5         7,000                counts
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.time                                                 128  thrpt    5         5,000                    ms
[info] MutableBitSetBenchmark.writeJsoniterScala                                                         128  thrpt    5    956679,803 ±    6993,152   ops/s
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate                                          128  thrpt    5       267,554 ±       1,991  MB/sec
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5       440,000 ±       0,001    B/op
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5       307,076 ±    1079,414  MB/sec
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5       505,047 ±    1775,318    B/op
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,002 ±       0,018  MB/sec
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0,003 ±       0,030    B/op
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.count                                               128  thrpt    5         3,000                counts
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.time                                                128  thrpt    5         4,000                    ms
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc                                                 128  thrpt    5   1966828,149 ±    4624,311   ops/s
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                  128  thrpt    5        20,003 ±       0,047  MB/sec
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                             128  thrpt    5        16,000 ±       0,001    B/op
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count                                       128  thrpt    5           ≈ 0                counts
[info] MutableBitSetBenchmark.writePlayJson                                                              128  thrpt    5     43192,974 ±     288,879   ops/s
[info] MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate                                               128  thrpt    5      1892,164 ±      12,589  MB/sec
[info] MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate.norm                                          128  thrpt    5     68920,010 ±       0,001    B/op
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1882,642 ±    1156,848  MB/sec
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     68582,265 ±   42350,157    B/op
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,071 ±       0,122  MB/sec
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         2,578 ±       4,414    B/op
[info] MutableBitSetBenchmark.writePlayJson:·gc.count                                                    128  thrpt    5        14,000                counts
[info] MutableBitSetBenchmark.writePlayJson:·gc.time                                                     128  thrpt    5        11,000                    ms
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala                                               128  thrpt    5    269216,956 ±    8022,814   ops/s
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                128  thrpt    5      1054,098 ±      31,399  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                           128  thrpt    5      6160,002 ±       0,001    B/op
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                       128  thrpt    5      1078,003 ±    1422,324  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                  128  thrpt    5      6290,029 ±    8190,463    B/op
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                   128  thrpt    5         0,025 ±       0,143  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm              128  thrpt    5         0,145 ±       0,835    B/op
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.count                                     128  thrpt    5         8,000                counts
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.time                                      128  thrpt    5         5,000                    ms
[info] MutableLongMapOfBooleansBenchmark.readPlayJson                                                    128  thrpt    5     31508,754 ±    3455,109   ops/s
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                     128  thrpt    5      1720,740 ±     188,852  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                128  thrpt    5     85920,014 ±       0,003    B/op
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                            128  thrpt    5      1745,279 ±    1421,891  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5     86909,853 ±   65092,490    B/op
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0,042 ±       0,150  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         2,052 ±       7,384    B/op
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.count                                          128  thrpt    5        13,000                counts
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.time                                           128  thrpt    5        10,000                    ms
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala                                               128  thrpt    5    116521,347 ±     895,518   ops/s
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                128  thrpt    5      1499,615 ±      11,501  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                           128  thrpt    5     20248,004 ±       0,001    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                       128  thrpt    5      1474,973 ±    1162,664  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                  128  thrpt    5     19912,722 ±   15619,623    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                   128  thrpt    5         0,046 ±       0,132  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm              128  thrpt    5         0,618 ±       1,776    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.count                                     128  thrpt    5        11,000                counts
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.time                                      128  thrpt    5         8,000                    ms
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala                                              128  thrpt    5    396232,503 ±    7552,248   ops/s
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                               128  thrpt    5      1888,014 ±      36,771  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                          128  thrpt    5      7496,001 ±       0,001    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                      128  thrpt    5      1893,467 ±    1163,982  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                 128  thrpt    5      7515,078 ±    4558,858    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                  128  thrpt    5         0,046 ±       0,154  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm             128  thrpt    5         0,181 ±       0,607    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.count                                    128  thrpt    5        14,000                counts
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.time                                     128  thrpt    5         8,000                    ms
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc                                      128  thrpt    5    474243,996 ±    2497,883   ops/s
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                       128  thrpt    5      1625,371 ±       8,597  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                  128  thrpt    5      5392,001 ±       0,001    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space              128  thrpt    5      1620,993 ±    1424,329  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm         128  thrpt    5      5377,338 ±    4721,734    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space          128  thrpt    5         0,042 ±       0,160  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm     128  thrpt    5         0,138 ±       0,532    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                            128  thrpt    5        12,000                counts
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.time                             128  thrpt    5         7,000                    ms
[info] MutableLongMapOfBooleansBenchmark.writePlayJson                                                   128  thrpt    5     56111,207 ±    2721,363   ops/s
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                    128  thrpt    5      1546,740 ±      75,118  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                               128  thrpt    5     43368,008 ±       0,001    B/op
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                           128  thrpt    5      1474,778 ±    1155,582  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5     41359,645 ±   32569,718    B/op
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0,029 ±       0,091  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         0,818 ±       2,559    B/op
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.count                                         128  thrpt    5        11,000                counts
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.time                                          128  thrpt    5         9,000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.readCirce                                                     128  thrpt    5     84771,828 ±   12401,880   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate                                      128  thrpt    5      1520,357 ±     222,319  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                 128  thrpt    5     28216,005 ±       0,001    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                             128  thrpt    5      1618,503 ±    1425,933  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5     30010,457 ±   25382,728    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0,050 ±       0,091  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0,933 ±       1,739    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.count                                           128  thrpt    5        12,000                counts
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.time                                            128  thrpt    5         7,000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala                                              128  thrpt    5    130501,412 ±     524,849   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate                               128  thrpt    5       645,670 ±       2,626  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                          128  thrpt    5      7784,003 ±       0,001    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                      128  thrpt    5       636,106 ±     267,644  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                 128  thrpt    5      7668,409 ±    3215,787    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                  128  thrpt    5         0,490 ±       3,906  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm             128  thrpt    5         5,903 ±      47,080    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count                                    128  thrpt    5         5,000                counts
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time                                     128  thrpt    5         7,000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala                                             128  thrpt    5    201021,569 ±   40060,957   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                              128  thrpt    5       827,950 ±     165,001  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                         128  thrpt    5      6480,002 ±       0,001    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                     128  thrpt    5       807,816 ±    1159,323  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                128  thrpt    5      6308,116 ±    8603,838    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                 128  thrpt    5         0,025 ±       0,088  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm            128  thrpt    5         0,195 ±       0,667    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count                                   128  thrpt    5         6,000                counts
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time                                    128  thrpt    5         4,000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson                                                  128  thrpt    5     21236,516 ±     730,365   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate                                   128  thrpt    5      1216,275 ±      41,793  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                              128  thrpt    5     90104,022 ±       0,014    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                          128  thrpt    5      1202,680 ±    1146,707  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5     89150,114 ±   85625,850    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0,033 ±       0,072  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5         2,473 ±       5,344    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.count                                        128  thrpt    5         9,000                counts
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.time                                         128  thrpt    5         7,000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala                                             128  thrpt    5    164768,139 ±     954,130   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                              128  thrpt    5      1124,347 ±       6,452  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                         128  thrpt    5     10736,003 ±       0,001    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                     128  thrpt    5      1068,901 ±    1407,281  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                128  thrpt    5     10207,436 ±   13448,330    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                 128  thrpt    5         0,029 ±       0,134  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm            128  thrpt    5         0,278 ±       1,280    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count                                   128  thrpt    5         8,000                counts
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time                                    128  thrpt    5         7,000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala                                            128  thrpt    5    607011,006 ±  220835,497   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                             128  thrpt    5       675,983 ±     245,943  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                        128  thrpt    5      1752,001 ±       0,001    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                    128  thrpt    5       673,223 ±       0,714  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm               128  thrpt    5      1759,219 ±     732,076    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                128  thrpt    5         0,337 ±       2,587  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm           128  thrpt    5         0,846 ±       6,423    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count                                  128  thrpt    5         5,000                counts
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time                                   128  thrpt    5         4,000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc                                    128  thrpt    5    655807,318 ±    2925,871   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                     128  thrpt    5        13,340 ±       0,061  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                128  thrpt    5        32,001 ±       0,001    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                          128  thrpt    5           ≈ 0                counts
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson                                                 128  thrpt    5     21945,011 ±     177,214   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate                                  128  thrpt    5       458,511 ±       3,697  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                             128  thrpt    5     32872,021 ±       0,012    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                         128  thrpt    5       471,365 ±    1057,582  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5     33821,909 ±   75874,195    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0,472 ±       3,975  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5        33,822 ±     284,826    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.count                                       128  thrpt    5         4,000                counts
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.time                                        128  thrpt    5         8,000                    ms
[info] MutableSetOfIntsBenchmark.readCirce                                                               128  thrpt    5     81730,197 ±    1072,444   ops/s
[info] MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate                                                128  thrpt    5      1506,100 ±      19,805  MB/sec
[info] MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm                                           128  thrpt    5     28992,005 ±       0,001    B/op
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1483,584 ±    1160,598  MB/sec
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     28546,394 ±   21966,948    B/op
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0,029 ±       0,091  MB/sec
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0,562 ±       1,768    B/op
[info] MutableSetOfIntsBenchmark.readCirce:·gc.count                                                     128  thrpt    5        11,000                counts
[info] MutableSetOfIntsBenchmark.readCirce:·gc.time                                                      128  thrpt    5         7,000                    ms
[info] MutableSetOfIntsBenchmark.readJacksonScala                                                        128  thrpt    5    170404,334 ±    9479,169   ops/s
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate                                         128  thrpt    5       728,698 ±      40,553  MB/sec
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5      6728,003 ±       0,001    B/op
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5       800,808 ±    1149,331  MB/sec
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      7386,076 ±   10445,076    B/op
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0,479 ±       3,905  MB/sec
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         4,395 ±      35,799    B/op
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.count                                              128  thrpt    5         6,000                counts
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.time                                               128  thrpt    5         7,000                    ms
[info] MutableSetOfIntsBenchmark.readJsoniterScala                                                       128  thrpt    5    246521,100 ±    2329,934   ops/s
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                        128  thrpt    5       878,694 ±       8,417  MB/sec
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5      5608,002 ±       0,001    B/op
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5       942,527 ±    1419,944  MB/sec
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      6016,713 ±    9080,683    B/op
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0,037 ±       0,143  MB/sec
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0,240 ±       0,917    B/op
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.count                                             128  thrpt    5         7,000                counts
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.time                                              128  thrpt    5         4,000                    ms
[info] MutableSetOfIntsBenchmark.readPlayJson                                                            128  thrpt    5     45588,390 ±     388,235   ops/s
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate                                             128  thrpt    5      1835,057 ±      15,607  MB/sec
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                        128  thrpt    5     63328,010 ±       0,001    B/op
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1885,538 ±    1165,827  MB/sec
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     65059,334 ±   39976,318    B/op
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,050 ±       0,072  MB/sec
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         1,724 ±       2,464    B/op
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.count                                                  128  thrpt    5        14,000                counts
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.time                                                   128  thrpt    5        10,000                    ms
[info] MutableSetOfIntsBenchmark.readUPickle                                                             128  thrpt    5    102366,763 ±   12332,917   ops/s
[info] MutableSetOfIntsBenchmark.readUPickle:·gc.alloc.rate                                              128  thrpt    5      1298,167 ±     156,323  MB/sec
[info] MutableSetOfIntsBenchmark.readUPickle:·gc.alloc.rate.norm                                         128  thrpt    5     19952,004 ±       0,001    B/op
[info] MutableSetOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1214,506 ±    1164,111  MB/sec
[info] MutableSetOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     18560,956 ±   16357,188    B/op
[info] MutableSetOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,042 ±       0,113  MB/sec
[info] MutableSetOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0,636 ±       1,704    B/op
[info] MutableSetOfIntsBenchmark.readUPickle:·gc.count                                                   128  thrpt    5         9,000                counts
[info] MutableSetOfIntsBenchmark.readUPickle:·gc.time                                                    128  thrpt    5         5,000                    ms
[info] MutableSetOfIntsBenchmark.writeCirce                                                              128  thrpt    5    248573,691 ±    4742,165   ops/s
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate                                               128  thrpt    5      1698,743 ±      32,463  MB/sec
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm                                          128  thrpt    5     10752,002 ±       0,001    B/op
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1752,017 ±    1421,424  MB/sec
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     11085,993 ±    8927,646    B/op
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,042 ±       0,150  MB/sec
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0,264 ±       0,950    B/op
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.count                                                    128  thrpt    5        13,000                counts
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.time                                                     128  thrpt    5         9,000                    ms
[info] MutableSetOfIntsBenchmark.writeJacksonScala                                                       128  thrpt    5    577590,470 ±   11969,856   ops/s
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                        128  thrpt    5       469,913 ±       9,753  MB/sec
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5      1280,001 ±       0,001    B/op
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5       471,382 ±    1057,622  MB/sec
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      1284,688 ±    2875,241    B/op
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0,482 ±       4,064  MB/sec
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         1,309 ±      11,031    B/op
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.count                                             128  thrpt    5         4,000                counts
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.time                                              128  thrpt    5         8,000                    ms
[info] MutableSetOfIntsBenchmark.writeJsoniterScala                                                      128  thrpt    5    737299,679 ±   96009,626   ops/s
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                       128  thrpt    5       397,397 ±      51,741  MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5       848,001 ±       0,001    B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5       339,380 ±    1219,724  MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5       712,623 ±    2559,051    B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0,319 ±       2,680  MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0,668 ±       5,611    B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.count                                            128  thrpt    5         3,000                counts
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.time                                             128  thrpt    5         5,000                    ms
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc                                              128  thrpt    5    727907,173 ±  260709,719   ops/s
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                               128  thrpt    5         7,403 ±       2,651  MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                          128  thrpt    5        16,001 ±       0,001    B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                    128  thrpt    5           ≈ 0                counts
[info] MutableSetOfIntsBenchmark.writePlayJson                                                           128  thrpt    5     33457,728 ±    2085,799   ops/s
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate                                            128  thrpt    5      1759,485 ±     109,683  MB/sec
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm                                       128  thrpt    5     82736,013 ±       0,002    B/op
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1751,569 ±    1429,732  MB/sec
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     82484,729 ±   69620,344    B/op
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,062 ±       0,160  MB/sec
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         2,954 ±       7,671    B/op
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.count                                                 128  thrpt    5        13,000                counts
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.time                                                  128  thrpt    5         7,000                    ms
[info] MutableSetOfIntsBenchmark.writeUPickle                                                            128  thrpt    5    125943,867 ±    1816,295   ops/s
[info] MutableSetOfIntsBenchmark.writeUPickle:·gc.alloc.rate                                             128  thrpt    5      1437,080 ±      20,583  MB/sec
[info] MutableSetOfIntsBenchmark.writeUPickle:·gc.alloc.rate.norm                                        128  thrpt    5     17952,003 ±       0,001    B/op
[info] MutableSetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1350,452 ±       6,031  MB/sec
[info] MutableSetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     16869,997 ±     200,401    B/op
[info] MutableSetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,050 ±       0,108  MB/sec
[info] MutableSetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0,625 ±       1,349    B/op
[info] MutableSetOfIntsBenchmark.writeUPickle:·gc.count                                                  128  thrpt    5        10,000                counts
[info] MutableSetOfIntsBenchmark.writeUPickle:·gc.time                                                   128  thrpt    5         6,000                    ms
[info] NestedStructsBenchmark.readCirce                                                                  128  thrpt    5     68552,236 ±    1651,477   ops/s
[info] NestedStructsBenchmark.readCirce:·gc.alloc.rate                                                   128  thrpt    5      3141,508 ±      75,127  MB/sec
[info] NestedStructsBenchmark.readCirce:·gc.alloc.rate.norm                                              128  thrpt    5     72096,006 ±       0,001    B/op
[info] NestedStructsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5      3258,660 ±    1167,966  MB/sec
[info] NestedStructsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     74801,883 ±   27530,389    B/op
[info] NestedStructsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0,150 ±       0,243  MB/sec
[info] NestedStructsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         3,443 ±       5,590    B/op
[info] NestedStructsBenchmark.readCirce:·gc.count                                                        128  thrpt    5        24,000                counts
[info] NestedStructsBenchmark.readCirce:·gc.time                                                         128  thrpt    5        14,000                    ms
[info] NestedStructsBenchmark.readJacksonScala                                                           128  thrpt    5    132940,774 ±    1704,061   ops/s
[info] NestedStructsBenchmark.readJacksonScala:·gc.alloc.rate                                            128  thrpt    5      1715,060 ±      21,939  MB/sec
[info] NestedStructsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5     20296,003 ±       0,001    B/op
[info] NestedStructsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1744,476 ±    1420,626  MB/sec
[info] NestedStructsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     20640,562 ±   16733,555    B/op
[info] NestedStructsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,046 ±       0,174  MB/sec
[info] NestedStructsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0,541 ±       2,054    B/op
[info] NestedStructsBenchmark.readJacksonScala:·gc.count                                                 128  thrpt    5        13,000                counts
[info] NestedStructsBenchmark.readJacksonScala:·gc.time                                                  128  thrpt    5        10,000                    ms
[info] NestedStructsBenchmark.readJsoniterScala                                                          128  thrpt    5    526752,809 ±    6159,362   ops/s
[info] NestedStructsBenchmark.readJsoniterScala:·gc.alloc.rate                                           128  thrpt    5      1376,768 ±      15,944  MB/sec
[info] NestedStructsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5      4112,001 ±       0,001    B/op
[info] NestedStructsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1349,223 ±       6,229  MB/sec
[info] NestedStructsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      4029,760 ±      46,038    B/op
[info] NestedStructsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,050 ±       0,122  MB/sec
[info] NestedStructsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0,149 ±       0,364    B/op
[info] NestedStructsBenchmark.readJsoniterScala:·gc.count                                                128  thrpt    5        10,000                counts
[info] NestedStructsBenchmark.readJsoniterScala:·gc.time                                                 128  thrpt    5         6,000                    ms
[info] NestedStructsBenchmark.readPlayJson                                                               128  thrpt    5     17860,593 ±     619,377   ops/s
[info] NestedStructsBenchmark.readPlayJson:·gc.alloc.rate                                                128  thrpt    5      2276,477 ±      79,145  MB/sec
[info] NestedStructsBenchmark.readPlayJson:·gc.alloc.rate.norm                                           128  thrpt    5    200528,026 ±       0,015    B/op
[info] NestedStructsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5      2289,983 ±    1398,894  MB/sec
[info] NestedStructsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5    201638,335 ±  120393,117    B/op
[info] NestedStructsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0,079 ±       0,208  MB/sec
[info] NestedStructsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         6,955 ±      18,227    B/op
[info] NestedStructsBenchmark.readPlayJson:·gc.count                                                     128  thrpt    5        17,000                counts
[info] NestedStructsBenchmark.readPlayJson:·gc.time                                                      128  thrpt    5        14,000                    ms
[info] NestedStructsBenchmark.writeCirce                                                                 128  thrpt    5     45213,016 ±     312,513   ops/s
[info] NestedStructsBenchmark.writeCirce:·gc.alloc.rate                                                  128  thrpt    5      2590,342 ±      18,379  MB/sec
[info] NestedStructsBenchmark.writeCirce:·gc.alloc.rate.norm                                             128  thrpt    5     90136,010 ±       0,001    B/op
[info] NestedStructsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5      2571,543 ±    1151,203  MB/sec
[info] NestedStructsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     89471,093 ±   39673,966    B/op
[info] NestedStructsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0,100 ±       0,132  MB/sec
[info] NestedStructsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         3,478 ±       4,588    B/op
[info] NestedStructsBenchmark.writeCirce:·gc.count                                                       128  thrpt    5        19,000                counts
[info] NestedStructsBenchmark.writeCirce:·gc.time                                                        128  thrpt    5        13,000                    ms
[info] NestedStructsBenchmark.writeJacksonScala                                                          128  thrpt    5    240076,630 ±    4469,104   ops/s
[info] NestedStructsBenchmark.writeJacksonScala:·gc.alloc.rate                                           128  thrpt    5      1116,978 ±      20,733  MB/sec
[info] NestedStructsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5      7320,002 ±       0,001    B/op
[info] NestedStructsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1067,698 ±    1406,754  MB/sec
[info] NestedStructsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      6994,110 ±    9182,148    B/op
[info] NestedStructsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,033 ±       0,122  MB/sec
[info] NestedStructsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0,218 ±       0,794    B/op
[info] NestedStructsBenchmark.writeJacksonScala:·gc.count                                                128  thrpt    5         8,000                counts
[info] NestedStructsBenchmark.writeJacksonScala:·gc.time                                                 128  thrpt    5         6,000                    ms
[info] NestedStructsBenchmark.writeJsoniterScala                                                         128  thrpt    5   1474327,509 ±   27987,573   ops/s
[info] NestedStructsBenchmark.writeJsoniterScala:·gc.alloc.rate                                          128  thrpt    5       742,169 ±      14,141  MB/sec
[info] NestedStructsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5       792,000 ±       0,001    B/op
[info] NestedStructsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5       673,681 ±       0,147  MB/sec
[info] NestedStructsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5       718,928 ±      13,706    B/op
[info] NestedStructsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,029 ±       0,108  MB/sec
[info] NestedStructsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0,031 ±       0,115    B/op
[info] NestedStructsBenchmark.writeJsoniterScala:·gc.count                                               128  thrpt    5         5,000                counts
[info] NestedStructsBenchmark.writeJsoniterScala:·gc.time                                                128  thrpt    5         3,000                    ms
[info] NestedStructsBenchmark.writeJsoniterScalaPrealloc                                                 128  thrpt    5   1558444,918 ±   31036,668   ops/s
[info] NestedStructsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                  128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] NestedStructsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                             128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] NestedStructsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                       128  thrpt    5           ≈ 0                counts
[info] NestedStructsBenchmark.writePlayJson                                                              128  thrpt    5     36676,379 ±     560,991   ops/s
[info] NestedStructsBenchmark.writePlayJson:·gc.alloc.rate                                               128  thrpt    5      1964,777 ±      30,003  MB/sec
[info] NestedStructsBenchmark.writePlayJson:·gc.alloc.rate.norm                                          128  thrpt    5     84280,012 ±       0,001    B/op
[info] NestedStructsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1882,335 ±    1150,380  MB/sec
[info] NestedStructsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     80756,514 ±   49648,826    B/op
[info] NestedStructsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,067 ±       0,191  MB/sec
[info] NestedStructsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         2,856 ±       8,175    B/op
[info] NestedStructsBenchmark.writePlayJson:·gc.count                                                    128  thrpt    5        14,000                counts
[info] NestedStructsBenchmark.writePlayJson:·gc.time                                                     128  thrpt    5        12,000                    ms
[info] PrimitivesBenchmark.readCirce                                                                     N/A  thrpt    5    798720,374 ±    7680,894   ops/s
[info] PrimitivesBenchmark.readCirce:·gc.alloc.rate                                                      N/A  thrpt    5      2367,810 ±      22,764  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.alloc.rate.norm                                                 N/A  thrpt    5      4664,001 ±       0,001    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                             N/A  thrpt    5      2301,084 ±    1428,502  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                        N/A  thrpt    5      4533,553 ±    2844,476    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                         N/A  thrpt    5         0,054 ±       0,122  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                    N/A  thrpt    5         0,107 ±       0,239    B/op
[info] PrimitivesBenchmark.readCirce:·gc.count                                                           N/A  thrpt    5        17,000                counts
[info] PrimitivesBenchmark.readCirce:·gc.time                                                            N/A  thrpt    5        10,000                    ms
[info] PrimitivesBenchmark.readJacksonScala                                                              N/A  thrpt    5   1672667,504 ±   48465,983   ops/s
[info] PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate                                               N/A  thrpt    5      1267,308 ±      36,809  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                          N/A  thrpt    5      1192,000 ±       0,001    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                      N/A  thrpt    5      1337,497 ±      11,042  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                 N/A  thrpt    5      1258,067 ±      32,109    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                  N/A  thrpt    5         0,050 ±       0,166  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                             N/A  thrpt    5         0,047 ±       0,156    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.count                                                    N/A  thrpt    5        10,000                counts
[info] PrimitivesBenchmark.readJacksonScala:·gc.time                                                     N/A  thrpt    5         8,000                    ms
[info] PrimitivesBenchmark.readJsoniterScala                                                             N/A  thrpt    5   7006780,802 ±  557769,494   ops/s
[info] PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate                                              N/A  thrpt    5       213,774 ±      17,020  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                         N/A  thrpt    5        48,000 ±       0,001    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                     N/A  thrpt    5       204,707 ±    1079,361  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                N/A  thrpt    5        46,175 ±     243,563    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                 N/A  thrpt    5         0,005 ±       0,035  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                            N/A  thrpt    5         0,001 ±       0,008    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.count                                                   N/A  thrpt    5         2,000                counts
[info] PrimitivesBenchmark.readJsoniterScala:·gc.time                                                    N/A  thrpt    5         2,000                    ms
[info] PrimitivesBenchmark.readPlayJson                                                                  N/A  thrpt    5    251351,300 ±   10224,007   ops/s
[info] PrimitivesBenchmark.readPlayJson:·gc.alloc.rate                                                   N/A  thrpt    5      1754,811 ±      71,374  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.alloc.rate.norm                                              N/A  thrpt    5     10984,002 ±       0,001    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5      1745,528 ±    1426,696  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5     10936,770 ±    9148,152    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5         0,042 ±       0,127  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5         0,261 ±       0,796    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.count                                                        N/A  thrpt    5        13,000                counts
[info] PrimitivesBenchmark.readPlayJson:·gc.time                                                         N/A  thrpt    5        10,000                    ms
[info] PrimitivesBenchmark.writeCirce                                                                    N/A  thrpt    5   1063168,753 ±   19214,386   ops/s
[info] PrimitivesBenchmark.writeCirce:·gc.alloc.rate                                                     N/A  thrpt    5      1827,234 ±      33,026  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.alloc.rate.norm                                                N/A  thrpt    5      2704,000 ±       0,001    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                            N/A  thrpt    5      1887,412 ±    1155,359  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                       N/A  thrpt    5      2793,690 ±    1724,704    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                        N/A  thrpt    5         0,054 ±       0,122  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                   N/A  thrpt    5         0,080 ±       0,180    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.count                                                          N/A  thrpt    5        14,000                counts
[info] PrimitivesBenchmark.writeCirce:·gc.time                                                           N/A  thrpt    5         8,000                    ms
[info] PrimitivesBenchmark.writeJacksonScala                                                             N/A  thrpt    5   2675068,186 ±  632729,692   ops/s
[info] PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate                                              N/A  thrpt    5      1183,428 ±     279,917  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                         N/A  thrpt    5       696,000 ±       0,001    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                     N/A  thrpt    5      1203,231 ±    1152,041  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                N/A  thrpt    5       712,839 ±     743,030    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                 N/A  thrpt    5         0,029 ±       0,134  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                            N/A  thrpt    5         0,018 ±       0,079    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.count                                                   N/A  thrpt    5         9,000                counts
[info] PrimitivesBenchmark.writeJacksonScala:·gc.time                                                    N/A  thrpt    5         7,000                    ms
[info] PrimitivesBenchmark.writeJsoniterScala                                                            N/A  thrpt    5   7843859,965 ±  131331,274   ops/s
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate                                             N/A  thrpt    5       638,173 ±      10,582  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                        N/A  thrpt    5       128,000 ±       0,001    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                    N/A  thrpt    5       538,981 ±    1160,197  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                               N/A  thrpt    5       108,208 ±     232,935    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                N/A  thrpt    5         0,334 ±       2,654  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           N/A  thrpt    5         0,067 ±       0,532    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.count                                                  N/A  thrpt    5         4,000                counts
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.time                                                   N/A  thrpt    5         3,000                    ms
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc                                                    N/A  thrpt    5   7153745,981 ±  130002,333   ops/s
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                     N/A  thrpt    5       436,542 ±       7,923  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                N/A  thrpt    5        96,000 ±       0,001    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                            N/A  thrpt    5       339,369 ±    1219,660  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                       N/A  thrpt    5        74,710 ±     268,428    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                        N/A  thrpt    5         0,322 ±       2,762  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm                   N/A  thrpt    5         0,071 ±       0,607    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                          N/A  thrpt    5         3,000                counts
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.time                                           N/A  thrpt    5         5,000                    ms
[info] PrimitivesBenchmark.writePlayJson                                                                 N/A  thrpt    5    350644,374 ±    5811,382   ops/s
[info] PrimitivesBenchmark.writePlayJson:·gc.alloc.rate                                                  N/A  thrpt    5      1804,414 ±      29,879  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.alloc.rate.norm                                             N/A  thrpt    5      8096,001 ±       0,001    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                         N/A  thrpt    5      1879,787 ±    1149,141  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                    N/A  thrpt    5      8438,341 ±    5253,216    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                     N/A  thrpt    5         0,037 ±       0,105  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                N/A  thrpt    5         0,168 ±       0,471    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.count                                                       N/A  thrpt    5        14,000                counts
[info] PrimitivesBenchmark.writePlayJson:·gc.time                                                        N/A  thrpt    5        10,000                    ms
[info] SetOfIntsBenchmark.readCirce                                                                      128  thrpt    5     72445,925 ±    6375,542   ops/s
[info] SetOfIntsBenchmark.readCirce:·gc.alloc.rate                                                       128  thrpt    5      2139,188 ±     188,109  MB/sec
[info] SetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm                                                  128  thrpt    5     46456,006 ±       0,001    B/op
[info] SetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                              128  thrpt    5      2029,837 ±      17,543  MB/sec
[info] SetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                         128  thrpt    5     44098,678 ±    3675,133    B/op
[info] SetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                          128  thrpt    5         0,062 ±       0,080  MB/sec
[info] SetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                     128  thrpt    5         1,363 ±       1,828    B/op
[info] SetOfIntsBenchmark.readCirce:·gc.count                                                            128  thrpt    5        15,000                counts
[info] SetOfIntsBenchmark.readCirce:·gc.time                                                             128  thrpt    5        10,000                    ms
[info] SetOfIntsBenchmark.readJacksonScala                                                               128  thrpt    5    113747,393 ±    2212,268   ops/s
[info] SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate                                                128  thrpt    5      1752,619 ±      33,979  MB/sec
[info] SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                           128  thrpt    5     24240,004 ±       0,001    B/op
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1746,338 ±    1411,634  MB/sec
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     24167,499 ±   19823,321    B/op
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0,079 ±       0,067  MB/sec
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         1,094 ±       0,916    B/op
[info] SetOfIntsBenchmark.readJacksonScala:·gc.count                                                     128  thrpt    5        13,000                counts
[info] SetOfIntsBenchmark.readJacksonScala:·gc.time                                                      128  thrpt    5        10,000                    ms
[info] SetOfIntsBenchmark.readJsoniterScala                                                              128  thrpt    5    169489,519 ±    8436,918   ops/s
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                               128  thrpt    5      2490,664 ±     123,972  MB/sec
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                          128  thrpt    5     23120,003 ±       0,001    B/op
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                      128  thrpt    5      2576,438 ±    1167,076  MB/sec
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     23931,300 ±   11298,350    B/op
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,071 ±       0,156  MB/sec
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0,656 ±       1,436    B/op
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.count                                                    128  thrpt    5        19,000                counts
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.time                                                     128  thrpt    5         9,000                    ms
[info] SetOfIntsBenchmark.readPlayJson                                                                   128  thrpt    5     52439,778 ±     811,432   ops/s
[info] SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate                                                    128  thrpt    5      2694,517 ±      41,565  MB/sec
[info] SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                               128  thrpt    5     80840,008 ±       0,001    B/op
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                           128  thrpt    5      2707,780 ±      33,941  MB/sec
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5     81238,541 ±    1164,775    B/op
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0,058 ±       0,208  MB/sec
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5         1,753 ±       6,254    B/op
[info] SetOfIntsBenchmark.readPlayJson:·gc.count                                                         128  thrpt    5        20,000                counts
[info] SetOfIntsBenchmark.readPlayJson:·gc.time                                                          128  thrpt    5        12,000                    ms
[info] SetOfIntsBenchmark.readUPickle                                                                    128  thrpt    5     73590,106 ±    3909,139   ops/s
[info] SetOfIntsBenchmark.readUPickle:·gc.alloc.rate                                                     128  thrpt    5      1752,378 ±      93,220  MB/sec
[info] SetOfIntsBenchmark.readUPickle:·gc.alloc.rate.norm                                                128  thrpt    5     37464,006 ±       0,001    B/op
[info] SetOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                            128  thrpt    5      1757,824 ±    1429,886  MB/sec
[info] SetOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                       128  thrpt    5     37531,751 ±   29458,424    B/op
[info] SetOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                        128  thrpt    5         0,058 ±       0,174  MB/sec
[info] SetOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                                   128  thrpt    5         1,238 ±       3,687    B/op
[info] SetOfIntsBenchmark.readUPickle:·gc.count                                                          128  thrpt    5        13,000                counts
[info] SetOfIntsBenchmark.readUPickle:·gc.time                                                           128  thrpt    5         8,000                    ms
[info] SetOfIntsBenchmark.writeCirce                                                                     128  thrpt    5    238148,797 ±    2992,461   ops/s
[info] SetOfIntsBenchmark.writeCirce:·gc.alloc.rate                                                      128  thrpt    5      1645,743 ±      20,643  MB/sec
[info] SetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm                                                 128  thrpt    5     10872,002 ±       0,001    B/op
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                             128  thrpt    5      1616,465 ±    1420,886  MB/sec
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                        128  thrpt    5     10675,770 ±    9320,929    B/op
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                         128  thrpt    5         0,058 ±       0,132  MB/sec
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                    128  thrpt    5         0,386 ±       0,874    B/op
[info] SetOfIntsBenchmark.writeCirce:·gc.count                                                           128  thrpt    5        12,000                counts
[info] SetOfIntsBenchmark.writeCirce:·gc.time                                                            128  thrpt    5         9,000                    ms
[info] SetOfIntsBenchmark.writeJacksonScala                                                              128  thrpt    5    596387,467 ±   16899,829   ops/s
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                               128  thrpt    5       515,540 ±      14,566  MB/sec
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                          128  thrpt    5      1360,001 ±       0,001    B/op
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                      128  thrpt    5       604,784 ±     326,947  MB/sec
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5      1594,871 ±     843,030    B/op
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,486 ±       4,026  MB/sec
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         1,276 ±      10,572    B/op
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.count                                                    128  thrpt    5         5,000                counts
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.time                                                     128  thrpt    5         9,000                    ms
[info] SetOfIntsBenchmark.writeJsoniterScala                                                             128  thrpt    5    568564,854 ±   42317,896   ops/s
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                              128  thrpt    5       306,452 ±      22,817  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                         128  thrpt    5       848,001 ±       0,001    B/op
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5       307,052 ±    1079,332  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5       847,170 ±    2977,972    B/op
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,006 ±       0,054  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0,017 ±       0,148    B/op
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.count                                                   128  thrpt    5         3,000                counts
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.time                                                    128  thrpt    5         5,000                    ms
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc                                                     128  thrpt    5    674241,393 ±    3855,845   ops/s
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                      128  thrpt    5         6,857 ±       0,040  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                 128  thrpt    5        16,001 ±       0,001    B/op
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                           128  thrpt    5           ≈ 0                counts
[info] SetOfIntsBenchmark.writePlayJson                                                                  128  thrpt    5     33798,199 ±    3668,403   ops/s
[info] SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate                                                   128  thrpt    5      1783,550 ±     193,663  MB/sec
[info] SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm                                              128  thrpt    5     83024,013 ±       0,003    B/op
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                          128  thrpt    5      1751,533 ±    1421,628  MB/sec
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     81537,083 ±   65805,236    B/op
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0,042 ±       0,188  MB/sec
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         1,942 ±       8,760    B/op
[info] SetOfIntsBenchmark.writePlayJson:·gc.count                                                        128  thrpt    5        13,000                counts
[info] SetOfIntsBenchmark.writePlayJson:·gc.time                                                         128  thrpt    5         9,000                    ms
[info] SetOfIntsBenchmark.writeUPickle                                                                   128  thrpt    5    126123,697 ±     875,321   ops/s
[info] SetOfIntsBenchmark.writeUPickle:·gc.alloc.rate                                                    128  thrpt    5      1445,535 ±       9,940  MB/sec
[info] SetOfIntsBenchmark.writeUPickle:·gc.alloc.rate.norm                                               128  thrpt    5     18032,003 ±       0,001    B/op
[info] SetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                           128  thrpt    5      1350,153 ±       7,231  MB/sec
[info] SetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5     16842,206 ±      93,042    B/op
[info] SetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0,033 ±       0,091  MB/sec
[info] SetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5         0,416 ±       1,142    B/op
[info] SetOfIntsBenchmark.writeUPickle:·gc.count                                                         128  thrpt    5        10,000                counts
[info] SetOfIntsBenchmark.writeUPickle:·gc.time                                                          128  thrpt    5         6,000                    ms
[info] StringOfAsciiCharsBenchmark.readCirce                                                             128  thrpt    5   3372873,467 ±   52865,178   ops/s
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate                                              128  thrpt    5      3172,918 ±      49,914  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm                                         128  thrpt    5      1480,000 ±       0,001    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                     128  thrpt    5      3125,327 ±    1440,710  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      1458,197 ±     686,721    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,058 ±       0,088  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0,027 ±       0,041    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.count                                                   128  thrpt    5        23,000                counts
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.time                                                    128  thrpt    5        13,000                    ms
[info] StringOfAsciiCharsBenchmark.readDslJsonJava                                                       128  thrpt    5   8759125,192 ±  483112,069   ops/s
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate                                        128  thrpt    5      1647,944 ±      90,865  MB/sec
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                   128  thrpt    5       296,000 ±       0,001    B/op
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                               128  thrpt    5      1606,728 ±    1407,736  MB/sec
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5       289,067 ±     263,106    B/op
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0,475 ±       4,046  MB/sec
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0,084 ±       0,719    B/op
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.count                                             128  thrpt    5        12,000                counts
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.time                                              128  thrpt    5        14,000                    ms
[info] StringOfAsciiCharsBenchmark.readJacksonScala                                                      128  thrpt    5   4365979,510 ±   68720,407   ops/s
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate                                       128  thrpt    5      2619,702 ±      41,057  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                  128  thrpt    5       944,000 ±       0,001    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                              128  thrpt    5      2705,708 ±      36,900  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5       974,999 ±      14,576    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0,054 ±       0,122  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0,019 ±       0,044    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.count                                            128  thrpt    5        20,000                counts
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.time                                             128  thrpt    5        16,000                    ms
[info] StringOfAsciiCharsBenchmark.readJsoniterScala                                                     128  thrpt    5   7636684,039 ±   94183,767   ops/s
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate                                      128  thrpt    5      1436,786 ±      17,713  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                 128  thrpt    5       296,000 ±       0,001    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                             128  thrpt    5      1349,811 ±       7,043  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5       278,084 ±       4,037    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0,037 ±       0,105  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0,008 ±       0,021    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.count                                           128  thrpt    5        10,000                counts
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.time                                            128  thrpt    5         6,000                    ms
[info] StringOfAsciiCharsBenchmark.readPlayJson                                                          128  thrpt    5   5191974,586 ±  234569,409   ops/s
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate                                           128  thrpt    5      3220,872 ±     145,527  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm                                      128  thrpt    5       976,000 ±       0,001    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                  128  thrpt    5      3257,959 ±    1158,198  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5       987,691 ±     369,392    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,062 ±       0,080  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0,019 ±       0,024    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.count                                                128  thrpt    5        24,000                counts
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.time                                                 128  thrpt    5        14,000                    ms
[info] StringOfAsciiCharsBenchmark.readUPickle                                                           128  thrpt    5   4124429,098 ±   77378,239   ops/s
[info] StringOfAsciiCharsBenchmark.readUPickle:·gc.alloc.rate                                            128  thrpt    5      2600,582 ±      48,763  MB/sec
[info] StringOfAsciiCharsBenchmark.readUPickle:·gc.alloc.rate.norm                                       128  thrpt    5       992,000 ±       0,001    B/op
[info] StringOfAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                   128  thrpt    5      2578,602 ±    1162,716  MB/sec
[info] StringOfAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5       983,893 ±     452,753    B/op
[info] StringOfAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,042 ±       0,113  MB/sec
[info] StringOfAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0,016 ±       0,044    B/op
[info] StringOfAsciiCharsBenchmark.readUPickle:·gc.count                                                 128  thrpt    5        19,000                counts
[info] StringOfAsciiCharsBenchmark.readUPickle:·gc.time                                                  128  thrpt    5        11,000                    ms
[info] StringOfAsciiCharsBenchmark.writeCirce                                                            128  thrpt    5   2803150,350 ±  227724,732   ops/s
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate                                             128  thrpt    5      1739,004 ±     140,994  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm                                        128  thrpt    5       976,000 ±       0,001    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1753,305 ±    1430,767  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5       982,780 ±     772,051    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,067 ±       0,067  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0,038 ±       0,040    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.count                                                  128  thrpt    5        13,000                counts
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.time                                                   128  thrpt    5         8,000                    ms
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava                                                      128  thrpt    5   7049128,526 ±  146221,387   ops/s
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate                                       128  thrpt    5       681,069 ±      14,130  MB/sec
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                  128  thrpt    5       152,000 ±       0,001    B/op
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                              128  thrpt    5       665,177 ±       4,276  MB/sec
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5       148,457 ±       3,429    B/op
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0,006 ±       0,048  MB/sec
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0,001 ±       0,011    B/op
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.count                                            128  thrpt    5         5,000                counts
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.time                                             128  thrpt    5         8,000                    ms
[info] StringOfAsciiCharsBenchmark.writeJacksonScala                                                     128  thrpt    5   4948628,264 ±  235002,073   ops/s
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate                                      128  thrpt    5      1308,471 ±      62,171  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5       416,000 ±       0,001    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5      1340,991 ±      10,590  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5       426,390 ±      20,008    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0,042 ±       0,113  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0,013 ±       0,036    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.count                                           128  thrpt    5        10,000                counts
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.time                                            128  thrpt    5         7,000                    ms
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala                                                    128  thrpt    5   9529158,710 ±  218871,403   ops/s
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                                     128  thrpt    5       920,643 ±      21,037  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5       152,000 ±       0,001    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5       943,312 ±    1421,506  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5       155,605 ±     232,707    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0,037 ±       0,164  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0,006 ±       0,027    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.count                                          128  thrpt    5         7,000                counts
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.time                                           128  thrpt    5         4,000                    ms
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc                                            128  thrpt    5   7725572,010 ±  176398,729   ops/s
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                             128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                        128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                  128  thrpt    5           ≈ 0                counts
[info] StringOfAsciiCharsBenchmark.writePlayJson                                                         128  thrpt    5   5420148,697 ±  606031,715   ops/s
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate                                          128  thrpt    5      1736,315 ±     194,187  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                                     128  thrpt    5       504,000 ±       0,001    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1751,020 ±    1420,701  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5       509,888 ±     443,035    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,042 ±       0,113  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0,012 ±       0,033    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.count                                               128  thrpt    5        13,000                counts
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.time                                                128  thrpt    5        12,000                    ms
[info] StringOfAsciiCharsBenchmark.writeUPickle                                                          128  thrpt    5    426931,482 ±    2683,878   ops/s
[info] StringOfAsciiCharsBenchmark.writeUPickle:·gc.alloc.rate                                           128  thrpt    5       449,371 ±       2,814  MB/sec
[info] StringOfAsciiCharsBenchmark.writeUPickle:·gc.alloc.rate.norm                                      128  thrpt    5      1656,001 ±       0,001    B/op
[info] StringOfAsciiCharsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                  128  thrpt    5       474,586 ±    1068,644  MB/sec
[info] StringOfAsciiCharsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      1748,894 ±    3937,914    B/op
[info] StringOfAsciiCharsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,326 ±       2,666  MB/sec
[info] StringOfAsciiCharsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         1,205 ±       9,848    B/op
[info] StringOfAsciiCharsBenchmark.writeUPickle:·gc.count                                                128  thrpt    5         4,000                counts
[info] StringOfAsciiCharsBenchmark.writeUPickle:·gc.time                                                 128  thrpt    5         5,000                    ms
[info] StringOfNonAsciiCharsBenchmark.readCirce                                                          128  thrpt    5    971192,978 ±    8841,105   ops/s
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate                                           128  thrpt    5      1402,500 ±      12,820  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm                                      128  thrpt    5      2272,000 ±       0,001    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1348,170 ±       7,464  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      2183,996 ±      21,448    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,037 ±       0,132  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0,061 ±       0,213    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.count                                                128  thrpt    5        10,000                counts
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.time                                                 128  thrpt    5         6,000                    ms
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava                                                    128  thrpt    5   1927247,229 ±   40250,843   ops/s
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate                                     128  thrpt    5       362,598 ±       7,562  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                128  thrpt    5       296,000 ±       0,001    B/op
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                            128  thrpt    5       337,518 ±    1210,335  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5       276,330 ±     989,959    B/op
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0,007 ±       0,056  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0,005 ±       0,046    B/op
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.count                                          128  thrpt    5         3,000                counts
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.time                                           128  thrpt    5         5,000                    ms
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala                                                   128  thrpt    5   1233028,947 ±  116585,538   ops/s
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate                                    128  thrpt    5       739,886 ±      69,681  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                               128  thrpt    5       944,000 ±       0,001    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                           128  thrpt    5       801,974 ±    1150,730  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5      1031,235 ±    1614,593    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0,440 ±       3,609  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         0,561 ±       4,597    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.count                                         128  thrpt    5         6,000                counts
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.time                                          128  thrpt    5         5,000                    ms
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala                                                  128  thrpt    5   2631033,791 ±   50202,308   ops/s
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate                                   128  thrpt    5       494,998 ±       9,434  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                              128  thrpt    5       296,000 ±       0,001    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                          128  thrpt    5       475,246 ±    1070,975  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5       284,550 ±     642,045    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0,312 ±       2,551  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5         0,188 ±       1,538    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.count                                        128  thrpt    5         4,000                counts
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.time                                         128  thrpt    5         5,000                    ms
[info] StringOfNonAsciiCharsBenchmark.readPlayJson                                                       128  thrpt    5   1402924,420 ±   11234,738   ops/s
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate                                        128  thrpt    5       870,322 ±       6,919  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm                                   128  thrpt    5       976,000 ±       0,001    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                               128  thrpt    5       937,781 ±    1414,104  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      1051,266 ±    1580,375    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0,021 ±       0,080  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0,023 ±       0,090    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.count                                             128  thrpt    5         7,000                counts
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.time                                              128  thrpt    5         5,000                    ms
[info] StringOfNonAsciiCharsBenchmark.readUPickle                                                        128  thrpt    5   1264818,159 ±   22593,021   ops/s
[info] StringOfNonAsciiCharsBenchmark.readUPickle:·gc.alloc.rate                                         128  thrpt    5      1427,786 ±      25,477  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readUPickle:·gc.alloc.rate.norm                                    128  thrpt    5      1776,000 ±       0,001    B/op
[info] StringOfNonAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                128  thrpt    5      1485,579 ±    1162,034  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      1849,318 ±    1487,606    B/op
[info] StringOfNonAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0,025 ±       0,088  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0,031 ±       0,110    B/op
[info] StringOfNonAsciiCharsBenchmark.readUPickle:·gc.count                                              128  thrpt    5        11,000                counts
[info] StringOfNonAsciiCharsBenchmark.readUPickle:·gc.time                                               128  thrpt    5         7,000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeCirce                                                         128  thrpt    5   1901747,647 ±   34253,161   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate                                          128  thrpt    5      1489,261 ±      26,560  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm                                     128  thrpt    5      1232,000 ±       0,001    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1615,030 ±    1419,407  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      1337,009 ±    1195,796    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,050 ±       0,044  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0,041 ±       0,036    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.count                                               128  thrpt    5        12,000                counts
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.time                                                128  thrpt    5         7,000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava                                                   128  thrpt    5   2760125,638 ±   13177,480   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate                                    128  thrpt    5       715,797 ±       3,427  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                               128  thrpt    5       408,000 ±       0,001    B/op
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                           128  thrpt    5       665,124 ±       4,212  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5       379,118 ±       3,956    B/op
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0,015 ±       0,096  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         0,008 ±       0,054    B/op
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.count                                         128  thrpt    5         5,000                counts
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.time                                          128  thrpt    5         8,000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala                                                  128  thrpt    5   2666748,737 ±   53704,674   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate                                   128  thrpt    5      1261,077 ±      25,447  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                              128  thrpt    5       744,000 ±       0,001    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                          128  thrpt    5      1339,846 ±       9,899  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5       790,484 ±      12,049    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0,029 ±       0,072  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5         0,017 ±       0,042    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.count                                        128  thrpt    5        10,000                counts
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.time                                         128  thrpt    5         7,000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala                                                 128  thrpt    5   3868196,014 ±  315865,295   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                                  128  thrpt    5      1003,186 ±      81,737  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                             128  thrpt    5       408,000 ±       0,001    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                         128  thrpt    5      1078,237 ±    1421,774  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5       437,193 ±     560,431    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0,025 ±       0,143  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         0,010 ±       0,058    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.count                                       128  thrpt    5         8,000                counts
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.time                                        128  thrpt    5         4,000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc                                         128  thrpt    5   4032407,900 ±   10061,562   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                          128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                     128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                               128  thrpt    5           ≈ 0                counts
[info] StringOfNonAsciiCharsBenchmark.writePlayJson                                                      128  thrpt    5   2620067,457 ±   67627,958   ops/s
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate                                       128  thrpt    5      1265,649 ±      32,653  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                                  128  thrpt    5       760,000 ±       0,001    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                              128  thrpt    5      1346,196 ±       7,308  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5       808,395 ±      19,875    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0,046 ±       0,105  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0,028 ±       0,063    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.count                                            128  thrpt    5        10,000                counts
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.time                                             128  thrpt    5         6,000                    ms
[info] TwitterAPIBenchmark.readCirce                                                                     N/A  thrpt    5     12001,485 ±     324,312   ops/s
[info] TwitterAPIBenchmark.readCirce:·gc.alloc.rate                                                      N/A  thrpt    5      1691,454 ±      45,837  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.alloc.rate.norm                                                 N/A  thrpt    5    221733,022 ±      21,952    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space                                             N/A  thrpt    5      1749,786 ±    1420,199  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                        N/A  thrpt    5    229316,946 ±  184735,737    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                         N/A  thrpt    5         0,079 ±       0,156  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                    N/A  thrpt    5        10,355 ±      20,673    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.count                                                           N/A  thrpt    5        13,000                counts
[info] TwitterAPIBenchmark.readCirce:·gc.time                                                            N/A  thrpt    5         9,000                    ms
[info] TwitterAPIBenchmark.readJacksonScala                                                              N/A  thrpt    5     15088,529 ±     102,706   ops/s
[info] TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate                                               N/A  thrpt    5       238,542 ±       1,536  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm                                          N/A  thrpt    5     24873,472 ±      33,219    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                      N/A  thrpt    5       204,698 ±    1079,312  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                 N/A  thrpt    5     21351,734 ±  112581,642    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                  N/A  thrpt    5         0,004 ±       0,036  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                             N/A  thrpt    5         0,434 ±       3,741    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.count                                                    N/A  thrpt    5         2,000                counts
[info] TwitterAPIBenchmark.readJacksonScala:·gc.time                                                     N/A  thrpt    5         5,000                    ms
[info] TwitterAPIBenchmark.readJsoniterScala                                                             N/A  thrpt    5     41143,131 ±     480,365   ops/s
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate                                              N/A  thrpt    5       439,760 ±       5,123  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                         N/A  thrpt    5     16816,011 ±       0,001    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                     N/A  thrpt    5       339,375 ±    1219,703  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                N/A  thrpt    5     13000,325 ±   46728,233    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                 N/A  thrpt    5         0,342 ±       2,853  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                            N/A  thrpt    5        13,094 ±     109,336    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.count                                                   N/A  thrpt    5         3,000                counts
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.time                                                    N/A  thrpt    5         5,000                    ms
[info] TwitterAPIBenchmark.readPlayJson                                                                  N/A  thrpt    5      3822,706 ±     115,547   ops/s
[info] TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate                                                   N/A  thrpt    5      1205,902 ±      36,447  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate.norm                                              N/A  thrpt    5    496232,115 ±       0,018    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5      1207,844 ±    1153,339  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5    497305,702 ±  478114,185    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5         0,033 ±       0,134  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5        13,694 ±      54,891    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.count                                                        N/A  thrpt    5         9,000                counts
[info] TwitterAPIBenchmark.readPlayJson:·gc.time                                                         N/A  thrpt    5        23,000                    ms
[info] TwitterAPIBenchmark.writeJacksonScala                                                             N/A  thrpt    5     65910,617 ±     899,856   ops/s
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate                                              N/A  thrpt    5       842,077 ±      11,545  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                         N/A  thrpt    5     20099,996 ±       0,138    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                     N/A  thrpt    5       796,867 ±    1142,846  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                N/A  thrpt    5     19033,494 ±   27521,136    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                 N/A  thrpt    5         0,033 ±       0,146  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                            N/A  thrpt    5         0,796 ±       3,482    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.count                                                   N/A  thrpt    5         6,000                counts
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.time                                                    N/A  thrpt    5         8,000                    ms
[info] TwitterAPIBenchmark.writeJsoniterScala                                                            N/A  thrpt    5     86988,736 ±     440,723   ops/s
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate                                             N/A  thrpt    5       570,611 ±       2,879  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                        N/A  thrpt    5     10320,005 ±       0,001    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                    N/A  thrpt    5       506,165 ±    1122,253  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                               N/A  thrpt    5      9155,744 ±   20292,398    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                N/A  thrpt    5         0,358 ±       2,866  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           N/A  thrpt    5         6,471 ±      51,764    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.count                                                  N/A  thrpt    5         4,000                counts
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.time                                                   N/A  thrpt    5         5,000                    ms
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc                                                    N/A  thrpt    5     95220,182 ±     381,975   ops/s
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                     N/A  thrpt    5        11,621 ±       0,047  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                N/A  thrpt    5       192,005 ±       0,001    B/op
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count                                          N/A  thrpt    5           ≈ 0                counts
[info] VectorOfBooleansBenchmark.readCirce                                                               128  thrpt    5    377565,654 ±    5035,874   ops/s
[info] VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate                                                128  thrpt    5      2202,142 ±      29,405  MB/sec
[info] VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                           128  thrpt    5      9176,001 ±       0,001    B/op
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5      2166,279 ±    1166,628  MB/sec
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5      9029,062 ±    4960,405    B/op
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0,062 ±       0,001  MB/sec
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0,260 ±       0,003    B/op
[info] VectorOfBooleansBenchmark.readCirce:·gc.count                                                     128  thrpt    5        16,000                counts
[info] VectorOfBooleansBenchmark.readCirce:·gc.time                                                      128  thrpt    5        10,000                    ms
[info] VectorOfBooleansBenchmark.readJacksonScala                                                        128  thrpt    5    521649,573 ±   26196,058   ops/s
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                         128  thrpt    5       636,627 ±      31,937  MB/sec
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5      1920,001 ±       0,001    B/op
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5       636,024 ±     267,363  MB/sec
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      1917,988 ±     795,472    B/op
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0,486 ±       3,915  MB/sec
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         1,439 ±      11,581    B/op
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.count                                              128  thrpt    5         5,000                counts
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.time                                               128  thrpt    5         7,000                    ms
[info] VectorOfBooleansBenchmark.readJsoniterScala                                                       128  thrpt    5   1355837,982 ±   16197,615   ops/s
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                        128  thrpt    5       710,091 ±       8,489  MB/sec
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5       824,000 ±       0,001    B/op
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5       808,413 ±    1160,104  MB/sec
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5       938,654 ±    1356,941    B/op
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0,342 ±       2,677  MB/sec
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0,398 ±       3,116    B/op
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.count                                             128  thrpt    5         6,000                counts
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.time                                              128  thrpt    5         5,000                    ms
[info] VectorOfBooleansBenchmark.readPlayJson                                                            128  thrpt    5    125945,450 ±    2352,724   ops/s
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                             128  thrpt    5      4379,096 ±      81,552  MB/sec
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                        128  thrpt    5     54704,003 ±       0,001    B/op
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5      4355,178 ±    1439,316  MB/sec
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     54419,935 ±   18786,105    B/op
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,062 ±       0,098  MB/sec
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0,781 ±       1,234    B/op
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.count                                                  128  thrpt    5        32,000                counts
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.time                                                   128  thrpt    5        19,000                    ms
[info] VectorOfBooleansBenchmark.readUPickle                                                             128  thrpt    5    663410,951 ±  107530,897   ops/s
[info] VectorOfBooleansBenchmark.readUPickle:·gc.alloc.rate                                              128  thrpt    5      1936,332 ±     313,752  MB/sec
[info] VectorOfBooleansBenchmark.readUPickle:·gc.alloc.rate.norm                                         128  thrpt    5      4592,001 ±       0,001    B/op
[info] VectorOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                     128  thrpt    5      2030,302 ±      15,374  MB/sec
[info] VectorOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      4821,822 ±     797,874    B/op
[info] VectorOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,046 ±       0,067  MB/sec
[info] VectorOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0,109 ±       0,154    B/op
[info] VectorOfBooleansBenchmark.readUPickle:·gc.count                                                   128  thrpt    5        15,000                counts
[info] VectorOfBooleansBenchmark.readUPickle:·gc.time                                                    128  thrpt    5         9,000                    ms
[info] VectorOfBooleansBenchmark.writeCirce                                                              128  thrpt    5    403386,573 ±   13118,138   ops/s
[info] VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                               128  thrpt    5      1382,467 ±      45,001  MB/sec
[info] VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                          128  thrpt    5      5392,001 ±       0,001    B/op
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1344,604 ±       9,075  MB/sec
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5      5244,576 ±     142,231    B/op
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,029 ±       0,156  MB/sec
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0,114 ±       0,609    B/op
[info] VectorOfBooleansBenchmark.writeCirce:·gc.count                                                    128  thrpt    5        10,000                counts
[info] VectorOfBooleansBenchmark.writeCirce:·gc.time                                                     128  thrpt    5         6,000                    ms
[info] VectorOfBooleansBenchmark.writeJacksonScala                                                       128  thrpt    5    711843,751 ±   15767,201   ops/s
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                        128  thrpt    5       542,946 ±      12,005  MB/sec
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5      1200,001 ±       0,001    B/op
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5       502,430 ±    1111,980  MB/sec
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      1111,646 ±    2460,090    B/op
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0,484 ±       3,919  MB/sec
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         1,078 ±       8,745    B/op
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.count                                             128  thrpt    5         4,000                counts
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.time                                              128  thrpt    5         6,000                    ms
[info] VectorOfBooleansBenchmark.writeJsoniterScala                                                      128  thrpt    5   2027681,705 ±   20778,180   ops/s
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                       128  thrpt    5       938,292 ±       9,660  MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5       728,000 ±       0,001    B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5       942,934 ±    1420,577  MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5       731,604 ±    1102,179    B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0,029 ±       0,156  MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0,023 ±       0,121    B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.count                                            128  thrpt    5         7,000                counts
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.time                                             128  thrpt    5         4,000                    ms
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc                                              128  thrpt    5   2085700,543 ±   16977,188   ops/s
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                               128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                          128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                    128  thrpt    5           ≈ 0                counts
[info] VectorOfBooleansBenchmark.writePlayJson                                                           128  thrpt    5    381779,390 ±    1803,570   ops/s
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                            128  thrpt    5       564,911 ±       2,620  MB/sec
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                       128  thrpt    5      2328,001 ±       0,001    B/op
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5       504,305 ±    1117,108  MB/sec
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      2077,550 ±    4600,284    B/op
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,422 ±       3,411  MB/sec
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         1,739 ±      14,060    B/op
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.count                                                 128  thrpt    5         4,000                counts
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.time                                                  128  thrpt    5         5,000                    ms
[info] VectorOfBooleansBenchmark.writeUPickle                                                            128  thrpt    5    188511,836 ±   10604,164   ops/s
[info] VectorOfBooleansBenchmark.writeUPickle:·gc.alloc.rate                                             128  thrpt    5      1111,926 ±      62,548  MB/sec
[info] VectorOfBooleansBenchmark.writeUPickle:·gc.alloc.rate.norm                                        128  thrpt    5      9280,002 ±       0,001    B/op
[info] VectorOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1079,411 ±    1422,196  MB/sec
[info] VectorOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      9027,970 ±   12103,212    B/op
[info] VectorOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,033 ±       0,134  MB/sec
[info] VectorOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0,279 ±       1,116    B/op
[info] VectorOfBooleansBenchmark.writeUPickle:·gc.count                                                  128  thrpt    5         8,000                counts
[info] VectorOfBooleansBenchmark.writeUPickle:·gc.time                                                   128  thrpt    5         5,000                    ms
[info] Benchmark result is saved to jdk8.json
[success] Total time: 8109 s, completed 30 черв. 2018 22:19:43
