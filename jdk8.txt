[info] Loading settings from idea.sbt,build.sbt ...
[info] Loading global plugins from /home/andriy/.sbt/1.0/plugins
[info] Loading settings from plugins.sbt ...
[info] Loading project definition from /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/project
[info] Loading settings from release.sbt,build.sbt,version.sbt ...
[info] Set current project to jsoniter-scala (in build file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/)
[success] Total time: 0 s, completed Feb 16, 2018 5:35:45 PM
[info] Updating core...
[info] Done updating.
[info] Updating macros...
[info] Done updating.
[info] Updating benchmark...
[info] Done updating.
[info] Compiling 5 Scala sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/target/scala-2.12/classes ...
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:988:63: constructor String in class String is deprecated: see corresponding Javadoc for more information.
[warn]   private def toDouble: Double = java.lang.Double.parseDouble(new String(buf, 0, mark, head - mark))
[warn]                                                               ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:475:7: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]     s.getBytes(0, len, buf, pos)
[warn]       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:483:7: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]     s.getBytes(0, len, buf, pos + 1)
[warn]       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:975:14: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]       zoneId.getBytes(0, len, buf, pos)
[warn]              ^
[warn] four warnings found
[info] Done compiling.
[info] Compiling 1 Scala source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/classes ...
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/target/scala-2.12/core_2.12-0.10.1-SNAPSHOT.jar ...
[info] Done packaging.
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/macros_2.12-0.10.1-SNAPSHOT.jar ...
[info] Compiling 46 Scala sources and 1 Java source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] Done packaging.
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:14:64: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("s", "bd");
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _bd: scala.math.BigDecimal = null;
[info]           var _os: Option[String] = None;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         _s = JsoniterCodecs.this.stringCodec.decode(in, _s);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3138 => if (in.isCharBufEqualsTo(l, "bd"))
[info]                       {
[info]                         _bd = in.readBigDecimal(_bd);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556 => if (in.isCharBufEqualsTo(l, "os"))
[info]                       _os = Option(JsoniterCodecs.this.stringCodec.decode(in, null))
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs(s = _s, bd = _bd, os = _os)
[info]           else
[info]             in.requiredKeyError(r0, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("s");
[info]             JsoniterCodecs.this.stringCodec.encode(x.s, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("bd");
[info]             out.writeVal(x.bd)
[info]           };
[info]           {
[info]             val v = x.os;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("os");
[info]                 JsoniterCodecs.this.stringCodec.encode(v.get, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val anyRefsCodec: JsonCodec[AnyRefs] = make[AnyRefs](CodecMakerConfig())
[info]                                                                ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:15:61: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Arrays':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Arrays] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays): com.github.plokhotnyuk.jsoniter_scala.macros.Arrays = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays, out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[Array[Int]] = new Array[Array[Int]](0);
[info]       private val v1: Array[BigInt] = new Array[scala.math.BigInt](0);
[info]       private val v2: Array[Int] = new Array[Int](0);
[info]       private def d1(in: JsonReader, default: Array[Array[Int]]): Array[Array[Int]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Array[Int]](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Array[Int]](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, JsoniterCodecs.this.intArrayCodec.decode(in, v2));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Array[Int]](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays): com.github.plokhotnyuk.jsoniter_scala.macros.Arrays = if (in.isNextToken('{'))
[info]         {
[info]           var _aa: Array[Array[Int]] = v0;
[info]           var _a: Array[BigInt] = v1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3104 => if (in.isCharBufEqualsTo(l, "aa"))
[info]                       _aa = d1(in, _aa)
[info]                     else
[info]                       in.skip()
[info]                     case 97 => if (in.isCharBufEqualsTo(l, "a"))
[info]                       _a = JsoniterCodecs.this.bigIntArrayCodec.decode(in, _a)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Arrays(aa = _aa, a = _a)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: Array[Array[Int]], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               JsoniterCodecs.this.intArrayCodec.encode(x(i), out);
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.aa;
[info]             if (v.ne(null).&&(v.length.>(0)))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("aa");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.a;
[info]             if (v.ne(null).&&(v.length.>(0)))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("a");
[info]                 JsoniterCodecs.this.bigIntArrayCodec.encode(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val arraysCodec: JsonCodec[Arrays] = make[Arrays](CodecMakerConfig())
[info]                                                             ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:16:92: Generated JSON codec for type 'Array[BigDecimal]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[BigDecimal]] {
[info]       def nullValue: Array[BigDecimal] = v0;
[info]       def decode(in: JsonReader, default: Array[BigDecimal]): Array[BigDecimal] = d0(in, default);
[info]       def encode(x: Array[BigDecimal], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[BigDecimal] = new Array[scala.math.BigDecimal](0);
[info]       private def d0(in: JsonReader, default: Array[BigDecimal]): Array[BigDecimal] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[scala.math.BigDecimal](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[scala.math.BigDecimal](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBigDecimal(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[scala.math.BigDecimal](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[BigDecimal], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bigDecimalArrayCodec: JsonCodec[Array[BigDecimal]] = make[Array[BigDecimal]](CodecMakerConfig())
[info]                                                                                            ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:17:80: Generated JSON codec for type 'Array[BigInt]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[BigInt]] {
[info]       def nullValue: Array[BigInt] = v0;
[info]       def decode(in: JsonReader, default: Array[BigInt]): Array[BigInt] = d0(in, default);
[info]       def encode(x: Array[BigInt], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[BigInt] = new Array[scala.math.BigInt](0);
[info]       private def d0(in: JsonReader, default: Array[BigInt]): Array[BigInt] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[scala.math.BigInt](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[scala.math.BigInt](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBigInt(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[scala.math.BigInt](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[BigInt], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bigIntArrayCodec: JsonCodec[Array[BigInt]] = make[Array[BigInt]](CodecMakerConfig())
[info]                                                                                ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:18:64: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.BitSets':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.BitSets] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets): com.github.plokhotnyuk.jsoniter_scala.macros.BitSets = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.immutable.BitSet): scala.collection.immutable.BitSet = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = BitSet.newBuilder;
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d2(in: JsonReader, default: scala.collection.mutable.BitSet): scala.collection.mutable.BitSet = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               BitSet.empty;
[info]             do 
[info]               x.add(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets): com.github.plokhotnyuk.jsoniter_scala.macros.BitSets = if (in.isNextToken('{'))
[info]         {
[info]           var _bs: scala.collection.immutable.BitSet = BitSet.empty;
[info]           var _mbs: scala.collection.mutable.BitSet = BitSet.empty;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3153 => if (in.isCharBufEqualsTo(l, "bs"))
[info]                       _bs = d1(in, _bs)
[info]                     else
[info]                       in.skip()
[info]                     case 107902 => if (in.isCharBufEqualsTo(l, "mbs"))
[info]                       _mbs = d2(in, _mbs)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.BitSets(bs = _bs, mbs = _mbs)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: scala.collection.immutable.BitSet, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: scala.collection.mutable.BitSet, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.bs;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("bs");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.mbs;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("mbs");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bitSetsCodec: JsonCodec[BitSets] = make[BitSets](CodecMakerConfig())
[info]                                                                ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:19:83: Generated JSON codec for type 'Array[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[Boolean]] {
[info]       def nullValue: Array[Boolean] = v0;
[info]       def decode(in: JsonReader, default: Array[Boolean]): Array[Boolean] = d0(in, default);
[info]       def encode(x: Array[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[Boolean] = new Array[Boolean](0);
[info]       private def d0(in: JsonReader, default: Array[Boolean]): Array[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Boolean](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Boolean](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBoolean());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Boolean](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[Boolean], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanArrayCodec: JsonCodec[Array[Boolean]] = make[Array[Boolean]](CodecMakerConfig())
[info]                                                                                   ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:20:74: Generated JSON codec for type 'Array[Byte]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[Byte]] {
[info]       def nullValue: Array[Byte] = v0;
[info]       def decode(in: JsonReader, default: Array[Byte]): Array[Byte] = d0(in, default);
[info]       def encode(x: Array[Byte], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[Byte] = new Array[Byte](0);
[info]       private def d0(in: JsonReader, default: Array[Byte]): Array[Byte] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Byte](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Byte](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readByte());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Byte](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[Byte], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val byteArrayCodec: JsonCodec[Array[Byte]] = make[Array[Byte]](CodecMakerConfig())
[info]                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:21:80: Generated JSON codec for type 'Array[Double]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[Double]] {
[info]       def nullValue: Array[Double] = v0;
[info]       def decode(in: JsonReader, default: Array[Double]): Array[Double] = d0(in, default);
[info]       def encode(x: Array[Double], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[Double] = new Array[Double](0);
[info]       private def d0(in: JsonReader, default: Array[Double]): Array[Double] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Double](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Double](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readDouble());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Double](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[Double], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val doubleArrayCodec: JsonCodec[Array[Double]] = make[Array[Double]](CodecMakerConfig())
[info]                                                                                ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:22:86: Generated JSON codec for type 'Array[java.time.Duration]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[java.time.Duration]] {
[info]       def nullValue: Array[java.time.Duration] = v0;
[info]       def decode(in: JsonReader, default: Array[java.time.Duration]): Array[java.time.Duration] = d0(in, default);
[info]       def encode(x: Array[java.time.Duration], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[java.time.Duration] = new Array[java.time.Duration](0);
[info]       private def d0(in: JsonReader, default: Array[java.time.Duration]): Array[java.time.Duration] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Duration](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[java.time.Duration](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readDuration(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[java.time.Duration](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[java.time.Duration], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val durationArrayCodec: JsonCodec[Array[Duration]] = make[Array[Duration]](CodecMakerConfig())
[info]                                                                                      ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:23:77: Generated JSON codec for type 'Array[Float]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[Float]] {
[info]       def nullValue: Array[Float] = v0;
[info]       def decode(in: JsonReader, default: Array[Float]): Array[Float] = d0(in, default);
[info]       def encode(x: Array[Float], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[Float] = new Array[Float](0);
[info]       private def d0(in: JsonReader, default: Array[Float]): Array[Float] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Float](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Float](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readFloat());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Float](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[Float], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val floatArrayCodec: JsonCodec[Array[Float]] = make[Array[Float]](CodecMakerConfig())
[info]                                                                             ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:24:83: Generated JSON codec for type 'Array[java.time.Instant]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[java.time.Instant]] {
[info]       def nullValue: Array[java.time.Instant] = v0;
[info]       def decode(in: JsonReader, default: Array[java.time.Instant]): Array[java.time.Instant] = d0(in, default);
[info]       def encode(x: Array[java.time.Instant], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[java.time.Instant] = new Array[java.time.Instant](0);
[info]       private def d0(in: JsonReader, default: Array[java.time.Instant]): Array[java.time.Instant] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Instant](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[java.time.Instant](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readInstant(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[java.time.Instant](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[java.time.Instant], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val instantArrayCodec: JsonCodec[Array[Instant]] = make[Array[Instant]](CodecMakerConfig())
[info]                                                                                   ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:25:89: Generated JSON codec for type 'Array[java.time.LocalDate]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[java.time.LocalDate]] {
[info]       def nullValue: Array[java.time.LocalDate] = v0;
[info]       def decode(in: JsonReader, default: Array[java.time.LocalDate]): Array[java.time.LocalDate] = d0(in, default);
[info]       def encode(x: Array[java.time.LocalDate], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[java.time.LocalDate] = new Array[java.time.LocalDate](0);
[info]       private def d0(in: JsonReader, default: Array[java.time.LocalDate]): Array[java.time.LocalDate] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalDate](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[java.time.LocalDate](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalDate(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[java.time.LocalDate](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[java.time.LocalDate], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localDateArrayCodec: JsonCodec[Array[LocalDate]] = make[Array[LocalDate]](CodecMakerConfig())
[info]                                                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:26:101: Generated JSON codec for type 'Array[java.time.LocalDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[java.time.LocalDateTime]] {
[info]       def nullValue: Array[java.time.LocalDateTime] = v0;
[info]       def decode(in: JsonReader, default: Array[java.time.LocalDateTime]): Array[java.time.LocalDateTime] = d0(in, default);
[info]       def encode(x: Array[java.time.LocalDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[java.time.LocalDateTime] = new Array[java.time.LocalDateTime](0);
[info]       private def d0(in: JsonReader, default: Array[java.time.LocalDateTime]): Array[java.time.LocalDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[java.time.LocalDateTime](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[java.time.LocalDateTime](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[java.time.LocalDateTime], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localDateTimeArrayCodec: JsonCodec[Array[LocalDateTime]] = make[Array[LocalDateTime]](CodecMakerConfig())
[info]                                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:27:104: Generated JSON codec for type 'Array[java.time.OffsetDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[java.time.OffsetDateTime]] {
[info]       def nullValue: Array[java.time.OffsetDateTime] = v0;
[info]       def decode(in: JsonReader, default: Array[java.time.OffsetDateTime]): Array[java.time.OffsetDateTime] = d0(in, default);
[info]       def encode(x: Array[java.time.OffsetDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[java.time.OffsetDateTime] = new Array[java.time.OffsetDateTime](0);
[info]       private def d0(in: JsonReader, default: Array[java.time.OffsetDateTime]): Array[java.time.OffsetDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.OffsetDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[java.time.OffsetDateTime](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readOffsetDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[java.time.OffsetDateTime](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[java.time.OffsetDateTime], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val offsetDateTimeArrayCodec: JsonCodec[Array[OffsetDateTime]] = make[Array[OffsetDateTime]](CodecMakerConfig())
[info]                                                                                                        ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:28:92: Generated JSON codec for type 'Array[java.time.OffsetTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[java.time.OffsetTime]] {
[info]       def nullValue: Array[java.time.OffsetTime] = v0;
[info]       def decode(in: JsonReader, default: Array[java.time.OffsetTime]): Array[java.time.OffsetTime] = d0(in, default);
[info]       def encode(x: Array[java.time.OffsetTime], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[java.time.OffsetTime] = new Array[java.time.OffsetTime](0);
[info]       private def d0(in: JsonReader, default: Array[java.time.OffsetTime]): Array[java.time.OffsetTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.OffsetTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[java.time.OffsetTime](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readOffsetTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[java.time.OffsetTime](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[java.time.OffsetTime], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val offsetTimeArrayCodec: JsonCodec[Array[OffsetTime]] = make[Array[OffsetTime]](CodecMakerConfig())
[info]                                                                                            ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:29:89: Generated JSON codec for type 'Array[java.time.LocalTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[java.time.LocalTime]] {
[info]       def nullValue: Array[java.time.LocalTime] = v0;
[info]       def decode(in: JsonReader, default: Array[java.time.LocalTime]): Array[java.time.LocalTime] = d0(in, default);
[info]       def encode(x: Array[java.time.LocalTime], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[java.time.LocalTime] = new Array[java.time.LocalTime](0);
[info]       private def d0(in: JsonReader, default: Array[java.time.LocalTime]): Array[java.time.LocalTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[java.time.LocalTime](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[java.time.LocalTime](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[java.time.LocalTime], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localTimeArrayCodec: JsonCodec[Array[LocalTime]] = make[Array[LocalTime]](CodecMakerConfig())
[info]                                                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:30:80: Generated JSON codec for type 'Array[java.time.Period]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[java.time.Period]] {
[info]       def nullValue: Array[java.time.Period] = v0;
[info]       def decode(in: JsonReader, default: Array[java.time.Period]): Array[java.time.Period] = d0(in, default);
[info]       def encode(x: Array[java.time.Period], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[java.time.Period] = new Array[java.time.Period](0);
[info]       private def d0(in: JsonReader, default: Array[java.time.Period]): Array[java.time.Period] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Period](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[java.time.Period](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readPeriod(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[java.time.Period](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[java.time.Period], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val periodArrayCodec: JsonCodec[Array[Period]] = make[Array[Period]](CodecMakerConfig())
[info]                                                                                ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:31:101: Generated JSON codec for type 'Array[java.time.ZonedDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[java.time.ZonedDateTime]] {
[info]       def nullValue: Array[java.time.ZonedDateTime] = v0;
[info]       def decode(in: JsonReader, default: Array[java.time.ZonedDateTime]): Array[java.time.ZonedDateTime] = d0(in, default);
[info]       def encode(x: Array[java.time.ZonedDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[java.time.ZonedDateTime] = new Array[java.time.ZonedDateTime](0);
[info]       private def d0(in: JsonReader, default: Array[java.time.ZonedDateTime]): Array[java.time.ZonedDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZonedDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[java.time.ZonedDateTime](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZonedDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[java.time.ZonedDateTime](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[java.time.ZonedDateTime], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zonedDateTimeArrayCodec: JsonCodec[Array[ZonedDateTime]] = make[Array[ZonedDateTime]](CodecMakerConfig())
[info]                                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:32:92: Generated JSON codec for type 'Array[java.time.ZoneOffset]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[java.time.ZoneOffset]] {
[info]       def nullValue: Array[java.time.ZoneOffset] = v0;
[info]       def decode(in: JsonReader, default: Array[java.time.ZoneOffset]): Array[java.time.ZoneOffset] = d0(in, default);
[info]       def encode(x: Array[java.time.ZoneOffset], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[java.time.ZoneOffset] = new Array[java.time.ZoneOffset](0);
[info]       private def d0(in: JsonReader, default: Array[java.time.ZoneOffset]): Array[java.time.ZoneOffset] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZoneOffset](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[java.time.ZoneOffset](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZoneOffset(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[java.time.ZoneOffset](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[java.time.ZoneOffset], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zoneOffsetArrayCodec: JsonCodec[Array[ZoneOffset]] = make[Array[ZoneOffset]](CodecMakerConfig())
[info]                                                                                            ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:33:80: Generated JSON codec for type 'Array[java.time.ZoneId]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[java.time.ZoneId]] {
[info]       def nullValue: Array[java.time.ZoneId] = v0;
[info]       def decode(in: JsonReader, default: Array[java.time.ZoneId]): Array[java.time.ZoneId] = d0(in, default);
[info]       def encode(x: Array[java.time.ZoneId], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[java.time.ZoneId] = new Array[java.time.ZoneId](0);
[info]       private def d0(in: JsonReader, default: Array[java.time.ZoneId]): Array[java.time.ZoneId] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZoneId](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[java.time.ZoneId](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZoneId(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[java.time.ZoneId](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[java.time.ZoneId], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zoneIdArrayCodec: JsonCodec[Array[ZoneId]] = make[Array[ZoneId]](CodecMakerConfig())
[info]                                                                                ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:34:78: Generated JSON codec for type 'Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]] {
[info]       def nullValue: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = v0;
[info]       def decode(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = d0(in, default);
[info]       def encode(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit](0);
[info]       private def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Suit): com.github.plokhotnyuk.jsoniter_scala.macros.Suit = {
[info]         val v = in.readString();
[info]         if (v.eq(null))
[info]           default
[info]         else
[info]           try {
[info]             Suit.valueOf(v)
[info]           } catch {
[info]             case ((_): IllegalArgumentException) => in.enumValueError(v)
[info]           }
[info]       };
[info]       private def d0(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, d1(in, null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Suit, out: JsonWriter): Unit = out.writeVal(if (x.ne(null))
[info]         x.name
[info]       else
[info]         null);
[info]       private def e0(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               e1(x(i), out);
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val javaEnumArrayCodec: JsonCodec[Array[Suit]] = make[Array[Suit]](CodecMakerConfig())
[info]                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:35:82: Generated JSON codec for type 'Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]] {
[info]       def nullValue: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = v0;
[info]       def decode(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = d0(in, default);
[info]       def encode(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value](0);
[info]       private def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value): com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value = if (in.isNextToken('\"'))
[info]         {
[info]           in.rollbackToken();
[info]           val len = in.readStringAsCharBuf();
[info]           SuitEnum.values.iterator.find(((e) => in.isCharBufEqualsTo(len, e.toString))).getOrElse(in.enumValueError(len))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '\"');
[info]       private def d0(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, d1(in, null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value, out: JsonWriter): Unit = out.writeVal(if (x.ne(null))
[info]         x.toString
[info]       else
[info]         null);
[info]       private def e0(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               e1(x(i), out);
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val enumArrayCodec: JsonCodec[Array[SuitEnum]] = make[Array[SuitEnum]](CodecMakerConfig())
[info]                                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:36:71: Generated JSON codec for type 'Array[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[Int]] {
[info]       def nullValue: Array[Int] = v0;
[info]       def decode(in: JsonReader, default: Array[Int]): Array[Int] = d0(in, default);
[info]       def encode(x: Array[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[Int] = new Array[Int](0);
[info]       private def d0(in: JsonReader, default: Array[Int]): Array[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Int](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Int](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readInt());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Int](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[Int], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val intArrayCodec: JsonCodec[Array[Int]] = make[Array[Int]](CodecMakerConfig())
[info]                                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:37:77: Generated JSON codec for type 'Array[Short]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[Short]] {
[info]       def nullValue: Array[Short] = v0;
[info]       def decode(in: JsonReader, default: Array[Short]): Array[Short] = d0(in, default);
[info]       def encode(x: Array[Short], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[Short] = new Array[Short](0);
[info]       private def d0(in: JsonReader, default: Array[Short]): Array[Short] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Short](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Short](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readShort());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Short](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[Short], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val shortArrayCodec: JsonCodec[Array[Short]] = make[Array[Short]](CodecMakerConfig())
[info]                                                                             ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:38:74: Generated JSON codec for type 'Array[Long]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[Long]] {
[info]       def nullValue: Array[Long] = v0;
[info]       def decode(in: JsonReader, default: Array[Long]): Array[Long] = d0(in, default);
[info]       def encode(x: Array[Long], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[Long] = new Array[Long](0);
[info]       private def d0(in: JsonReader, default: Array[Long]): Array[Long] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Long](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Long](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLong());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Long](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[Long], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val longArrayCodec: JsonCodec[Array[Long]] = make[Array[Long]](CodecMakerConfig())
[info]                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:39:74: Generated JSON codec for type 'Array[java.util.UUID]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[java.util.UUID]] {
[info]       def nullValue: Array[java.util.UUID] = v0;
[info]       def decode(in: JsonReader, default: Array[java.util.UUID]): Array[java.util.UUID] = d0(in, default);
[info]       def encode(x: Array[java.util.UUID], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[java.util.UUID] = new Array[java.util.UUID](0);
[info]       private def d0(in: JsonReader, default: Array[java.util.UUID]): Array[java.util.UUID] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.util.UUID](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[java.util.UUID](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readUUID(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[java.util.UUID](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[java.util.UUID], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val uuidArrayCodec: JsonCodec[Array[UUID]] = make[Array[UUID]](CodecMakerConfig())
[info]                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:40:70: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Iterables':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Iterables] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables): com.github.plokhotnyuk.jsoniter_scala.macros.Iterables = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.immutable.Vector[String]): scala.collection.immutable.Vector[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Vector.newBuilder[String];
[info]             do 
[info]               x.+=(JsoniterCodecs.this.stringCodec.decode(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d2(in: JsonReader, default: scala.collection.immutable.Set[Int]): scala.collection.immutable.Set[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Set.newBuilder[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d4(in: JsonReader, default: scala.collection.immutable.HashSet[Long]): scala.collection.immutable.HashSet[Long] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = HashSet.newBuilder[Long];
[info]             do 
[info]               x.+=(in.readLong())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d3(in: JsonReader, default: List[scala.collection.immutable.HashSet[Long]]): List[scala.collection.immutable.HashSet[Long]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = List.newBuilder[scala.collection.immutable.HashSet[Long]];
[info]             do 
[info]               x.+=(d4(in, HashSet.empty[Long]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables): com.github.plokhotnyuk.jsoniter_scala.macros.Iterables = if (in.isNextToken('{'))
[info]         {
[info]           var _l: scala.collection.immutable.Vector[String] = Vector.empty[String];
[info]           var _s: scala.collection.immutable.Set[Int] = Set.empty[Int];
[info]           var _ls: List[scala.collection.immutable.HashSet[Long]] = List.empty[scala.collection.immutable.HashSet[Long]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       _l = d1(in, _l)
[info]                     else
[info]                       in.skip()
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       _s = d2(in, _s)
[info]                     else
[info]                       in.skip()
[info]                     case 3463 => if (in.isCharBufEqualsTo(l, "ls"))
[info]                       _ls = d3(in, _ls)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Iterables(l = _l, s = _s, ls = _ls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: scala.collection.immutable.Vector[String], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             JsoniterCodecs.this.stringCodec.encode(x, out)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: scala.collection.immutable.Set[Int], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e4(x: scala.collection.immutable.HashSet[Long], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e3(x: List[scala.collection.immutable.HashSet[Long]], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             e4(x, out)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.l;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("l");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.s;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("s");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.ls;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("ls");
[info]                 e3(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val iterablesCodec: JsonCodec[Iterables] = make[Iterables](CodecMakerConfig())
[info]                                                                      ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:41:55: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Maps':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Maps] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Maps = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Maps): com.github.plokhotnyuk.jsoniter_scala.macros.Maps = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.Maps, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.immutable.HashMap[String,Double]): scala.collection.immutable.HashMap[String,Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = HashMap.empty[String, Double];
[info]             do 
[info]               x = x.updated(in.readKeyAsString(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d3(in: JsonReader, default: scala.collection.immutable.HashMap[Long,Double]): scala.collection.immutable.HashMap[Long,Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = HashMap.empty[Long, Double];
[info]             do 
[info]               x = x.updated(in.readKeyAsLong(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d2(in: JsonReader, default: scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]]): scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = Map.empty[Int, scala.collection.immutable.HashMap[Long,Double]];
[info]             do 
[info]               x = x.updated(in.readKeyAsInt(), d3(in, HashMap.empty[Long, Double]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Maps): com.github.plokhotnyuk.jsoniter_scala.macros.Maps = if (in.isNextToken('{'))
[info]         {
[info]           var _m: scala.collection.immutable.HashMap[String,Double] = HashMap.empty[String, Double];
[info]           var _mm: scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]] = Map.empty[Int, scala.collection.immutable.HashMap[Long,Double]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 109 => if (in.isCharBufEqualsTo(l, "m"))
[info]                       _m = d1(in, _m)
[info]                     else
[info]                       in.skip()
[info]                     case 3488 => if (in.isCharBufEqualsTo(l, "mm"))
[info]                       _mm = d2(in, _mm)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Maps(m = _m, mm = _mm)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: scala.collection.immutable.HashMap[String,Double], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             out.writeVal(kv._2)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e3(x: scala.collection.immutable.HashMap[Long,Double], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             out.writeVal(kv._2)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             e3(kv._2, out)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Maps, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.m;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("m");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.mm;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("mm");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mapsCodec: JsonCodec[Maps] = make[Maps](CodecMakerConfig())
[info]                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:42:90: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("s", "i");
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _i: Int = 0;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         _s = JsoniterCodecs.this.stringCodec.decode(in, _s);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         _i = in.readInt();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields(s = _s, i = _i)
[info]           else
[info]             in.requiredKeyError(r0, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("s");
[info]             JsoniterCodecs.this.stringCodec.encode(x.s, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("i");
[info]             out.writeVal(x.i)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val missingReqFieldCodec: JsonCodec[MissingReqFields] = make[MissingReqFields](CodecMakerConfig())
[info]                                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:43:91: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables): com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.mutable.ArrayBuffer[String]): scala.collection.mutable.ArrayBuffer[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               ArrayBuffer.empty[String];
[info]             do 
[info]               x.+=(JsoniterCodecs.this.stringCodec.decode(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d2(in: JsonReader, default: scala.collection.mutable.TreeSet[Int]): scala.collection.mutable.TreeSet[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               TreeSet.empty[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d4(in: JsonReader, default: scala.collection.mutable.Set[Long]): scala.collection.mutable.Set[Long] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               Set.empty[Long];
[info]             do 
[info]               x.+=(in.readLong())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d3(in: JsonReader, default: scala.collection.mutable.ResizableArray[scala.collection.mutable.Set[Long]]): scala.collection.mutable.ResizableArray[scala.collection.mutable.Set[Long]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = ResizableArray.newBuilder[scala.collection.mutable.Set[Long]];
[info]             do 
[info]               x.+=(d4(in, Set.empty[Long]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables): com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables = if (in.isNextToken('{'))
[info]         {
[info]           var _l: scala.collection.mutable.ArrayBuffer[String] = ArrayBuffer.empty[String];
[info]           var _s: scala.collection.mutable.TreeSet[Int] = TreeSet.empty[Int];
[info]           var _ls: scala.collection.mutable.ResizableArray[scala.collection.mutable.Set[Long]] = ResizableArray.empty[scala.collection.mutable.Set[Long]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       _l = d1(in, _l)
[info]                     else
[info]                       in.skip()
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       _s = d2(in, _s)
[info]                     else
[info]                       in.skip()
[info]                     case 3463 => if (in.isCharBufEqualsTo(l, "ls"))
[info]                       _ls = d3(in, _ls)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables(l = _l, s = _s, ls = _ls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: scala.collection.mutable.ArrayBuffer[String], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             JsoniterCodecs.this.stringCodec.encode(x, out)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: scala.collection.mutable.TreeSet[Int], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e4(x: scala.collection.mutable.Set[Long], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e3(x: scala.collection.mutable.ResizableArray[scala.collection.mutable.Set[Long]], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             e4(x, out)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.l;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("l");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.s;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("s");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.ls;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("ls");
[info]                 e3(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableIterablesCodec: JsonCodec[MutableIterables] = make[MutableIterables](CodecMakerConfig())
[info]                                                                                           ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:44:76: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps): com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.mutable.HashMap[String,Double]): scala.collection.mutable.HashMap[String,Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               HashMap.empty[String, Double];
[info]             do 
[info]               x.update(in.readKeyAsString(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d3(in: JsonReader, default: scala.collection.mutable.OpenHashMap[Long,Double]): scala.collection.mutable.OpenHashMap[Long,Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               OpenHashMap.empty[Long, Double];
[info]             do 
[info]               x.update(in.readKeyAsLong(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d2(in: JsonReader, default: scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]]): scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               Map.empty[Int, scala.collection.mutable.OpenHashMap[Long,Double]];
[info]             do 
[info]               x.update(in.readKeyAsInt(), d3(in, OpenHashMap.empty[Long, Double]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps): com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps = if (in.isNextToken('{'))
[info]         {
[info]           var _m: scala.collection.mutable.HashMap[String,Double] = HashMap.empty[String, Double];
[info]           var _mm: scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]] = Map.empty[Int, scala.collection.mutable.OpenHashMap[Long,Double]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 109 => if (in.isCharBufEqualsTo(l, "m"))
[info]                       _m = d1(in, _m)
[info]                     else
[info]                       in.skip()
[info]                     case 3488 => if (in.isCharBufEqualsTo(l, "mm"))
[info]                       _mm = d2(in, _mm)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps(m = _m, mm = _mm)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: scala.collection.mutable.HashMap[String,Double], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             out.writeVal(kv._2)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e3(x: scala.collection.mutable.OpenHashMap[Long,Double], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             out.writeVal(kv._2)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             e3(kv._2, out)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.m;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("m");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.mm;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("mm");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableMapsCodec: JsonCodec[MutableMaps] = make[MutableMaps](CodecMakerConfig())
[info]                                                                            ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:45:85: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps): com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.immutable.IntMap[Double]): scala.collection.immutable.IntMap[Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = IntMap.empty[Double];
[info]             do 
[info]               x = x.updated(in.readKeyAsInt(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d3(in: JsonReader, default: scala.collection.immutable.LongMap[Double]): scala.collection.immutable.LongMap[Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = LongMap.empty[Double];
[info]             do 
[info]               x = x.updated(in.readKeyAsLong(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d2(in: JsonReader, default: scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]]): scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               LongMap.empty[scala.collection.immutable.LongMap[Double]];
[info]             do 
[info]               x.update(in.readKeyAsLong(), d3(in, LongMap.empty[Double]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps): com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps = if (in.isNextToken('{'))
[info]         {
[info]           var _m: scala.collection.immutable.IntMap[Double] = IntMap.empty[Double];
[info]           var _mm: scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]] = LongMap.empty[scala.collection.immutable.LongMap[Double]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 109 => if (in.isCharBufEqualsTo(l, "m"))
[info]                       _m = d1(in, _m)
[info]                     else
[info]                       in.skip()
[info]                     case 3488 => if (in.isCharBufEqualsTo(l, "mm"))
[info]                       _mm = d2(in, _mm)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps(m = _m, mm = _mm)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: scala.collection.immutable.IntMap[Double], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             out.writeVal(kv._2)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e3(x: scala.collection.immutable.LongMap[Double], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             out.writeVal(kv._2)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             e3(kv._2, out)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.m;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("m");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.mm;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("mm");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val intAndLongMapsCodec: JsonCodec[IntAndLongMaps] = make[IntAndLongMaps](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:46:73: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Primitives':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Primitives] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives): com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("b", "s", "i", "l", "bl", "ch", "dbl", "f");
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives): com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = if (in.isNextToken('{'))
[info]         {
[info]           var _b: Byte = ((0): Byte);
[info]           var _s: Short = ((0): Short);
[info]           var _i: Int = 0;
[info]           var _l: Long = 0L;
[info]           var _bl: Boolean = false;
[info]           var _ch: Char = '\u0000';
[info]           var _dbl: Double = 0.0;
[info]           var _f: Float = 0.0F;
[info]           var req0 = 255;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 98 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         _b = in.readByte();
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         _s = in.readShort();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         _i = in.readInt();
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         _l = in.readLong();
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3146 => if (in.isCharBufEqualsTo(l, "bl"))
[info]                       {
[info]                         _bl = in.readBoolean();
[info]                         req0.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3173 => if (in.isCharBufEqualsTo(l, "ch"))
[info]                       {
[info]                         _ch = in.readChar();
[info]                         req0.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 99246 => if (in.isCharBufEqualsTo(l, "dbl"))
[info]                       {
[info]                         _dbl = in.readDouble();
[info]                         req0.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102 => if (in.isCharBufEqualsTo(l, "f"))
[info]                       {
[info]                         _f = in.readFloat();
[info]                         req0.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.Primitives(b = _b, s = _s, i = _i, l = _l, bl = _bl, ch = _ch, dbl = _dbl, f = _f)
[info]           else
[info]             in.requiredKeyError(r0, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("b");
[info]             out.writeVal(x.b)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("s");
[info]             out.writeVal(x.s)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("i");
[info]             out.writeVal(x.i)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("l");
[info]             out.writeVal(x.l)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("bl");
[info]             out.writeVal(x.bl)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("ch");
[info]             out.writeVal(x.ch)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("dbl");
[info]             out.writeVal(x.dbl)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("f");
[info]             out.writeVal(x.f)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val primitivesCodec: JsonCodec[Primitives] = make[Primitives](CodecMakerConfig())
[info]                                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:47:82: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("s", "l");
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _l: Long = 0L;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         _s = JsoniterCodecs.this.stringCodec.decode(in, _s);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         _l = in.readLong();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields(s = _s, l = _l)
[info]           else
[info]             in.requiredKeyError(r0, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("s");
[info]             JsoniterCodecs.this.stringCodec.encode(x.s, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("l");
[info]             out.writeVal(x.l)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val extractFieldsCodec: JsonCodec[ExtractFields] = make[ExtractFields](CodecMakerConfig())
[info]                                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:48:60: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase): com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("a");
[info]       private val r1: Array[String] = Array("b");
[info]       private val r2: Array[String] = Array("l", "r");
[info]       private def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.A): com.github.plokhotnyuk.jsoniter_scala.macros.A = if (in.isNextToken('{'))
[info]         {
[info]           var _a: Int = 0;
[info]           var req0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 97 => if (in.isCharBufEqualsTo(l, "a"))
[info]                       {
[info]                         _a = in.readInt();
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.A(a = _a)
[info]           else
[info]             in.requiredKeyError(r0, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.B): com.github.plokhotnyuk.jsoniter_scala.macros.B = if (in.isNextToken('{'))
[info]         {
[info]           var _b: String = null;
[info]           var req0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 98 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         _b = JsoniterCodecs.this.stringCodec.decode(in, _b);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.B(b = _b)
[info]           else
[info]             in.requiredKeyError(r1, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.C): com.github.plokhotnyuk.jsoniter_scala.macros.C = if (in.isNextToken('{'))
[info]         {
[info]           var _l: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]           var _r: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         _l = JsoniterCodecs.this.adtCodec.decode(in, _l);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 114 => if (in.isCharBufEqualsTo(l, "r"))
[info]                       {
[info]                         _r = JsoniterCodecs.this.adtCodec.decode(in, _r);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.C(l = _l, r = _r)
[info]           else
[info]             in.requiredKeyError(r2, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase): com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           {
[info]             in.scanToKey("type");
[info]             val l = in.readStringAsCharBuf();
[info]             (in.charBufToHashCode(l): @switch) match {
[info]               case 65 => if (in.isCharBufEqualsTo(l, "A"))
[info]                 {
[info]                   in.rollbackToMark();
[info]                   d1(in, null)
[info]                 }
[info]               else
[info]                 in.discriminatorValueError("type")
[info]               case 66 => if (in.isCharBufEqualsTo(l, "B"))
[info]                 {
[info]                   in.rollbackToMark();
[info]                   d2(in, null)
[info]                 }
[info]               else
[info]                 in.discriminatorValueError("type")
[info]               case 67 => if (in.isCharBufEqualsTo(l, "C"))
[info]                 {
[info]                   in.rollbackToMark();
[info]                   d3(in, null)
[info]                 }
[info]               else
[info]                 in.discriminatorValueError("type")
[info]               case _ => in.discriminatorValueError("type")
[info]             }
[info]           }
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.A, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("type");
[info]             out.writeNonEscapedAsciiVal("A")
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("a");
[info]             out.writeVal(x.a)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: com.github.plokhotnyuk.jsoniter_scala.macros.B, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("type");
[info]             out.writeNonEscapedAsciiVal("B")
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("b");
[info]             JsoniterCodecs.this.stringCodec.encode(x.b, out)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.C, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("type");
[info]             out.writeNonEscapedAsciiVal("C")
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("l");
[info]             JsoniterCodecs.this.adtCodec.encode(x.l, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("r");
[info]             JsoniterCodecs.this.adtCodec.encode(x.r, out)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.A)) => e1(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.B)) => e2(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.C)) => e3(x, out)
[info]         case null => out.writeNull()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val adtCodec: JsonCodec[AdtBase] = make[AdtBase](CodecMakerConfig())
[info]                                                            ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:49:61: Generated JSON codec for type 'String':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[String] {
[info]       def nullValue: String = null;
[info]       def decode(in: JsonReader, default: String): String = in.readString(default);
[info]       def encode(x: String, out: JsonWriter): Unit = out.writeVal(x)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val stringCodec: JsonCodec[String] = make[String](CodecMakerConfig())
[info]                                                             ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:50:84: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("status");
[info]       private val r1: Array[String] = Array("distance", "duration", "status");
[info]       private val r2: Array[String] = Array("text", "value");
[info]       private def d1(in: JsonReader, default: Seq[String]): Seq[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[String];
[info]             do 
[info]               x.+=(JsoniterCodecs.this.stringCodec.decode(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d6(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Value): com.github.plokhotnyuk.jsoniter_scala.macros.Value = if (in.isNextToken('{'))
[info]         {
[info]           var _text: String = null;
[info]           var _value: Int = 0;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         _text = JsoniterCodecs.this.stringCodec.decode(in, _text);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 111972721 => if (in.isCharBufEqualsTo(l, "value"))
[info]                       {
[info]                         _value = in.readInt();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.Value(text = _text, value = _value)
[info]           else
[info]             in.requiredKeyError(r2, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Elements): com.github.plokhotnyuk.jsoniter_scala.macros.Elements = if (in.isNextToken('{'))
[info]         {
[info]           var _distance: com.github.plokhotnyuk.jsoniter_scala.macros.Value = null;
[info]           var _duration: com.github.plokhotnyuk.jsoniter_scala.macros.Value = null;
[info]           var _status: String = null;
[info]           var req0 = 7;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 288459765 => if (in.isCharBufEqualsTo(l, "distance"))
[info]                       {
[info]                         _distance = d6(in, _distance);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1992012396 => if (in.isCharBufEqualsTo(l, "duration"))
[info]                       {
[info]                         _duration = d6(in, _duration);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -892481550 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         _status = JsoniterCodecs.this.stringCodec.decode(in, _status);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.Elements(distance = _distance, duration = _duration, status = _status)
[info]           else
[info]             in.requiredKeyError(r1, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d4(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Elements];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Rows): com.github.plokhotnyuk.jsoniter_scala.macros.Rows = if (in.isNextToken('{'))
[info]         {
[info]           var _elements: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Elements];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -8339209 => if (in.isCharBufEqualsTo(l, "elements"))
[info]                       _elements = d4(in, _elements)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Rows(elements = _elements)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d2(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Rows];
[info]             do 
[info]               x.+=(d3(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = if (in.isNextToken('{'))
[info]         {
[info]           var _destination_addresses: Seq[String] = Seq.empty[String];
[info]           var _origin_addresses: Seq[String] = Seq.empty[String];
[info]           var _rows: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Rows];
[info]           var _status: String = null;
[info]           var req0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 715423921 => if (in.isCharBufEqualsTo(l, "destination_addresses"))
[info]                       _destination_addresses = d1(in, _destination_addresses)
[info]                     else
[info]                       in.skip()
[info]                     case 1780936137 => if (in.isCharBufEqualsTo(l, "origin_addresses"))
[info]                       _origin_addresses = d1(in, _origin_addresses)
[info]                     else
[info]                       in.skip()
[info]                     case 3506649 => if (in.isCharBufEqualsTo(l, "rows"))
[info]                       _rows = d2(in, _rows)
[info]                     else
[info]                       in.skip()
[info]                     case -892481550 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         _status = JsoniterCodecs.this.stringCodec.decode(in, _status);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix(destination_addresses = _destination_addresses, origin_addresses = _origin_addresses, rows = _rows, status = _status)
[info]           else
[info]             in.requiredKeyError(r0, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: Seq[String], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             JsoniterCodecs.this.stringCodec.encode(x, out)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e6(x: com.github.plokhotnyuk.jsoniter_scala.macros.Value, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("text");
[info]             JsoniterCodecs.this.stringCodec.encode(x.text, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("value");
[info]             out.writeVal(x.value)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e5(x: com.github.plokhotnyuk.jsoniter_scala.macros.Elements, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("distance");
[info]             e6(x.distance, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("duration");
[info]             e6(x.duration, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("status");
[info]             JsoniterCodecs.this.stringCodec.encode(x.status, out)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e4(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             e5(x, out)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.Rows, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.elements;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("elements");
[info]                 e4(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             e3(x, out)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.destination_addresses;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("destination_addresses");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.origin_addresses;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("origin_addresses");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.rows;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("rows");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("status");
[info]             JsoniterCodecs.this.stringCodec.encode(x.status, out)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val googleMapsAPICodec: JsonCodec[DistanceMatrix] = make[DistanceMatrix](CodecMakerConfig())
[info]                                                                                    ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:51:73: Generated JSON codec for type 'Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]] {
[info]       def nullValue: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet];
[info]       def decode(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = d0(in, default);
[info]       def encode(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet], out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("created_at", "id", "id_str", "text", "truncated", "entities", "source", "user", "retweeted_status", "is_quote_status", "retweet_count", "favorite_count", "favorited", "retweeted", "possibly_sensitive", "lang");
[info]       private val r1: Array[String] = Array("screen_name", "name", "id", "id_str");
[info]       private val r2: Array[String] = Array("url", "expanded_url", "display_url");
[info]       private val r3: Array[String] = Array("id", "id_str", "name", "screen_name", "location", "description", "url", "entities", "protected", "followers_count", "friends_count", "listed_count", "created_at", "favourites_count", "utc_offset", "time_zone", "geo_enabled", "verified", "statuses_count", "lang", "contributors_enabled", "is_translator", "is_translation_enabled", "profile_background_color", "profile_background_image_url", "profile_background_image_url_https", "profile_background_tile", "profile_image_url", "profile_image_url_https", "profile_banner_url", "profile_link_color", "profile_sidebar_border_color", "profile_sidebar_fill_color", "profile_text_color", "profile_use_background_image", "has_extended_profile", "default_profile", "default_profile_image", "following", "follow_request_sent", "notifications", "translator_type");
[info]       private val r4: Array[String] = Array("url", "description");
[info]       private val r5: Array[String] = Array("created_at", "id", "id_str", "text", "truncated", "entities", "source", "user", "is_quote_status", "retweet_count", "favorite_count", "favorited", "retweeted", "possibly_sensitive", "lang");
[info]       private def d3(in: JsonReader, default: Seq[String]): Seq[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[String];
[info]             do 
[info]               x.+=(JsoniterCodecs.this.stringCodec.decode(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d6(in: JsonReader, default: Seq[Int]): Seq[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions): com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions = if (in.isNextToken('{'))
[info]         {
[info]           var _screen_name: String = null;
[info]           var _name: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _indices: Seq[Int] = Seq.empty[Int];
[info]           var req0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -43264386 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         _screen_name = JsoniterCodecs.this.stringCodec.decode(in, _screen_name);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3373707 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         _name = JsoniterCodecs.this.stringCodec.decode(in, _name);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         _id = in.readLong();
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         _id_str = JsoniterCodecs.this.stringCodec.decode(in, _id_str);
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1943391143 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       _indices = d6(in, _indices)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions(screen_name = _screen_name, name = _name, id = _id, id_str = _id_str, indices = _indices)
[info]           else
[info]             in.requiredKeyError(r1, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d4(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d8(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Urls): com.github.plokhotnyuk.jsoniter_scala.macros.Urls = if (in.isNextToken('{'))
[info]         {
[info]           var _url: String = null;
[info]           var _expanded_url: String = null;
[info]           var _display_url: String = null;
[info]           var _indices: Seq[Int] = Seq.empty[Int];
[info]           var req0 = 7;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         _url = JsoniterCodecs.this.stringCodec.decode(in, _url);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -518939415 => if (in.isCharBufEqualsTo(l, "expanded_url"))
[info]                       {
[info]                         _expanded_url = JsoniterCodecs.this.stringCodec.decode(in, _expanded_url);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1714674802 => if (in.isCharBufEqualsTo(l, "display_url"))
[info]                       {
[info]                         _display_url = JsoniterCodecs.this.stringCodec.decode(in, _display_url);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1943391143 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       _indices = d6(in, _indices)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.Urls(url = _url, expanded_url = _expanded_url, display_url = _display_url, indices = _indices)
[info]           else
[info]             in.requiredKeyError(r2, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d7(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]             do 
[info]               x.+=(d8(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Entities): com.github.plokhotnyuk.jsoniter_scala.macros.Entities = if (in.isNextToken('{'))
[info]         {
[info]           var _hashtags: Seq[String] = Seq.empty[String];
[info]           var _symbols: Seq[String] = Seq.empty[String];
[info]           var _user_mentions: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions];
[info]           var _urls: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 149143079 => if (in.isCharBufEqualsTo(l, "hashtags"))
[info]                       _hashtags = d3(in, _hashtags)
[info]                     else
[info]                       in.skip()
[info]                     case -1743438373 => if (in.isCharBufEqualsTo(l, "symbols"))
[info]                       _symbols = d3(in, _symbols)
[info]                     else
[info]                       in.skip()
[info]                     case -553518659 => if (in.isCharBufEqualsTo(l, "user_mentions"))
[info]                       _user_mentions = d4(in, _user_mentions)
[info]                     else
[info]                       in.skip()
[info]                     case 3598564 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       _urls = d7(in, _urls)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Entities(hashtags = _hashtags, symbols = _symbols, user_mentions = _user_mentions, urls = _urls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d11(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Url): com.github.plokhotnyuk.jsoniter_scala.macros.Url = if (in.isNextToken('{'))
[info]         {
[info]           var _urls: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3598564 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       _urls = d7(in, _urls)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Url(urls = _urls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d10(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities): com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities = if (in.isNextToken('{'))
[info]         {
[info]           var _url: com.github.plokhotnyuk.jsoniter_scala.macros.Url = null;
[info]           var _description: com.github.plokhotnyuk.jsoniter_scala.macros.Url = null;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         _url = d11(in, _url);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1724546052 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         _description = d11(in, _description);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities(url = _url, description = _description)
[info]           else
[info]             in.requiredKeyError(r4, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d9(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.User): com.github.plokhotnyuk.jsoniter_scala.macros.User = if (in.isNextToken('{'))
[info]         {
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _name: String = null;
[info]           var _screen_name: String = null;
[info]           var _location: String = null;
[info]           var _description: String = null;
[info]           var _url: String = null;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities = null;
[info]           var _protected: Boolean = false;
[info]           var _followers_count: Int = 0;
[info]           var _friends_count: Int = 0;
[info]           var _listed_count: Int = 0;
[info]           var _created_at: String = null;
[info]           var _favourites_count: Int = 0;
[info]           var _utc_offset: Int = 0;
[info]           var _time_zone: String = null;
[info]           var _geo_enabled: Boolean = false;
[info]           var _verified: Boolean = false;
[info]           var _statuses_count: Int = 0;
[info]           var _lang: String = null;
[info]           var _contributors_enabled: Boolean = false;
[info]           var _is_translator: Boolean = false;
[info]           var _is_translation_enabled: Boolean = false;
[info]           var _profile_background_color: String = null;
[info]           var _profile_background_image_url: String = null;
[info]           var _profile_background_image_url_https: String = null;
[info]           var _profile_background_tile: Boolean = false;
[info]           var _profile_image_url: String = null;
[info]           var _profile_image_url_https: String = null;
[info]           var _profile_banner_url: String = null;
[info]           var _profile_link_color: String = null;
[info]           var _profile_sidebar_border_color: String = null;
[info]           var _profile_sidebar_fill_color: String = null;
[info]           var _profile_text_color: String = null;
[info]           var _profile_use_background_image: Boolean = false;
[info]           var _has_extended_profile: Boolean = false;
[info]           var _default_profile: Boolean = false;
[info]           var _default_profile_image: Boolean = false;
[info]           var _following: Boolean = false;
[info]           var _follow_request_sent: Boolean = false;
[info]           var _notifications: Boolean = false;
[info]           var _translator_type: String = null;
[info]           var req0 = -1;
[info]           var req1 = 1023;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         _id = in.readLong();
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         _id_str = JsoniterCodecs.this.stringCodec.decode(in, _id_str);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3373707 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         _name = JsoniterCodecs.this.stringCodec.decode(in, _name);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -43264386 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         _screen_name = JsoniterCodecs.this.stringCodec.decode(in, _screen_name);
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1901043637 => if (in.isCharBufEqualsTo(l, "location"))
[info]                       {
[info]                         _location = JsoniterCodecs.this.stringCodec.decode(in, _location);
[info]                         req0.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1724546052 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         _description = JsoniterCodecs.this.stringCodec.decode(in, _description);
[info]                         req0.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         _url = JsoniterCodecs.this.stringCodec.decode(in, _url);
[info]                         req0.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         _entities = d10(in, _entities);
[info]                         req0.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -608539730 => if (in.isCharBufEqualsTo(l, "protected"))
[info]                       {
[info]                         _protected = in.readBoolean();
[info]                         req0.&=(-257)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -460163995 => if (in.isCharBufEqualsTo(l, "followers_count"))
[info]                       {
[info]                         _followers_count = in.readInt();
[info]                         req0.&=(-513)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1666926107 => if (in.isCharBufEqualsTo(l, "friends_count"))
[info]                       {
[info]                         _friends_count = in.readInt();
[info]                         req0.&=(-1025)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1974943731 => if (in.isCharBufEqualsTo(l, "listed_count"))
[info]                       {
[info]                         _listed_count = in.readInt();
[info]                         req0.&=(-2049)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         _created_at = JsoniterCodecs.this.stringCodec.decode(in, _created_at);
[info]                         req0.&=(-4097)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 226316666 => if (in.isCharBufEqualsTo(l, "favourites_count"))
[info]                       {
[info]                         _favourites_count = in.readInt();
[info]                         req0.&=(-8193)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1699658638 => if (in.isCharBufEqualsTo(l, "utc_offset"))
[info]                       {
[info]                         _utc_offset = in.readInt();
[info]                         req0.&=(-16385)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 36848094 => if (in.isCharBufEqualsTo(l, "time_zone"))
[info]                       {
[info]                         _time_zone = JsoniterCodecs.this.stringCodec.decode(in, _time_zone);
[info]                         req0.&=(-32769)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1085743021 => if (in.isCharBufEqualsTo(l, "geo_enabled"))
[info]                       {
[info]                         _geo_enabled = in.readBoolean();
[info]                         req0.&=(-65537)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1994383672 => if (in.isCharBufEqualsTo(l, "verified"))
[info]                       {
[info]                         _verified = in.readBoolean();
[info]                         req0.&=(-131073)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1824078800 => if (in.isCharBufEqualsTo(l, "statuses_count"))
[info]                       {
[info]                         _statuses_count = in.readInt();
[info]                         req0.&=(-262145)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         _lang = JsoniterCodecs.this.stringCodec.decode(in, _lang);
[info]                         req0.&=(-524289)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 647263482 => if (in.isCharBufEqualsTo(l, "contributors_enabled"))
[info]                       {
[info]                         _contributors_enabled = in.readBoolean();
[info]                         req0.&=(-1048577)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 583435343 => if (in.isCharBufEqualsTo(l, "is_translator"))
[info]                       {
[info]                         _is_translator = in.readBoolean();
[info]                         req0.&=(-2097153)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1690715422 => if (in.isCharBufEqualsTo(l, "is_translation_enabled"))
[info]                       {
[info]                         _is_translation_enabled = in.readBoolean();
[info]                         req0.&=(-4194305)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1592986856 => if (in.isCharBufEqualsTo(l, "profile_background_color"))
[info]                       {
[info]                         _profile_background_color = JsoniterCodecs.this.stringCodec.decode(in, _profile_background_color);
[info]                         req0.&=(-8388609)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1189803120 => if (in.isCharBufEqualsTo(l, "profile_background_image_url"))
[info]                       {
[info]                         _profile_background_image_url = JsoniterCodecs.this.stringCodec.decode(in, _profile_background_image_url);
[info]                         req0.&=(-16777217)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 594447228 => if (in.isCharBufEqualsTo(l, "profile_background_image_url_https"))
[info]                       {
[info]                         _profile_background_image_url_https = JsoniterCodecs.this.stringCodec.decode(in, _profile_background_image_url_https);
[info]                         req0.&=(-33554433)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1021718665 => if (in.isCharBufEqualsTo(l, "profile_background_tile"))
[info]                       {
[info]                         _profile_background_tile = in.readBoolean();
[info]                         req0.&=(-67108865)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -174080651 => if (in.isCharBufEqualsTo(l, "profile_image_url"))
[info]                       {
[info]                         _profile_image_url = JsoniterCodecs.this.stringCodec.decode(in, _profile_image_url);
[info]                         req0.&=(-134217729)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -782008927 => if (in.isCharBufEqualsTo(l, "profile_image_url_https"))
[info]                       {
[info]                         _profile_image_url_https = JsoniterCodecs.this.stringCodec.decode(in, _profile_image_url_https);
[info]                         req0.&=(-268435457)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -690137550 => if (in.isCharBufEqualsTo(l, "profile_banner_url"))
[info]                       {
[info]                         _profile_banner_url = JsoniterCodecs.this.stringCodec.decode(in, _profile_banner_url);
[info]                         req0.&=(-536870913)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1512257332 => if (in.isCharBufEqualsTo(l, "profile_link_color"))
[info]                       {
[info]                         _profile_link_color = JsoniterCodecs.this.stringCodec.decode(in, _profile_link_color);
[info]                         req0.&=(-1073741825)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1412739479 => if (in.isCharBufEqualsTo(l, "profile_sidebar_border_color"))
[info]                       {
[info]                         _profile_sidebar_border_color = JsoniterCodecs.this.stringCodec.decode(in, _profile_sidebar_border_color);
[info]                         req0.&=(2147483647)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 486184128 => if (in.isCharBufEqualsTo(l, "profile_sidebar_fill_color"))
[info]                       {
[info]                         _profile_sidebar_fill_color = JsoniterCodecs.this.stringCodec.decode(in, _profile_sidebar_fill_color);
[info]                         req1.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1774134745 => if (in.isCharBufEqualsTo(l, "profile_text_color"))
[info]                       {
[info]                         _profile_text_color = JsoniterCodecs.this.stringCodec.decode(in, _profile_text_color);
[info]                         req1.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -101767272 => if (in.isCharBufEqualsTo(l, "profile_use_background_image"))
[info]                       {
[info]                         _profile_use_background_image = in.readBoolean();
[info]                         req1.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 284519336 => if (in.isCharBufEqualsTo(l, "has_extended_profile"))
[info]                       {
[info]                         _has_extended_profile = in.readBoolean();
[info]                         req1.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -312724053 => if (in.isCharBufEqualsTo(l, "default_profile"))
[info]                       {
[info]                         _default_profile = in.readBoolean();
[info]                         req1.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 545330631 => if (in.isCharBufEqualsTo(l, "default_profile_image"))
[info]                       {
[info]                         _default_profile_image = in.readBoolean();
[info]                         req1.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 765915793 => if (in.isCharBufEqualsTo(l, "following"))
[info]                       {
[info]                         _following = in.readBoolean();
[info]                         req1.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 585125142 => if (in.isCharBufEqualsTo(l, "follow_request_sent"))
[info]                       {
[info]                         _follow_request_sent = in.readBoolean();
[info]                         req1.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1272354024 => if (in.isCharBufEqualsTo(l, "notifications"))
[info]                       {
[info]                         _notifications = in.readBoolean();
[info]                         req1.&=(-257)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -475640257 => if (in.isCharBufEqualsTo(l, "translator_type"))
[info]                       {
[info]                         _translator_type = JsoniterCodecs.this.stringCodec.decode(in, _translator_type);
[info]                         req1.&=(-513)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0).&&(req1.==(0)))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.User(id = _id, id_str = _id_str, name = _name, screen_name = _screen_name, location = _location, description = _description, url = _url, entities = _entities, `protected` = _protected, followers_count = _followers_count, friends_count = _friends_count, listed_count = _listed_count, created_at = _created_at, favourites_count = _favourites_count, utc_offset = _utc_offset, time_zone = _time_zone, geo_enabled = _geo_enabled, verified = _verified, statuses_count = _statuses_count, lang = _lang, contributors_enabled = _contributors_enabled, is_translator = _is_translator, is_translation_enabled = _is_translation_enabled, profile_background_color = _profile_background_color, profile_background_image_url = _profile_background_image_url, profile_background_image_url_https = _profile_background_image_url_https, profile_background_tile = _profile_background_tile, profile_image_url = _profile_image_url, profile_image_url_https = _profile_image_url_https, profile_banner_url = _profile_banner_url, profile_link_color = _profile_link_color, profile_sidebar_border_color = _profile_sidebar_border_color, profile_sidebar_fill_color = _profile_sidebar_fill_color, profile_text_color = _profile_text_color, profile_use_background_image = _profile_use_background_image, has_extended_profile = _has_extended_profile, default_profile = _default_profile, default_profile_image = _default_profile_image, following = _following, follow_request_sent = _follow_request_sent, notifications = _notifications, translator_type = _translator_type)
[info]           else
[info]             in.requiredKeyError(r3, Array(req0, req1))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d12(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus): com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus = if (in.isNextToken('{'))
[info]         {
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.macros.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           var req0 = 32767;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         _created_at = JsoniterCodecs.this.stringCodec.decode(in, _created_at);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         _id = in.readLong();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         _id_str = JsoniterCodecs.this.stringCodec.decode(in, _id_str);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         _text = JsoniterCodecs.this.stringCodec.decode(in, _text);
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1607950270 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         _truncated = in.readBoolean();
[info]                         req0.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         _entities = d2(in, _entities);
[info]                         req0.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -896505829 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         _source = JsoniterCodecs.this.stringCodec.decode(in, _source);
[info]                         req0.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1960224851 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       _in_reply_to_status_id = Option(JsoniterCodecs.this.stringCodec.decode(in, null))
[info]                     else
[info]                       in.skip()
[info]                     case 1577137221 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       _in_reply_to_status_id_str = Option(JsoniterCodecs.this.stringCodec.decode(in, null))
[info]                     else
[info]                       in.skip()
[info]                     case 2047002778 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       _in_reply_to_user_id = Option(JsoniterCodecs.this.stringCodec.decode(in, null))
[info]                     else
[info]                       in.skip()
[info]                     case -1274685172 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       _in_reply_to_user_id_str = Option(JsoniterCodecs.this.stringCodec.decode(in, null))
[info]                     else
[info]                       in.skip()
[info]                     case -866290807 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       _in_reply_to_screen_name = Option(JsoniterCodecs.this.stringCodec.decode(in, null))
[info]                     else
[info]                       in.skip()
[info]                     case 3599307 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         _user = d9(in, _user);
[info]                         req0.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102225 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       _geo = Option(JsoniterCodecs.this.stringCodec.decode(in, null))
[info]                     else
[info]                       in.skip()
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       _coordinates = Option(JsoniterCodecs.this.stringCodec.decode(in, null))
[info]                     else
[info]                       in.skip()
[info]                     case 106748167 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       _place = Option(JsoniterCodecs.this.stringCodec.decode(in, null))
[info]                     else
[info]                       in.skip()
[info]                     case 1375976184 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       _contributors = Option(JsoniterCodecs.this.stringCodec.decode(in, null))
[info]                     else
[info]                       in.skip()
[info]                     case -920773622 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         _is_quote_status = in.readBoolean();
[info]                         req0.&=(-257)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1612760494 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         _retweet_count = in.readInt();
[info]                         req0.&=(-513)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1435051860 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         _favorite_count = in.readInt();
[info]                         req0.&=(-1025)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1785238968 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         _favorited = in.readBoolean();
[info]                         req0.&=(-2049)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -881681091 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         _retweeted = in.readBoolean();
[info]                         req0.&=(-4097)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -4566948 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         _possibly_sensitive = in.readBoolean();
[info]                         req0.&=(-8193)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         _lang = JsoniterCodecs.this.stringCodec.decode(in, _lang);
[info]                         req0.&=(-16385)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]           else
[info]             in.requiredKeyError(r5, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Tweet): com.github.plokhotnyuk.jsoniter_scala.macros.Tweet = if (in.isNextToken('{'))
[info]         {
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.macros.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _retweeted_status: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus = null;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           var req0 = 65535;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         _created_at = JsoniterCodecs.this.stringCodec.decode(in, _created_at);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         _id = in.readLong();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         _id_str = JsoniterCodecs.this.stringCodec.decode(in, _id_str);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         _text = JsoniterCodecs.this.stringCodec.decode(in, _text);
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1607950270 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         _truncated = in.readBoolean();
[info]                         req0.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         _entities = d2(in, _entities);
[info]                         req0.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -896505829 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         _source = JsoniterCodecs.this.stringCodec.decode(in, _source);
[info]                         req0.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1960224851 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       _in_reply_to_status_id = Option(JsoniterCodecs.this.stringCodec.decode(in, null))
[info]                     else
[info]                       in.skip()
[info]                     case 1577137221 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       _in_reply_to_status_id_str = Option(JsoniterCodecs.this.stringCodec.decode(in, null))
[info]                     else
[info]                       in.skip()
[info]                     case 2047002778 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       _in_reply_to_user_id = Option(JsoniterCodecs.this.stringCodec.decode(in, null))
[info]                     else
[info]                       in.skip()
[info]                     case -1274685172 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       _in_reply_to_user_id_str = Option(JsoniterCodecs.this.stringCodec.decode(in, null))
[info]                     else
[info]                       in.skip()
[info]                     case -866290807 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       _in_reply_to_screen_name = Option(JsoniterCodecs.this.stringCodec.decode(in, null))
[info]                     else
[info]                       in.skip()
[info]                     case 3599307 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         _user = d9(in, _user);
[info]                         req0.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102225 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       _geo = Option(JsoniterCodecs.this.stringCodec.decode(in, null))
[info]                     else
[info]                       in.skip()
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       _coordinates = Option(JsoniterCodecs.this.stringCodec.decode(in, null))
[info]                     else
[info]                       in.skip()
[info]                     case 106748167 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       _place = Option(JsoniterCodecs.this.stringCodec.decode(in, null))
[info]                     else
[info]                       in.skip()
[info]                     case 1375976184 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       _contributors = Option(JsoniterCodecs.this.stringCodec.decode(in, null))
[info]                     else
[info]                       in.skip()
[info]                     case 364396852 => if (in.isCharBufEqualsTo(l, "retweeted_status"))
[info]                       {
[info]                         _retweeted_status = d12(in, _retweeted_status);
[info]                         req0.&=(-257)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -920773622 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         _is_quote_status = in.readBoolean();
[info]                         req0.&=(-513)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1612760494 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         _retweet_count = in.readInt();
[info]                         req0.&=(-1025)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1435051860 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         _favorite_count = in.readInt();
[info]                         req0.&=(-2049)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1785238968 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         _favorited = in.readBoolean();
[info]                         req0.&=(-4097)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -881681091 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         _retweeted = in.readBoolean();
[info]                         req0.&=(-8193)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -4566948 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         _possibly_sensitive = in.readBoolean();
[info]                         req0.&=(-16385)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         _lang = JsoniterCodecs.this.stringCodec.decode(in, _lang);
[info]                         req0.&=(-32769)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.Tweet(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, retweeted_status = _retweeted_status, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]           else
[info]             in.requiredKeyError(r0, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d0(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet];
[info]             do 
[info]               x.+=(d1(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e3(x: Seq[String], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             JsoniterCodecs.this.stringCodec.encode(x, out)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e6(x: Seq[Int], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e5(x: com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("screen_name");
[info]             JsoniterCodecs.this.stringCodec.encode(x.screen_name, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("name");
[info]             JsoniterCodecs.this.stringCodec.encode(x.name, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("id");
[info]             out.writeVal(x.id)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("id_str");
[info]             JsoniterCodecs.this.stringCodec.encode(x.id_str, out)
[info]           };
[info]           {
[info]             val v = x.indices;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("indices");
[info]                 e6(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e4(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             e5(x, out)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e8(x: com.github.plokhotnyuk.jsoniter_scala.macros.Urls, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("url");
[info]             JsoniterCodecs.this.stringCodec.encode(x.url, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("expanded_url");
[info]             JsoniterCodecs.this.stringCodec.encode(x.expanded_url, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("display_url");
[info]             JsoniterCodecs.this.stringCodec.encode(x.display_url, out)
[info]           };
[info]           {
[info]             val v = x.indices;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("indices");
[info]                 e6(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e7(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             e8(x, out)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: com.github.plokhotnyuk.jsoniter_scala.macros.Entities, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.hashtags;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("hashtags");
[info]                 e3(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.symbols;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("symbols");
[info]                 e3(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.user_mentions;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("user_mentions");
[info]                 e4(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.urls;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("urls");
[info]                 e7(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e11(x: com.github.plokhotnyuk.jsoniter_scala.macros.Url, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.urls;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("urls");
[info]                 e7(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e10(x: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("url");
[info]             e11(x.url, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("description");
[info]             e11(x.description, out)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e9(x: com.github.plokhotnyuk.jsoniter_scala.macros.User, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("id");
[info]             out.writeVal(x.id)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("id_str");
[info]             JsoniterCodecs.this.stringCodec.encode(x.id_str, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("name");
[info]             JsoniterCodecs.this.stringCodec.encode(x.name, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("screen_name");
[info]             JsoniterCodecs.this.stringCodec.encode(x.screen_name, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("location");
[info]             JsoniterCodecs.this.stringCodec.encode(x.location, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("description");
[info]             JsoniterCodecs.this.stringCodec.encode(x.description, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("url");
[info]             JsoniterCodecs.this.stringCodec.encode(x.url, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("entities");
[info]             e10(x.entities, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("protected");
[info]             out.writeVal(x.`protected`)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("followers_count");
[info]             out.writeVal(x.followers_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("friends_count");
[info]             out.writeVal(x.friends_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("listed_count");
[info]             out.writeVal(x.listed_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("created_at");
[info]             JsoniterCodecs.this.stringCodec.encode(x.created_at, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("favourites_count");
[info]             out.writeVal(x.favourites_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("utc_offset");
[info]             out.writeVal(x.utc_offset)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("time_zone");
[info]             JsoniterCodecs.this.stringCodec.encode(x.time_zone, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("geo_enabled");
[info]             out.writeVal(x.geo_enabled)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("verified");
[info]             out.writeVal(x.verified)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("statuses_count");
[info]             out.writeVal(x.statuses_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("lang");
[info]             JsoniterCodecs.this.stringCodec.encode(x.lang, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("contributors_enabled");
[info]             out.writeVal(x.contributors_enabled)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("is_translator");
[info]             out.writeVal(x.is_translator)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("is_translation_enabled");
[info]             out.writeVal(x.is_translation_enabled)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_background_color");
[info]             JsoniterCodecs.this.stringCodec.encode(x.profile_background_color, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_background_image_url");
[info]             JsoniterCodecs.this.stringCodec.encode(x.profile_background_image_url, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_background_image_url_https");
[info]             JsoniterCodecs.this.stringCodec.encode(x.profile_background_image_url_https, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_background_tile");
[info]             out.writeVal(x.profile_background_tile)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_image_url");
[info]             JsoniterCodecs.this.stringCodec.encode(x.profile_image_url, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_image_url_https");
[info]             JsoniterCodecs.this.stringCodec.encode(x.profile_image_url_https, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_banner_url");
[info]             JsoniterCodecs.this.stringCodec.encode(x.profile_banner_url, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_link_color");
[info]             JsoniterCodecs.this.stringCodec.encode(x.profile_link_color, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_sidebar_border_color");
[info]             JsoniterCodecs.this.stringCodec.encode(x.profile_sidebar_border_color, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_sidebar_fill_color");
[info]             JsoniterCodecs.this.stringCodec.encode(x.profile_sidebar_fill_color, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_text_color");
[info]             JsoniterCodecs.this.stringCodec.encode(x.profile_text_color, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_use_background_image");
[info]             out.writeVal(x.profile_use_background_image)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("has_extended_profile");
[info]             out.writeVal(x.has_extended_profile)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("default_profile");
[info]             out.writeVal(x.default_profile)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("default_profile_image");
[info]             out.writeVal(x.default_profile_image)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("following");
[info]             out.writeVal(x.following)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("follow_request_sent");
[info]             out.writeVal(x.follow_request_sent)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("notifications");
[info]             out.writeVal(x.notifications)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("translator_type");
[info]             JsoniterCodecs.this.stringCodec.encode(x.translator_type, out)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e12(x: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("created_at");
[info]             JsoniterCodecs.this.stringCodec.encode(x.created_at, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("id");
[info]             out.writeVal(x.id)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("id_str");
[info]             JsoniterCodecs.this.stringCodec.encode(x.id_str, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("text");
[info]             JsoniterCodecs.this.stringCodec.encode(x.text, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("truncated");
[info]             out.writeVal(x.truncated)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("entities");
[info]             e2(x.entities, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("source");
[info]             JsoniterCodecs.this.stringCodec.encode(x.source, out)
[info]           };
[info]           {
[info]             val v = x.in_reply_to_status_id;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_status_id");
[info]                 JsoniterCodecs.this.stringCodec.encode(v.get, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_status_id_str;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_status_id_str");
[info]                 JsoniterCodecs.this.stringCodec.encode(v.get, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_user_id;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_user_id");
[info]                 JsoniterCodecs.this.stringCodec.encode(v.get, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_user_id_str;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_user_id_str");
[info]                 JsoniterCodecs.this.stringCodec.encode(v.get, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_screen_name;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_screen_name");
[info]                 JsoniterCodecs.this.stringCodec.encode(v.get, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("user");
[info]             e9(x.user, out)
[info]           };
[info]           {
[info]             val v = x.geo;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("geo");
[info]                 JsoniterCodecs.this.stringCodec.encode(v.get, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.coordinates;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("coordinates");
[info]                 JsoniterCodecs.this.stringCodec.encode(v.get, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.place;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("place");
[info]                 JsoniterCodecs.this.stringCodec.encode(v.get, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.contributors;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("contributors");
[info]                 JsoniterCodecs.this.stringCodec.encode(v.get, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("is_quote_status");
[info]             out.writeVal(x.is_quote_status)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("retweet_count");
[info]             out.writeVal(x.retweet_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("favorite_count");
[info]             out.writeVal(x.favorite_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("favorited");
[info]             out.writeVal(x.favorited)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("retweeted");
[info]             out.writeVal(x.retweeted)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("possibly_sensitive");
[info]             out.writeVal(x.possibly_sensitive)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("lang");
[info]             JsoniterCodecs.this.stringCodec.encode(x.lang, out)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Tweet, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("created_at");
[info]             JsoniterCodecs.this.stringCodec.encode(x.created_at, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("id");
[info]             out.writeVal(x.id)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("id_str");
[info]             JsoniterCodecs.this.stringCodec.encode(x.id_str, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("text");
[info]             JsoniterCodecs.this.stringCodec.encode(x.text, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("truncated");
[info]             out.writeVal(x.truncated)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("entities");
[info]             e2(x.entities, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("source");
[info]             JsoniterCodecs.this.stringCodec.encode(x.source, out)
[info]           };
[info]           {
[info]             val v = x.in_reply_to_status_id;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_status_id");
[info]                 JsoniterCodecs.this.stringCodec.encode(v.get, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_status_id_str;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_status_id_str");
[info]                 JsoniterCodecs.this.stringCodec.encode(v.get, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_user_id;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_user_id");
[info]                 JsoniterCodecs.this.stringCodec.encode(v.get, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_user_id_str;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_user_id_str");
[info]                 JsoniterCodecs.this.stringCodec.encode(v.get, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_screen_name;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_screen_name");
[info]                 JsoniterCodecs.this.stringCodec.encode(v.get, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("user");
[info]             e9(x.user, out)
[info]           };
[info]           {
[info]             val v = x.geo;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("geo");
[info]                 JsoniterCodecs.this.stringCodec.encode(v.get, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.coordinates;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("coordinates");
[info]                 JsoniterCodecs.this.stringCodec.encode(v.get, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.place;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("place");
[info]                 JsoniterCodecs.this.stringCodec.encode(v.get, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.contributors;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("contributors");
[info]                 JsoniterCodecs.this.stringCodec.encode(v.get, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("retweeted_status");
[info]             e12(x.retweeted_status, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("is_quote_status");
[info]             out.writeVal(x.is_quote_status)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("retweet_count");
[info]             out.writeVal(x.retweet_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("favorite_count");
[info]             out.writeVal(x.favorite_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("favorited");
[info]             out.writeVal(x.favorited)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("retweeted");
[info]             out.writeVal(x.retweeted)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("possibly_sensitive");
[info]             out.writeVal(x.possibly_sensitive)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("lang");
[info]             JsoniterCodecs.this.stringCodec.encode(x.lang, out)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             e1(x, out)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val twitterAPICodec: JsonCodec[Seq[Tweet]] = make[Seq[Tweet]](CodecMakerConfig())
[info]                                                                         ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:15:18: local val v1 in value arraysFormat is never used
[warn]     implicit val v1: Format[Array[BigInt]] = Format(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:21:18: local val v1 in value bitSetsFormat is never used
[warn]     implicit val v1: Reads[BitSet] = Reads[BitSet](js => JsSuccess(BitSet(js.as[Array[Int]]: _*)))
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:22:18: local val v2 in value bitSetsFormat is never used
[warn]     implicit val v2: Reads[mutable.BitSet] =
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:29:18: local val v1 in value mapsFormat is never used
[warn]     implicit val v1: OFormat[HashMap[String, Double]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:32:18: local val v2 in value mapsFormat is never used
[warn]     implicit val v2: OFormat[Map[Int, HashMap[Long, Double]]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:44:18: local val v1 in value mutableMapsFormat is never used
[warn]     implicit val v1: OFormat[mutable.HashMap[String, Double]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:47:18: local val v2 in value mutableMapsFormat is never used
[warn]     implicit val v2: OFormat[mutable.Map[Int, mutable.OpenHashMap[Long, Double]]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:64:18: local val v1 in value intAndLongMapsFormat is never used
[warn]     implicit val v1: OFormat[IntMap[Double]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:69:18: local val v2 in value intAndLongMapsFormat is never used
[warn]     implicit val v2: OFormat[mutable.LongMap[LongMap[Double]]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:81:18: local val v1 in value primitivesFormat is never used
[warn]     implicit val v1: Format[Char] = Format(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:88:23: local val v1 in value adtFormat is never used
[warn]     implicit lazy val v1: OFormat[A] = Json.format[A]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:89:23: local val v2 in value adtFormat is never used
[warn]     implicit lazy val v2: OFormat[B] = Json.format[B]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:90:23: local val v3 in value adtFormat is never used
[warn]     implicit lazy val v3: OFormat[C] = Json.format[C]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:95:18: local val v1 in value googleMapsAPIFormat is never used
[warn]     implicit val v1: OFormat[Value] = Json.format[Value]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:96:18: local val v2 in value googleMapsAPIFormat is never used
[warn]     implicit val v2: OFormat[Elements] = Json.format[Elements]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:97:18: local val v3 in value googleMapsAPIFormat is never used
[warn]     implicit val v3: OFormat[Rows] = Json.format[Rows]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:101:18: local val v1 in value twitterAPIFormat is never used
[warn]     implicit val v1: OFormat[Urls] = Json.format[Urls]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:102:18: local val v2 in value twitterAPIFormat is never used
[warn]     implicit val v2: OFormat[Url] = Json.format[Url]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:103:18: local val v3 in value twitterAPIFormat is never used
[warn]     implicit val v3: OFormat[UserEntities] = Json.format[UserEntities]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:104:18: local val v4 in value twitterAPIFormat is never used
[warn]     implicit val v4: OFormat[UserMentions] = Json.format[UserMentions]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:105:18: local val v5 in value twitterAPIFormat is never used
[warn]     implicit val v5: OFormat[Entities] = Json.format[Entities]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:106:18: local val v6 in value twitterAPIFormat is never used
[warn]     implicit val v6: Format[User] = Jsonx.formatCaseClass[User]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:107:18: local val v7 in value twitterAPIFormat is never used
[warn]     implicit val v7: Format[RetweetedStatus] = Jsonx.formatCaseClass[RetweetedStatus]
[warn]                  ^
[warn] 23 warnings found
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.10.1-SNAPSHOT.jar ...
[info] Compiling 40 Scala sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/test-classes ...
Processing 330 classes from /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes with "reflection" generator
Writing out Java source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/src_managed/jmh and resources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/resource_managed/jmh
[info] Done packaging.
[info] Compiling 448 Java sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.10.1-SNAPSHOT-tests.jar ...
[info] Done packaging.
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.10.1-SNAPSHOT-jmh.jar ...
[info] Done packaging.
[info] Running (fork) org.openjdk.jmh.Main -prof gc -rf json -rff jdk8.json .*Benchmark.*
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce
[info] # Run progress: 0.00% complete, ETA 00:38:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 374709.239 ops/s
[info] # Warmup Iteration   2: 776780.625 ops/s
[info] # Warmup Iteration   3: 773531.300 ops/s
[info] Iteration   1: 746500.526 ops/s
[info]                  ·gc.alloc.rate:                   1965.572 MB/sec
[info]                  ·gc.alloc.rate.norm:              4144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1996.394 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4208.983 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.219 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 763285.589 ops/s
[info]                  ·gc.alloc.rate:                   2009.829 MB/sec
[info]                  ·gc.alloc.rate.norm:              4144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.469 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4145.318 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.300 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 797615.908 ops/s
[info]                  ·gc.alloc.rate:                   2100.144 MB/sec
[info]                  ·gc.alloc.rate.norm:              4144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2359.474 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4655.711 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.205 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 788187.818 ops/s
[info]                  ·gc.alloc.rate:                   2075.419 MB/sec
[info]                  ·gc.alloc.rate.norm:              4144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2030.556 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4054.421 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.125 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 789663.963 ops/s
[info]                  ·gc.alloc.rate:                   2079.525 MB/sec
[info]                  ·gc.alloc.rate.norm:              4144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2036.072 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4057.409 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.166 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce":
[info]   777050.761 ±(99.9%) 82336.478 ops/s [Average]
[info]   (min, avg, max) = (746500.526, 777050.761, 797615.908), stdev = 21382.522
[info]   CI (99.9%): [694714.283, 859387.239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.alloc.rate":
[info]   2046.098 ±(99.9%) 216.955 MB/sec [Average]
[info]   (min, avg, max) = (1965.572, 2046.098, 2100.144), stdev = 56.343
[info]   CI (99.9%): [1829.143, 2263.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   4144.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4144.001, 4144.001, 4144.001), stdev = 0.001
[info]   CI (99.9%): [4144.000, 4144.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2086.593 ±(99.9%) 590.567 MB/sec [Average]
[info]   (min, avg, max) = (1996.394, 2086.593, 2359.474), stdev = 153.368
[info]   CI (99.9%): [1496.025, 2677.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4224.368 ±(99.9%) 961.312 B/op [Average]
[info]   (min, avg, max) = (4054.421, 4224.368, 4655.711), stdev = 249.650
[info]   CI (99.9%): [3263.057, 5185.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.100 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.100, 0.146), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.203 ±(99.9%) 0.253 B/op [Average]
[info]   (min, avg, max) = (0.125, 0.203, 0.300), stdev = 0.066
[info]   CI (99.9%): [≈ 0, 0.456] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.count":
[info]   31.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 0.707
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala
[info] # Run progress: 0.34% complete, ETA 01:01:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 474198.192 ops/s
[info] # Warmup Iteration   2: 1615885.188 ops/s
[info] # Warmup Iteration   3: 1632598.741 ops/s
[info] Iteration   1: 1631971.456 ops/s
[info]                  ·gc.alloc.rate:                   1161.299 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1302.962 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1256.625 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.080 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 1620674.466 ops/s
[info]                  ·gc.alloc.rate:                   1153.313 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          981.235 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     952.893 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.101 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 1612861.601 ops/s
[info]                  ·gc.alloc.rate:                   1147.764 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1317.001 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1285.143 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.122 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 1619398.950 ops/s
[info]                  ·gc.alloc.rate:                   1152.394 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          993.574 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     965.645 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.061 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1647814.299 ops/s
[info]                  ·gc.alloc.rate:                   1172.876 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.627 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1272.549 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.080 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala":
[info]   1626544.154 ±(99.9%) 52888.358 ops/s [Average]
[info]   (min, avg, max) = (1612861.601, 1626544.154, 1647814.299), stdev = 13734.939
[info]   CI (99.9%): [1573655.797, 1679432.512] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1157.529 ±(99.9%) 37.985 MB/sec [Average]
[info]   (min, avg, max) = (1147.764, 1157.529, 1172.876), stdev = 9.865
[info]   CI (99.9%): [1119.544, 1195.515] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1120.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1120.000, 1120.000, 1120.000), stdev = 0.001
[info]   CI (99.9%): [1120.000, 1120.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1185.480 ±(99.9%) 697.636 MB/sec [Average]
[info]   (min, avg, max) = (981.235, 1185.480, 1332.627), stdev = 181.174
[info]   CI (99.9%): [487.844, 1883.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1146.571 ±(99.9%) 659.770 B/op [Average]
[info]   (min, avg, max) = (952.893, 1146.571, 1285.143), stdev = 171.340
[info]   CI (99.9%): [486.801, 1806.341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.092, 0.125), stdev = 0.024
[info]   CI (99.9%): [≈ 10⁻⁴, 0.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.089 ±(99.9%) 0.090 B/op [Average]
[info]   (min, avg, max) = (0.061, 0.089, 0.122), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala
[info] # Run progress: 0.68% complete, ETA 01:01:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2722049.742 ops/s
[info] # Warmup Iteration   2: 3548500.570 ops/s
[info] # Warmup Iteration   3: 3472471.784 ops/s
[info] Iteration   1: 3605108.218 ops/s
[info]                  ·gc.alloc.rate:               238.260 MB/sec
[info]                  ·gc.alloc.rate.norm:          104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.840 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 111.674 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 3517619.126 ops/s
[info]                  ·gc.alloc.rate:                   232.505 MB/sec
[info]                  ·gc.alloc.rate.norm:              104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.870 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     114.451 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.015 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.007 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 3513904.628 ops/s
[info]                  ·gc.alloc.rate:                   232.219 MB/sec
[info]                  ·gc.alloc.rate.norm:              104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.831 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     114.575 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 3429327.953 ops/s
[info]                  ·gc.alloc.rate:               226.693 MB/sec
[info]                  ·gc.alloc.rate.norm:          104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.902 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 117.400 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 3563603.086 ops/s
[info]                  ·gc.alloc.rate:      235.486 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala":
[info]   3525912.602 ±(99.9%) 252753.681 ops/s [Average]
[info]   (min, avg, max) = (3429327.953, 3525912.602, 3605108.218), stdev = 65639.328
[info]   CI (99.9%): [3273158.921, 3778666.284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   233.033 ±(99.9%) 16.616 MB/sec [Average]
[info]   (min, avg, max) = (226.693, 233.033, 238.260), stdev = 4.315
[info]   CI (99.9%): [216.416, 249.649] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   104.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (104.000, 104.000, 104.000), stdev = 0.001
[info]   CI (99.9%): [104.000, 104.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   204.689 ±(99.9%) 440.607 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.689, 255.902), stdev = 114.424
[info]   CI (99.9%): [≈ 0, 645.296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   91.620 ±(99.9%) 197.373 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 91.620, 117.400), stdev = 51.257
[info]   CI (99.9%): [≈ 0, 288.993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.005 ±(99.9%) 0.028 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.015), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.002 ±(99.9%) 0.012 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.007), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 2.000), stdev = 0.894
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson
[info] # Run progress: 1.03% complete, ETA 01:00:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 32492.447 ops/s
[info] # Warmup Iteration   2: 151677.792 ops/s
[info] # Warmup Iteration   3: 159338.483 ops/s
[info] Iteration   1: 158704.391 ops/s
[info]                  ·gc.alloc.rate:                   1312.209 MB/sec
[info]                  ·gc.alloc.rate.norm:              13008.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1303.481 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12921.487 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.206 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 159241.696 ops/s
[info]                  ·gc.alloc.rate:                   1316.211 MB/sec
[info]                  ·gc.alloc.rate.norm:              13008.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1311.750 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12963.915 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.440 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 160634.214 ops/s
[info]                  ·gc.alloc.rate:                   1327.722 MB/sec
[info]                  ·gc.alloc.rate.norm:              13008.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1320.434 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12936.599 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.408 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 157391.775 ops/s
[info]                  ·gc.alloc.rate:                   1300.977 MB/sec
[info]                  ·gc.alloc.rate.norm:              13008.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.785 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13296.049 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.416 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 160638.357 ops/s
[info]                  ·gc.alloc.rate:                   1327.668 MB/sec
[info]                  ·gc.alloc.rate.norm:              13008.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.618 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13105.487 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.612 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson":
[info]   159322.087 ±(99.9%) 5296.686 ops/s [Average]
[info]   (min, avg, max) = (157391.775, 159322.087, 160638.357), stdev = 1375.533
[info]   CI (99.9%): [154025.401, 164618.773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1316.957 ±(99.9%) 43.441 MB/sec [Average]
[info]   (min, avg, max) = (1300.977, 1316.957, 1327.722), stdev = 11.281
[info]   CI (99.9%): [1273.517, 1360.398] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   13008.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (13008.003, 13008.003, 13008.003), stdev = 0.001
[info]   CI (99.9%): [13008.002, 13008.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1320.614 ±(99.9%) 52.565 MB/sec [Average]
[info]   (min, avg, max) = (1303.481, 1320.614, 1337.618), stdev = 13.651
[info]   CI (99.9%): [1268.049, 1373.178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   13044.708 ±(99.9%) 609.646 B/op [Average]
[info]   (min, avg, max) = (12921.487, 13044.708, 13296.049), stdev = 158.323
[info]   CI (99.9%): [12435.062, 13654.353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.188 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.062, 0.146), stdev = 0.049
[info]   CI (99.9%): [≈ 0, 0.250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.617 ±(99.9%) 1.857 B/op [Average]
[info]   (min, avg, max) = (0.206, 0.617, 1.440), stdev = 0.482
[info]   CI (99.9%): [≈ 0, 2.474] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala
[info] # Run progress: 1.37% complete, ETA 01:00:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 680640.259 ops/s
[info] # Warmup Iteration   2: 2125732.017 ops/s
[info] # Warmup Iteration   3: 2118908.356 ops/s
[info] Iteration   1: 2116373.839 ops/s
[info]                  ·gc.alloc.rate:                   882.105 MB/sec
[info]                  ·gc.alloc.rate.norm:              656.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          976.886 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     726.487 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.077 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 2107009.879 ops/s
[info]                  ·gc.alloc.rate:                   878.588 MB/sec
[info]                  ·gc.alloc.rate.norm:              656.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          978.645 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     730.708 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.078 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 2120600.533 ops/s
[info]                  ·gc.alloc.rate:               883.929 MB/sec
[info]                  ·gc.alloc.rate.norm:          656.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      654.210 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 485.516 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 2055937.441 ops/s
[info]                  ·gc.alloc.rate:                   856.954 MB/sec
[info]                  ·gc.alloc.rate.norm:              656.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          984.922 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     753.960 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.096 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 2140583.780 ops/s
[info]                  ·gc.alloc.rate:                   892.411 MB/sec
[info]                  ·gc.alloc.rate.norm:              656.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          991.115 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     728.556 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.092 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala":
[info]   2108101.094 ±(99.9%) 121799.048 ops/s [Average]
[info]   (min, avg, max) = (2055937.441, 2108101.094, 2140583.780), stdev = 31630.826
[info]   CI (99.9%): [1986302.046, 2229900.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   878.797 ±(99.9%) 50.932 MB/sec [Average]
[info]   (min, avg, max) = (856.954, 878.797, 892.411), stdev = 13.227
[info]   CI (99.9%): [827.866, 929.729] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   656.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (656.000, 656.000, 656.000), stdev = 0.001
[info]   CI (99.9%): [656.000, 656.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   917.155 ±(99.9%) 566.422 MB/sec [Average]
[info]   (min, avg, max) = (654.210, 917.155, 991.115), stdev = 147.098
[info]   CI (99.9%): [350.733, 1483.578] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   685.045 ±(99.9%) 431.619 B/op [Average]
[info]   (min, avg, max) = (485.516, 685.045, 753.960), stdev = 112.090
[info]   CI (99.9%): [253.426, 1116.665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.201 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.092, 0.125), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.293] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.069 ±(99.9%) 0.151 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.069, 0.096), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala
[info] # Run progress: 1.71% complete, ETA 01:00:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7117095.055 ops/s
[info] # Warmup Iteration   2: 8920867.487 ops/s
[info] # Warmup Iteration   3: 8755798.227 ops/s
[info] Iteration   1: 8820650.328 ops/s
[info]                  ·gc.alloc.rate:                   448.350 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.809 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     45.645 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 8953029.490 ops/s
[info]                  ·gc.alloc.rate:                   455.298 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     116.872 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.783 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.313 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 9064365.696 ops/s
[info]                  ·gc.alloc.rate:               460.801 MB/sec
[info]                  ·gc.alloc.rate.norm:          80.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.783 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 57.601 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   4: 9103249.526 ops/s
[info]                  ·gc.alloc.rate:                   462.712 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.734 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     57.355 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 9023665.333 ops/s
[info]                  ·gc.alloc.rate:                   458.866 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.745 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     115.719 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala":
[info]   8992992.074 ±(99.9%) 428315.703 ops/s [Average]
[info]   (min, avg, max) = (8820650.328, 8992992.074, 9103249.526), stdev = 111232.228
[info]   CI (99.9%): [8564676.372, 9421307.777] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   457.205 ±(99.9%) 21.788 MB/sec [Average]
[info]   (min, avg, max) = (448.350, 457.205, 462.712), stdev = 5.658
[info]   CI (99.9%): [435.417, 478.993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   80.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (80.000, 80.000, 80.000), stdev = 0.001
[info]   CI (99.9%): [80.000, 80.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   449.644 ±(99.9%) 764.443 MB/sec [Average]
[info]   (min, avg, max) = (255.809, 449.644, 665.146), stdev = 198.523
[info]   CI (99.9%): [≈ 0, 1214.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   78.638 ±(99.9%) 133.681 B/op [Average]
[info]   (min, avg, max) = (45.645, 78.638, 116.872), stdev = 34.717
[info]   CI (99.9%): [≈ 0, 212.320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.394 ±(99.9%) 2.993 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.394, 1.783), stdev = 0.777
[info]   CI (99.9%): [≈ 0, 3.387] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.069 ±(99.9%) 0.526 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.069, 0.313), stdev = 0.137
[info]   CI (99.9%): [≈ 0, 0.595] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.304
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson
[info] # Run progress: 2.05% complete, ETA 01:00:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 64050.133 ops/s
[info] # Warmup Iteration   2: 305731.943 ops/s
[info] # Warmup Iteration   3: 309843.708 ops/s
[info] Iteration   1: 310710.799 ops/s
[info]                  ·gc.alloc.rate:                   993.820 MB/sec
[info]                  ·gc.alloc.rate.norm:              5032.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          976.310 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4943.344 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.211 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 311094.494 ops/s
[info]                  ·gc.alloc.rate:                   995.003 MB/sec
[info]                  ·gc.alloc.rate.norm:              5032.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          978.925 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4950.691 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.421 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 311243.466 ops/s
[info]                  ·gc.alloc.rate:                   995.128 MB/sec
[info]                  ·gc.alloc.rate.norm:              5032.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          983.249 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4971.933 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.211 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 309084.650 ops/s
[info]                  ·gc.alloc.rate:                   988.509 MB/sec
[info]                  ·gc.alloc.rate.norm:              5032.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          987.545 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5027.092 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.318 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 312631.398 ops/s
[info]                  ·gc.alloc.rate:                   999.569 MB/sec
[info]                  ·gc.alloc.rate.norm:              5032.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          993.556 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5001.731 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.419 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson":
[info]   310952.962 ±(99.9%) 4897.590 ops/s [Average]
[info]   (min, avg, max) = (309084.650, 310952.962, 312631.398), stdev = 1271.889
[info]   CI (99.9%): [306055.372, 315850.551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.alloc.rate":
[info]   994.406 ±(99.9%) 15.239 MB/sec [Average]
[info]   (min, avg, max) = (988.509, 994.406, 999.569), stdev = 3.957
[info]   CI (99.9%): [979.167, 1009.645] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5032.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5032.001, 5032.001, 5032.001), stdev = 0.001
[info]   CI (99.9%): [5032.001, 5032.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   983.917 ±(99.9%) 26.489 MB/sec [Average]
[info]   (min, avg, max) = (976.310, 983.917, 993.556), stdev = 6.879
[info]   CI (99.9%): [957.428, 1010.406] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4978.958 ±(99.9%) 135.488 B/op [Average]
[info]   (min, avg, max) = (4943.344, 4978.958, 5027.092), stdev = 35.186
[info]   CI (99.9%): [4843.470, 5114.446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.062, 0.083), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.316 ±(99.9%) 0.403 B/op [Average]
[info]   (min, avg, max) = (0.211, 0.316, 0.421), stdev = 0.105
[info]   CI (99.9%): [≈ 0, 0.719] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce
[info] # Run progress: 2.40% complete, ETA 00:59:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 971242.119 ops/s
[info] # Warmup Iteration   2: 1615790.317 ops/s
[info] # Warmup Iteration   3: 1625212.927 ops/s
[info] Iteration   1: 1586182.070 ops/s
[info]                  ·gc.alloc.rate:                   2499.774 MB/sec
[info]                  ·gc.alloc.rate.norm:              2480.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2683.555 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2662.327 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.062 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 1632013.311 ops/s
[info]                  ·gc.alloc.rate:                   2572.479 MB/sec
[info]                  ·gc.alloc.rate.norm:              2480.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2363.991 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2279.007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.141 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 1607110.552 ops/s
[info]                  ·gc.alloc.rate:                   2532.471 MB/sec
[info]                  ·gc.alloc.rate.norm:              2480.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2710.704 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2654.540 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.061 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 1629182.094 ops/s
[info]                  ·gc.alloc.rate:                   2567.207 MB/sec
[info]                  ·gc.alloc.rate.norm:              2480.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2378.229 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2297.441 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.080 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 1636331.595 ops/s
[info]                  ·gc.alloc.rate:                   2578.444 MB/sec
[info]                  ·gc.alloc.rate.norm:              2480.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2721.215 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2617.320 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.140 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce":
[info]   1618163.924 ±(99.9%) 81418.264 ops/s [Average]
[info]   (min, avg, max) = (1586182.070, 1618163.924, 1636331.595), stdev = 21144.065
[info]   CI (99.9%): [1536745.660, 1699582.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.alloc.rate":
[info]   2550.075 ±(99.9%) 128.294 MB/sec [Average]
[info]   (min, avg, max) = (2499.774, 2550.075, 2578.444), stdev = 33.318
[info]   CI (99.9%): [2421.781, 2678.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2480.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2480.000, 2480.000, 2480.000), stdev = 0.001
[info]   CI (99.9%): [2480.000, 2480.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2571.539 ±(99.9%) 706.785 MB/sec [Average]
[info]   (min, avg, max) = (2363.991, 2571.539, 2721.215), stdev = 183.550
[info]   CI (99.9%): [1864.753, 3278.324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2502.127 ±(99.9%) 755.163 B/op [Average]
[info]   (min, avg, max) = (2279.007, 2502.127, 2662.327), stdev = 196.113
[info]   CI (99.9%): [1746.965, 3257.290] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.100 ±(99.9%) 0.164 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.100, 0.146), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.097 ±(99.9%) 0.156 B/op [Average]
[info]   (min, avg, max) = (0.061, 0.097, 0.141), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.count":
[info]   38.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.600, 8.000), stdev = 0.548
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 8.000), stdev = 0.837
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala
[info] # Run progress: 2.74% complete, ETA 00:59:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 969540.011 ops/s
[info] # Warmup Iteration   2: 2555804.281 ops/s
[info] # Warmup Iteration   3: 2553955.352 ops/s
[info] Iteration   1: 2595828.600 ops/s
[info]                  ·gc.alloc.rate:                   1820.771 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1973.069 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1196.344 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.114 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 2575465.283 ops/s
[info]                  ·gc.alloc.rate:                   1807.485 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1660.572 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1014.266 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.089 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 2491481.614 ops/s
[info]                  ·gc.alloc.rate:                   1747.997 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1672.075 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1056.049 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.026 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 2501486.121 ops/s
[info]                  ·gc.alloc.rate:                   1754.780 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018.641 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1270.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.039 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 2503141.465 ops/s
[info]                  ·gc.alloc.rate:                   1755.882 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1689.430 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1062.219 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.052 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala":
[info]   2533480.617 ±(99.9%) 186249.513 ops/s [Average]
[info]   (min, avg, max) = (2491481.614, 2533480.617, 2595828.600), stdev = 48368.407
[info]   CI (99.9%): [2347231.104, 2719730.130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1777.383 ±(99.9%) 130.942 MB/sec [Average]
[info]   (min, avg, max) = (1747.997, 1777.383, 1820.771), stdev = 34.005
[info]   CI (99.9%): [1646.441, 1908.325] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1104.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1104.000, 1104.000, 1104.000), stdev = 0.001
[info]   CI (99.9%): [1104.000, 1104.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1802.757 ±(99.9%) 682.741 MB/sec [Average]
[info]   (min, avg, max) = (1660.572, 1802.757, 2018.641), stdev = 177.306
[info]   CI (99.9%): [1120.016, 2485.499] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1119.777 ±(99.9%) 417.122 B/op [Average]
[info]   (min, avg, max) = (1014.266, 1119.777, 1270.005), stdev = 108.325
[info]   CI (99.9%): [702.654, 1536.899] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.104 ±(99.9%) 0.234 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.104, 0.187), stdev = 0.061
[info]   CI (99.9%): [≈ 0, 0.338] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.064 ±(99.9%) 0.140 B/op [Average]
[info]   (min, avg, max) = (0.026, 0.064, 0.114), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala
[info] # Run progress: 3.08% complete, ETA 00:59:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9224634.950 ops/s
[info] # Warmup Iteration   2: 10231494.853 ops/s
[info] # Warmup Iteration   3: 10472296.439 ops/s
[info] Iteration   1: 10244792.709 ops/s
[info]                  ·gc.alloc.rate:                   1301.864 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.288 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     205.596 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.013 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 10203021.814 ops/s
[info]                  ·gc.alloc.rate:                   1296.518 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.583 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     206.952 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.019 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 10508309.045 ops/s
[info]                  ·gc.alloc.rate:                   1335.345 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.943 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     201.438 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.003 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 10431654.157 ops/s
[info]                  ·gc.alloc.rate:                   1326.144 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1349.529 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     203.527 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.013 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 10501624.727 ops/s
[info]                  ·gc.alloc.rate:                   1334.551 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1351.696 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     202.570 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala":
[info]   10377880.490 ±(99.9%) 556360.636 ops/s [Average]
[info]   (min, avg, max) = (10203021.814, 10377880.490, 10508309.045), stdev = 144485.090
[info]   CI (99.9%): [9821519.854, 10934241.126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1318.884 ±(99.9%) 70.977 MB/sec [Average]
[info]   (min, avg, max) = (1296.518, 1318.884, 1335.345), stdev = 18.433
[info]   CI (99.9%): [1247.907, 1389.862] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   200.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (200.000, 200.000, 200.000), stdev = 0.001
[info]   CI (99.9%): [200.000, 200.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1345.208 ±(99.9%) 21.254 MB/sec [Average]
[info]   (min, avg, max) = (1338.288, 1345.208, 1351.696), stdev = 5.520
[info]   CI (99.9%): [1323.954, 1366.462] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   204.016 ±(99.9%) 8.630 B/op [Average]
[info]   (min, avg, max) = (201.438, 204.016, 206.952), stdev = 2.241
[info]   CI (99.9%): [195.386, 212.647] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.075, 0.125), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.011 ±(99.9%) 0.023 B/op [Average]
[info]   (min, avg, max) = (0.003, 0.011, 0.019), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson
[info] # Run progress: 3.42% complete, ETA 00:59:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 122541.779 ops/s
[info] # Warmup Iteration   2: 598555.844 ops/s
[info] # Warmup Iteration   3: 618503.061 ops/s
[info] Iteration   1: 613238.045 ops/s
[info]                  ·gc.alloc.rate:                   1621.456 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1636.943 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4199.734 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.107 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 619242.038 ops/s
[info]                  ·gc.alloc.rate:                   1636.757 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1649.740 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4192.997 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.317 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 627269.119 ops/s
[info]                  ·gc.alloc.rate:                   1658.007 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1664.370 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4175.966 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.261 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 627229.046 ops/s
[info]                  ·gc.alloc.rate:                   1657.895 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1674.998 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4202.915 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.209 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 626772.854 ops/s
[info]                  ·gc.alloc.rate:                   1656.749 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1684.472 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4229.613 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.209 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson":
[info]   622750.220 ±(99.9%) 24311.773 ops/s [Average]
[info]   (min, avg, max) = (613238.045, 622750.220, 627269.119), stdev = 6313.690
[info]   CI (99.9%): [598438.447, 647061.994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1646.173 ±(99.9%) 63.532 MB/sec [Average]
[info]   (min, avg, max) = (1621.456, 1646.173, 1658.007), stdev = 16.499
[info]   CI (99.9%): [1582.641, 1709.705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   4160.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4160.001, 4160.001, 4160.001), stdev = 0.001
[info]   CI (99.9%): [4160.001, 4160.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1662.105 ±(99.9%) 73.508 MB/sec [Average]
[info]   (min, avg, max) = (1636.943, 1662.105, 1684.472), stdev = 19.090
[info]   CI (99.9%): [1588.597, 1735.613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4200.245 ±(99.9%) 74.863 B/op [Average]
[info]   (min, avg, max) = (4175.966, 4200.245, 4229.613), stdev = 19.442
[info]   CI (99.9%): [4125.382, 4275.107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.087, 0.125), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.221 ±(99.9%) 0.300 B/op [Average]
[info]   (min, avg, max) = (0.107, 0.221, 0.317), stdev = 0.078
[info]   CI (99.9%): [≈ 0, 0.520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce
[info] # Run progress: 3.77% complete, ETA 00:59:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 983222.549 ops/s
[info] # Warmup Iteration   2: 1855942.179 ops/s
[info] # Warmup Iteration   3: 1876731.057 ops/s
[info] Iteration   1: 1901208.267 ops/s
[info]                  ·gc.alloc.rate:                   1913.897 MB/sec
[info]                  ·gc.alloc.rate.norm:              1584.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1995.215 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1651.301 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.086 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 1850816.415 ops/s
[info]                  ·gc.alloc.rate:                   1862.680 MB/sec
[info]                  ·gc.alloc.rate.norm:              1584.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.421 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1707.936 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.106 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 1886903.524 ops/s
[info]                  ·gc.alloc.rate:                   1899.064 MB/sec
[info]                  ·gc.alloc.rate.norm:              1584.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1682.730 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1403.557 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.035 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 1890867.803 ops/s
[info]                  ·gc.alloc.rate:                   1903.609 MB/sec
[info]                  ·gc.alloc.rate.norm:              1584.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2027.734 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1687.285 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.052 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 1907113.870 ops/s
[info]                  ·gc.alloc.rate:                   1919.655 MB/sec
[info]                  ·gc.alloc.rate.norm:              1584.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2033.369 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1677.832 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.103 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce":
[info]   1887381.976 ±(99.9%) 84581.349 ops/s [Average]
[info]   (min, avg, max) = (1850816.415, 1887381.976, 1907113.870), stdev = 21965.508
[info]   CI (99.9%): [1802800.627, 1971963.325] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1899.781 ±(99.9%) 85.798 MB/sec [Average]
[info]   (min, avg, max) = (1862.680, 1899.781, 1919.655), stdev = 22.282
[info]   CI (99.9%): [1813.983, 1985.579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   1584.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1584.000, 1584.000, 1584.000), stdev = 0.001
[info]   CI (99.9%): [1584.000, 1584.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1949.494 ±(99.9%) 577.218 MB/sec [Average]
[info]   (min, avg, max) = (1682.730, 1949.494, 2033.369), stdev = 149.902
[info]   CI (99.9%): [1372.276, 2526.712] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1625.582 ±(99.9%) 484.310 B/op [Average]
[info]   (min, avg, max) = (1403.557, 1625.582, 1707.936), stdev = 125.774
[info]   CI (99.9%): [1141.272, 2109.892] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.092, 0.125), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.076 ±(99.9%) 0.122 B/op [Average]
[info]   (min, avg, max) = (0.035, 0.076, 0.106), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 7.000), stdev = 1.225
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala
[info] # Run progress: 4.11% complete, ETA 00:58:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2009356.147 ops/s
[info] # Warmup Iteration   2: 5956497.450 ops/s
[info] # Warmup Iteration   3: 6040218.572 ops/s
[info] Iteration   1: 6010350.696 ops/s
[info]                  ·gc.alloc.rate:                   1649.772 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1635.396 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     428.236 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.038 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 5896261.983 ops/s
[info]                  ·gc.alloc.rate:                   1618.495 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1651.754 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     440.877 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.033 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 5946857.675 ops/s
[info]                  ·gc.alloc.rate:                   1632.401 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1664.502 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     440.495 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 6039988.526 ops/s
[info]                  ·gc.alloc.rate:                   1658.173 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1676.669 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     436.819 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.022 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 5794181.688 ops/s
[info]                  ·gc.alloc.rate:                   1590.416 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.928 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     365.862 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.023 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala":
[info]   5937528.114 ±(99.9%) 376002.103 ops/s [Average]
[info]   (min, avg, max) = (5794181.688, 5937528.114, 6039988.526), stdev = 97646.552
[info]   CI (99.9%): [5561526.010, 6313530.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1629.851 ±(99.9%) 103.494 MB/sec [Average]
[info]   (min, avg, max) = (1590.416, 1629.851, 1658.173), stdev = 26.877
[info]   CI (99.9%): [1526.357, 1733.346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   432.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (432.000, 432.000, 432.000), stdev = 0.001
[info]   CI (99.9%): [432.000, 432.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1595.050 ±(99.9%) 537.343 MB/sec [Average]
[info]   (min, avg, max) = (1346.928, 1595.050, 1676.669), stdev = 139.546
[info]   CI (99.9%): [1057.707, 2132.393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   422.458 ±(99.9%) 123.391 B/op [Average]
[info]   (min, avg, max) = (365.862, 422.458, 440.877), stdev = 32.044
[info]   CI (99.9%): [299.067, 545.849] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.100 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.100, 0.146), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.026 ±(99.9%) 0.034 B/op [Average]
[info]   (min, avg, max) = (0.017, 0.026, 0.038), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala
[info] # Run progress: 4.45% complete, ETA 00:58:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16929001.729 ops/s
[info] # Warmup Iteration   2: 22049319.489 ops/s
[info] # Warmup Iteration   3: 22804330.273 ops/s
[info] Iteration   1: 22998672.797 ops/s
[info]                  ·gc.alloc.rate:                   701.398 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.147 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     45.519 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 22750007.617 ops/s
[info]                  ·gc.alloc.rate:                   694.156 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.457 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     45.946 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.007 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 22952566.973 ops/s
[info]                  ·gc.alloc.rate:                   700.016 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.153 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     45.541 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.003 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 22987064.609 ops/s
[info]                  ·gc.alloc.rate:                   701.072 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.140 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     45.540 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 22849376.905 ops/s
[info]                  ·gc.alloc.rate:               697.112 MB/sec
[info]                  ·gc.alloc.rate.norm:          48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.048 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 45.861 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala":
[info]   22907537.780 ±(99.9%) 407769.264 ops/s [Average]
[info]   (min, avg, max) = (22750007.617, 22907537.780, 22998672.797), stdev = 105896.383
[info]   CI (99.9%): [22499768.516, 23315307.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   698.751 ±(99.9%) 11.836 MB/sec [Average]
[info]   (min, avg, max) = (694.156, 698.751, 701.398), stdev = 3.074
[info]   CI (99.9%): [686.915, 710.587] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   48.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (48.000, 48.000, 48.000), stdev = 0.001
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   664.989 ±(99.9%) 2.824 MB/sec [Average]
[info]   (min, avg, max) = (664.153, 664.989, 666.048), stdev = 0.733
[info]   CI (99.9%): [662.165, 667.813] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   45.681 ±(99.9%) 0.791 B/op [Average]
[info]   (min, avg, max) = (45.519, 45.681, 45.946), stdev = 0.205
[info]   CI (99.9%): [44.891, 46.472] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.191 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.067, 0.125), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.005 ±(99.9%) 0.013 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.009), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 4.79% complete, ETA 00:58:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 21293988.694 ops/s
[info] # Warmup Iteration   2: 26127421.297 ops/s
[info] # Warmup Iteration   3: 26429763.057 ops/s
[info] Iteration   1: 27859691.072 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 27823370.495 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 26576928.023 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 28045698.375 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 27552242.982 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc":
[info]   27571586.189 ±(99.9%) 2246035.707 ops/s [Average]
[info]   (min, avg, max) = (26576928.023, 27571586.189, 28045698.375), stdev = 583288.341
[info]   CI (99.9%): [25325550.482, 29817621.896] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson
[info] # Run progress: 5.14% complete, ETA 00:58:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 329995.278 ops/s
[info] # Warmup Iteration   2: 1073385.087 ops/s
[info] # Warmup Iteration   3: 1079755.400 ops/s
[info] Iteration   1: 1084826.665 ops/s
[info]                  ·gc.alloc.rate:                   1626.744 MB/sec
[info]                  ·gc.alloc.rate.norm:              2360.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1637.150 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2375.097 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.121 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 1077595.787 ops/s
[info]                  ·gc.alloc.rate:                   1615.822 MB/sec
[info]                  ·gc.alloc.rate.norm:              2360.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1650.392 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2410.492 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.182 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 1078017.810 ops/s
[info]                  ·gc.alloc.rate:                   1616.900 MB/sec
[info]                  ·gc.alloc.rate.norm:              2360.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1664.817 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2429.938 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.061 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 1093109.421 ops/s
[info]                  ·gc.alloc.rate:                   1639.112 MB/sec
[info]                  ·gc.alloc.rate.norm:              2360.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1675.024 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2411.707 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.180 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 1066464.955 ops/s
[info]                  ·gc.alloc.rate:                   1599.228 MB/sec
[info]                  ·gc.alloc.rate.norm:              2360.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1684.468 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2485.791 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.123 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson":
[info]   1080002.928 ±(99.9%) 37927.393 ops/s [Average]
[info]   (min, avg, max) = (1066464.955, 1080002.928, 1093109.421), stdev = 9849.624
[info]   CI (99.9%): [1042075.534, 1117930.321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1619.561 ±(99.9%) 56.735 MB/sec [Average]
[info]   (min, avg, max) = (1599.228, 1619.561, 1639.112), stdev = 14.734
[info]   CI (99.9%): [1562.826, 1676.296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2360.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2360.000, 2360.000, 2360.000), stdev = 0.001
[info]   CI (99.9%): [2360.000, 2360.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1662.370 ±(99.9%) 72.907 MB/sec [Average]
[info]   (min, avg, max) = (1637.150, 1662.370, 1684.468), stdev = 18.934
[info]   CI (99.9%): [1589.463, 1735.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2422.605 ±(99.9%) 156.043 B/op [Average]
[info]   (min, avg, max) = (2375.097, 2422.605, 2485.791), stdev = 40.524
[info]   CI (99.9%): [2266.562, 2578.648] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.092, 0.125), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.133 ±(99.9%) 0.194 B/op [Average]
[info]   (min, avg, max) = (0.061, 0.133, 0.182), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 10.000), stdev = 2.236
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce
[info] # Run progress: 5.48% complete, ETA 00:58:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11664.470 ops/s
[info] # Warmup Iteration   2: 14629.259 ops/s
[info] # Warmup Iteration   3: 14594.285 ops/s
[info] Iteration   1: 14597.063 ops/s
[info]                  ·gc.alloc.rate:                   1317.752 MB/sec
[info]                  ·gc.alloc.rate.norm:              142080.030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1327.563 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     143137.806 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.733 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 14644.136 ops/s
[info]                  ·gc.alloc.rate:                   1322.432 MB/sec
[info]                  ·gc.alloc.rate.norm:              142089.535 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.577 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     143179.627 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.949 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 14755.535 ops/s
[info]                  ·gc.alloc.rate:                   1332.578 MB/sec
[info]                  ·gc.alloc.rate.norm:              142096.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     142680.803 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.221 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 14554.756 ops/s
[info]                  ·gc.alloc.rate:                   1314.216 MB/sec
[info]                  ·gc.alloc.rate.norm:              142096.032 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.084 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     145217.367 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.255 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 14642.107 ops/s
[info]                  ·gc.alloc.rate:                   1322.013 MB/sec
[info]                  ·gc.alloc.rate.norm:              142094.972 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347.608 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     144845.971 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.712 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce":
[info]   14638.720 ±(99.9%) 288.618 ops/s [Average]
[info]   (min, avg, max) = (14554.756, 14638.720, 14755.535), stdev = 74.953
[info]   CI (99.9%): [14350.102, 14927.338] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate":
[info]   1321.798 ±(99.9%) 26.575 MB/sec [Average]
[info]   (min, avg, max) = (1314.216, 1321.798, 1332.578), stdev = 6.901
[info]   CI (99.9%): [1295.223, 1348.373] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   142091.320 ±(99.9%) 26.425 B/op [Average]
[info]   (min, avg, max) = (142080.030, 142091.320, 142096.032), stdev = 6.863
[info]   CI (99.9%): [142064.894, 142117.745] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1337.779 ±(99.9%) 30.821 MB/sec [Average]
[info]   (min, avg, max) = (1327.563, 1337.779, 1347.608), stdev = 8.004
[info]   CI (99.9%): [1306.958, 1368.600] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   143812.315 ±(99.9%) 4381.194 B/op [Average]
[info]   (min, avg, max) = (142680.803, 143812.315, 145217.367), stdev = 1137.782
[info]   CI (99.9%): [139431.121, 148193.509] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.067, 0.104), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   7.174 ±(99.9%) 12.879 B/op [Average]
[info]   (min, avg, max) = (2.221, 7.174, 11.255), stdev = 3.345
[info]   CI (99.9%): [≈ 0, 20.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala
[info] # Run progress: 5.82% complete, ETA 00:57:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12792.692 ops/s
[info] # Warmup Iteration   2: 18593.189 ops/s
[info] # Warmup Iteration   3: 18720.284 ops/s
[info] Iteration   1: 19288.369 ops/s
[info]                  ·gc.alloc.rate:                   745.207 MB/sec
[info]                  ·gc.alloc.rate.norm:              60781.596 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.094 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     53350.129 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.397 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 18599.338 ops/s
[info]                  ·gc.alloc.rate:                   718.851 MB/sec
[info]                  ·gc.alloc.rate.norm:              60800.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.466 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55354.351 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.285 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 18982.400 ops/s
[info]                  ·gc.alloc.rate:                   733.532 MB/sec
[info]                  ·gc.alloc.rate.norm:              60800.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          982.871 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     81466.927 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.904 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 19428.553 ops/s
[info]                  ·gc.alloc.rate:               750.294 MB/sec
[info]                  ·gc.alloc.rate.norm:          60773.460 B/op
[info]                  ·gc.churn.PS_Eden_Space:      657.532 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 53259.804 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 19451.433 ops/s
[info]                  ·gc.alloc.rate:                   751.397 MB/sec
[info]                  ·gc.alloc.rate.norm:              60768.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          659.112 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     53304.634 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.053 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala":
[info]   19150.018 ±(99.9%) 1386.925 ops/s [Average]
[info]   (min, avg, max) = (18599.338, 19150.018, 19451.433), stdev = 360.180
[info]   CI (99.9%): [17763.094, 20536.943] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   739.856 ±(99.9%) 52.797 MB/sec [Average]
[info]   (min, avg, max) = (718.851, 739.856, 751.397), stdev = 13.711
[info]   CI (99.9%): [687.059, 792.653] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   60784.627 ±(99.9%) 57.244 B/op [Average]
[info]   (min, avg, max) = (60768.022, 60784.627, 60800.033), stdev = 14.866
[info]   CI (99.9%): [60727.383, 60841.871] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   721.615 ±(99.9%) 562.431 MB/sec [Average]
[info]   (min, avg, max) = (654.094, 721.615, 982.871), stdev = 146.061
[info]   CI (99.9%): [159.184, 1284.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   59347.169 ±(99.9%) 47737.076 B/op [Average]
[info]   (min, avg, max) = (53259.804, 59347.169, 81466.927), stdev = 12397.167
[info]   CI (99.9%): [11610.093, 107084.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.050 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.083), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4.128 ±(99.9%) 10.092 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.128, 6.904), stdev = 2.621
[info]   CI (99.9%): [≈ 0, 14.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala
[info] # Run progress: 6.16% complete, ETA 00:57:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15101.568 ops/s
[info] # Warmup Iteration   2: 16103.243 ops/s
[info] # Warmup Iteration   3: 16100.479 ops/s
[info] Iteration   1: 16106.972 ops/s
[info]                  ·gc.alloc.rate:               298.840 MB/sec
[info]                  ·gc.alloc.rate.norm:          29200.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.810 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24995.542 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   2: 16228.939 ops/s
[info]                  ·gc.alloc.rate:               301.098 MB/sec
[info]                  ·gc.alloc.rate.norm:          29200.027 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.806 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24807.663 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 16097.846 ops/s
[info]                  ·gc.alloc.rate:                   298.671 MB/sec
[info]                  ·gc.alloc.rate.norm:              29200.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.792 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25007.961 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.073 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.124 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 16115.827 ops/s
[info]                  ·gc.alloc.rate:                   299.005 MB/sec
[info]                  ·gc.alloc.rate.norm:              29200.037 B/op
[info]                  ·gc.churn.PS_Eden_Space:          333.063 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32526.087 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.657 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 161.801 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 16197.890 ops/s
[info]                  ·gc.alloc.rate:                   300.539 MB/sec
[info]                  ·gc.alloc.rate.norm:              29200.027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          333.077 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32361.459 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.045 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala":
[info]   16149.495 ±(99.9%) 229.936 ops/s [Average]
[info]   (min, avg, max) = (16097.846, 16149.495, 16228.939), stdev = 59.714
[info]   CI (99.9%): [15919.559, 16379.431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   299.630 ±(99.9%) 4.269 MB/sec [Average]
[info]   (min, avg, max) = (298.671, 299.630, 301.098), stdev = 1.109
[info]   CI (99.9%): [295.361, 303.900] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   29200.030 ±(99.9%) 0.016 B/op [Average]
[info]   (min, avg, max) = (29200.027, 29200.030, 29200.037), stdev = 0.004
[info]   CI (99.9%): [29200.013, 29200.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   286.710 ±(99.9%) 162.964 MB/sec [Average]
[info]   (min, avg, max) = (255.792, 286.710, 333.077), stdev = 42.321
[info]   CI (99.9%): [123.746, 449.674] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   27939.743 ±(99.9%) 15836.837 B/op [Average]
[info]   (min, avg, max) = (24807.663, 27939.743, 32526.087), stdev = 4112.776
[info]   CI (99.9%): [12102.906, 43776.580] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.354 ±(99.9%) 2.806 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.354, 1.657), stdev = 0.729
[info]   CI (99.9%): [≈ 0, 3.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   34.594 ±(99.9%) 274.066 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 34.594, 161.801), stdev = 71.174
[info]   CI (99.9%): [≈ 0, 308.660] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson
[info] # Run progress: 6.51% complete, ETA 00:57:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10217.410 ops/s
[info] # Warmup Iteration   2: 16064.751 ops/s
[info] # Warmup Iteration   3: 16197.841 ops/s
[info] Iteration   1: 16529.593 ops/s
[info]                  ·gc.alloc.rate:                   932.714 MB/sec
[info]                  ·gc.alloc.rate.norm:              88808.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          983.175 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     93612.664 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.928 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 16264.183 ops/s
[info]                  ·gc.alloc.rate:                   917.735 MB/sec
[info]                  ·gc.alloc.rate.norm:              88808.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          983.871 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     95207.890 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.043 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 16613.881 ops/s
[info]                  ·gc.alloc.rate:                   937.501 MB/sec
[info]                  ·gc.alloc.rate.norm:              88808.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          988.221 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     93612.716 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.916 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 16313.969 ops/s
[info]                  ·gc.alloc.rate:                   920.593 MB/sec
[info]                  ·gc.alloc.rate.norm:              88808.038 B/op
[info]                  ·gc.churn.PS_Eden_Space:          992.238 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     95719.431 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.016 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 16366.393 ops/s
[info]                  ·gc.alloc.rate:                   923.526 MB/sec
[info]                  ·gc.alloc.rate.norm:              88808.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.156 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63866.472 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.004 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson":
[info]   16417.604 ±(99.9%) 571.036 ops/s [Average]
[info]   (min, avg, max) = (16264.183, 16417.604, 16613.881), stdev = 148.296
[info]   CI (99.9%): [15846.568, 16988.639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   926.414 ±(99.9%) 32.225 MB/sec [Average]
[info]   (min, avg, max) = (917.735, 926.414, 937.501), stdev = 8.369
[info]   CI (99.9%): [894.189, 958.639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   88808.029 ±(99.9%) 0.020 B/op [Average]
[info]   (min, avg, max) = (88808.026, 88808.029, 88808.038), stdev = 0.005
[info]   CI (99.9%): [88808.009, 88808.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   922.332 ±(99.9%) 555.922 MB/sec [Average]
[info]   (min, avg, max) = (664.156, 922.332, 992.238), stdev = 144.371
[info]   CI (99.9%): [366.410, 1478.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   88403.834 ±(99.9%) 52943.191 B/op [Average]
[info]   (min, avg, max) = (63866.472, 88403.834, 95719.431), stdev = 13749.179
[info]   CI (99.9%): [35460.643, 141347.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.058 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.058, 0.083), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   5.581 ±(99.9%) 6.318 B/op [Average]
[info]   (min, avg, max) = (4.004, 5.581, 7.928), stdev = 1.641
[info]   CI (99.9%): [≈ 0, 11.900] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce
[info] # Run progress: 6.85% complete, ETA 00:57:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8903.375 ops/s
[info] # Warmup Iteration   2: 12344.761 ops/s
[info] # Warmup Iteration   3: 12415.288 ops/s
[info] Iteration   1: 12370.535 ops/s
[info]                  ·gc.alloc.rate:                   1711.055 MB/sec
[info]                  ·gc.alloc.rate.norm:              217680.038 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1660.039 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     211189.800 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.242 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 12503.210 ops/s
[info]                  ·gc.alloc.rate:                   1729.333 MB/sec
[info]                  ·gc.alloc.rate.norm:              217680.035 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1670.587 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     210285.352 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.861 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 12538.764 ops/s
[info]                  ·gc.alloc.rate:                   1734.691 MB/sec
[info]                  ·gc.alloc.rate.norm:              217729.292 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016.441 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     253092.965 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26.129 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 12616.338 ops/s
[info]                  ·gc.alloc.rate:                   1745.609 MB/sec
[info]                  ·gc.alloc.rate.norm:              217744.034 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1687.506 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     210496.355 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.194 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 12509.199 ops/s
[info]                  ·gc.alloc.rate:                   1731.088 MB/sec
[info]                  ·gc.alloc.rate.norm:              217744.035 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1693.111 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     212967.118 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18.334 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce":
[info]   12507.609 ±(99.9%) 342.273 ops/s [Average]
[info]   (min, avg, max) = (12370.535, 12507.609, 12616.338), stdev = 88.887
[info]   CI (99.9%): [12165.336, 12849.882] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1730.355 ±(99.9%) 48.154 MB/sec [Average]
[info]   (min, avg, max) = (1711.055, 1730.355, 1745.609), stdev = 12.505
[info]   CI (99.9%): [1682.201, 1778.509] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   217715.487 ±(99.9%) 126.750 B/op [Average]
[info]   (min, avg, max) = (217680.035, 217715.487, 217744.035), stdev = 32.917
[info]   CI (99.9%): [217588.736, 217842.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1745.537 ±(99.9%) 585.349 MB/sec [Average]
[info]   (min, avg, max) = (1660.039, 1745.537, 2016.441), stdev = 152.013
[info]   CI (99.9%): [1160.187, 2330.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   219606.318 ±(99.9%) 72196.855 B/op [Average]
[info]   (min, avg, max) = (210285.352, 219606.318, 253092.965), stdev = 18749.294
[info]   CI (99.9%): [147409.463, 291803.173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.112 ±(99.9%) 0.257 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.112, 0.208), stdev = 0.067
[info]   CI (99.9%): [≈ 0, 0.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   14.152 ±(99.9%) 32.308 B/op [Average]
[info]   (min, avg, max) = (5.194, 14.152, 26.129), stdev = 8.390
[info]   CI (99.9%): [≈ 0, 46.460] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 6.000), stdev = 0.894
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala
[info] # Run progress: 7.19% complete, ETA 00:57:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6612.343 ops/s
[info] # Warmup Iteration   2: 12014.268 ops/s
[info] # Warmup Iteration   3: 12084.828 ops/s
[info] Iteration   1: 12188.006 ops/s
[info]                  ·gc.alloc.rate:                   1483.667 MB/sec
[info]                  ·gc.alloc.rate.norm:              191496.196 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1310.481 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     169143.196 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.688 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 12041.083 ops/s
[info]                  ·gc.alloc.rate:                   1465.074 MB/sec
[info]                  ·gc.alloc.rate.norm:              191496.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1318.180 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     172295.907 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19.045 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 12137.103 ops/s
[info]                  ·gc.alloc.rate:                   1477.483 MB/sec
[info]                  ·gc.alloc.rate.norm:              191496.057 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1661.840 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     215390.416 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.497 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 11853.421 ops/s
[info]                  ·gc.alloc.rate:                   1442.204 MB/sec
[info]                  ·gc.alloc.rate.norm:              191496.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.608 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     177607.812 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16.584 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 11886.767 ops/s
[info]                  ·gc.alloc.rate:                   1446.284 MB/sec
[info]                  ·gc.alloc.rate.norm:              191496.036 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1680.605 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     222521.427 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.512 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala":
[info]   12021.276 ±(99.9%) 570.737 ops/s [Average]
[info]   (min, avg, max) = (11853.421, 12021.276, 12188.006), stdev = 148.219
[info]   CI (99.9%): [11450.539, 12592.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1462.942 ±(99.9%) 70.821 MB/sec [Average]
[info]   (min, avg, max) = (1442.204, 1462.942, 1483.667), stdev = 18.392
[info]   CI (99.9%): [1392.121, 1533.763] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   191496.064 ±(99.9%) 0.291 B/op [Average]
[info]   (min, avg, max) = (191496.014, 191496.064, 191496.196), stdev = 0.076
[info]   CI (99.9%): [191495.773, 191496.355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1461.743 ±(99.9%) 737.776 MB/sec [Average]
[info]   (min, avg, max) = (1310.481, 1461.743, 1680.605), stdev = 191.598
[info]   CI (99.9%): [723.967, 2199.518] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   191391.752 ±(99.9%) 98071.280 B/op [Average]
[info]   (min, avg, max) = (169143.196, 191391.752, 222521.427), stdev = 25468.800
[info]   CI (99.9%): [93320.472, 289463.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.207 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.087, 0.146), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   11.465 ±(99.9%) 27.246 B/op [Average]
[info]   (min, avg, max) = (2.688, 11.465, 19.045), stdev = 7.076
[info]   CI (99.9%): [≈ 0, 38.711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 10.000), stdev = 2.775
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala
[info] # Run progress: 7.53% complete, ETA 00:57:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11066.428 ops/s
[info] # Warmup Iteration   2: 13063.107 ops/s
[info] # Warmup Iteration   3: 13476.252 ops/s
[info] Iteration   1: 13012.902 ops/s
[info]                  ·gc.alloc.rate:                   1537.056 MB/sec
[info]                  ·gc.alloc.rate.norm:              185904.036 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1664.650 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     201336.260 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.071 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 12974.282 ops/s
[info]                  ·gc.alloc.rate:                   1532.636 MB/sec
[info]                  ·gc.alloc.rate.norm:              185904.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1672.718 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     202895.456 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15.150 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 13342.051 ops/s
[info]                  ·gc.alloc.rate:                   1575.956 MB/sec
[info]                  ·gc.alloc.rate.norm:              185904.032 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.181 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     158563.235 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.911 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 13296.254 ops/s
[info]                  ·gc.alloc.rate:                   1570.530 MB/sec
[info]                  ·gc.alloc.rate.norm:              185904.032 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1685.895 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     199559.806 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.320 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 13451.462 ops/s
[info]                  ·gc.alloc.rate:                   1588.892 MB/sec
[info]                  ·gc.alloc.rate.norm:              185904.044 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1690.619 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     197806.295 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.178 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala":
[info]   13215.390 ±(99.9%) 811.030 ops/s [Average]
[info]   (min, avg, max) = (12974.282, 13215.390, 13451.462), stdev = 210.622
[info]   CI (99.9%): [12404.360, 14026.421] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1561.014 ±(99.9%) 95.692 MB/sec [Average]
[info]   (min, avg, max) = (1532.636, 1561.014, 1588.892), stdev = 24.851
[info]   CI (99.9%): [1465.322, 1656.706] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   185904.036 ±(99.9%) 0.019 B/op [Average]
[info]   (min, avg, max) = (185904.032, 185904.036, 185904.044), stdev = 0.005
[info]   CI (99.9%): [185904.017, 185904.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1611.612 ±(99.9%) 577.040 MB/sec [Average]
[info]   (min, avg, max) = (1344.181, 1611.612, 1690.619), stdev = 149.855
[info]   CI (99.9%): [1034.573, 2188.652] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   192032.210 ±(99.9%) 72417.513 B/op [Average]
[info]   (min, avg, max) = (158563.235, 192032.210, 202895.456), stdev = 18806.598
[info]   CI (99.9%): [119614.698, 264449.723] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.092, 0.125), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   10.926 ±(99.9%) 14.697 B/op [Average]
[info]   (min, avg, max) = (4.911, 10.926, 15.150), stdev = 3.817
[info]   CI (99.9%): [≈ 0, 25.623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 7.88% complete, ETA 00:56:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11198.470 ops/s
[info] # Warmup Iteration   2: 13394.104 ops/s
[info] # Warmup Iteration   3: 13461.512 ops/s
[info] Iteration   1: 13292.702 ops/s
[info]                  ·gc.alloc.rate:                   1544.857 MB/sec
[info]                  ·gc.alloc.rate.norm:              182872.032 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1665.017 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     197096.008 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.859 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 13225.757 ops/s
[info]                  ·gc.alloc.rate:                   1536.784 MB/sec
[info]                  ·gc.alloc.rate.norm:              182872.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1672.700 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     199045.535 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14.863 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 13138.632 ops/s
[info]                  ·gc.alloc.rate:                   1526.644 MB/sec
[info]                  ·gc.alloc.rate.norm:              182872.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.362 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     161037.014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.481 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 13441.877 ops/s
[info]                  ·gc.alloc.rate:                   1561.903 MB/sec
[info]                  ·gc.alloc.rate.norm:              182872.032 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1686.049 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     197407.457 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19.499 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 13413.324 ops/s
[info]                  ·gc.alloc.rate:                   1558.683 MB/sec
[info]                  ·gc.alloc.rate.norm:              182872.044 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352.433 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     158673.819 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14.656 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc":
[info]   13302.458 ±(99.9%) 489.147 ops/s [Average]
[info]   (min, avg, max) = (13138.632, 13302.458, 13441.877), stdev = 127.030
[info]   CI (99.9%): [12813.312, 13791.605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1545.774 ±(99.9%) 56.932 MB/sec [Average]
[info]   (min, avg, max) = (1526.644, 1545.774, 1561.903), stdev = 14.785
[info]   CI (99.9%): [1488.842, 1602.706] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   182872.035 ±(99.9%) 0.020 B/op [Average]
[info]   (min, avg, max) = (182872.032, 182872.035, 182872.044), stdev = 0.005
[info]   CI (99.9%): [182872.015, 182872.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   1544.112 ±(99.9%) 688.663 MB/sec [Average]
[info]   (min, avg, max) = (1344.362, 1544.112, 1686.049), stdev = 178.844
[info]   CI (99.9%): [855.449, 2232.776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   182651.967 ±(99.9%) 80248.326 B/op [Average]
[info]   (min, avg, max) = (158673.819, 182651.967, 199045.535), stdev = 20840.235
[info]   CI (99.9%): [102403.641, 262900.293] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.112 ±(99.9%) 0.156 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.112, 0.167), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   13.272 ±(99.9%) 18.103 B/op [Average]
[info]   (min, avg, max) = (7.481, 13.272, 19.499), stdev = 4.701
[info]   CI (99.9%): [≈ 0, 31.374] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 0.707
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson
[info] # Run progress: 8.22% complete, ETA 00:56:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2934.594 ops/s
[info] # Warmup Iteration   2: 4164.891 ops/s
[info] # Warmup Iteration   3: 4164.340 ops/s
[info] Iteration   1: 4170.704 ops/s
[info]                  ·gc.alloc.rate:                   1129.290 MB/sec
[info]                  ·gc.alloc.rate.norm:              426136.040 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1314.800 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     496138.309 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15.709 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 4191.884 ops/s
[info]                  ·gc.alloc.rate:                   1135.050 MB/sec
[info]                  ·gc.alloc.rate.norm:              426135.708 B/op
[info]                  ·gc.churn.PS_Eden_Space:          990.164 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     371740.573 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15.630 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 4284.162 ops/s
[info]                  ·gc.alloc.rate:                   1160.193 MB/sec
[info]                  ·gc.alloc.rate.norm:              426136.495 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1327.150 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     487459.368 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30.589 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 4254.271 ops/s
[info]                  ·gc.alloc.rate:                   1151.917 MB/sec
[info]                  ·gc.alloc.rate.norm:              426136.164 B/op
[info]                  ·gc.churn.PS_Eden_Space:          999.560 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     369773.981 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15.402 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 4194.305 ops/s
[info]                  ·gc.alloc.rate:                   1135.790 MB/sec
[info]                  ·gc.alloc.rate.norm:              426135.638 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     502416.629 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23.434 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson":
[info]   4219.065 ±(99.9%) 184.347 ops/s [Average]
[info]   (min, avg, max) = (4170.704, 4219.065, 4284.162), stdev = 47.874
[info]   CI (99.9%): [4034.718, 4403.412] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1142.448 ±(99.9%) 50.085 MB/sec [Average]
[info]   (min, avg, max) = (1129.290, 1142.448, 1160.193), stdev = 13.007
[info]   CI (99.9%): [1092.363, 1192.533] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   426136.009 ±(99.9%) 1.347 B/op [Average]
[info]   (min, avg, max) = (426135.638, 426136.009, 426136.495), stdev = 0.350
[info]   CI (99.9%): [426134.662, 426137.356] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1194.156 ±(99.9%) 701.442 MB/sec [Average]
[info]   (min, avg, max) = (990.164, 1194.156, 1339.104), stdev = 182.162
[info]   CI (99.9%): [492.713, 1895.598] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   445505.772 ±(99.9%) 263559.717 B/op [Average]
[info]   (min, avg, max) = (369773.981, 445505.772, 502416.629), stdev = 68445.622
[info]   CI (99.9%): [181946.055, 709065.489] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.054 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.054, 0.083), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   20.153 ±(99.9%) 26.006 B/op [Average]
[info]   (min, avg, max) = (15.402, 20.153, 30.589), stdev = 6.754
[info]   CI (99.9%): [≈ 0, 46.158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce
[info] # Run progress: 8.56% complete, ETA 00:56:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5855.824 ops/s
[info] # Warmup Iteration   2: 7442.591 ops/s
[info] # Warmup Iteration   3: 7454.467 ops/s
[info] Iteration   1: 7543.835 ops/s
[info]                  ·gc.alloc.rate:                   1269.951 MB/sec
[info]                  ·gc.alloc.rate.norm:              264824.057 B/op
[info]                  ·gc.churn.PS_Eden_Space:          996.216 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     207741.998 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.685 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 7608.092 ops/s
[info]                  ·gc.alloc.rate:                   1280.253 MB/sec
[info]                  ·gc.alloc.rate.norm:              264824.057 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.244 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     275578.449 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21.530 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 7514.679 ops/s
[info]                  ·gc.alloc.rate:                   1264.771 MB/sec
[info]                  ·gc.alloc.rate.norm:              264824.057 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.923 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     280141.113 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.360 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 7541.721 ops/s
[info]                  ·gc.alloc.rate:                   1269.621 MB/sec
[info]                  ·gc.alloc.rate.norm:              264824.062 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.578 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     280250.459 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26.065 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 7388.494 ops/s
[info]                  ·gc.alloc.rate:                   1243.199 MB/sec
[info]                  ·gc.alloc.rate.norm:              264824.058 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1009.806 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     215107.066 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 31.039 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce":
[info]   7519.364 ±(99.9%) 311.167 ops/s [Average]
[info]   (min, avg, max) = (7388.494, 7519.364, 7608.092), stdev = 80.809
[info]   CI (99.9%): [7208.197, 7830.531] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   1265.559 ±(99.9%) 52.807 MB/sec [Average]
[info]   (min, avg, max) = (1243.199, 1265.559, 1280.253), stdev = 13.714
[info]   CI (99.9%): [1212.752, 1318.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   264824.058 ±(99.9%) 0.007 B/op [Average]
[info]   (min, avg, max) = (264824.057, 264824.058, 264824.062), stdev = 0.002
[info]   CI (99.9%): [264824.051, 264824.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1203.954 ±(99.9%) 706.751 MB/sec [Average]
[info]   (min, avg, max) = (996.216, 1203.954, 1343.578), stdev = 183.541
[info]   CI (99.9%): [497.202, 1910.705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   251763.817 ±(99.9%) 142337.614 B/op [Average]
[info]   (min, avg, max) = (207741.998, 251763.817, 280250.459), stdev = 36964.626
[info]   CI (99.9%): [109426.203, 394101.431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.207 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.087, 0.146), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   18.336 ±(99.9%) 43.895 B/op [Average]
[info]   (min, avg, max) = (4.360, 18.336, 31.039), stdev = 11.399
[info]   CI (99.9%): [≈ 0, 62.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 4.000), stdev = 0.837
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala
[info] # Run progress: 8.90% complete, ETA 00:56:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16381.024 ops/s
[info] # Warmup Iteration   2: 24773.716 ops/s
[info] # Warmup Iteration   3: 24277.800 ops/s
[info] Iteration   1: 24792.445 ops/s
[info]                  ·gc.alloc.rate:                   1066.343 MB/sec
[info]                  ·gc.alloc.rate.norm:              67664.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          982.284 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62330.162 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.964 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 24653.914 ops/s
[info]                  ·gc.alloc.rate:                   1059.870 MB/sec
[info]                  ·gc.alloc.rate.norm:              67657.220 B/op
[info]                  ·gc.churn.PS_Eden_Space:          985.215 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62891.598 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.644 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 24771.993 ops/s
[info]                  ·gc.alloc.rate:                   1064.538 MB/sec
[info]                  ·gc.alloc.rate.norm:              67632.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          990.245 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62912.021 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.935 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 24434.384 ops/s
[info]                  ·gc.alloc.rate:                   1050.356 MB/sec
[info]                  ·gc.alloc.rate.norm:              67632.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1326.115 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     85388.087 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.698 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 25130.669 ops/s
[info]                  ·gc.alloc.rate:                   1079.939 MB/sec
[info]                  ·gc.alloc.rate.norm:              67632.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1000.255 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62641.715 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.822 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala":
[info]   24756.681 ±(99.9%) 973.796 ops/s [Average]
[info]   (min, avg, max) = (24434.384, 24756.681, 25130.669), stdev = 252.892
[info]   CI (99.9%): [23782.885, 25730.477] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1064.209 ±(99.9%) 41.421 MB/sec [Average]
[info]   (min, avg, max) = (1050.356, 1064.209, 1079.939), stdev = 10.757
[info]   CI (99.9%): [1022.788, 1105.630] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   67643.458 ±(99.9%) 61.030 B/op [Average]
[info]   (min, avg, max) = (67632.017, 67643.458, 67664.019), stdev = 15.849
[info]   CI (99.9%): [67582.428, 67704.488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1056.823 ±(99.9%) 580.269 MB/sec [Average]
[info]   (min, avg, max) = (982.284, 1056.823, 1326.115), stdev = 150.694
[info]   CI (99.9%): [476.554, 1637.091] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   67232.716 ±(99.9%) 39091.317 B/op [Average]
[info]   (min, avg, max) = (62330.162, 67232.716, 85388.087), stdev = 10151.891
[info]   CI (99.9%): [28141.400, 106324.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.104 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.104, 0.125), stdev = 0.025
[info]   CI (99.9%): [0.006, 0.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   6.613 ±(99.9%) 6.160 B/op [Average]
[info]   (min, avg, max) = (3.964, 6.613, 7.935), stdev = 1.600
[info]   CI (99.9%): [0.453, 12.772] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala
[info] # Run progress: 9.25% complete, ETA 00:56:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 28268.315 ops/s
[info] # Warmup Iteration   2: 30021.238 ops/s
[info] # Warmup Iteration   3: 30364.180 ops/s
[info] Iteration   1: 30406.958 ops/s
[info]                  ·gc.alloc.rate:                   551.942 MB/sec
[info]                  ·gc.alloc.rate.norm:              28568.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.832 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     34514.635 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.603 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 82.971 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 30457.433 ops/s
[info]                  ·gc.alloc.rate:               552.847 MB/sec
[info]                  ·gc.alloc.rate.norm:          28568.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:      333.071 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17211.214 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 30455.073 ops/s
[info]                  ·gc.alloc.rate:                   552.865 MB/sec
[info]                  ·gc.alloc.rate.norm:              28568.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.207 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     34424.688 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.455 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 29991.651 ops/s
[info]                  ·gc.alloc.rate:               544.411 MB/sec
[info]                  ·gc.alloc.rate.norm:          28568.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:      333.073 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17478.014 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 30518.304 ops/s
[info]                  ·gc.alloc.rate:               554.126 MB/sec
[info]                  ·gc.alloc.rate.norm:          28568.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.326 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 34352.510 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala":
[info]   30365.884 ±(99.9%) 819.802 ops/s [Average]
[info]   (min, avg, max) = (29991.651, 30365.884, 30518.304), stdev = 212.900
[info]   CI (99.9%): [29546.082, 31185.686] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   551.238 ±(99.9%) 14.997 MB/sec [Average]
[info]   (min, avg, max) = (544.411, 551.238, 554.126), stdev = 3.895
[info]   CI (99.9%): [536.241, 566.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   28568.015 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (28568.014, 28568.015, 28568.019), stdev = 0.002
[info]   CI (99.9%): [28568.007, 28568.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   533.102 ±(99.9%) 703.134 MB/sec [Average]
[info]   (min, avg, max) = (333.071, 533.102, 666.832), stdev = 182.602
[info]   CI (99.9%): [≈ 0, 1236.236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   27596.212 ±(99.9%) 36038.321 B/op [Average]
[info]   (min, avg, max) = (17211.214, 27596.212, 34514.635), stdev = 9359.037
[info]   CI (99.9%): [≈ 0, 63634.533] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.346 ±(99.9%) 2.715 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.346, 1.603), stdev = 0.705
[info]   CI (99.9%): [≈ 0, 3.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   17.885 ±(99.9%) 140.514 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 17.885, 82.971), stdev = 36.491
[info]   CI (99.9%): [≈ 0, 158.399] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 3.000), stdev = 0.894
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala
[info] # Run progress: 9.59% complete, ETA 00:55:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7464.715 ops/s
[info] # Warmup Iteration   2: 13164.790 ops/s
[info] # Warmup Iteration   3: 13386.430 ops/s
[info] Iteration   1: 13239.311 ops/s
[info]                  ·gc.alloc.rate:                   1402.829 MB/sec
[info]                  ·gc.alloc.rate.norm:              166759.905 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1309.711 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     155690.689 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.374 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 13084.559 ops/s
[info]                  ·gc.alloc.rate:                   1386.401 MB/sec
[info]                  ·gc.alloc.rate.norm:              166760.035 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1649.122 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     198360.835 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22.536 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 13281.516 ops/s
[info]                  ·gc.alloc.rate:                   1407.651 MB/sec
[info]                  ·gc.alloc.rate.norm:              166760.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.282 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     157475.845 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.400 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 12992.284 ops/s
[info]                  ·gc.alloc.rate:                   1376.644 MB/sec
[info]                  ·gc.alloc.rate.norm:              166760.186 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.571 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     161905.944 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.565 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 12956.584 ops/s
[info]                  ·gc.alloc.rate:                   1372.778 MB/sec
[info]                  ·gc.alloc.rate.norm:              166760.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.849 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     163124.409 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.643 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala":
[info]   13110.851 ±(99.9%) 558.596 ops/s [Average]
[info]   (min, avg, max) = (12956.584, 13110.851, 13281.516), stdev = 145.066
[info]   CI (99.9%): [12552.255, 13669.447] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1389.260 ±(99.9%) 59.696 MB/sec [Average]
[info]   (min, avg, max) = (1372.778, 1389.260, 1407.651), stdev = 15.503
[info]   CI (99.9%): [1329.564, 1448.957] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   166760.034 ±(99.9%) 0.386 B/op [Average]
[info]   (min, avg, max) = (166759.905, 166760.034, 166760.186), stdev = 0.100
[info]   CI (99.9%): [166759.649, 166760.420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1393.507 ±(99.9%) 552.314 MB/sec [Average]
[info]   (min, avg, max) = (1309.711, 1393.507, 1649.122), stdev = 143.434
[info]   CI (99.9%): [841.193, 1945.821] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   167311.544 ±(99.9%) 67868.523 B/op [Average]
[info]   (min, avg, max) = (155690.689, 167311.544, 198360.835), stdev = 17625.240
[info]   CI (99.9%): [99443.021, 235180.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.104 ±(99.9%) 0.196 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.104, 0.187), stdev = 0.051
[info]   CI (99.9%): [≈ 0, 0.300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   12.504 ±(99.9%) 23.669 B/op [Average]
[info]   (min, avg, max) = (7.400, 12.504, 22.536), stdev = 6.147
[info]   CI (99.9%): [≈ 0, 36.173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 6.000), stdev = 1.225
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala
[info] # Run progress: 9.93% complete, ETA 00:55:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12966.630 ops/s
[info] # Warmup Iteration   2: 14649.660 ops/s
[info] # Warmup Iteration   3: 14580.674 ops/s
[info] Iteration   1: 14538.794 ops/s
[info]                  ·gc.alloc.rate:                   1408.477 MB/sec
[info]                  ·gc.alloc.rate.norm:              152456.030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1663.078 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     180014.440 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.520 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 14694.429 ops/s
[info]                  ·gc.alloc.rate:                   1424.134 MB/sec
[info]                  ·gc.alloc.rate.norm:              152456.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.930 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     143120.600 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.148 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 14652.595 ops/s
[info]                  ·gc.alloc.rate:                   1419.430 MB/sec
[info]                  ·gc.alloc.rate.norm:              152456.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.662 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     144103.177 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.944 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 14490.727 ops/s
[info]                  ·gc.alloc.rate:                   1403.660 MB/sec
[info]                  ·gc.alloc.rate.norm:              152456.030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.915 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     146292.739 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.522 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 14685.348 ops/s
[info]                  ·gc.alloc.rate:                   1422.555 MB/sec
[info]                  ·gc.alloc.rate.norm:              152456.045 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350.254 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     144707.486 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.693 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala":
[info]   14612.378 ±(99.9%) 354.426 ops/s [Average]
[info]   (min, avg, max) = (14490.727, 14612.378, 14694.429), stdev = 92.043
[info]   CI (99.9%): [14257.953, 14966.804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1415.651 ±(99.9%) 34.931 MB/sec [Average]
[info]   (min, avg, max) = (1403.660, 1415.651, 1424.134), stdev = 9.071
[info]   CI (99.9%): [1380.721, 1450.582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   152456.033 ±(99.9%) 0.026 B/op [Average]
[info]   (min, avg, max) = (152456.029, 152456.033, 152456.045), stdev = 0.007
[info]   CI (99.9%): [152456.007, 152456.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1407.768 ±(99.9%) 549.922 MB/sec [Average]
[info]   (min, avg, max) = (1336.930, 1407.768, 1663.078), stdev = 142.813
[info]   CI (99.9%): [857.846, 1957.689] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   151647.688 ±(99.9%) 61222.374 B/op [Average]
[info]   (min, avg, max) = (143120.600, 151647.688, 180014.440), stdev = 15899.256
[info]   CI (99.9%): [90425.315, 212870.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.127 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.083, 0.125), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   8.965 ±(99.9%) 13.671 B/op [Average]
[info]   (min, avg, max) = (4.522, 8.965, 13.520), stdev = 3.550
[info]   CI (99.9%): [≈ 0, 22.636] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 10.27% complete, ETA 00:55:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13253.434 ops/s
[info] # Warmup Iteration   2: 14997.417 ops/s
[info] # Warmup Iteration   3: 14974.383 ops/s
[info] Iteration   1: 15037.399 ops/s
[info]                  ·gc.alloc.rate:                   1407.044 MB/sec
[info]                  ·gc.alloc.rate.norm:              147248.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.085 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     139298.860 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.715 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 14816.729 ops/s
[info]                  ·gc.alloc.rate:                   1386.235 MB/sec
[info]                  ·gc.alloc.rate.norm:              147248.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1669.246 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     177309.815 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15.477 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 14911.388 ops/s
[info]                  ·gc.alloc.rate:                   1395.119 MB/sec
[info]                  ·gc.alloc.rate.norm:              147248.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.613 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     141600.648 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.789 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 15050.672 ops/s
[info]                  ·gc.alloc.rate:                   1408.078 MB/sec
[info]                  ·gc.alloc.rate.norm:              147248.039 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.810 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     140841.017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.353 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 14807.819 ops/s
[info]                  ·gc.alloc.rate:                   1386.019 MB/sec
[info]                  ·gc.alloc.rate.norm:              147248.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350.885 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     143515.432 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.850 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   14924.801 ±(99.9%) 447.678 ops/s [Average]
[info]   (min, avg, max) = (14807.819, 14924.801, 15050.672), stdev = 116.261
[info]   CI (99.9%): [14477.123, 15372.480] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1396.499 ±(99.9%) 41.398 MB/sec [Average]
[info]   (min, avg, max) = (1386.019, 1396.499, 1408.078), stdev = 10.751
[info]   CI (99.9%): [1355.101, 1437.897] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   147248.031 ±(99.9%) 0.018 B/op [Average]
[info]   (min, avg, max) = (147248.029, 147248.031, 147248.039), stdev = 0.005
[info]   CI (99.9%): [147248.013, 147248.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   1407.927 ±(99.9%) 563.231 MB/sec [Average]
[info]   (min, avg, max) = (1331.085, 1407.927, 1669.246), stdev = 146.269
[info]   CI (99.9%): [844.696, 1971.159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   148513.154 ±(99.9%) 62261.845 B/op [Average]
[info]   (min, avg, max) = (139298.860, 148513.154, 177309.815), stdev = 16169.203
[info]   CI (99.9%): [86251.310, 210774.999] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.087, 0.146), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   9.237 ±(99.9%) 15.332 B/op [Average]
[info]   (min, avg, max) = (4.353, 9.237, 15.477), stdev = 3.982
[info]   CI (99.9%): [≈ 0, 24.569] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 5.000), stdev = 0.894
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce
[info] # Run progress: 10.62% complete, ETA 00:55:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 269691.504 ops/s
[info] # Warmup Iteration   2: 318487.398 ops/s
[info] # Warmup Iteration   3: 326204.313 ops/s
[info] Iteration   1: 318228.388 ops/s
[info]                  ·gc.alloc.rate:                   1755.028 MB/sec
[info]                  ·gc.alloc.rate.norm:              8680.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2001.739 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9900.183 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.412 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 327113.084 ops/s
[info]                  ·gc.alloc.rate:                   1804.166 MB/sec
[info]                  ·gc.alloc.rate.norm:              8680.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1678.198 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8073.958 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.701 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 322952.008 ops/s
[info]                  ·gc.alloc.rate:                   1781.123 MB/sec
[info]                  ·gc.alloc.rate.norm:              8680.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1684.717 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8210.185 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.203 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 325986.141 ops/s
[info]                  ·gc.alloc.rate:                   1797.677 MB/sec
[info]                  ·gc.alloc.rate.norm:              8680.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1690.542 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8162.702 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.302 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 326380.905 ops/s
[info]                  ·gc.alloc.rate:                   1800.020 MB/sec
[info]                  ·gc.alloc.rate.norm:              8680.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2033.790 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9807.278 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.502 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce":
[info]   324132.105 ±(99.9%) 14099.259 ops/s [Average]
[info]   (min, avg, max) = (318228.388, 324132.105, 327113.084), stdev = 3661.533
[info]   CI (99.9%): [310032.846, 338231.365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1787.603 ±(99.9%) 77.807 MB/sec [Average]
[info]   (min, avg, max) = (1755.028, 1787.603, 1804.166), stdev = 20.206
[info]   CI (99.9%): [1709.796, 1865.410] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   8680.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8680.001, 8680.001, 8680.001), stdev = 0.001
[info]   CI (99.9%): [8680.001, 8680.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1817.797 ±(99.9%) 704.467 MB/sec [Average]
[info]   (min, avg, max) = (1678.198, 1817.797, 2033.790), stdev = 182.948
[info]   CI (99.9%): [1113.331, 2522.264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   8830.861 ±(99.9%) 3602.677 B/op [Average]
[info]   (min, avg, max) = (8073.958, 8830.861, 9900.183), stdev = 935.604
[info]   CI (99.9%): [5228.184, 12433.538] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.087, 0.146), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.424 ±(99.9%) 0.738 B/op [Average]
[info]   (min, avg, max) = (0.203, 0.424, 0.701), stdev = 0.192
[info]   CI (99.9%): [≈ 0, 1.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 6.000), stdev = 0.894
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala
[info] # Run progress: 10.96% complete, ETA 00:55:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 469354.641 ops/s
[info] # Warmup Iteration   2: 680100.365 ops/s
[info] # Warmup Iteration   3: 678929.345 ops/s
[info] Iteration   1: 701689.758 ops/s
[info]                  ·gc.alloc.rate:                   581.385 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          326.753 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     732.881 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.188 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.907 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 700894.831 ops/s
[info]                  ·gc.alloc.rate:                   580.723 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          653.850 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1468.206 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.047 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 702063.254 ops/s
[info]                  ·gc.alloc.rate:                   581.677 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.168 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1466.509 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.140 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 700586.783 ops/s
[info]                  ·gc.alloc.rate:                   580.450 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.829 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1471.096 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.094 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 699198.317 ops/s
[info]                  ·gc.alloc.rate:                   579.320 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          656.485 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1477.693 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.187 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala":
[info]   700886.589 ±(99.9%) 4292.144 ops/s [Average]
[info]   (min, avg, max) = (699198.317, 700886.589, 702063.254), stdev = 1114.656
[info]   CI (99.9%): [696594.444, 705178.733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   580.711 ±(99.9%) 3.545 MB/sec [Average]
[info]   (min, avg, max) = (579.320, 580.711, 581.677), stdev = 0.921
[info]   CI (99.9%): [577.165, 584.256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1304.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1304.001, 1304.001, 1304.001), stdev = 0.001
[info]   CI (99.9%): [1304.001, 1304.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   589.217 ±(99.9%) 564.987 MB/sec [Average]
[info]   (min, avg, max) = (326.753, 589.217, 656.485), stdev = 146.725
[info]   CI (99.9%): [24.230, 1154.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1323.277 ±(99.9%) 1270.978 B/op [Average]
[info]   (min, avg, max) = (732.881, 1323.277, 1477.693), stdev = 330.069
[info]   CI (99.9%): [52.299, 2594.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.479 ±(99.9%) 3.679 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.479, 2.188), stdev = 0.955
[info]   CI (99.9%): [≈ 0, 4.158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.075 ±(99.9%) 8.251 B/op [Average]
[info]   (min, avg, max) = (0.047, 1.075, 4.907), stdev = 2.143
[info]   CI (99.9%): [≈ 0, 9.326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala
[info] # Run progress: 11.30% complete, ETA 00:54:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1635598.980 ops/s
[info] # Warmup Iteration   2: 1734592.924 ops/s
[info] # Warmup Iteration   3: 1727322.368 ops/s
[info] Iteration   1: 1730022.538 ops/s
[info]                  ·gc.alloc.rate:                   334.162 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.798 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     232.710 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1706290.665 ops/s
[info]                  ·gc.alloc.rate:               329.713 MB/sec
[info]                  ·gc.alloc.rate.norm:          304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.909 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 235.952 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 1703317.540 ops/s
[info]                  ·gc.alloc.rate:                   329.019 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          333.097 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     307.768 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.615 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.493 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1750217.474 ops/s
[info]                  ·gc.alloc.rate:                   338.077 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          333.102 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     299.527 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.037 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 1751556.011 ops/s
[info]                  ·gc.alloc.rate:               338.343 MB/sec
[info]                  ·gc.alloc.rate.norm:          304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      332.447 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 298.703 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala":
[info]   1728280.845 ±(99.9%) 88913.969 ops/s [Average]
[info]   (min, avg, max) = (1703317.540, 1728280.845, 1751556.011), stdev = 23090.675
[info]   CI (99.9%): [1639366.876, 1817194.815] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   333.863 ±(99.9%) 17.069 MB/sec [Average]
[info]   (min, avg, max) = (329.019, 333.863, 338.343), stdev = 4.433
[info]   CI (99.9%): [316.793, 350.932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   304.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (304.000, 304.000, 304.000), stdev = 0.001
[info]   CI (99.9%): [304.000, 304.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   302.071 ±(99.9%) 162.463 MB/sec [Average]
[info]   (min, avg, max) = (255.798, 302.071, 333.102), stdev = 42.191
[info]   CI (99.9%): [139.608, 464.533] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   274.932 ±(99.9%) 143.438 B/op [Average]
[info]   (min, avg, max) = (232.710, 274.932, 307.768), stdev = 37.250
[info]   CI (99.9%): [131.494, 418.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.333 ±(99.9%) 2.760 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.333, 1.615), stdev = 0.717
[info]   CI (99.9%): [≈ 0, 3.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.308 ±(99.9%) 2.551 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.308, 1.493), stdev = 0.662
[info]   CI (99.9%): [≈ 0, 2.859] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson
[info] # Run progress: 11.64% complete, ETA 00:54:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 66529.468 ops/s
[info] # Warmup Iteration   2: 103604.451 ops/s
[info] # Warmup Iteration   3: 105022.658 ops/s
[info] Iteration   1: 102748.444 ops/s
[info]                  ·gc.alloc.rate:                   3732.860 MB/sec
[info]                  ·gc.alloc.rate.norm:              57176.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3714.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     56887.450 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.276 B/op
[info]                  ·gc.count:                        11.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 105416.938 ops/s
[info]                  ·gc.alloc.rate:                   3829.745 MB/sec
[info]                  ·gc.alloc.rate.norm:              57176.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4073.770 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60819.158 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.229 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.419 B/op
[info]                  ·gc.count:                        12.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 103571.885 ops/s
[info]                  ·gc.alloc.rate:                   3762.698 MB/sec
[info]                  ·gc.alloc.rate.norm:              57176.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3743.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     56879.228 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.898 B/op
[info]                  ·gc.count:                        11.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 105255.404 ops/s
[info]                  ·gc.alloc.rate:                   3825.358 MB/sec
[info]                  ·gc.alloc.rate.norm:              57176.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3745.924 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55988.731 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.490 B/op
[info]                  ·gc.count:                        11.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 105648.211 ops/s
[info]                  ·gc.alloc.rate:                   3838.083 MB/sec
[info]                  ·gc.alloc.rate.norm:              57176.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3744.335 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55779.436 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.551 B/op
[info]                  ·gc.count:                        11.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson":
[info]   104528.176 ±(99.9%) 4966.873 ops/s [Average]
[info]   (min, avg, max) = (102748.444, 104528.176, 105648.211), stdev = 1289.881
[info]   CI (99.9%): [99561.303, 109495.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3797.749 ±(99.9%) 181.145 MB/sec [Average]
[info]   (min, avg, max) = (3732.860, 3797.749, 3838.083), stdev = 47.043
[info]   CI (99.9%): [3616.604, 3978.893] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   57176.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (57176.004, 57176.004, 57176.004), stdev = 0.001
[info]   CI (99.9%): [57176.004, 57176.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3804.243 ±(99.9%) 582.406 MB/sec [Average]
[info]   (min, avg, max) = (3714.021, 3804.243, 4073.770), stdev = 151.249
[info]   CI (99.9%): [3221.837, 4386.650] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   57270.801 ±(99.9%) 7881.837 B/op [Average]
[info]   (min, avg, max) = (55779.436, 57270.801, 60819.158), stdev = 2046.888
[info]   CI (99.9%): [49388.964, 65152.637] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.142 ±(99.9%) 0.222 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.142, 0.229), stdev = 0.058
[info]   CI (99.9%): [≈ 0, 0.364] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2.127 ±(99.9%) 3.285 B/op [Average]
[info]   (min, avg, max) = (1.276, 2.127, 3.419), stdev = 0.853
[info]   CI (99.9%): [≈ 0, 5.411] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   56.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (11.000, 11.200, 12.000), stdev = 0.447
[info]   CI (99.9%): [56.000, 56.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   44.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 8.800, 9.000), stdev = 0.447
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce
[info] # Run progress: 11.99% complete, ETA 00:54:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 277639.878 ops/s
[info] # Warmup Iteration   2: 344507.840 ops/s
[info] # Warmup Iteration   3: 358746.566 ops/s
[info] Iteration   1: 349087.604 ops/s
[info]                  ·gc.alloc.rate:                   1189.324 MB/sec
[info]                  ·gc.alloc.rate.norm:              5360.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1323.831 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5966.197 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.282 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 349491.155 ops/s
[info]                  ·gc.alloc.rate:                   1190.228 MB/sec
[info]                  ·gc.alloc.rate.norm:              5360.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995.547 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4483.286 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.469 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 349266.695 ops/s
[info]                  ·gc.alloc.rate:                   1189.452 MB/sec
[info]                  ·gc.alloc.rate.norm:              5360.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.928 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6006.546 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.281 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 349445.155 ops/s
[info]                  ·gc.alloc.rate:                   1190.087 MB/sec
[info]                  ·gc.alloc.rate.norm:              5360.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1003.881 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4521.354 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.281 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 349683.943 ops/s
[info]                  ·gc.alloc.rate:                   1190.883 MB/sec
[info]                  ·gc.alloc.rate.norm:              5360.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.941 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6044.391 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.468 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce":
[info]   349394.910 ±(99.9%) 874.283 ops/s [Average]
[info]   (min, avg, max) = (349087.604, 349394.910, 349683.943), stdev = 227.048
[info]   CI (99.9%): [348520.628, 350269.193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   1189.995 ±(99.9%) 2.434 MB/sec [Average]
[info]   (min, avg, max) = (1189.324, 1189.995, 1190.883), stdev = 0.632
[info]   CI (99.9%): [1187.561, 1192.428] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5360.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5360.001, 5360.001, 5360.001), stdev = 0.001
[info]   CI (99.9%): [5360.001, 5360.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1199.826 ±(99.9%) 703.993 MB/sec [Average]
[info]   (min, avg, max) = (995.547, 1199.826, 1342.941), stdev = 182.825
[info]   CI (99.9%): [495.833, 1903.819] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5404.355 ±(99.9%) 3172.990 B/op [Average]
[info]   (min, avg, max) = (4483.286, 5404.355, 6044.391), stdev = 824.015
[info]   CI (99.9%): [2231.365, 8577.345] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.079, 0.104), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.356 ±(99.9%) 0.395 B/op [Average]
[info]   (min, avg, max) = (0.281, 0.356, 0.469), stdev = 0.103
[info]   CI (99.9%): [≈ 0, 0.751] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala
[info] # Run progress: 12.33% complete, ETA 00:54:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 677412.589 ops/s
[info] # Warmup Iteration   2: 858569.982 ops/s
[info] # Warmup Iteration   3: 890918.510 ops/s
[info] Iteration   1: 888804.877 ops/s
[info]                  ·gc.alloc.rate:                   627.948 MB/sec
[info]                  ·gc.alloc.rate.norm:              1112.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          653.473 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1157.202 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.084 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.690 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 890778.180 ops/s
[info]                  ·gc.alloc.rate:                   629.531 MB/sec
[info]                  ·gc.alloc.rate.norm:              1112.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.309 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1155.770 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.147 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 884356.863 ops/s
[info]                  ·gc.alloc.rate:                   624.822 MB/sec
[info]                  ·gc.alloc.rate.norm:              1112.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.151 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1164.197 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.148 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 892739.798 ops/s
[info]                  ·gc.alloc.rate:                   630.829 MB/sec
[info]                  ·gc.alloc.rate.norm:              1112.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          656.220 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1156.759 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.073 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 890537.643 ops/s
[info]                  ·gc.alloc.rate:                   629.331 MB/sec
[info]                  ·gc.alloc.rate.norm:              1112.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          657.608 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1161.965 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.184 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala":
[info]   889443.472 ±(99.9%) 12195.940 ops/s [Average]
[info]   (min, avg, max) = (884356.863, 889443.472, 892739.798), stdev = 3167.247
[info]   CI (99.9%): [877247.532, 901639.412] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   628.492 ±(99.9%) 8.824 MB/sec [Average]
[info]   (min, avg, max) = (624.822, 628.492, 630.829), stdev = 2.292
[info]   CI (99.9%): [619.668, 637.316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1112.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1112.000, 1112.000, 1112.001), stdev = 0.001
[info]   CI (99.9%): [1112.000, 1112.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   655.152 ±(99.9%) 6.587 MB/sec [Average]
[info]   (min, avg, max) = (653.473, 655.152, 657.608), stdev = 1.711
[info]   CI (99.9%): [648.565, 661.739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1159.178 ±(99.9%) 14.191 B/op [Average]
[info]   (min, avg, max) = (1155.770, 1159.178, 1164.197), stdev = 3.685
[info]   CI (99.9%): [1144.988, 1173.369] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.479 ±(99.9%) 3.455 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.479, 2.084), stdev = 0.897
[info]   CI (99.9%): [≈ 0, 3.934] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.848 ±(99.9%) 6.118 B/op [Average]
[info]   (min, avg, max) = (0.073, 0.848, 3.690), stdev = 1.589
[info]   CI (99.9%): [≈ 0, 6.966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala
[info] # Run progress: 12.67% complete, ETA 00:54:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1797786.057 ops/s
[info] # Warmup Iteration   2: 2012205.810 ops/s
[info] # Warmup Iteration   3: 2054058.293 ops/s
[info] Iteration   1: 2069161.954 ops/s
[info]                  ·gc.alloc.rate:                   957.288 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995.384 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     756.971 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.048 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 2051400.434 ops/s
[info]                  ·gc.alloc.rate:                   948.891 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          996.558 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     764.571 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.112 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 2021662.879 ops/s
[info]                  ·gc.alloc.rate:                   935.330 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          998.741 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     777.356 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.065 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1989291.653 ops/s
[info]                  ·gc.alloc.rate:                   920.187 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1001.868 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     792.622 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.066 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 2029354.607 ops/s
[info]                  ·gc.alloc.rate:                   938.694 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.478 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     519.211 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.032 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala":
[info]   2032174.306 ±(99.9%) 117035.076 ops/s [Average]
[info]   (min, avg, max) = (1989291.653, 2032174.306, 2069161.954), stdev = 30393.638
[info]   CI (99.9%): [1915139.230, 2149209.381] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   940.078 ±(99.9%) 54.251 MB/sec [Average]
[info]   (min, avg, max) = (920.187, 940.078, 957.288), stdev = 14.089
[info]   CI (99.9%): [885.827, 994.329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   728.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (728.000, 728.000, 728.000), stdev = 0.001
[info]   CI (99.9%): [728.000, 728.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   932.406 ±(99.9%) 566.051 MB/sec [Average]
[info]   (min, avg, max) = (669.478, 932.406, 1001.868), stdev = 147.002
[info]   CI (99.9%): [366.355, 1498.457] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   722.146 ±(99.9%) 439.928 B/op [Average]
[info]   (min, avg, max) = (519.211, 722.146, 792.622), stdev = 114.248
[info]   CI (99.9%): [282.219, 1162.074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.083, 0.146), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.064 ±(99.9%) 0.115 B/op [Average]
[info]   (min, avg, max) = (0.032, 0.064, 0.112), stdev = 0.030
[info]   CI (99.9%): [≈ 0, 0.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 13.01% complete, ETA 00:53:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2066011.443 ops/s
[info] # Warmup Iteration   2: 2226392.686 ops/s
[info] # Warmup Iteration   3: 2452803.531 ops/s
[info] Iteration   1: 2436240.373 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2461467.818 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2460286.817 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2445983.524 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2462040.901 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   2453203.887 ±(99.9%) 44593.039 ops/s [Average]
[info]   (min, avg, max) = (2436240.373, 2453203.887, 2462040.901), stdev = 11580.671
[info]   CI (99.9%): [2408610.848, 2497796.926] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson
[info] # Run progress: 13.36% complete, ETA 00:53:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 386757.571 ops/s
[info] # Warmup Iteration   2: 498157.716 ops/s
[info] # Warmup Iteration   3: 499220.983 ops/s
[info] Iteration   1: 507785.963 ops/s
[info]                  ·gc.alloc.rate:                   593.781 MB/sec
[info]                  ·gc.alloc.rate.norm:              1840.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          657.636 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2037.874 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.084 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.458 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 505802.300 ops/s
[info]                  ·gc.alloc.rate:                   591.338 MB/sec
[info]                  ·gc.alloc.rate.norm:              1840.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          656.846 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2043.834 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.065 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 489193.439 ops/s
[info]                  ·gc.alloc.rate:               571.877 MB/sec
[info]                  ·gc.alloc.rate.norm:          1840.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      328.395 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1056.604 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   4: 505298.023 ops/s
[info]                  ·gc.alloc.rate:                   590.724 MB/sec
[info]                  ·gc.alloc.rate.norm:              1840.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          657.476 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2047.923 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.195 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 505359.398 ops/s
[info]                  ·gc.alloc.rate:                   591.084 MB/sec
[info]                  ·gc.alloc.rate.norm:              1840.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          659.116 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2051.780 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.194 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson":
[info]   502687.825 ±(99.9%) 29309.184 ops/s [Average]
[info]   (min, avg, max) = (489193.439, 502687.825, 507785.963), stdev = 7611.502
[info]   CI (99.9%): [473378.641, 531997.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   587.761 ±(99.9%) 34.503 MB/sec [Average]
[info]   (min, avg, max) = (571.877, 587.761, 593.781), stdev = 8.960
[info]   CI (99.9%): [553.258, 622.264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   1840.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1840.001, 1840.001, 1840.001), stdev = 0.001
[info]   CI (99.9%): [1840.001, 1840.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   591.894 ±(99.9%) 567.209 MB/sec [Average]
[info]   (min, avg, max) = (328.395, 591.894, 659.116), stdev = 147.302
[info]   CI (99.9%): [24.685, 1159.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1847.603 ±(99.9%) 1702.800 B/op [Average]
[info]   (min, avg, max) = (1056.604, 1847.603, 2051.780), stdev = 442.212
[info]   CI (99.9%): [144.803, 3550.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.446 ±(99.9%) 3.528 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.446, 2.084), stdev = 0.916
[info]   CI (99.9%): [≈ 0, 3.974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.382 ±(99.9%) 10.931 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.382, 6.458), stdev = 2.839
[info]   CI (99.9%): [≈ 0, 12.313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce
[info] # Run progress: 13.70% complete, ETA 00:53:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 140920.550 ops/s
[info] # Warmup Iteration   2: 171881.415 ops/s
[info] # Warmup Iteration   3: 172865.413 ops/s
[info] Iteration   1: 170601.469 ops/s
[info]                  ·gc.alloc.rate:                   2097.015 MB/sec
[info]                  ·gc.alloc.rate.norm:              19344.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.332 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18525.937 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.152 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 169893.300 ops/s
[info]                  ·gc.alloc.rate:                   2088.507 MB/sec
[info]                  ·gc.alloc.rate.norm:              19344.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2357.318 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21833.762 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.736 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 172772.610 ops/s
[info]                  ·gc.alloc.rate:                   2123.499 MB/sec
[info]                  ·gc.alloc.rate.norm:              19344.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029.057 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18483.686 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.517 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 171193.102 ops/s
[info]                  ·gc.alloc.rate:                   2104.358 MB/sec
[info]                  ·gc.alloc.rate.norm:              19344.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2034.046 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18697.668 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.148 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 172747.332 ops/s
[info]                  ·gc.alloc.rate:                   2123.170 MB/sec
[info]                  ·gc.alloc.rate.norm:              19344.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2038.433 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18571.973 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.948 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce":
[info]   171441.563 ±(99.9%) 4961.703 ops/s [Average]
[info]   (min, avg, max) = (169893.300, 171441.563, 172772.610), stdev = 1288.539
[info]   CI (99.9%): [166479.860, 176403.266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate":
[info]   2107.310 ±(99.9%) 60.330 MB/sec [Average]
[info]   (min, avg, max) = (2088.507, 2107.310, 2123.499), stdev = 15.667
[info]   CI (99.9%): [2046.980, 2167.640] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   19344.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (19344.003, 19344.003, 19344.003), stdev = 0.001
[info]   CI (99.9%): [19344.002, 19344.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2093.437 ±(99.9%) 569.757 MB/sec [Average]
[info]   (min, avg, max) = (2008.332, 2093.437, 2357.318), stdev = 147.964
[info]   CI (99.9%): [1523.680, 2663.194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   19222.605 ±(99.9%) 5629.179 B/op [Average]
[info]   (min, avg, max) = (18483.686, 19222.605, 21833.762), stdev = 1461.880
[info]   CI (99.9%): [13593.426, 24851.784] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.142 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.104, 0.142, 0.187), stdev = 0.034
[info]   CI (99.9%): [0.010, 0.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.300 ±(99.9%) 1.226 B/op [Average]
[info]   (min, avg, max) = (0.948, 1.300, 1.736), stdev = 0.318
[info]   CI (99.9%): [0.074, 2.526] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.count":
[info]   31.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 6.000), stdev = 0.837
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala
[info] # Run progress: 14.04% complete, ETA 00:53:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 285724.768 ops/s
[info] # Warmup Iteration   2: 421590.888 ops/s
[info] # Warmup Iteration   3: 422793.373 ops/s
[info] Iteration   1: 421843.139 ops/s
[info]                  ·gc.alloc.rate:               349.504 MB/sec
[info]                  ·gc.alloc.rate.norm:          1304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.589 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1908.739 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 420755.691 ops/s
[info]                  ·gc.alloc.rate:               348.616 MB/sec
[info]                  ·gc.alloc.rate.norm:          1304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.805 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 956.841 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 423462.126 ops/s
[info]                  ·gc.alloc.rate:                   350.846 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          326.737 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1214.392 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.054 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 424546.553 ops/s
[info]                  ·gc.alloc.rate:                   351.753 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          326.741 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1211.277 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.154 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 424770.189 ops/s
[info]                  ·gc.alloc.rate:                   351.941 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          327.076 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1211.873 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.077 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala":
[info]   423075.540 ±(99.9%) 6693.277 ops/s [Average]
[info]   (min, avg, max) = (420755.691, 423075.540, 424770.189), stdev = 1738.223
[info]   CI (99.9%): [416382.263, 429768.817] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   350.532 ±(99.9%) 5.547 MB/sec [Average]
[info]   (min, avg, max) = (348.616, 350.532, 351.941), stdev = 1.440
[info]   CI (99.9%): [344.985, 356.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1304.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1304.001, 1304.001, 1304.001), stdev = 0.001
[info]   CI (99.9%): [1304.001, 1304.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   349.589 ±(99.9%) 368.288 MB/sec [Average]
[info]   (min, avg, max) = (255.805, 349.589, 511.589), stdev = 95.643
[info]   CI (99.9%): [≈ 0, 717.877] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1300.624 ±(99.9%) 1376.687 B/op [Average]
[info]   (min, avg, max) = (956.841, 1300.624, 1908.739), stdev = 357.521
[info]   CI (99.9%): [≈ 0, 2677.311] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.446 ±(99.9%) 3.705 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.446, 2.167), stdev = 0.962
[info]   CI (99.9%): [≈ 0, 4.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.657 ±(99.9%) 13.771 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.657, 8.054), stdev = 3.576
[info]   CI (99.9%): [≈ 0, 15.428] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.400, 5.000), stdev = 1.673
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala
[info] # Run progress: 14.38% complete, ETA 00:53:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 942755.330 ops/s
[info] # Warmup Iteration   2: 977473.506 ops/s
[info] # Warmup Iteration   3: 976217.368 ops/s
[info] Iteration   1: 953382.168 ops/s
[info]                  ·gc.alloc.rate:                   184.227 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.915 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     422.295 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 947228.415 ops/s
[info]                  ·gc.alloc.rate:      182.997 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 986663.767 ops/s
[info]                  ·gc.alloc.rate:               190.576 MB/sec
[info]                  ·gc.alloc.rate.norm:          304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.785 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 408.020 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 980091.782 ops/s
[info]                  ·gc.alloc.rate:                   189.312 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.804 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     410.774 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.033 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 985015.212 ops/s
[info]                  ·gc.alloc.rate:               190.339 MB/sec
[info]                  ·gc.alloc.rate.norm:          304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.906 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 408.721 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala":
[info]   970476.269 ±(99.9%) 72001.509 ops/s [Average]
[info]   (min, avg, max) = (947228.415, 970476.269, 986663.767), stdev = 18698.563
[info]   CI (99.9%): [898474.760, 1042477.777] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   187.490 ±(99.9%) 13.856 MB/sec [Average]
[info]   (min, avg, max) = (182.997, 187.490, 190.576), stdev = 3.598
[info]   CI (99.9%): [173.634, 201.346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   304.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (304.000, 304.000, 304.000), stdev = 0.001
[info]   CI (99.9%): [304.000, 304.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   204.682 ±(99.9%) 440.594 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.682, 255.915), stdev = 114.421
[info]   CI (99.9%): [≈ 0, 645.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   329.962 ±(99.9%) 710.616 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 329.962, 422.295), stdev = 184.545
[info]   CI (99.9%): [≈ 0, 1040.578] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.006 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.010 ±(99.9%) 0.058 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.033), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 2.000), stdev = 0.894
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson
[info] # Run progress: 14.73% complete, ETA 00:52:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 49562.665 ops/s
[info] # Warmup Iteration   2: 81206.439 ops/s
[info] # Warmup Iteration   3: 80856.663 ops/s
[info] Iteration   1: 81129.914 ops/s
[info]                  ·gc.alloc.rate:                   3348.201 MB/sec
[info]                  ·gc.alloc.rate.norm:              64952.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3028.955 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     58758.920 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.019 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 82124.700 ops/s
[info]                  ·gc.alloc.rate:                   3389.572 MB/sec
[info]                  ·gc.alloc.rate.norm:              64952.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3386.987 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64902.486 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.192 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 80837.117 ops/s
[info]                  ·gc.alloc.rate:                   3337.387 MB/sec
[info]                  ·gc.alloc.rate.norm:              64952.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3398.049 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     66132.607 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.837 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 81034.131 ops/s
[info]                  ·gc.alloc.rate:                   3344.310 MB/sec
[info]                  ·gc.alloc.rate.norm:              64952.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3403.524 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     66102.053 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.426 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 80119.107 ops/s
[info]                  ·gc.alloc.rate:                   3306.515 MB/sec
[info]                  ·gc.alloc.rate.norm:              64952.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3404.110 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     66869.130 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.089 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson":
[info]   81048.994 ±(99.9%) 2772.392 ops/s [Average]
[info]   (min, avg, max) = (80119.107, 81048.994, 82124.700), stdev = 719.981
[info]   CI (99.9%): [78276.602, 83821.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3345.197 ±(99.9%) 114.491 MB/sec [Average]
[info]   (min, avg, max) = (3306.515, 3345.197, 3389.572), stdev = 29.733
[info]   CI (99.9%): [3230.706, 3459.688] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   64952.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (64952.005, 64952.005, 64952.006), stdev = 0.001
[info]   CI (99.9%): [64952.005, 64952.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3324.325 ±(99.9%) 636.358 MB/sec [Average]
[info]   (min, avg, max) = (3028.955, 3324.325, 3404.110), stdev = 165.260
[info]   CI (99.9%): [2687.967, 3960.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   64553.039 ±(99.9%) 12764.272 B/op [Average]
[info]   (min, avg, max) = (58758.920, 64553.039, 66869.130), stdev = 3314.841
[info]   CI (99.9%): [51788.767, 77317.311] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.150 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (0.104, 0.150, 0.208), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2.913 ±(99.9%) 3.046 B/op [Average]
[info]   (min, avg, max) = (2.019, 2.913, 4.089), stdev = 0.791
[info]   CI (99.9%): [≈ 0, 5.959] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.count":
[info]   49.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (9.000, 9.800, 10.000), stdev = 0.447
[info]   CI (99.9%): [49.000, 49.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.time":
[info]   44.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 8.800, 10.000), stdev = 1.095
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce
[info] # Run progress: 15.07% complete, ETA 00:52:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 216343.788 ops/s
[info] # Warmup Iteration   2: 263844.716 ops/s
[info] # Warmup Iteration   3: 269076.357 ops/s
[info] Iteration   1: 266711.867 ops/s
[info]                  ·gc.alloc.rate:                   1471.212 MB/sec
[info]                  ·gc.alloc.rate.norm:              8680.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1327.202 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7830.357 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.246 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 268324.147 ops/s
[info]                  ·gc.alloc.rate:                   1479.869 MB/sec
[info]                  ·gc.alloc.rate.norm:              8680.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.023 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7818.691 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.488 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 275005.501 ops/s
[info]                  ·gc.alloc.rate:                   1516.890 MB/sec
[info]                  ·gc.alloc.rate.norm:              8680.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1674.963 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9584.532 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.357 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 267769.304 ops/s
[info]                  ·gc.alloc.rate:                   1476.735 MB/sec
[info]                  ·gc.alloc.rate.norm:              8680.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.578 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7909.083 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.489 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 267659.683 ops/s
[info]                  ·gc.alloc.rate:                   1476.739 MB/sec
[info]                  ·gc.alloc.rate.norm:              8680.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1688.044 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9922.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.367 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce":
[info]   269094.101 ±(99.9%) 12919.062 ops/s [Average]
[info]   (min, avg, max) = (266711.867, 269094.101, 275005.501), stdev = 3355.039
[info]   CI (99.9%): [256175.039, 282013.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1484.289 ±(99.9%) 71.196 MB/sec [Average]
[info]   (min, avg, max) = (1471.212, 1484.289, 1516.890), stdev = 18.489
[info]   CI (99.9%): [1413.093, 1555.485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   8680.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8680.002, 8680.002, 8680.002), stdev = 0.001
[info]   CI (99.9%): [8680.001, 8680.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1473.762 ±(99.9%) 730.904 MB/sec [Average]
[info]   (min, avg, max) = (1327.202, 1473.762, 1688.044), stdev = 189.814
[info]   CI (99.9%): [742.858, 2204.666] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   8612.935 ±(99.9%) 4036.909 B/op [Average]
[info]   (min, avg, max) = (7818.691, 8612.935, 9922.011), stdev = 1048.373
[info]   CI (99.9%): [4576.025, 12649.844] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.067, 0.083), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.390 ±(99.9%) 0.394 B/op [Average]
[info]   (min, avg, max) = (0.246, 0.390, 0.489), stdev = 0.102
[info]   CI (99.9%): [≈ 0, 0.784] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala
[info] # Run progress: 15.41% complete, ETA 00:52:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1669456.784 ops/s
[info] # Warmup Iteration   2: 1818510.005 ops/s
[info] # Warmup Iteration   3: 1779820.298 ops/s
[info] Iteration   1: 1819341.296 ops/s
[info]                  ·gc.alloc.rate:                   490.313 MB/sec
[info]                  ·gc.alloc.rate.norm:              424.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          588.412 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     508.832 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.787 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.545 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 1830522.089 ops/s
[info]                  ·gc.alloc.rate:               493.211 MB/sec
[info]                  ·gc.alloc.rate.norm:          424.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      332.455 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 285.803 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 1758170.497 ops/s
[info]                  ·gc.alloc.rate:                   473.647 MB/sec
[info]                  ·gc.alloc.rate.norm:              424.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.489 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     593.943 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.075 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1819476.953 ops/s
[info]                  ·gc.alloc.rate:                   490.225 MB/sec
[info]                  ·gc.alloc.rate.norm:              424.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.782 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     286.962 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.036 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 1805027.345 ops/s
[info]                  ·gc.alloc.rate:                   486.427 MB/sec
[info]                  ·gc.alloc.rate.norm:              424.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.023 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     578.804 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.036 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala":
[info]   1806507.636 ±(99.9%) 109731.027 ops/s [Average]
[info]   (min, avg, max) = (1758170.497, 1806507.636, 1830522.089), stdev = 28496.799
[info]   CI (99.9%): [1696776.610, 1916238.663] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   486.765 ±(99.9%) 29.721 MB/sec [Average]
[info]   (min, avg, max) = (473.647, 486.765, 493.211), stdev = 7.719
[info]   CI (99.9%): [457.043, 516.486] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   424.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (424.000, 424.000, 424.000), stdev = 0.001
[info]   CI (99.9%): [424.000, 424.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   516.032 ±(99.9%) 657.243 MB/sec [Average]
[info]   (min, avg, max) = (331.782, 516.032, 664.023), stdev = 170.684
[info]   CI (99.9%): [≈ 0, 1173.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   450.869 ±(99.9%) 591.264 B/op [Average]
[info]   (min, avg, max) = (285.803, 450.869, 593.943), stdev = 153.549
[info]   CI (99.9%): [≈ 0, 1042.132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.391 ±(99.9%) 3.008 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.391, 1.787), stdev = 0.781
[info]   CI (99.9%): [≈ 0, 3.399] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.338 ±(99.9%) 2.600 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.338, 1.545), stdev = 0.675
[info]   CI (99.9%): [≈ 0, 2.938] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 4.000), stdev = 1.225
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 15.75% complete, ETA 00:52:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1816368.462 ops/s
[info] # Warmup Iteration   2: 1957506.816 ops/s
[info] # Warmup Iteration   3: 1969415.273 ops/s
[info] Iteration   1: 1966836.614 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1966189.488 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1968421.677 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1968018.200 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1962015.230 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc":
[info]   1966296.242 ±(99.9%) 9838.579 ops/s [Average]
[info]   (min, avg, max) = (1962015.230, 1966296.242, 1968421.677), stdev = 2555.048
[info]   CI (99.9%): [1956457.663, 1976134.821] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson
[info] # Run progress: 16.10% complete, ETA 00:51:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26470.549 ops/s
[info] # Warmup Iteration   2: 38326.539 ops/s
[info] # Warmup Iteration   3: 38612.065 ops/s
[info] Iteration   1: 38298.150 ops/s
[info]                  ·gc.alloc.rate:                   1670.819 MB/sec
[info]                  ·gc.alloc.rate.norm:              68659.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1654.733 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67997.984 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.566 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 38710.884 ops/s
[info]                  ·gc.alloc.rate:                   1688.842 MB/sec
[info]                  ·gc.alloc.rate.norm:              68656.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1666.762 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67758.391 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.078 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 38661.475 ops/s
[info]                  ·gc.alloc.rate:                   1687.259 MB/sec
[info]                  ·gc.alloc.rate.norm:              68656.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1676.726 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68227.403 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.542 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 37949.140 ops/s
[info]                  ·gc.alloc.rate:                   1655.841 MB/sec
[info]                  ·gc.alloc.rate.norm:              68656.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1684.744 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69854.417 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.317 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 38910.756 ops/s
[info]                  ·gc.alloc.rate:                   1697.868 MB/sec
[info]                  ·gc.alloc.rate.norm:              68656.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1690.133 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68343.218 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.368 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson":
[info]   38506.081 ±(99.9%) 1470.412 ops/s [Average]
[info]   (min, avg, max) = (37949.140, 38506.081, 38910.756), stdev = 381.861
[info]   CI (99.9%): [37035.669, 39976.493] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1680.126 ±(99.9%) 64.377 MB/sec [Average]
[info]   (min, avg, max) = (1655.841, 1680.126, 1697.868), stdev = 16.719
[info]   CI (99.9%): [1615.749, 1744.503] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   68656.610 ±(99.9%) 5.156 B/op [Average]
[info]   (min, avg, max) = (68656.011, 68656.610, 68659.006), stdev = 1.339
[info]   CI (99.9%): [68651.454, 68661.767] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1674.619 ±(99.9%) 54.620 MB/sec [Average]
[info]   (min, avg, max) = (1654.733, 1674.619, 1690.133), stdev = 14.185
[info]   CI (99.9%): [1620.000, 1729.239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   68436.283 ±(99.9%) 3172.426 B/op [Average]
[info]   (min, avg, max) = (67758.391, 68436.283, 69854.417), stdev = 823.869
[info]   CI (99.9%): [65263.857, 71608.709] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.087, 0.125), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   3.574 ±(99.9%) 4.277 B/op [Average]
[info]   (min, avg, max) = (2.542, 3.574, 5.078), stdev = 1.111
[info]   CI (99.9%): [≈ 0, 7.851] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce
[info] # Run progress: 16.44% complete, ETA 00:51:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19333.939 ops/s
[info] # Warmup Iteration   2: 24344.172 ops/s
[info] # Warmup Iteration   3: 24434.781 ops/s
[info] Iteration   1: 25066.686 ops/s
[info]                  ·gc.alloc.rate:                   1579.390 MB/sec
[info]                  ·gc.alloc.rate.norm:              99120.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1663.682 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     104410.098 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.228 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 25126.040 ops/s
[info]                  ·gc.alloc.rate:                   1582.350 MB/sec
[info]                  ·gc.alloc.rate.norm:              99115.099 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.571 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     83720.017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.216 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 25314.125 ops/s
[info]                  ·gc.alloc.rate:                   1594.701 MB/sec
[info]                  ·gc.alloc.rate.norm:              99104.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1679.419 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     104368.889 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.294 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 25188.704 ops/s
[info]                  ·gc.alloc.rate:                   1586.128 MB/sec
[info]                  ·gc.alloc.rate.norm:              99104.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1685.340 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     105302.952 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.503 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 25291.207 ops/s
[info]                  ·gc.alloc.rate:                   1593.337 MB/sec
[info]                  ·gc.alloc.rate.norm:              99104.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1691.505 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     105209.958 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.477 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce":
[info]   25197.352 ±(99.9%) 406.960 ops/s [Average]
[info]   (min, avg, max) = (25066.686, 25197.352, 25314.125), stdev = 105.686
[info]   CI (99.9%): [24790.392, 25604.312] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate":
[info]   1587.181 ±(99.9%) 25.802 MB/sec [Average]
[info]   (min, avg, max) = (1579.390, 1587.181, 1594.701), stdev = 6.701
[info]   CI (99.9%): [1561.379, 1612.983] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   99109.434 ±(99.9%) 29.333 B/op [Average]
[info]   (min, avg, max) = (99104.017, 99109.434, 99120.017), stdev = 7.618
[info]   CI (99.9%): [99080.101, 99138.766] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1611.303 ±(99.9%) 592.720 MB/sec [Average]
[info]   (min, avg, max) = (1336.571, 1611.303, 1691.505), stdev = 153.928
[info]   CI (99.9%): [1018.583, 2204.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   100602.383 ±(99.9%) 36379.143 B/op [Average]
[info]   (min, avg, max) = (83720.017, 100602.383, 105302.952), stdev = 9447.548
[info]   CI (99.9%): [64223.240, 136981.526] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.079, 0.104), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   4.944 ±(99.9%) 8.227 B/op [Average]
[info]   (min, avg, max) = (1.294, 4.944, 6.503), stdev = 2.136
[info]   CI (99.9%): [≈ 0, 13.170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 7.000), stdev = 1.225
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala
[info] # Run progress: 16.78% complete, ETA 00:51:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 37424.614 ops/s
[info] # Warmup Iteration   2: 56620.584 ops/s
[info] # Warmup Iteration   3: 57780.526 ops/s
[info] Iteration   1: 58195.759 ops/s
[info]                  ·gc.alloc.rate:                   1019.943 MB/sec
[info]                  ·gc.alloc.rate.norm:              27584.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          981.224 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26536.878 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.126 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 58123.292 ops/s
[info]                  ·gc.alloc.rate:                   1018.817 MB/sec
[info]                  ·gc.alloc.rate.norm:              27584.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          984.371 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26651.374 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.691 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 58010.503 ops/s
[info]                  ·gc.alloc.rate:                   1016.704 MB/sec
[info]                  ·gc.alloc.rate.norm:              27584.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          987.556 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26793.187 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.565 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 57899.079 ops/s
[info]                  ·gc.alloc.rate:                   1014.767 MB/sec
[info]                  ·gc.alloc.rate.norm:              27584.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.012 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36017.298 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.698 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 58065.805 ops/s
[info]                  ·gc.alloc.rate:                   1017.653 MB/sec
[info]                  ·gc.alloc.rate.norm:              27584.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          999.251 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27085.189 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.386 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala":
[info]   58058.888 ±(99.9%) 433.987 ops/s [Average]
[info]   (min, avg, max) = (57899.079, 58058.888, 58195.759), stdev = 112.705
[info]   CI (99.9%): [57624.901, 58492.874] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1017.577 ±(99.9%) 7.653 MB/sec [Average]
[info]   (min, avg, max) = (1014.767, 1017.577, 1019.943), stdev = 1.988
[info]   CI (99.9%): [1009.924, 1025.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   27584.008 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (27584.007, 27584.008, 27584.008), stdev = 0.001
[info]   CI (99.9%): [27584.006, 27584.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1055.483 ±(99.9%) 580.776 MB/sec [Average]
[info]   (min, avg, max) = (981.224, 1055.483, 1325.012), stdev = 150.826
[info]   CI (99.9%): [474.706, 1636.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   28616.785 ±(99.9%) 15949.726 B/op [Average]
[info]   (min, avg, max) = (26536.878, 28616.785, 36017.298), stdev = 4142.093
[info]   CI (99.9%): [12667.059, 44566.511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.062, 0.125), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.693 ±(99.9%) 4.066 B/op [Average]
[info]   (min, avg, max) = (0.565, 1.693, 3.386), stdev = 1.056
[info]   CI (99.9%): [≈ 0, 5.759] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala
[info] # Run progress: 17.12% complete, ETA 00:51:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 59913.473 ops/s
[info] # Warmup Iteration   2: 66923.428 ops/s
[info] # Warmup Iteration   3: 65480.568 ops/s
[info] Iteration   1: 67638.976 ops/s
[info]                  ·gc.alloc.rate:               454.864 MB/sec
[info]                  ·gc.alloc.rate.norm:          10584.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.804 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5952.182 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 67152.840 ops/s
[info]                  ·gc.alloc.rate:                   451.669 MB/sec
[info]                  ·gc.alloc.rate.norm:              10584.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.263 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15612.638 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.683 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 39.430 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 64726.797 ops/s
[info]                  ·gc.alloc.rate:               435.268 MB/sec
[info]                  ·gc.alloc.rate.norm:          10584.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:      332.405 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8082.790 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   4: 65893.964 ops/s
[info]                  ·gc.alloc.rate:                   443.131 MB/sec
[info]                  ·gc.alloc.rate.norm:              10584.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.403 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7939.298 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.994 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 64394.618 ops/s
[info]                  ·gc.alloc.rate:                   433.063 MB/sec
[info]                  ·gc.alloc.rate.norm:              10584.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.842 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16248.662 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.526 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala":
[info]   65961.439 ±(99.9%) 5519.126 ops/s [Average]
[info]   (min, avg, max) = (64394.618, 65961.439, 67638.976), stdev = 1433.299
[info]   CI (99.9%): [60442.313, 71480.565] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   443.599 ±(99.9%) 37.167 MB/sec [Average]
[info]   (min, avg, max) = (433.063, 443.599, 454.864), stdev = 9.652
[info]   CI (99.9%): [406.432, 480.766] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   10584.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10584.006, 10584.007, 10584.007), stdev = 0.001
[info]   CI (99.9%): [10584.006, 10584.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   450.344 ±(99.9%) 766.017 MB/sec [Average]
[info]   (min, avg, max) = (255.804, 450.344, 666.263), stdev = 198.932
[info]   CI (99.9%): [≈ 0, 1216.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   10767.114 ±(99.9%) 18458.224 B/op [Average]
[info]   (min, avg, max) = (5952.182, 10767.114, 16248.662), stdev = 4793.542
[info]   CI (99.9%): [≈ 0, 29225.338] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.357 ±(99.9%) 2.855 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.357, 1.683), stdev = 0.741
[info]   CI (99.9%): [≈ 0, 3.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   8.390 ±(99.9%) 66.863 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.390, 39.430), stdev = 17.364
[info]   CI (99.9%): [≈ 0, 75.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 3.000), stdev = 0.894
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson
[info] # Run progress: 17.47% complete, ETA 00:51:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18493.895 ops/s
[info] # Warmup Iteration   2: 32707.013 ops/s
[info] # Warmup Iteration   3: 33391.657 ops/s
[info] Iteration   1: 33376.874 ops/s
[info]                  ·gc.alloc.rate:                   1707.963 MB/sec
[info]                  ·gc.alloc.rate.norm:              80536.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1650.118 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     77808.417 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.945 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 34083.330 ops/s
[info]                  ·gc.alloc.rate:                   1744.237 MB/sec
[info]                  ·gc.alloc.rate.norm:              80536.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1995.703 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     92146.842 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.807 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 33931.192 ops/s
[info]                  ·gc.alloc.rate:                   1736.415 MB/sec
[info]                  ·gc.alloc.rate.norm:              80536.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1674.535 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     77666.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.897 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 33920.726 ops/s
[info]                  ·gc.alloc.rate:                   1735.845 MB/sec
[info]                  ·gc.alloc.rate.norm:              80536.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1683.140 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     78090.708 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.829 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 34180.926 ops/s
[info]                  ·gc.alloc.rate:                   1749.584 MB/sec
[info]                  ·gc.alloc.rate.norm:              80546.871 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1689.945 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     77801.235 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.793 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson":
[info]   33898.610 ±(99.9%) 1198.632 ops/s [Average]
[info]   (min, avg, max) = (33376.874, 33898.610, 34180.926), stdev = 311.281
[info]   CI (99.9%): [32699.977, 35097.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1734.809 ±(99.9%) 61.837 MB/sec [Average]
[info]   (min, avg, max) = (1707.963, 1734.809, 1749.584), stdev = 16.059
[info]   CI (99.9%): [1672.972, 1796.646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   80538.186 ±(99.9%) 18.696 B/op [Average]
[info]   (min, avg, max) = (80536.013, 80538.186, 80546.871), stdev = 4.855
[info]   CI (99.9%): [80519.490, 80556.881] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1738.688 ±(99.9%) 556.276 MB/sec [Average]
[info]   (min, avg, max) = (1650.118, 1738.688, 1995.703), stdev = 144.463
[info]   CI (99.9%): [1182.412, 2294.964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   80702.641 ±(99.9%) 24641.700 B/op [Average]
[info]   (min, avg, max) = (77666.002, 80702.641, 92146.842), stdev = 6399.371
[info]   CI (99.9%): [56060.941, 105344.340] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.087, 0.104), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   4.054 ±(99.9%) 3.984 B/op [Average]
[info]   (min, avg, max) = (2.897, 4.054, 4.829), stdev = 1.035
[info]   CI (99.9%): [0.070, 8.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce
[info] # Run progress: 17.81% complete, ETA 00:50:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 29609.159 ops/s
[info] # Warmup Iteration   2: 38573.316 ops/s
[info] # Warmup Iteration   3: 39012.259 ops/s
[info] Iteration   1: 39040.113 ops/s
[info]                  ·gc.alloc.rate:                   616.071 MB/sec
[info]                  ·gc.alloc.rate.norm:              24826.424 B/op
[info]                  ·gc.churn.PS_Eden_Space:          660.410 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26613.195 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.793 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 72.250 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 39154.955 ops/s
[info]                  ·gc.alloc.rate:                   617.598 MB/sec
[info]                  ·gc.alloc.rate.norm:              24824.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          659.518 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26508.944 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.347 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 38257.604 ops/s
[info]                  ·gc.alloc.rate:                   603.590 MB/sec
[info]                  ·gc.alloc.rate.norm:              24824.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          660.318 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27157.088 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.282 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 39187.348 ops/s
[info]                  ·gc.alloc.rate:                   618.102 MB/sec
[info]                  ·gc.alloc.rate.norm:              24824.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          660.815 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26539.455 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.508 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 38419.085 ops/s
[info]                  ·gc.alloc.rate:               606.001 MB/sec
[info]                  ·gc.alloc.rate.norm:          24824.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.071 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13561.878 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce":
[info]   38811.821 ±(99.9%) 1691.960 ops/s [Average]
[info]   (min, avg, max) = (38257.604, 38811.821, 39187.348), stdev = 439.397
[info]   CI (99.9%): [37119.861, 40503.781] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate":
[info]   612.272 ±(99.9%) 26.642 MB/sec [Average]
[info]   (min, avg, max) = (603.590, 612.272, 618.102), stdev = 6.919
[info]   CI (99.9%): [585.630, 638.915] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   24824.494 ±(99.9%) 4.155 B/op [Average]
[info]   (min, avg, max) = (24824.011, 24824.494, 24826.424), stdev = 1.079
[info]   CI (99.9%): [24820.339, 24828.649] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   594.426 ±(99.9%) 566.895 MB/sec [Average]
[info]   (min, avg, max) = (331.071, 594.426, 660.815), stdev = 147.221
[info]   CI (99.9%): [27.531, 1161.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   24076.112 ±(99.9%) 22655.490 B/op [Average]
[info]   (min, avg, max) = (13561.878, 24076.112, 27157.088), stdev = 5883.559
[info]   CI (99.9%): [1420.622, 46731.602] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.409 ±(99.9%) 2.984 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.409, 1.793), stdev = 0.775
[info]   CI (99.9%): [≈ 0, 3.392] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   16.477 ±(99.9%) 120.211 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 16.477, 72.250), stdev = 31.219
[info]   CI (99.9%): [≈ 0, 136.689] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.140
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala
[info] # Run progress: 18.15% complete, ETA 00:50:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27762.700 ops/s
[info] # Warmup Iteration   2: 41421.545 ops/s
[info] # Warmup Iteration   3: 40424.553 ops/s
[info] Iteration   1: 40210.990 ops/s
[info]                  ·gc.alloc.rate:                   404.462 MB/sec
[info]                  ·gc.alloc.rate.norm:              15824.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.840 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20025.025 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.006 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.225 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 40053.119 ops/s
[info]                  ·gc.alloc.rate:                   402.712 MB/sec
[info]                  ·gc.alloc.rate.norm:              15824.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          326.759 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12839.546 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.078 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 81.650 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 40295.730 ops/s
[info]                  ·gc.alloc.rate:                   405.293 MB/sec
[info]                  ·gc.alloc.rate.norm:              15824.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          326.862 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12761.812 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.813 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 40284.129 ops/s
[info]                  ·gc.alloc.rate:                   405.020 MB/sec
[info]                  ·gc.alloc.rate.norm:              15824.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          327.064 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12778.308 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.813 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 41563.709 ops/s
[info]                  ·gc.alloc.rate:                   418.094 MB/sec
[info]                  ·gc.alloc.rate.norm:              15824.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.834 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24784.111 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.730 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala":
[info]   40481.535 ±(99.9%) 2359.072 ops/s [Average]
[info]   (min, avg, max) = (40053.119, 40481.535, 41563.709), stdev = 612.643
[info]   CI (99.9%): [38122.463, 42840.607] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   407.116 ±(99.9%) 23.946 MB/sec [Average]
[info]   (min, avg, max) = (402.712, 407.116, 418.094), stdev = 6.219
[info]   CI (99.9%): [383.170, 431.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   15824.011 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (15824.010, 15824.011, 15824.012), stdev = 0.001
[info]   CI (99.9%): [15824.009, 15824.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   429.472 ±(99.9%) 574.826 MB/sec [Average]
[info]   (min, avg, max) = (326.759, 429.472, 654.834), stdev = 149.280
[info]   CI (99.9%): [≈ 0, 1004.298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   16637.760 ±(99.9%) 21281.678 B/op [Average]
[info]   (min, avg, max) = (12761.812, 16637.760, 24784.111), stdev = 5526.784
[info]   CI (99.9%): [≈ 0, 37919.438] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.450 ±(99.9%) 3.509 MB/sec [Average]
[info]   (min, avg, max) = (0.006, 0.450, 2.078), stdev = 0.911
[info]   CI (99.9%): [≈ 0, 3.959] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   17.646 ±(99.9%) 137.946 B/op [Average]
[info]   (min, avg, max) = (0.225, 17.646, 81.650), stdev = 35.824
[info]   CI (99.9%): [≈ 0, 155.593] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 5.000), stdev = 1.732
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala
[info] # Run progress: 18.49% complete, ETA 00:50:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 38274.784 ops/s
[info] # Warmup Iteration   2: 44304.043 ops/s
[info] # Warmup Iteration   3: 44402.617 ops/s
[info] Iteration   1: 42492.018 ops/s
[info]                  ·gc.alloc.rate:                   416.919 MB/sec
[info]                  ·gc.alloc.rate.norm:              15440.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.839 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9474.638 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.542 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 42929.182 ops/s
[info]                  ·gc.alloc.rate:                   421.156 MB/sec
[info]                  ·gc.alloc.rate.norm:              15440.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.403 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12186.213 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.730 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63.413 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 43003.013 ops/s
[info]                  ·gc.alloc.rate:                   421.970 MB/sec
[info]                  ·gc.alloc.rate.norm:              15440.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.309 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24307.244 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.809 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 42640.101 ops/s
[info]                  ·gc.alloc.rate:               418.510 MB/sec
[info]                  ·gc.alloc.rate.norm:          15440.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.902 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12244.779 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 42762.234 ops/s
[info]                  ·gc.alloc.rate:               419.515 MB/sec
[info]                  ·gc.alloc.rate.norm:          15440.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.749 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12209.850 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala":
[info]   42765.309 ±(99.9%) 802.497 ops/s [Average]
[info]   (min, avg, max) = (42492.018, 42765.309, 43003.013), stdev = 208.406
[info]   CI (99.9%): [41962.812, 43567.806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   419.614 ±(99.9%) 7.802 MB/sec [Average]
[info]   (min, avg, max) = (416.919, 419.614, 421.970), stdev = 2.026
[info]   CI (99.9%): [411.812, 427.416] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   15440.010 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (15440.010, 15440.010, 15440.011), stdev = 0.001
[info]   CI (99.9%): [15440.009, 15440.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   383.240 ±(99.9%) 618.211 MB/sec [Average]
[info]   (min, avg, max) = (255.839, 383.240, 664.309), stdev = 160.548
[info]   CI (99.9%): [≈ 0, 1001.452] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   14084.545 ±(99.9%) 22474.182 B/op [Average]
[info]   (min, avg, max) = (9474.638, 14084.545, 24307.244), stdev = 5836.474
[info]   CI (99.9%): [≈ 0, 36558.727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.375 ±(99.9%) 2.921 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.375, 1.730), stdev = 0.758
[info]   CI (99.9%): [≈ 0, 3.296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   13.753 ±(99.9%) 107.066 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 13.753, 63.413), stdev = 27.805
[info]   CI (99.9%): [≈ 0, 120.819] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 2.000), stdev = 0.894
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 18.84% complete, ETA 00:50:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 37370.138 ops/s
[info] # Warmup Iteration   2: 43978.590 ops/s
[info] # Warmup Iteration   3: 44190.461 ops/s
[info] Iteration   1: 44386.977 ops/s
[info]                  ·gc.alloc.rate:                   384.693 MB/sec
[info]                  ·gc.alloc.rate.norm:              13640.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.810 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9070.195 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.015 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.535 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 42341.012 ops/s
[info]                  ·gc.alloc.rate:                   367.124 MB/sec
[info]                  ·gc.alloc.rate.norm:              13640.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          588.499 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21864.937 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.783 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 66.232 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 45378.746 ops/s
[info]                  ·gc.alloc.rate:                   393.300 MB/sec
[info]                  ·gc.alloc.rate.norm:              13640.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.443 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11529.415 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.444 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 45267.521 ops/s
[info]                  ·gc.alloc.rate:                   392.341 MB/sec
[info]                  ·gc.alloc.rate.norm:              13640.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.771 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11534.267 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.171 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 44637.630 ops/s
[info]                  ·gc.alloc.rate:               387.044 MB/sec
[info]                  ·gc.alloc.rate.norm:          13640.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.919 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11697.300 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc":
[info]   44402.377 ±(99.9%) 4718.640 ops/s [Average]
[info]   (min, avg, max) = (42341.012, 44402.377, 45378.746), stdev = 1225.416
[info]   CI (99.9%): [39683.737, 49121.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   384.900 ±(99.9%) 40.686 MB/sec [Average]
[info]   (min, avg, max) = (367.124, 384.900, 393.300), stdev = 10.566
[info]   CI (99.9%): [344.214, 425.587] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   13640.010 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (13640.010, 13640.010, 13640.010), stdev = 0.001
[info]   CI (99.9%): [13640.009, 13640.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   368.088 ±(99.9%) 491.185 MB/sec [Average]
[info]   (min, avg, max) = (255.810, 368.088, 588.499), stdev = 127.559
[info]   CI (99.9%): [≈ 0, 859.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   13139.223 ±(99.9%) 19247.595 B/op [Average]
[info]   (min, avg, max) = (9070.195, 13139.223, 21864.937), stdev = 4998.539
[info]   CI (99.9%): [≈ 0, 32386.817] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.380 ±(99.9%) 3.020 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.380, 1.783), stdev = 0.784
[info]   CI (99.9%): [≈ 0, 3.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   14.077 ±(99.9%) 112.316 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 14.077, 66.232), stdev = 29.168
[info]   CI (99.9%): [≈ 0, 126.392] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 4.000), stdev = 1.517
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce
[info] # Run progress: 19.18% complete, ETA 00:50:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10144.636 ops/s
[info] # Warmup Iteration   2: 14518.980 ops/s
[info] # Warmup Iteration   3: 14721.199 ops/s
[info] Iteration   1: 14469.403 ops/s
[info]                  ·gc.alloc.rate:                   1032.666 MB/sec
[info]                  ·gc.alloc.rate.norm:              112320.030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          993.901 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     108103.606 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.528 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 14982.483 ops/s
[info]                  ·gc.alloc.rate:                   1069.653 MB/sec
[info]                  ·gc.alloc.rate.norm:              112335.844 B/op
[info]                  ·gc.churn.PS_Eden_Space:          996.113 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     104612.687 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.934 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 14803.699 ops/s
[info]                  ·gc.alloc.rate:                   1056.794 MB/sec
[info]                  ·gc.alloc.rate.norm:              112352.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          998.823 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     106188.945 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.639 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 15152.936 ops/s
[info]                  ·gc.alloc.rate:                   1081.690 MB/sec
[info]                  ·gc.alloc.rate.norm:              112352.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1001.476 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     104020.455 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.324 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 14860.430 ops/s
[info]                  ·gc.alloc.rate:                   1060.769 MB/sec
[info]                  ·gc.alloc.rate.norm:              112349.871 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1005.816 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     106529.621 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.228 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce":
[info]   14853.790 ±(99.9%) 974.822 ops/s [Average]
[info]   (min, avg, max) = (14469.403, 14853.790, 15152.936), stdev = 253.158
[info]   CI (99.9%): [13878.968, 15828.612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate":
[info]   1060.314 ±(99.9%) 69.981 MB/sec [Average]
[info]   (min, avg, max) = (1032.666, 1060.314, 1081.690), stdev = 18.174
[info]   CI (99.9%): [990.334, 1130.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   112341.960 ±(99.9%) 53.898 B/op [Average]
[info]   (min, avg, max) = (112320.030, 112341.960, 112352.029), stdev = 13.997
[info]   CI (99.9%): [112288.063, 112395.858] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   999.226 ±(99.9%) 17.927 MB/sec [Average]
[info]   (min, avg, max) = (993.901, 999.226, 1005.816), stdev = 4.656
[info]   CI (99.9%): [981.299, 1017.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   105891.063 ±(99.9%) 6246.255 B/op [Average]
[info]   (min, avg, max) = (104020.455, 105891.063, 108103.606), stdev = 1622.133
[info]   CI (99.9%): [99644.808, 112137.318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.125), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   7.931 ±(99.9%) 15.322 B/op [Average]
[info]   (min, avg, max) = (4.324, 7.931, 13.228), stdev = 3.979
[info]   CI (99.9%): [≈ 0, 23.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala
[info] # Run progress: 19.52% complete, ETA 00:49:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10093.801 ops/s
[info] # Warmup Iteration   2: 16076.259 ops/s
[info] # Warmup Iteration   3: 16609.058 ops/s
[info] Iteration   1: 15941.554 ops/s
[info]                  ·gc.alloc.rate:                   967.099 MB/sec
[info]                  ·gc.alloc.rate.norm:              95464.027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          981.317 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     96867.510 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.220 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 16238.369 ops/s
[info]                  ·gc.alloc.rate:                   985.366 MB/sec
[info]                  ·gc.alloc.rate.norm:              95491.122 B/op
[info]                  ·gc.churn.PS_Eden_Space:          984.349 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     95392.589 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.070 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 16358.008 ops/s
[info]                  ·gc.alloc.rate:                   992.590 MB/sec
[info]                  ·gc.alloc.rate.norm:              95496.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          988.240 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     95077.471 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.003 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 16759.143 ops/s
[info]                  ·gc.alloc.rate:                   1016.912 MB/sec
[info]                  ·gc.alloc.rate.norm:              95496.037 B/op
[info]                  ·gc.churn.PS_Eden_Space:          993.230 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     93272.093 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.955 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 16750.723 ops/s
[info]                  ·gc.alloc.rate:                   1016.320 MB/sec
[info]                  ·gc.alloc.rate.norm:              95469.570 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.399 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     93692.149 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.735 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala":
[info]   16409.560 ±(99.9%) 1347.167 ops/s [Average]
[info]   (min, avg, max) = (15941.554, 16409.560, 16759.143), stdev = 349.855
[info]   CI (99.9%): [15062.392, 17756.727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   995.657 ±(99.9%) 81.903 MB/sec [Average]
[info]   (min, avg, max) = (967.099, 995.657, 1016.912), stdev = 21.270
[info]   CI (99.9%): [913.755, 1077.560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   95483.357 ±(99.9%) 59.196 B/op [Average]
[info]   (min, avg, max) = (95464.027, 95483.357, 95496.037), stdev = 15.373
[info]   CI (99.9%): [95424.160, 95542.553] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   988.907 ±(99.9%) 25.076 MB/sec [Average]
[info]   (min, avg, max) = (981.317, 988.907, 997.399), stdev = 6.512
[info]   CI (99.9%): [963.831, 1013.982] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   94860.362 ±(99.9%) 5528.848 B/op [Average]
[info]   (min, avg, max) = (93272.093, 94860.362, 96867.510), stdev = 1435.824
[info]   CI (99.9%): [89331.514, 100389.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.067, 0.125), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   6.397 ±(99.9%) 16.524 B/op [Average]
[info]   (min, avg, max) = (1.955, 6.397, 11.735), stdev = 4.291
[info]   CI (99.9%): [≈ 0, 22.921] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala
[info] # Run progress: 19.86% complete, ETA 00:49:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 71837.147 ops/s
[info] # Warmup Iteration   2: 71569.201 ops/s
[info] # Warmup Iteration   3: 74364.603 ops/s
[info] Iteration   1: 74327.342 ops/s
[info]                  ·gc.alloc.rate:               193.438 MB/sec
[info]                  ·gc.alloc.rate.norm:          4096.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.793 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5416.373 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 73695.038 ops/s
[info]                  ·gc.alloc.rate:      191.796 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096.006 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 71661.254 ops/s
[info]                  ·gc.alloc.rate:               186.504 MB/sec
[info]                  ·gc.alloc.rate.norm:          4096.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.812 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5618.155 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   4: 74355.149 ops/s
[info]                  ·gc.alloc.rate:                   193.507 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.796 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5414.480 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.221 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 74673.960 ops/s
[info]                  ·gc.alloc.rate:               194.341 MB/sec
[info]                  ·gc.alloc.rate.norm:          4096.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.807 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5391.497 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala":
[info]   73742.548 ±(99.9%) 4684.049 ops/s [Average]
[info]   (min, avg, max) = (71661.254, 73742.548, 74673.960), stdev = 1216.433
[info]   CI (99.9%): [69058.499, 78426.597] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   191.917 ±(99.9%) 12.182 MB/sec [Average]
[info]   (min, avg, max) = (186.504, 191.917, 194.341), stdev = 3.164
[info]   CI (99.9%): [179.735, 204.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.006, 4096.006, 4096.006), stdev = 0.001
[info]   CI (99.9%): [4096.005, 4096.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   204.642 ±(99.9%) 440.506 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.642, 255.812), stdev = 114.398
[info]   CI (99.9%): [≈ 0, 645.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4368.101 ±(99.9%) 9409.304 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4368.101, 5618.155), stdev = 2443.566
[info]   CI (99.9%): [≈ 0, 13777.405] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.002 ±(99.9%) 0.018 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.010), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.044 ±(99.9%) 0.380 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.044, 0.221), stdev = 0.099
[info]   CI (99.9%): [≈ 0, 0.424] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 2.000), stdev = 0.894
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson
[info] # Run progress: 20.21% complete, ETA 00:49:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6759.031 ops/s
[info] # Warmup Iteration   2: 12762.387 ops/s
[info] # Warmup Iteration   3: 13353.756 ops/s
[info] Iteration   1: 13350.866 ops/s
[info]                  ·gc.alloc.rate:                   1279.267 MB/sec
[info]                  ·gc.alloc.rate.norm:              150800.032 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1314.242 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     154922.903 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.908 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 12801.844 ops/s
[info]                  ·gc.alloc.rate:                   1226.684 MB/sec
[info]                  ·gc.alloc.rate.norm:              150800.036 B/op
[info]                  ·gc.churn.PS_Eden_Space:          989.597 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     121654.143 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.118 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 13219.775 ops/s
[info]                  ·gc.alloc.rate:                   1266.668 MB/sec
[info]                  ·gc.alloc.rate.norm:              150801.073 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1326.937 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     157976.357 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.957 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 13189.867 ops/s
[info]                  ·gc.alloc.rate:                   1263.826 MB/sec
[info]                  ·gc.alloc.rate.norm:              150800.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.207 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     159197.887 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.451 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 13393.022 ops/s
[info]                  ·gc.alloc.rate:                   1283.227 MB/sec
[info]                  ·gc.alloc.rate.norm:              150800.032 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.821 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     157568.191 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.338 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson":
[info]   13191.075 ±(99.9%) 900.263 ops/s [Average]
[info]   (min, avg, max) = (12801.844, 13191.075, 13393.022), stdev = 233.796
[info]   CI (99.9%): [12290.811, 14091.338] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1263.935 ±(99.9%) 86.154 MB/sec [Average]
[info]   (min, avg, max) = (1226.684, 1263.935, 1283.227), stdev = 22.374
[info]   CI (99.9%): [1177.780, 1350.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   150800.241 ±(99.9%) 1.791 B/op [Average]
[info]   (min, avg, max) = (150800.032, 150800.241, 150801.073), stdev = 0.465
[info]   CI (99.9%): [150798.450, 150802.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1261.161 ±(99.9%) 585.794 MB/sec [Average]
[info]   (min, avg, max) = (989.597, 1261.161, 1340.821), stdev = 152.129
[info]   CI (99.9%): [675.367, 1846.955] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   150263.896 ±(99.9%) 61876.724 B/op [Average]
[info]   (min, avg, max) = (121654.143, 150263.896, 159197.887), stdev = 16069.189
[info]   CI (99.9%): [88387.173, 212140.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.050 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.050, 0.062), stdev = 0.011
[info]   CI (99.9%): [0.006, 0.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   5.954 ±(99.9%) 5.074 B/op [Average]
[info]   (min, avg, max) = (4.908, 5.954, 7.451), stdev = 1.318
[info]   CI (99.9%): [0.880, 11.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce
[info] # Run progress: 20.55% complete, ETA 00:49:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 42121.097 ops/s
[info] # Warmup Iteration   2: 55681.188 ops/s
[info] # Warmup Iteration   3: 55329.602 ops/s
[info] Iteration   1: 55503.550 ops/s
[info]                  ·gc.alloc.rate:                   1376.595 MB/sec
[info]                  ·gc.alloc.rate.norm:              39016.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1326.287 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37590.140 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.361 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 55953.191 ops/s
[info]                  ·gc.alloc.rate:                   1387.131 MB/sec
[info]                  ·gc.alloc.rate.norm:              39016.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.400 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37448.474 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.928 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 55671.065 ops/s
[info]                  ·gc.alloc.rate:                   1380.143 MB/sec
[info]                  ·gc.alloc.rate.norm:              39016.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.683 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37815.704 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.177 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 56042.513 ops/s
[info]                  ·gc.alloc.rate:                   1389.354 MB/sec
[info]                  ·gc.alloc.rate.norm:              39016.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.051 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37715.735 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.754 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 55682.559 ops/s
[info]                  ·gc.alloc.rate:                   1380.430 MB/sec
[info]                  ·gc.alloc.rate.norm:              39016.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348.024 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     38100.081 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.707 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce":
[info]   55770.576 ±(99.9%) 852.920 ops/s [Average]
[info]   (min, avg, max) = (55503.550, 55770.576, 56042.513), stdev = 221.501
[info]   CI (99.9%): [54917.656, 56623.496] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1382.731 ±(99.9%) 20.454 MB/sec [Average]
[info]   (min, avg, max) = (1376.595, 1382.731, 1389.354), stdev = 5.312
[info]   CI (99.9%): [1362.277, 1403.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   39016.008 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (39016.008, 39016.008, 39016.008), stdev = 0.001
[info]   CI (99.9%): [39016.007, 39016.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1337.289 ±(99.9%) 33.587 MB/sec [Average]
[info]   (min, avg, max) = (1326.287, 1337.289, 1348.024), stdev = 8.722
[info]   CI (99.9%): [1303.702, 1370.876] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   37734.027 ±(99.9%) 949.568 B/op [Average]
[info]   (min, avg, max) = (37448.474, 37734.027, 38100.081), stdev = 246.600
[info]   CI (99.9%): [36784.458, 38683.595] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.185 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.092, 0.167), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2.585 ±(99.9%) 5.218 B/op [Average]
[info]   (min, avg, max) = (1.177, 2.585, 4.707), stdev = 1.355
[info]   CI (99.9%): [≈ 0, 7.803] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala
[info] # Run progress: 20.89% complete, ETA 00:49:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 248983.320 ops/s
[info] # Warmup Iteration   2: 283047.209 ops/s
[info] # Warmup Iteration   3: 278932.507 ops/s
[info] Iteration   1: 281136.872 ops/s
[info]                  ·gc.alloc.rate:                   446.039 MB/sec
[info]                  ·gc.alloc.rate.norm:              2496.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.910 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1432.053 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.027 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.149 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 275685.961 ops/s
[info]                  ·gc.alloc.rate:                   437.283 MB/sec
[info]                  ·gc.alloc.rate.norm:              2496.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.905 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3795.262 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.828 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.436 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 279757.482 ops/s
[info]                  ·gc.alloc.rate:               443.674 MB/sec
[info]                  ·gc.alloc.rate.norm:          2496.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.736 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1866.267 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   4: 285641.318 ops/s
[info]                  ·gc.alloc.rate:                   452.987 MB/sec
[info]                  ·gc.alloc.rate.norm:              2496.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.723 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1827.830 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.344 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 285508.239 ops/s
[info]                  ·gc.alloc.rate:                   452.787 MB/sec
[info]                  ·gc.alloc.rate.norm:              2496.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.475 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3657.426 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.344 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala":
[info]   281545.974 ±(99.9%) 16128.775 ops/s [Average]
[info]   (min, avg, max) = (275685.961, 281545.974, 285641.318), stdev = 4188.592
[info]   CI (99.9%): [265417.199, 297674.750] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   446.554 ±(99.9%) 25.451 MB/sec [Average]
[info]   (min, avg, max) = (437.283, 446.554, 452.987), stdev = 6.610
[info]   CI (99.9%): [421.103, 472.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2496.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2496.002, 2496.002, 2496.002), stdev = 0.001
[info]   CI (99.9%): [2496.001, 2496.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   449.550 ±(99.9%) 763.849 MB/sec [Average]
[info]   (min, avg, max) = (255.910, 449.550, 664.905), stdev = 198.369
[info]   CI (99.9%): [≈ 0, 1213.398] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2515.767 ±(99.9%) 4309.469 B/op [Average]
[info]   (min, avg, max) = (1432.053, 2515.767, 3795.262), stdev = 1119.155
[info]   CI (99.9%): [≈ 0, 6825.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.396 ±(99.9%) 3.085 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.396, 1.828), stdev = 0.801
[info]   CI (99.9%): [≈ 0, 3.481] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.255 ±(99.9%) 17.620 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.255, 10.436), stdev = 4.576
[info]   CI (99.9%): [≈ 0, 19.874] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 21.23% complete, ETA 00:48:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 298878.912 ops/s
[info] # Warmup Iteration   2: 326758.269 ops/s
[info] # Warmup Iteration   3: 338212.821 ops/s
[info] Iteration   1: 337809.654 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 338027.242 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 338089.956 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 335581.865 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 337222.488 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc":
[info]   337346.241 ±(99.9%) 4020.173 ops/s [Average]
[info]   (min, avg, max) = (335581.865, 337346.241, 338089.956), stdev = 1044.026
[info]   CI (99.9%): [333326.068, 341366.414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson
[info] # Run progress: 21.58% complete, ETA 00:48:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 52219.963 ops/s
[info] # Warmup Iteration   2: 71760.100 ops/s
[info] # Warmup Iteration   3: 71627.567 ops/s
[info] Iteration   1: 71740.286 ops/s
[info]                  ·gc.alloc.rate:                   1354.499 MB/sec
[info]                  ·gc.alloc.rate.norm:              29712.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1317.749 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28905.876 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.457 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 72024.080 ops/s
[info]                  ·gc.alloc.rate:                   1360.360 MB/sec
[info]                  ·gc.alloc.rate.norm:              29712.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.565 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28952.034 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.729 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 71904.937 ops/s
[info]                  ·gc.alloc.rate:                   1357.404 MB/sec
[info]                  ·gc.alloc.rate.norm:              29712.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1666.628 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36480.577 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.367 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 72435.262 ops/s
[info]                  ·gc.alloc.rate:                   1367.580 MB/sec
[info]                  ·gc.alloc.rate.norm:              29712.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.362 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29120.678 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.357 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 71455.325 ops/s
[info]                  ·gc.alloc.rate:                   1348.993 MB/sec
[info]                  ·gc.alloc.rate.norm:              29712.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.586 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29636.955 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.375 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson":
[info]   71911.978 ±(99.9%) 1394.301 ops/s [Average]
[info]   (min, avg, max) = (71455.325, 71911.978, 72435.262), stdev = 362.095
[info]   CI (99.9%): [70517.677, 73306.278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1357.767 ±(99.9%) 26.595 MB/sec [Average]
[info]   (min, avg, max) = (1348.993, 1357.767, 1367.580), stdev = 6.907
[info]   CI (99.9%): [1331.172, 1384.362] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   29712.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (29712.006, 29712.006, 29712.006), stdev = 0.001
[info]   CI (99.9%): [29712.005, 29712.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1399.178 ±(99.9%) 577.310 MB/sec [Average]
[info]   (min, avg, max) = (1317.749, 1399.178, 1666.628), stdev = 149.926
[info]   CI (99.9%): [821.868, 1976.488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   30619.224 ±(99.9%) 12666.370 B/op [Average]
[info]   (min, avg, max) = (28905.876, 30619.224, 36480.577), stdev = 3289.416
[info]   CI (99.9%): [17952.854, 43285.594] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.067, 0.125), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.457 ±(99.9%) 3.131 B/op [Average]
[info]   (min, avg, max) = (0.457, 1.457, 2.729), stdev = 0.813
[info]   CI (99.9%): [≈ 0, 4.588] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce
[info] # Run progress: 21.92% complete, ETA 00:48:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18979.672 ops/s
[info] # Warmup Iteration   2: 25983.756 ops/s
[info] # Warmup Iteration   3: 26137.466 ops/s
[info] Iteration   1: 26775.281 ops/s
[info]                  ·gc.alloc.rate:                   594.825 MB/sec
[info]                  ·gc.alloc.rate.norm:              34960.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          658.875 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     38724.483 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.813 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 106.565 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 26720.349 ops/s
[info]                  ·gc.alloc.rate:               593.552 MB/sec
[info]                  ·gc.alloc.rate.norm:          34960.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:      329.076 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19382.471 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 26940.725 ops/s
[info]                  ·gc.alloc.rate:                   598.720 MB/sec
[info]                  ·gc.alloc.rate.norm:              34960.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          659.129 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     38487.351 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.648 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 26419.401 ops/s
[info]                  ·gc.alloc.rate:                   586.855 MB/sec
[info]                  ·gc.alloc.rate.norm:              34960.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          659.829 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39307.214 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.720 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 26357.950 ops/s
[info]                  ·gc.alloc.rate:                   585.542 MB/sec
[info]                  ·gc.alloc.rate.norm:              34960.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          660.875 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39457.833 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.486 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce":
[info]   26642.741 ±(99.9%) 949.812 ops/s [Average]
[info]   (min, avg, max) = (26357.950, 26642.741, 26940.725), stdev = 246.663
[info]   CI (99.9%): [25692.930, 27592.553] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate":
[info]   591.899 ±(99.9%) 21.412 MB/sec [Average]
[info]   (min, avg, max) = (585.542, 591.899, 598.720), stdev = 5.561
[info]   CI (99.9%): [570.487, 613.311] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   34960.018 ±(99.9%) 0.012 B/op [Average]
[info]   (min, avg, max) = (34960.016, 34960.018, 34960.023), stdev = 0.003
[info]   CI (99.9%): [34960.006, 34960.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   593.557 ±(99.9%) 569.322 MB/sec [Average]
[info]   (min, avg, max) = (329.076, 593.557, 660.875), stdev = 147.851
[info]   CI (99.9%): [24.234, 1162.879] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   35071.871 ±(99.9%) 33807.861 B/op [Average]
[info]   (min, avg, max) = (19382.471, 35071.871, 39457.833), stdev = 8779.794
[info]   CI (99.9%): [1264.010, 68879.731] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.396 ±(99.9%) 3.052 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.396, 1.813), stdev = 0.793
[info]   CI (99.9%): [≈ 0, 3.448] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   23.284 ±(99.9%) 179.363 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 23.284, 106.565), stdev = 46.580
[info]   CI (99.9%): [≈ 0, 202.647] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala
[info] # Run progress: 22.26% complete, ETA 00:48:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 109405.198 ops/s
[info] # Warmup Iteration   2: 119521.584 ops/s
[info] # Warmup Iteration   3: 121998.870 ops/s
[info] Iteration   1: 118233.430 ops/s
[info]                  ·gc.alloc.rate:                   461.615 MB/sec
[info]                  ·gc.alloc.rate.norm:              6144.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          588.614 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7834.326 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.647 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21.917 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 125044.793 ops/s
[info]                  ·gc.alloc.rate:                   488.232 MB/sec
[info]                  ·gc.alloc.rate.norm:              6144.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.793 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4187.932 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.524 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 124262.754 ops/s
[info]                  ·gc.alloc.rate:                   485.094 MB/sec
[info]                  ·gc.alloc.rate.norm:              6144.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.402 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4210.064 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.264 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 124436.682 ops/s
[info]                  ·gc.alloc.rate:                   485.790 MB/sec
[info]                  ·gc.alloc.rate.norm:              6144.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.822 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8408.289 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.790 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 124020.816 ops/s
[info]                  ·gc.alloc.rate:               484.350 MB/sec
[info]                  ·gc.alloc.rate.norm:          6144.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      332.558 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4218.516 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala":
[info]   123199.695 ±(99.9%) 10789.131 ops/s [Average]
[info]   (min, avg, max) = (118233.430, 123199.695, 125044.793), stdev = 2801.903
[info]   CI (99.9%): [112410.564, 133988.826] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   481.016 ±(99.9%) 42.138 MB/sec [Average]
[info]   (min, avg, max) = (461.615, 481.016, 488.232), stdev = 10.943
[info]   CI (99.9%): [438.879, 523.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   6144.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6144.003, 6144.004, 6144.004), stdev = 0.001
[info]   CI (99.9%): [6144.003, 6144.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   450.238 ±(99.9%) 628.968 MB/sec [Average]
[info]   (min, avg, max) = (332.402, 450.238, 664.822), stdev = 163.341
[info]   CI (99.9%): [≈ 0, 1079.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   5771.826 ±(99.9%) 8295.755 B/op [Average]
[info]   (min, avg, max) = (4187.932, 5771.826, 8408.289), stdev = 2154.381
[info]   CI (99.9%): [≈ 0, 14067.581] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.354 ±(99.9%) 2.783 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.354, 1.647), stdev = 0.723
[info]   CI (99.9%): [≈ 0, 3.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4.699 ±(99.9%) 37.080 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.699, 21.917), stdev = 9.630
[info]   CI (99.9%): [≈ 0, 41.779] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 4.000), stdev = 1.304
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson
[info] # Run progress: 22.60% complete, ETA 00:48:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10293.301 ops/s
[info] # Warmup Iteration   2: 21043.272 ops/s
[info] # Warmup Iteration   3: 21835.616 ops/s
[info] Iteration   1: 21422.250 ops/s
[info]                  ·gc.alloc.rate:                   1197.036 MB/sec
[info]                  ·gc.alloc.rate.norm:              87944.215 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1303.010 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     95729.972 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.588 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 21483.059 ops/s
[info]                  ·gc.alloc.rate:                   1200.622 MB/sec
[info]                  ·gc.alloc.rate.norm:              87944.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          983.022 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72005.114 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.575 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 21771.449 ops/s
[info]                  ·gc.alloc.rate:                   1216.588 MB/sec
[info]                  ·gc.alloc.rate.norm:              87944.027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1317.605 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     95246.295 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.019 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 21867.897 ops/s
[info]                  ·gc.alloc.rate:                   1221.976 MB/sec
[info]                  ·gc.alloc.rate.norm:              87944.021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1327.624 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     95547.365 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.996 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 21711.791 ops/s
[info]                  ·gc.alloc.rate:                   1213.731 MB/sec
[info]                  ·gc.alloc.rate.norm:              87944.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.531 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     96769.344 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.018 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson":
[info]   21651.289 ±(99.9%) 735.106 ops/s [Average]
[info]   (min, avg, max) = (21422.250, 21651.289, 21867.897), stdev = 190.905
[info]   CI (99.9%): [20916.184, 22386.395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1209.991 ±(99.9%) 41.148 MB/sec [Average]
[info]   (min, avg, max) = (1197.036, 1209.991, 1221.976), stdev = 10.686
[info]   CI (99.9%): [1168.843, 1251.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   87944.061 ±(99.9%) 0.332 B/op [Average]
[info]   (min, avg, max) = (87944.020, 87944.061, 87944.215), stdev = 0.086
[info]   CI (99.9%): [87943.729, 87944.392] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1253.359 ±(99.9%) 583.795 MB/sec [Average]
[info]   (min, avg, max) = (983.022, 1253.359, 1335.531), stdev = 151.610
[info]   CI (99.9%): [669.563, 1837.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   91059.618 ±(99.9%) 41075.535 B/op [Average]
[info]   (min, avg, max) = (72005.114, 91059.618, 96769.344), stdev = 10667.186
[info]   CI (99.9%): [49984.083, 132135.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.058 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.058, 0.083), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   4.239 ±(99.9%) 4.885 B/op [Average]
[info]   (min, avg, max) = (2.996, 4.239, 6.019), stdev = 1.269
[info]   CI (99.9%): [≈ 0, 9.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 5.000), stdev = 0.837
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce
[info] # Run progress: 22.95% complete, ETA 00:47:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 135963.046 ops/s
[info] # Warmup Iteration   2: 163907.336 ops/s
[info] # Warmup Iteration   3: 162358.726 ops/s
[info] Iteration   1: 166795.032 ops/s
[info]                  ·gc.alloc.rate:                   1091.205 MB/sec
[info]                  ·gc.alloc.rate.norm:              10296.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1321.068 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12464.864 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.589 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 162537.428 ops/s
[info]                  ·gc.alloc.rate:                   1063.274 MB/sec
[info]                  ·gc.alloc.rate.norm:              10296.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          994.195 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9627.094 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.008 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 161040.811 ops/s
[info]                  ·gc.alloc.rate:                   1053.514 MB/sec
[info]                  ·gc.alloc.rate.norm:              10296.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.550 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9749.063 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.610 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 162202.741 ops/s
[info]                  ·gc.alloc.rate:                   1061.307 MB/sec
[info]                  ·gc.alloc.rate.norm:              10296.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1001.413 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9714.962 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.808 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 165442.257 ops/s
[info]                  ·gc.alloc.rate:                   1082.354 MB/sec
[info]                  ·gc.alloc.rate.norm:              10296.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1004.625 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9556.591 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.792 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce":
[info]   163603.654 ±(99.9%) 9280.155 ops/s [Average]
[info]   (min, avg, max) = (161040.811, 163603.654, 166795.032), stdev = 2410.027
[info]   CI (99.9%): [154323.499, 172883.809] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1070.331 ±(99.9%) 60.711 MB/sec [Average]
[info]   (min, avg, max) = (1053.514, 1070.331, 1091.205), stdev = 15.766
[info]   CI (99.9%): [1009.620, 1131.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   10296.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10296.003, 10296.003, 10296.003), stdev = 0.001
[info]   CI (99.9%): [10296.002, 10296.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1063.770 ±(99.9%) 554.059 MB/sec [Average]
[info]   (min, avg, max) = (994.195, 1063.770, 1321.068), stdev = 143.887
[info]   CI (99.9%): [509.711, 1617.830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   10222.515 ±(99.9%) 4835.539 B/op [Average]
[info]   (min, avg, max) = (9556.591, 10222.515, 12464.864), stdev = 1255.774
[info]   CI (99.9%): [5386.976, 15058.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.079, 0.104), stdev = 0.017
[info]   CI (99.9%): [0.012, 0.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.762 ±(99.9%) 0.657 B/op [Average]
[info]   (min, avg, max) = (0.589, 0.762, 1.008), stdev = 0.171
[info]   CI (99.9%): [0.105, 1.418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 4.000), stdev = 0.894
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala
[info] # Run progress: 23.29% complete, ETA 00:47:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 518978.507 ops/s
[info] # Warmup Iteration   2: 563229.171 ops/s
[info] # Warmup Iteration   3: 566381.690 ops/s
[info] Iteration   1: 567265.265 ops/s
[info]                  ·gc.alloc.rate:                   435.369 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.783 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     709.711 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.029 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 539010.311 ops/s
[info]                  ·gc.alloc.rate:                   413.747 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.102 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     969.627 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.761 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.142 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 545091.019 ops/s
[info]                  ·gc.alloc.rate:                   418.501 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.003 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1916.640 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.120 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 542544.625 ops/s
[info]                  ·gc.alloc.rate:                   416.400 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.725 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     962.354 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.060 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 542921.051 ops/s
[info]                  ·gc.alloc.rate:               416.720 MB/sec
[info]                  ·gc.alloc.rate.norm:          1208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.742 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 961.663 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala":
[info]   547366.454 ±(99.9%) 43649.094 ops/s [Average]
[info]   (min, avg, max) = (539010.311, 547366.454, 567265.265), stdev = 11335.531
[info]   CI (99.9%): [503717.360, 591015.548] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   420.147 ±(99.9%) 33.412 MB/sec [Average]
[info]   (min, avg, max) = (413.747, 420.147, 435.369), stdev = 8.677
[info]   CI (99.9%): [386.735, 453.559] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1208.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1208.001, 1208.001, 1208.001), stdev = 0.001
[info]   CI (99.9%): [1208.001, 1208.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   383.071 ±(99.9%) 617.887 MB/sec [Average]
[info]   (min, avg, max) = (255.783, 383.071, 664.003), stdev = 160.463
[info]   CI (99.9%): [≈ 0, 1000.958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1103.999 ±(99.9%) 1800.178 B/op [Average]
[info]   (min, avg, max) = (709.711, 1103.999, 1916.640), stdev = 467.500
[info]   CI (99.9%): [≈ 0, 2904.177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.367 ±(99.9%) 3.002 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.367, 1.761), stdev = 0.780
[info]   CI (99.9%): [≈ 0, 3.369] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.070 ±(99.9%) 8.766 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.070, 5.142), stdev = 2.277
[info]   CI (99.9%): [≈ 0, 9.836] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 23.63% complete, ETA 00:47:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 556209.124 ops/s
[info] # Warmup Iteration   2: 605804.283 ops/s
[info] # Warmup Iteration   3: 604947.592 ops/s
[info] Iteration   1: 605512.412 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 606602.080 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 606146.389 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 606616.151 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 606259.623 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc":
[info]   606227.331 ±(99.9%) 1733.134 ops/s [Average]
[info]   (min, avg, max) = (605512.412, 606227.331, 606616.151), stdev = 450.089
[info]   CI (99.9%): [604494.197, 607960.465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson
[info] # Run progress: 23.97% complete, ETA 00:47:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 193210.600 ops/s
[info] # Warmup Iteration   2: 318971.245 ops/s
[info] # Warmup Iteration   3: 327434.345 ops/s
[info] Iteration   1: 332752.018 ops/s
[info]                  ·gc.alloc.rate:                   920.364 MB/sec
[info]                  ·gc.alloc.rate.norm:              4352.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          977.496 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4622.151 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.492 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 330452.783 ops/s
[info]                  ·gc.alloc.rate:                   914.215 MB/sec
[info]                  ·gc.alloc.rate.norm:              4352.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          979.081 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4660.789 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.496 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 329474.437 ops/s
[info]                  ·gc.alloc.rate:                   911.052 MB/sec
[info]                  ·gc.alloc.rate.norm:              4352.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          983.568 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4698.403 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.199 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 322764.869 ops/s
[info]                  ·gc.alloc.rate:                   892.524 MB/sec
[info]                  ·gc.alloc.rate.norm:              4352.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          658.489 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3210.831 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.406 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 328652.141 ops/s
[info]                  ·gc.alloc.rate:                   908.759 MB/sec
[info]                  ·gc.alloc.rate.norm:              4352.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          991.177 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4746.694 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.498 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson":
[info]   328819.250 ±(99.9%) 14310.703 ops/s [Average]
[info]   (min, avg, max) = (322764.869, 328819.250, 332752.018), stdev = 3716.444
[info]   CI (99.9%): [314508.547, 343129.952] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   909.383 ±(99.9%) 39.987 MB/sec [Average]
[info]   (min, avg, max) = (892.524, 909.383, 920.364), stdev = 10.384
[info]   CI (99.9%): [869.396, 949.369] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4352.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4352.001, 4352.001, 4352.001), stdev = 0.001
[info]   CI (99.9%): [4352.001, 4352.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   917.962 ±(99.9%) 558.910 MB/sec [Average]
[info]   (min, avg, max) = (658.489, 917.962, 991.177), stdev = 145.147
[info]   CI (99.9%): [359.052, 1476.872] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4387.774 ±(99.9%) 2539.658 B/op [Average]
[info]   (min, avg, max) = (3210.831, 4387.774, 4746.694), stdev = 659.541
[info]   CI (99.9%): [1848.116, 6927.431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.087, 0.104), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.418 ±(99.9%) 0.495 B/op [Average]
[info]   (min, avg, max) = (0.199, 0.418, 0.498), stdev = 0.129
[info]   CI (99.9%): [≈ 0, 0.914] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce
[info] # Run progress: 24.32% complete, ETA 00:46:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 29016.607 ops/s
[info] # Warmup Iteration   2: 34963.372 ops/s
[info] # Warmup Iteration   3: 35075.703 ops/s
[info] Iteration   1: 35627.540 ops/s
[info]                  ·gc.alloc.rate:                   1678.710 MB/sec
[info]                  ·gc.alloc.rate.norm:              74160.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1664.351 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73525.683 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.518 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 35914.403 ops/s
[info]                  ·gc.alloc.rate:                   1692.603 MB/sec
[info]                  ·gc.alloc.rate.norm:              74160.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1674.998 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73388.643 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.561 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 35890.167 ops/s
[info]                  ·gc.alloc.rate:                   1691.133 MB/sec
[info]                  ·gc.alloc.rate.norm:              74160.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1681.990 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73759.037 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.651 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 35564.810 ops/s
[info]                  ·gc.alloc.rate:                   1676.256 MB/sec
[info]                  ·gc.alloc.rate.norm:              74160.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1688.089 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74683.515 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.764 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 35536.380 ops/s
[info]                  ·gc.alloc.rate:                   1674.776 MB/sec
[info]                  ·gc.alloc.rate.norm:              74160.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1692.639 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74950.969 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.766 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce":
[info]   35706.660 ±(99.9%) 700.057 ops/s [Average]
[info]   (min, avg, max) = (35536.380, 35706.660, 35914.403), stdev = 181.802
[info]   CI (99.9%): [35006.603, 36406.717] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate":
[info]   1682.696 ±(99.9%) 32.754 MB/sec [Average]
[info]   (min, avg, max) = (1674.776, 1682.696, 1692.603), stdev = 8.506
[info]   CI (99.9%): [1649.941, 1715.450] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   74160.013 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (74160.012, 74160.013, 74160.018), stdev = 0.002
[info]   CI (99.9%): [74160.004, 74160.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1680.413 ±(99.9%) 42.974 MB/sec [Average]
[info]   (min, avg, max) = (1664.351, 1680.413, 1692.639), stdev = 11.160
[info]   CI (99.9%): [1637.439, 1723.387] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   74061.569 ±(99.9%) 2729.192 B/op [Average]
[info]   (min, avg, max) = (73388.643, 74061.569, 74950.969), stdev = 708.762
[info]   CI (99.9%): [71332.378, 76790.761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.087, 0.125), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3.852 ±(99.9%) 4.589 B/op [Average]
[info]   (min, avg, max) = (2.764, 3.852, 5.518), stdev = 1.192
[info]   CI (99.9%): [≈ 0, 8.441] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala
[info] # Run progress: 24.66% complete, ETA 00:46:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 60810.045 ops/s
[info] # Warmup Iteration   2: 91009.260 ops/s
[info] # Warmup Iteration   3: 92790.612 ops/s
[info] Iteration   1: 94141.764 ops/s
[info]                  ·gc.alloc.rate:                   1100.091 MB/sec
[info]                  ·gc.alloc.rate.norm:              18386.450 B/op
[info]                  ·gc.churn.PS_Eden_Space:          982.155 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16415.322 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.044 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 93780.394 ops/s
[info]                  ·gc.alloc.rate:                   1094.640 MB/sec
[info]                  ·gc.alloc.rate.norm:              18368.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          985.398 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16534.927 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.699 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 93855.699 ops/s
[info]                  ·gc.alloc.rate:                   1095.524 MB/sec
[info]                  ·gc.alloc.rate.norm:              18368.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1320.466 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22139.484 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.094 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 93301.724 ops/s
[info]                  ·gc.alloc.rate:                   1088.894 MB/sec
[info]                  ·gc.alloc.rate.norm:              18368.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          996.216 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16804.679 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.405 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 92493.390 ops/s
[info]                  ·gc.alloc.rate:                   1079.453 MB/sec
[info]                  ·gc.alloc.rate.norm:              18368.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1000.235 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17020.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.063 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala":
[info]   93514.594 ±(99.9%) 2486.958 ops/s [Average]
[info]   (min, avg, max) = (92493.390, 93514.594, 94141.764), stdev = 645.855
[info]   CI (99.9%): [91027.636, 96001.553] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1091.720 ±(99.9%) 30.535 MB/sec [Average]
[info]   (min, avg, max) = (1079.453, 1091.720, 1100.091), stdev = 7.930
[info]   CI (99.9%): [1061.185, 1122.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   18371.694 ±(99.9%) 31.764 B/op [Average]
[info]   (min, avg, max) = (18368.005, 18371.694, 18386.450), stdev = 8.249
[info]   CI (99.9%): [18339.930, 18403.458] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1056.894 ±(99.9%) 568.084 MB/sec [Average]
[info]   (min, avg, max) = (982.155, 1056.894, 1320.466), stdev = 147.530
[info]   CI (99.9%): [488.810, 1624.978] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   17782.886 ±(99.9%) 9421.581 B/op [Average]
[info]   (min, avg, max) = (16415.322, 17782.886, 22139.484), stdev = 2446.755
[info]   CI (99.9%): [8361.305, 27204.467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.125), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.261 ±(99.9%) 2.036 B/op [Average]
[info]   (min, avg, max) = (0.699, 1.261, 2.094), stdev = 0.529
[info]   CI (99.9%): [≈ 0, 3.296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 4.000), stdev = 0.837
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala
[info] # Run progress: 25.00% complete, ETA 00:46:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 145446.708 ops/s
[info] # Warmup Iteration   2: 152181.457 ops/s
[info] # Warmup Iteration   3: 159697.824 ops/s
[info] Iteration   1: 160629.158 ops/s
[info]                  ·gc.alloc.rate:      104.528 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 160539.763 ops/s
[info]                  ·gc.alloc.rate:                   104.473 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.848 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2507.711 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.174 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21.310 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 158079.393 ops/s
[info]                  ·gc.alloc.rate:      102.869 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 158124.924 ops/s
[info]                  ·gc.alloc.rate:      102.881 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 158087.151 ops/s
[info]                  ·gc.alloc.rate:                   102.858 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.812 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2546.729 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.037 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.368 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala":
[info]   159092.078 ±(99.9%) 5247.767 ops/s [Average]
[info]   (min, avg, max) = (158079.393, 159092.078, 160629.158), stdev = 1362.828
[info]   CI (99.9%): [153844.311, 164339.844] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   103.522 ±(99.9%) 3.441 MB/sec [Average]
[info]   (min, avg, max) = (102.858, 103.522, 104.528), stdev = 0.894
[info]   CI (99.9%): [100.081, 106.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1024.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1024.003, 1024.003, 1024.003), stdev = 0.001
[info]   CI (99.9%): [1024.002, 1024.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   102.332 ±(99.9%) 539.567 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 102.332, 255.848), stdev = 140.124
[info]   CI (99.9%): [≈ 0, 641.899] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1010.888 ±(99.9%) 5330.386 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1010.888, 2546.729), stdev = 1384.284
[info]   CI (99.9%): [≈ 0, 6341.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.442 ±(99.9%) 3.729 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.442, 2.174), stdev = 0.968
[info]   CI (99.9%): [≈ 0, 4.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4.336 ±(99.9%) 36.545 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.336, 21.310), stdev = 9.490
[info]   CI (99.9%): [≈ 0, 40.880] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.time":
[info]   3.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 2.000), stdev = 0.894
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson
[info] # Run progress: 25.34% complete, ETA 00:46:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 21155.183 ops/s
[info] # Warmup Iteration   2: 38247.586 ops/s
[info] # Warmup Iteration   3: 37094.154 ops/s
[info] Iteration   1: 38088.163 ops/s
[info]                  ·gc.alloc.rate:                   1997.869 MB/sec
[info]                  ·gc.alloc.rate.norm:              82504.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2318.807 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     95757.478 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.437 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 38397.845 ops/s
[info]                  ·gc.alloc.rate:                   2012.971 MB/sec
[info]                  ·gc.alloc.rate.norm:              82504.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.123 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     82223.321 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.119 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 38743.994 ops/s
[info]                  ·gc.alloc.rate:                   2031.888 MB/sec
[info]                  ·gc.alloc.rate.norm:              82504.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019.994 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     82021.055 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.383 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 38631.659 ops/s
[info]                  ·gc.alloc.rate:                   2025.138 MB/sec
[info]                  ·gc.alloc.rate.norm:              82504.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2028.165 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     82627.333 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.392 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 37762.086 ops/s
[info]                  ·gc.alloc.rate:                   1979.581 MB/sec
[info]                  ·gc.alloc.rate.norm:              82504.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1694.694 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70630.622 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.470 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson":
[info]   38324.750 ±(99.9%) 1549.694 ops/s [Average]
[info]   (min, avg, max) = (37762.086, 38324.750, 38743.994), stdev = 402.450
[info]   CI (99.9%): [36775.056, 39874.443] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2009.489 ±(99.9%) 81.417 MB/sec [Average]
[info]   (min, avg, max) = (1979.581, 2009.489, 2031.888), stdev = 21.144
[info]   CI (99.9%): [1928.072, 2090.907] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   82504.012 ±(99.9%) 0.007 B/op [Average]
[info]   (min, avg, max) = (82504.011, 82504.012, 82504.016), stdev = 0.002
[info]   CI (99.9%): [82504.005, 82504.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2013.557 ±(99.9%) 850.550 MB/sec [Average]
[info]   (min, avg, max) = (1694.694, 2013.557, 2318.807), stdev = 220.885
[info]   CI (99.9%): [1163.007, 2864.107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   82651.962 ±(99.9%) 34271.247 B/op [Average]
[info]   (min, avg, max) = (70630.622, 82651.962, 95757.478), stdev = 8900.134
[info]   CI (99.9%): [48380.715, 116923.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.092, 0.125), stdev = 0.019
[info]   CI (99.9%): [0.020, 0.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   3.760 ±(99.9%) 2.929 B/op [Average]
[info]   (min, avg, max) = (3.383, 3.760, 5.119), stdev = 0.761
[info]   CI (99.9%): [0.832, 6.689] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.count":
[info]   30.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 7.000), stdev = 0.707
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 7.000), stdev = 0.837
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce
[info] # Run progress: 25.68% complete, ETA 00:46:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 68618.069 ops/s
[info] # Warmup Iteration   2: 83700.426 ops/s
[info] # Warmup Iteration   3: 85514.730 ops/s
[info] Iteration   1: 85785.866 ops/s
[info]                  ·gc.alloc.rate:                   685.454 MB/sec
[info]                  ·gc.alloc.rate.norm:              12576.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          659.809 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12105.488 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.528 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 85905.894 ops/s
[info]                  ·gc.alloc.rate:                   686.401 MB/sec
[info]                  ·gc.alloc.rate.norm:              12576.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          660.145 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12094.964 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.526 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 85650.249 ops/s
[info]                  ·gc.alloc.rate:               684.396 MB/sec
[info]                  ·gc.alloc.rate.norm:          12576.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.145 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12148.764 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   4: 84862.052 ops/s
[info]                  ·gc.alloc.rate:                   678.103 MB/sec
[info]                  ·gc.alloc.rate.norm:              12576.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.170 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12280.520 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.386 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 85769.557 ops/s
[info]                  ·gc.alloc.rate:                   685.614 MB/sec
[info]                  ·gc.alloc.rate.norm:              12576.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.751 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12174.977 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.382 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce":
[info]   85594.724 ±(99.9%) 1615.229 ops/s [Average]
[info]   (min, avg, max) = (84862.052, 85594.724, 85905.894), stdev = 419.470
[info]   CI (99.9%): [83979.494, 87209.953] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate":
[info]   683.994 ±(99.9%) 12.975 MB/sec [Average]
[info]   (min, avg, max) = (678.103, 683.994, 686.401), stdev = 3.370
[info]   CI (99.9%): [671.018, 696.969] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   12576.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (12576.005, 12576.005, 12576.005), stdev = 0.001
[info]   CI (99.9%): [12576.004, 12576.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   661.404 ±(99.9%) 6.177 MB/sec [Average]
[info]   (min, avg, max) = (659.809, 661.404, 663.751), stdev = 1.604
[info]   CI (99.9%): [655.227, 667.581] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   12160.942 ±(99.9%) 286.041 B/op [Average]
[info]   (min, avg, max) = (12094.964, 12160.942, 12280.520), stdev = 74.284
[info]   CI (99.9%): [11874.901, 12446.983] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.042 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.083), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.764 ±(99.9%) 2.747 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.764, 1.528), stdev = 0.713
[info]   CI (99.9%): [≈ 0, 3.511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala
[info] # Run progress: 26.03% complete, ETA 00:45:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 68055.995 ops/s
[info] # Warmup Iteration   2: 96675.786 ops/s
[info] # Warmup Iteration   3: 91456.791 ops/s
[info] Iteration   1: 97192.174 ops/s
[info]                  ·gc.alloc.rate:               383.378 MB/sec
[info]                  ·gc.alloc.rate.norm:          6208.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.802 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4142.182 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 95556.913 ops/s
[info]                  ·gc.alloc.rate:               376.954 MB/sec
[info]                  ·gc.alloc.rate.norm:          6208.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.824 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4213.131 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 94760.433 ops/s
[info]                  ·gc.alloc.rate:                   373.791 MB/sec
[info]                  ·gc.alloc.rate.norm:              6208.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          653.523 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10853.862 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.209 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 36.681 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 95292.598 ops/s
[info]                  ·gc.alloc.rate:               375.876 MB/sec
[info]                  ·gc.alloc.rate.norm:          6208.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      327.076 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5402.025 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 94950.396 ops/s
[info]                  ·gc.alloc.rate:               374.521 MB/sec
[info]                  ·gc.alloc.rate.norm:          6208.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      327.071 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5421.480 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala":
[info]   95550.503 ±(99.9%) 3726.371 ops/s [Average]
[info]   (min, avg, max) = (94760.433, 95550.503, 97192.174), stdev = 967.727
[info]   CI (99.9%): [91824.132, 99276.873] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   376.904 ±(99.9%) 14.707 MB/sec [Average]
[info]   (min, avg, max) = (373.791, 376.904, 383.378), stdev = 3.819
[info]   CI (99.9%): [362.198, 391.611] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   6208.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6208.004, 6208.005, 6208.005), stdev = 0.001
[info]   CI (99.9%): [6208.004, 6208.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   363.859 ±(99.9%) 638.439 MB/sec [Average]
[info]   (min, avg, max) = (255.802, 363.859, 653.523), stdev = 165.800
[info]   CI (99.9%): [≈ 0, 1002.298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   6006.536 ±(99.9%) 10701.813 B/op [Average]
[info]   (min, avg, max) = (4142.182, 6006.536, 10853.862), stdev = 2779.227
[info]   CI (99.9%): [≈ 0, 16708.349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.442 ±(99.9%) 3.803 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.442, 2.209), stdev = 0.988
[info]   CI (99.9%): [≈ 0, 4.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   7.336 ±(99.9%) 63.168 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.336, 36.681), stdev = 16.404
[info]   CI (99.9%): [≈ 0, 70.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 4.000), stdev = 1.483
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala
[info] # Run progress: 26.37% complete, ETA 00:45:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 101374.918 ops/s
[info] # Warmup Iteration   2: 110955.803 ops/s
[info] # Warmup Iteration   3: 109196.405 ops/s
[info] Iteration   1: 104282.013 ops/s
[info]                  ·gc.alloc.rate:               385.963 MB/sec
[info]                  ·gc.alloc.rate.norm:          5824.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.697 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7721.280 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 112122.809 ops/s
[info]                  ·gc.alloc.rate:                   414.912 MB/sec
[info]                  ·gc.alloc.rate.norm:              5824.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.410 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4665.948 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.730 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24.280 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 112706.012 ops/s
[info]                  ·gc.alloc.rate:                   417.101 MB/sec
[info]                  ·gc.alloc.rate.norm:              5824.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.444 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4641.940 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.163 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 110733.484 ops/s
[info]                  ·gc.alloc.rate:                   409.931 MB/sec
[info]                  ·gc.alloc.rate.norm:              5824.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.713 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9429.572 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.296 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 110683.169 ops/s
[info]                  ·gc.alloc.rate:               409.586 MB/sec
[info]                  ·gc.alloc.rate.norm:          5824.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.754 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4717.299 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala":
[info]   110105.497 ±(99.9%) 12983.191 ops/s [Average]
[info]   (min, avg, max) = (104282.013, 110105.497, 112706.012), stdev = 3371.693
[info]   CI (99.9%): [97122.307, 123088.688] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   407.498 ±(99.9%) 47.988 MB/sec [Average]
[info]   (min, avg, max) = (385.963, 407.498, 417.101), stdev = 12.462
[info]   CI (99.9%): [359.511, 455.486] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   5824.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5824.004, 5824.004, 5824.004), stdev = 0.001
[info]   CI (99.9%): [5824.003, 5824.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   434.404 ±(99.9%) 577.252 MB/sec [Average]
[info]   (min, avg, max) = (331.754, 434.404, 663.713), stdev = 149.910
[info]   CI (99.9%): [≈ 0, 1011.655] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   6235.208 ±(99.9%) 8549.275 B/op [Average]
[info]   (min, avg, max) = (4641.940, 6235.208, 9429.572), stdev = 2220.220
[info]   CI (99.9%): [≈ 0, 14784.483] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.367 ±(99.9%) 2.937 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.367, 1.730), stdev = 0.763
[info]   CI (99.9%): [≈ 0, 3.304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   5.148 ±(99.9%) 41.225 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.148, 24.280), stdev = 10.706
[info]   CI (99.9%): [≈ 0, 46.372] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 4.000), stdev = 1.483
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 26.71% complete, ETA 00:45:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 103307.542 ops/s
[info] # Warmup Iteration   2: 112760.415 ops/s
[info] # Warmup Iteration   3: 109278.374 ops/s
[info] Iteration   1: 112795.555 ops/s
[info]                  ·gc.alloc.rate:               328.523 MB/sec
[info]                  ·gc.alloc.rate.norm:          4584.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.595 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7138.481 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 111343.640 ops/s
[info]                  ·gc.alloc.rate:               324.433 MB/sec
[info]                  ·gc.alloc.rate.norm:          4584.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.907 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3615.779 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 113259.844 ops/s
[info]                  ·gc.alloc.rate:                   329.886 MB/sec
[info]                  ·gc.alloc.rate.norm:              4584.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.413 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4619.114 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.803 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25.049 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 113541.208 ops/s
[info]                  ·gc.alloc.rate:                   330.704 MB/sec
[info]                  ·gc.alloc.rate.norm:              4584.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.413 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4607.684 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.577 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 113446.586 ops/s
[info]                  ·gc.alloc.rate:               330.423 MB/sec
[info]                  ·gc.alloc.rate.norm:          4584.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.742 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4602.301 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc":
[info]   112877.367 ±(99.9%) 3481.584 ops/s [Average]
[info]   (min, avg, max) = (111343.640, 112877.367, 113541.208), stdev = 904.156
[info]   CI (99.9%): [109395.783, 116358.951] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   328.794 ±(99.9%) 9.928 MB/sec [Average]
[info]   (min, avg, max) = (324.433, 328.794, 330.704), stdev = 2.578
[info]   CI (99.9%): [318.866, 338.722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   4584.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4584.004, 4584.004, 4584.004), stdev = 0.001
[info]   CI (99.9%): [4584.004, 4584.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   352.814 ±(99.9%) 364.690 MB/sec [Average]
[info]   (min, avg, max) = (255.907, 352.814, 511.595), stdev = 94.709
[info]   CI (99.9%): [≈ 0, 717.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   4916.672 ±(99.9%) 5061.657 B/op [Average]
[info]   (min, avg, max) = (3615.779, 4916.672, 7138.481), stdev = 1314.496
[info]   CI (99.9%): [≈ 0, 9978.329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.369 ±(99.9%) 3.087 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.369, 1.803), stdev = 0.802
[info]   CI (99.9%): [≈ 0, 3.456] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   5.125 ±(99.9%) 42.898 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.125, 25.049), stdev = 11.140
[info]   CI (99.9%): [≈ 0, 48.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 4.000), stdev = 1.225
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce
[info] # Run progress: 27.05% complete, ETA 00:45:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6091.197 ops/s
[info] # Warmup Iteration   2: 9459.762 ops/s
[info] # Warmup Iteration   3: 9252.146 ops/s
[info] Iteration   1: 9557.535 ops/s
[info]                  ·gc.alloc.rate:                   1584.511 MB/sec
[info]                  ·gc.alloc.rate.norm:              260928.049 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1661.006 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     273524.872 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.140 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 9598.231 ops/s
[info]                  ·gc.alloc.rate:                   1591.330 MB/sec
[info]                  ·gc.alloc.rate.norm:              260928.045 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1669.690 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     273776.640 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.067 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 9311.056 ops/s
[info]                  ·gc.alloc.rate:                   1543.653 MB/sec
[info]                  ·gc.alloc.rate.norm:              260928.050 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1677.572 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     283564.765 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.556 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 9373.458 ops/s
[info]                  ·gc.alloc.rate:                   1554.155 MB/sec
[info]                  ·gc.alloc.rate.norm:              260930.114 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347.561 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     226244.587 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.980 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 9532.403 ops/s
[info]                  ·gc.alloc.rate:                   1581.108 MB/sec
[info]                  ·gc.alloc.rate.norm:              260944.045 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1690.495 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     278997.096 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.183 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce":
[info]   9474.536 ±(99.9%) 481.255 ops/s [Average]
[info]   (min, avg, max) = (9311.056, 9474.536, 9598.231), stdev = 124.980
[info]   CI (99.9%): [8993.281, 9955.792] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate":
[info]   1570.951 ±(99.9%) 80.072 MB/sec [Average]
[info]   (min, avg, max) = (1543.653, 1570.951, 1591.330), stdev = 20.794
[info]   CI (99.9%): [1490.879, 1651.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   260931.661 ±(99.9%) 26.881 B/op [Average]
[info]   (min, avg, max) = (260928.045, 260931.661, 260944.045), stdev = 6.981
[info]   CI (99.9%): [260904.780, 260958.541] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1609.265 ±(99.9%) 564.883 MB/sec [Average]
[info]   (min, avg, max) = (1347.561, 1609.265, 1690.495), stdev = 146.698
[info]   CI (99.9%): [1044.382, 2174.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   267221.592 ±(99.9%) 89637.680 B/op [Average]
[info]   (min, avg, max) = (226244.587, 267221.592, 283564.765), stdev = 23278.621
[info]   CI (99.9%): [177583.912, 356859.272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.092, 0.104), stdev = 0.019
[info]   CI (99.9%): [0.020, 0.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   15.185 ±(99.9%) 11.266 B/op [Average]
[info]   (min, avg, max) = (10.556, 15.185, 17.183), stdev = 2.926
[info]   CI (99.9%): [3.919, 26.451] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 5.000), stdev = 0.837
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala
[info] # Run progress: 27.40% complete, ETA 00:45:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5192.190 ops/s
[info] # Warmup Iteration   2: 9478.199 ops/s
[info] # Warmup Iteration   3: 9709.585 ops/s
[info] Iteration   1: 9695.965 ops/s
[info]                  ·gc.alloc.rate:                   1492.157 MB/sec
[info]                  ·gc.alloc.rate.norm:              242104.045 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1315.459 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     213434.628 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.137 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 9656.128 ops/s
[info]                  ·gc.alloc.rate:                   1485.821 MB/sec
[info]                  ·gc.alloc.rate.norm:              242104.045 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1655.117 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     269689.665 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20.357 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 9774.676 ops/s
[info]                  ·gc.alloc.rate:                   1503.627 MB/sec
[info]                  ·gc.alloc.rate.norm:              242104.044 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.981 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     214627.718 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.408 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 9540.769 ops/s
[info]                  ·gc.alloc.rate:                   1467.689 MB/sec
[info]                  ·gc.alloc.rate.norm:              242109.461 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.186 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     221076.696 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.867 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 9616.836 ops/s
[info]                  ·gc.alloc.rate:                   1479.651 MB/sec
[info]                  ·gc.alloc.rate.norm:              242136.045 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1682.686 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     275361.574 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20.440 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala":
[info]   9656.875 ±(99.9%) 336.185 ops/s [Average]
[info]   (min, avg, max) = (9540.769, 9656.875, 9774.676), stdev = 87.306
[info]   CI (99.9%): [9320.690, 9993.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1485.789 ±(99.9%) 51.807 MB/sec [Average]
[info]   (min, avg, max) = (1467.689, 1485.789, 1503.627), stdev = 13.454
[info]   CI (99.9%): [1433.982, 1537.596] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   242111.528 ±(99.9%) 53.542 B/op [Average]
[info]   (min, avg, max) = (242104.044, 242111.528, 242136.045), stdev = 13.905
[info]   CI (99.9%): [242057.986, 242165.070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1465.286 ±(99.9%) 717.557 MB/sec [Average]
[info]   (min, avg, max) = (1315.459, 1465.286, 1682.686), stdev = 186.347
[info]   CI (99.9%): [747.729, 2182.843] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   238838.056 ±(99.9%) 119194.840 B/op [Average]
[info]   (min, avg, max) = (213434.628, 238838.056, 275361.574), stdev = 30954.521
[info]   CI (99.9%): [119643.216, 358032.896] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.087, 0.125), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   14.242 ±(99.9%) 23.402 B/op [Average]
[info]   (min, avg, max) = (6.867, 14.242, 20.440), stdev = 6.077
[info]   CI (99.9%): [≈ 0, 37.643] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala
[info] # Run progress: 27.74% complete, ETA 00:44:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 92528.229 ops/s
[info] # Warmup Iteration   2: 99037.616 ops/s
[info] # Warmup Iteration   3: 98928.617 ops/s
[info] Iteration   1: 98864.808 ops/s
[info]                  ·gc.alloc.rate:                   257.305 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.814 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4072.263 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.332 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 98456.122 ops/s
[info]                  ·gc.alloc.rate:               256.230 MB/sec
[info]                  ·gc.alloc.rate.norm:          4096.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.800 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4089.137 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 98764.828 ops/s
[info]                  ·gc.alloc.rate:                   257.037 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.806 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4076.386 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.166 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 95302.370 ops/s
[info]                  ·gc.alloc.rate:      248.002 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 94816.838 ops/s
[info]                  ·gc.alloc.rate:                   246.807 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          333.447 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5533.893 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.572 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26.088 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala":
[info]   97240.993 ±(99.9%) 7718.159 ops/s [Average]
[info]   (min, avg, max) = (94816.838, 97240.993, 98864.808), stdev = 2004.381
[info]   CI (99.9%): [89522.835, 104959.152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   253.076 ±(99.9%) 20.062 MB/sec [Average]
[info]   (min, avg, max) = (246.807, 253.076, 257.305), stdev = 5.210
[info]   CI (99.9%): [233.014, 273.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.004, 4096.005, 4096.005), stdev = 0.001
[info]   CI (99.9%): [4096.004, 4096.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   220.173 ±(99.9%) 491.302 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 220.173, 333.447), stdev = 127.590
[info]   CI (99.9%): [≈ 0, 711.476] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3554.336 ±(99.9%) 8026.248 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3554.336, 5533.893), stdev = 2084.391
[info]   CI (99.9%): [≈ 0, 11580.584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.321 ±(99.9%) 2.694 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.321, 1.572), stdev = 0.700
[info]   CI (99.9%): [≈ 0, 3.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   5.317 ±(99.9%) 44.713 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.317, 26.088), stdev = 11.612
[info]   CI (99.9%): [≈ 0, 50.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.140
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson
[info] # Run progress: 28.08% complete, ETA 00:44:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2608.815 ops/s
[info] # Warmup Iteration   2: 5297.707 ops/s
[info] # Warmup Iteration   3: 5590.219 ops/s
[info] Iteration   1: 5600.722 ops/s
[info]                  ·gc.alloc.rate:                   1489.856 MB/sec
[info]                  ·gc.alloc.rate.norm:              418664.077 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1645.584 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     462425.385 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.699 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 5608.685 ops/s
[info]                  ·gc.alloc.rate:                   1492.129 MB/sec
[info]                  ·gc.alloc.rate.norm:              418664.077 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1324.990 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     371767.855 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23.364 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 5546.072 ops/s
[info]                  ·gc.alloc.rate:                   1475.347 MB/sec
[info]                  ·gc.alloc.rate.norm:              418664.084 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.295 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     378069.587 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29.537 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 5640.505 ops/s
[info]                  ·gc.alloc.rate:                   1500.472 MB/sec
[info]                  ·gc.alloc.rate.norm:              418664.077 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1674.203 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     467138.564 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.424 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 5659.970 ops/s
[info]                  ·gc.alloc.rate:                   1505.612 MB/sec
[info]                  ·gc.alloc.rate.norm:              418664.076 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.568 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     374160.664 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.788 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson":
[info]   5611.191 ±(99.9%) 167.791 ops/s [Average]
[info]   (min, avg, max) = (5546.072, 5611.191, 5659.970), stdev = 43.575
[info]   CI (99.9%): [5443.400, 5778.982] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1492.683 ±(99.9%) 44.602 MB/sec [Average]
[info]   (min, avg, max) = (1475.347, 1492.683, 1505.612), stdev = 11.583
[info]   CI (99.9%): [1448.081, 1537.285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   418664.078 ±(99.9%) 0.012 B/op [Average]
[info]   (min, avg, max) = (418664.076, 418664.078, 418664.084), stdev = 0.003
[info]   CI (99.9%): [418664.066, 418664.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1464.528 ±(99.9%) 688.428 MB/sec [Average]
[info]   (min, avg, max) = (1324.990, 1464.528, 1674.203), stdev = 178.783
[info]   CI (99.9%): [776.100, 2152.956] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   410712.411 ±(99.9%) 190367.566 B/op [Average]
[info]   (min, avg, max) = (371767.855, 410712.411, 467138.564), stdev = 49437.852
[info]   CI (99.9%): [220344.845, 601079.977] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.127 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.062, 0.104), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   17.562 ±(99.9%) 36.023 B/op [Average]
[info]   (min, avg, max) = (5.788, 17.562, 29.537), stdev = 9.355
[info]   CI (99.9%): [≈ 0, 53.585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce
[info] # Run progress: 28.42% complete, ETA 00:44:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17491.925 ops/s
[info] # Warmup Iteration   2: 24137.666 ops/s
[info] # Warmup Iteration   3: 24176.785 ops/s
[info] Iteration   1: 24356.831 ops/s
[info]                  ·gc.alloc.rate:                   1794.292 MB/sec
[info]                  ·gc.alloc.rate.norm:              115896.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1664.048 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     107483.344 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.416 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 24271.616 ops/s
[info]                  ·gc.alloc.rate:                   1787.328 MB/sec
[info]                  ·gc.alloc.rate.norm:              115883.253 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1672.835 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     108459.974 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.399 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 24798.499 ops/s
[info]                  ·gc.alloc.rate:                   1825.107 MB/sec
[info]                  ·gc.alloc.rate.norm:              115832.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018.439 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     128101.979 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.285 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 24804.154 ops/s
[info]                  ·gc.alloc.rate:                   1825.562 MB/sec
[info]                  ·gc.alloc.rate.norm:              115832.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1688.706 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     107148.507 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.604 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 24687.534 ops/s
[info]                  ·gc.alloc.rate:                   1817.298 MB/sec
[info]                  ·gc.alloc.rate.norm:              115832.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2032.912 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     129574.944 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.309 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce":
[info]   24583.727 ±(99.9%) 971.069 ops/s [Average]
[info]   (min, avg, max) = (24271.616, 24583.727, 24804.154), stdev = 252.184
[info]   CI (99.9%): [23612.658, 25554.796] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1809.917 ±(99.9%) 69.000 MB/sec [Average]
[info]   (min, avg, max) = (1787.328, 1809.917, 1825.562), stdev = 17.919
[info]   CI (99.9%): [1740.918, 1878.917] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   115855.065 ±(99.9%) 122.758 B/op [Average]
[info]   (min, avg, max) = (115832.017, 115855.065, 115896.019), stdev = 31.880
[info]   CI (99.9%): [115732.307, 115977.823] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1815.388 ±(99.9%) 740.235 MB/sec [Average]
[info]   (min, avg, max) = (1664.048, 1815.388, 2032.912), stdev = 192.237
[info]   CI (99.9%): [1075.153, 2555.623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   116153.750 ±(99.9%) 44672.164 B/op [Average]
[info]   (min, avg, max) = (107148.507, 116153.750, 129574.944), stdev = 11601.219
[info]   CI (99.9%): [71481.585, 160825.914] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.100 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.100, 0.146), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   6.403 ±(99.9%) 6.827 B/op [Average]
[info]   (min, avg, max) = (5.285, 6.403, 9.416), stdev = 1.773
[info]   CI (99.9%): [≈ 0, 13.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 6.000), stdev = 1.095
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala
[info] # Run progress: 28.77% complete, ETA 00:44:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 316445.418 ops/s
[info] # Warmup Iteration   2: 338955.914 ops/s
[info] # Warmup Iteration   3: 330451.610 ops/s
[info] Iteration   1: 331816.618 ops/s
[info]                  ·gc.alloc.rate:                   731.986 MB/sec
[info]                  ·gc.alloc.rate.norm:              3472.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.483 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3147.074 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.494 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 329445.588 ops/s
[info]                  ·gc.alloc.rate:                   726.840 MB/sec
[info]                  ·gc.alloc.rate.norm:              3472.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.559 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3169.720 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.597 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 335067.159 ops/s
[info]                  ·gc.alloc.rate:               739.234 MB/sec
[info]                  ·gc.alloc.rate.norm:          3472.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.877 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3122.764 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 335765.746 ops/s
[info]                  ·gc.alloc.rate:                   740.736 MB/sec
[info]                  ·gc.alloc.rate.norm:              3472.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.501 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3119.359 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.293 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 335542.471 ops/s
[info]                  ·gc.alloc.rate:                   740.256 MB/sec
[info]                  ·gc.alloc.rate.norm:              3472.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          999.978 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4690.168 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.391 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala":
[info]   333527.517 ±(99.9%) 10724.844 ops/s [Average]
[info]   (min, avg, max) = (329445.588, 333527.517, 335765.746), stdev = 2785.208
[info]   CI (99.9%): [322802.673, 344252.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   735.810 ±(99.9%) 23.647 MB/sec [Average]
[info]   (min, avg, max) = (726.840, 735.810, 740.736), stdev = 6.141
[info]   CI (99.9%): [712.164, 759.457] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3472.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3472.001, 3472.001, 3472.001), stdev = 0.001
[info]   CI (99.9%): [3472.001, 3472.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   731.480 ±(99.9%) 577.973 MB/sec [Average]
[info]   (min, avg, max) = (663.483, 731.480, 999.978), stdev = 150.098
[info]   CI (99.9%): [153.507, 1309.453] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3449.817 ±(99.9%) 2671.099 B/op [Average]
[info]   (min, avg, max) = (3119.359, 3449.817, 4690.168), stdev = 693.676
[info]   CI (99.9%): [778.718, 6120.916] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.185 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.075, 0.125), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.355 ±(99.9%) 0.880 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.355, 0.597), stdev = 0.228
[info]   CI (99.9%): [≈ 0, 1.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 29.11% complete, ETA 00:44:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 351833.120 ops/s
[info] # Warmup Iteration   2: 380752.387 ops/s
[info] # Warmup Iteration   3: 388144.556 ops/s
[info] Iteration   1: 388237.756 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 388166.589 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 388164.119 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 388322.941 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 389646.364 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc":
[info]   388507.554 ±(99.9%) 2464.086 ops/s [Average]
[info]   (min, avg, max) = (388164.119, 388507.554, 389646.364), stdev = 639.915
[info]   CI (99.9%): [386043.468, 390971.640] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson
[info] # Run progress: 29.45% complete, ETA 00:43:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19452.212 ops/s
[info] # Warmup Iteration   2: 28401.678 ops/s
[info] # Warmup Iteration   3: 28317.505 ops/s
[info] Iteration   1: 28059.922 ops/s
[info]                  ·gc.alloc.rate:                   1840.003 MB/sec
[info]                  ·gc.alloc.rate.norm:              103200.021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1990.534 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     111642.855 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.670 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 28019.880 ops/s
[info]                  ·gc.alloc.rate:                   1837.365 MB/sec
[info]                  ·gc.alloc.rate.norm:              103200.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1670.756 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     93842.014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.016 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 27925.245 ops/s
[info]                  ·gc.alloc.rate:                   1831.249 MB/sec
[info]                  ·gc.alloc.rate.norm:              103200.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016.550 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     113642.662 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.520 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 27910.826 ops/s
[info]                  ·gc.alloc.rate:                   1830.161 MB/sec
[info]                  ·gc.alloc.rate.norm:              103200.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1688.629 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     95219.235 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.043 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 28280.644 ops/s
[info]                  ·gc.alloc.rate:                   1854.522 MB/sec
[info]                  ·gc.alloc.rate.norm:              103200.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2032.535 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     113106.077 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.792 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson":
[info]   28039.304 ±(99.9%) 572.969 ops/s [Average]
[info]   (min, avg, max) = (27910.826, 28039.304, 28280.644), stdev = 148.798
[info]   CI (99.9%): [27466.335, 28612.272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1838.660 ±(99.9%) 37.642 MB/sec [Average]
[info]   (min, avg, max) = (1830.161, 1838.660, 1854.522), stdev = 9.776
[info]   CI (99.9%): [1801.018, 1876.302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   103200.017 ±(99.9%) 0.010 B/op [Average]
[info]   (min, avg, max) = (103200.015, 103200.017, 103200.021), stdev = 0.002
[info]   CI (99.9%): [103200.007, 103200.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1879.801 ±(99.9%) 706.193 MB/sec [Average]
[info]   (min, avg, max) = (1670.756, 1879.801, 2032.535), stdev = 183.396
[info]   CI (99.9%): [1173.608, 2585.994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   105490.569 ±(99.9%) 38674.171 B/op [Average]
[info]   (min, avg, max) = (93842.014, 105490.569, 113642.662), stdev = 10043.559
[info]   CI (99.9%): [66816.398, 144164.739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.100 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.100, 0.125), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   5.608 ±(99.9%) 5.876 B/op [Average]
[info]   (min, avg, max) = (3.520, 5.608, 7.043), stdev = 1.526
[info]   CI (99.9%): [≈ 0, 11.484] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 0.707
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce
[info] # Run progress: 29.79% complete, ETA 00:43:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 108783.930 ops/s
[info] # Warmup Iteration   2: 128926.498 ops/s
[info] # Warmup Iteration   3: 126965.885 ops/s
[info] Iteration   1: 126693.236 ops/s
[info]                  ·gc.alloc.rate:                   2180.585 MB/sec
[info]                  ·gc.alloc.rate.norm:              27088.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.819 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24966.686 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.259 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 129213.015 ops/s
[info]                  ·gc.alloc.rate:                   2224.560 MB/sec
[info]                  ·gc.alloc.rate.norm:              27088.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2359.552 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28731.778 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.775 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 127595.118 ops/s
[info]                  ·gc.alloc.rate:                   2195.978 MB/sec
[info]                  ·gc.alloc.rate.norm:              27088.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2368.113 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29211.335 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.027 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 130385.762 ops/s
[info]                  ·gc.alloc.rate:                   2244.958 MB/sec
[info]                  ·gc.alloc.rate.norm:              27088.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2036.574 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24573.613 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.503 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 126818.534 ops/s
[info]                  ·gc.alloc.rate:                   2182.694 MB/sec
[info]                  ·gc.alloc.rate.norm:              27088.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2378.199 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29514.297 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.292 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce":
[info]   128141.133 ±(99.9%) 6188.374 ops/s [Average]
[info]   (min, avg, max) = (126693.236, 128141.133, 130385.762), stdev = 1607.101
[info]   CI (99.9%): [121952.760, 134329.507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   2205.755 ±(99.9%) 108.083 MB/sec [Average]
[info]   (min, avg, max) = (2180.585, 2205.755, 2244.958), stdev = 28.069
[info]   CI (99.9%): [2097.672, 2313.838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   27088.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (27088.003, 27088.003, 27088.004), stdev = 0.001
[info]   CI (99.9%): [27088.003, 27088.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2230.451 ±(99.9%) 729.883 MB/sec [Average]
[info]   (min, avg, max) = (2009.819, 2230.451, 2378.199), stdev = 189.548
[info]   CI (99.9%): [1500.568, 2960.335] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   27399.542 ±(99.9%) 9320.288 B/op [Average]
[info]   (min, avg, max) = (24573.613, 27399.542, 29514.297), stdev = 2420.449
[info]   CI (99.9%): [18079.254, 36719.830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.191 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.079, 0.146), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.971 ±(99.9%) 2.342 B/op [Average]
[info]   (min, avg, max) = (0.259, 0.971, 1.775), stdev = 0.608
[info]   CI (99.9%): [≈ 0, 3.313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.count":
[info]   33.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala
[info] # Run progress: 30.14% complete, ETA 00:43:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 194293.441 ops/s
[info] # Warmup Iteration   2: 292083.805 ops/s
[info] # Warmup Iteration   3: 294133.371 ops/s
[info] Iteration   1: 293841.293 ops/s
[info]                  ·gc.alloc.rate:                   415.373 MB/sec
[info]                  ·gc.alloc.rate.norm:              2224.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.801 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2740.302 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.056 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 287895.301 ops/s
[info]                  ·gc.alloc.rate:                   406.838 MB/sec
[info]                  ·gc.alloc.rate.norm:              2224.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          326.767 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1786.290 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.192 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.985 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 293990.030 ops/s
[info]                  ·gc.alloc.rate:                   415.432 MB/sec
[info]                  ·gc.alloc.rate.norm:              2224.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          326.752 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1749.255 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.111 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 294929.905 ops/s
[info]                  ·gc.alloc.rate:               416.762 MB/sec
[info]                  ·gc.alloc.rate.norm:          2224.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      326.410 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1741.850 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 284987.115 ops/s
[info]                  ·gc.alloc.rate:                   402.715 MB/sec
[info]                  ·gc.alloc.rate.norm:              2224.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          653.495 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3608.942 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.460 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala":
[info]   291128.729 ±(99.9%) 17022.336 ops/s [Average]
[info]   (min, avg, max) = (284987.115, 291128.729, 294929.905), stdev = 4420.647
[info]   CI (99.9%): [274106.392, 308151.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   411.424 ±(99.9%) 24.127 MB/sec [Average]
[info]   (min, avg, max) = (402.715, 411.424, 416.762), stdev = 6.266
[info]   CI (99.9%): [387.297, 435.550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   2224.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2224.001, 2224.002, 2224.002), stdev = 0.001
[info]   CI (99.9%): [2224.001, 2224.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   429.045 ±(99.9%) 573.361 MB/sec [Average]
[info]   (min, avg, max) = (326.410, 429.045, 653.495), stdev = 148.900
[info]   CI (99.9%): [≈ 0, 1002.406] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   2325.328 ±(99.9%) 3211.733 B/op [Average]
[info]   (min, avg, max) = (1741.850, 2325.328, 3608.942), stdev = 834.077
[info]   CI (99.9%): [≈ 0, 5537.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.461 ±(99.9%) 3.728 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.461, 2.192), stdev = 0.968
[info]   CI (99.9%): [≈ 0, 4.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.523 ±(99.9%) 20.381 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.523, 11.985), stdev = 5.293
[info]   CI (99.9%): [≈ 0, 22.904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 5.000), stdev = 1.643
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala
[info] # Run progress: 30.48% complete, ETA 00:43:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 664274.051 ops/s
[info] # Warmup Iteration   2: 651315.374 ops/s
[info] # Warmup Iteration   3: 717783.304 ops/s
[info] Iteration   1: 726023.729 ops/s
[info]                  ·gc.alloc.rate:                   472.357 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.799 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     554.534 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.068 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 725623.478 ops/s
[info]                  ·gc.alloc.rate:                   472.140 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.209 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1444.907 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.626 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.526 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 722128.870 ops/s
[info]                  ·gc.alloc.rate:                   469.846 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.414 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     724.477 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.045 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 722612.776 ops/s
[info]                  ·gc.alloc.rate:                   470.208 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.890 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1447.971 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.136 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 728772.568 ops/s
[info]                  ·gc.alloc.rate:               474.377 MB/sec
[info]                  ·gc.alloc.rate.norm:          1024.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      332.545 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 717.840 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala":
[info]   725032.284 ±(99.9%) 10475.951 ops/s [Average]
[info]   (min, avg, max) = (722128.870, 725032.284, 728772.568), stdev = 2720.571
[info]   CI (99.9%): [714556.333, 735508.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   471.786 ±(99.9%) 7.052 MB/sec [Average]
[info]   (min, avg, max) = (469.846, 471.786, 474.377), stdev = 1.831
[info]   CI (99.9%): [464.733, 478.838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1024.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1024.001, 1024.001, 1024.001), stdev = 0.001
[info]   CI (99.9%): [1024.001, 1024.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   450.372 ±(99.9%) 765.928 MB/sec [Average]
[info]   (min, avg, max) = (255.799, 450.372, 666.209), stdev = 198.909
[info]   CI (99.9%): [≈ 0, 1216.300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   977.946 ±(99.9%) 1667.550 B/op [Average]
[info]   (min, avg, max) = (554.534, 977.946, 1447.971), stdev = 433.057
[info]   CI (99.9%): [≈ 0, 2645.496] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.348 ±(99.9%) 2.752 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.348, 1.626), stdev = 0.715
[info]   CI (99.9%): [≈ 0, 3.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.755 ±(99.9%) 5.968 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.755, 3.526), stdev = 1.550
[info]   CI (99.9%): [≈ 0, 6.723] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson
[info] # Run progress: 30.82% complete, ETA 00:42:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 42627.037 ops/s
[info] # Warmup Iteration   2: 70121.507 ops/s
[info] # Warmup Iteration   3: 71300.023 ops/s
[info] Iteration   1: 71417.224 ops/s
[info]                  ·gc.alloc.rate:                   3033.684 MB/sec
[info]                  ·gc.alloc.rate.norm:              66856.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3019.917 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     66552.603 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.211 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 71483.130 ops/s
[info]                  ·gc.alloc.rate:                   3036.645 MB/sec
[info]                  ·gc.alloc.rate.norm:              66856.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3043.014 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     66996.226 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.250 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.500 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 70232.846 ops/s
[info]                  ·gc.alloc.rate:                   2983.481 MB/sec
[info]                  ·gc.alloc.rate.norm:              66856.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3054.178 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68440.232 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.332 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 71736.631 ops/s
[info]                  ·gc.alloc.rate:                   3047.316 MB/sec
[info]                  ·gc.alloc.rate.norm:              66856.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3059.678 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67127.221 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.111 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 69226.977 ops/s
[info]                  ·gc.alloc.rate:                   2940.814 MB/sec
[info]                  ·gc.alloc.rate.norm:              66856.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2723.326 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61911.676 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.313 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson":
[info]   70819.362 ±(99.9%) 4092.883 ops/s [Average]
[info]   (min, avg, max) = (69226.977, 70819.362, 71736.631), stdev = 1062.909
[info]   CI (99.9%): [66726.479, 74912.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3008.388 ±(99.9%) 173.710 MB/sec [Average]
[info]   (min, avg, max) = (2940.814, 3008.388, 3047.316), stdev = 45.112
[info]   CI (99.9%): [2834.678, 3182.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   66856.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (66856.006, 66856.006, 66856.007), stdev = 0.001
[info]   CI (99.9%): [66856.005, 66856.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2980.022 ±(99.9%) 555.670 MB/sec [Average]
[info]   (min, avg, max) = (2723.326, 2980.022, 3059.678), stdev = 144.306
[info]   CI (99.9%): [2424.353, 3535.692] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   66205.591 ±(99.9%) 9631.662 B/op [Average]
[info]   (min, avg, max) = (61911.676, 66205.591, 68440.232), stdev = 2501.312
[info]   CI (99.9%): [56573.929, 75837.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.167 ±(99.9%) 0.212 MB/sec [Average]
[info]   (min, avg, max) = (0.104, 0.167, 0.250), stdev = 0.055
[info]   CI (99.9%): [≈ 0, 0.379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   3.693 ±(99.9%) 4.583 B/op [Average]
[info]   (min, avg, max) = (2.332, 3.693, 5.500), stdev = 1.190
[info]   CI (99.9%): [≈ 0, 8.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.count":
[info]   44.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.800, 9.000), stdev = 0.447
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.600, 8.000), stdev = 0.548
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce
[info] # Run progress: 31.16% complete, ETA 00:42:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 170258.323 ops/s
[info] # Warmup Iteration   2: 204114.555 ops/s
[info] # Warmup Iteration   3: 211509.110 ops/s
[info] Iteration   1: 212628.054 ops/s
[info]                  ·gc.alloc.rate:                   1728.115 MB/sec
[info]                  ·gc.alloc.rate.norm:              12792.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1994.714 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14765.447 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.770 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 211823.353 ops/s
[info]                  ·gc.alloc.rate:                   1721.597 MB/sec
[info]                  ·gc.alloc.rate.norm:              12792.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1672.618 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12428.073 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.928 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 207028.178 ops/s
[info]                  ·gc.alloc.rate:                   1682.997 MB/sec
[info]                  ·gc.alloc.rate.norm:              12792.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1681.675 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12781.954 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.475 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 208391.137 ops/s
[info]                  ·gc.alloc.rate:                   1693.724 MB/sec
[info]                  ·gc.alloc.rate.norm:              12792.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1687.354 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12743.888 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.157 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 206983.695 ops/s
[info]                  ·gc.alloc.rate:                   1682.284 MB/sec
[info]                  ·gc.alloc.rate.norm:              12792.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1693.294 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12875.721 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.633 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce":
[info]   209370.883 ±(99.9%) 10327.088 ops/s [Average]
[info]   (min, avg, max) = (206983.695, 209370.883, 212628.054), stdev = 2681.912
[info]   CI (99.9%): [199043.795, 219697.971] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1701.743 ±(99.9%) 83.569 MB/sec [Average]
[info]   (min, avg, max) = (1682.284, 1701.743, 1728.115), stdev = 21.703
[info]   CI (99.9%): [1618.174, 1785.313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   12792.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (12792.002, 12792.002, 12792.002), stdev = 0.001
[info]   CI (99.9%): [12792.002, 12792.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1745.931 ±(99.9%) 536.328 MB/sec [Average]
[info]   (min, avg, max) = (1672.618, 1745.931, 1994.714), stdev = 139.283
[info]   CI (99.9%): [1209.603, 2282.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   13119.017 ±(99.9%) 3602.802 B/op [Average]
[info]   (min, avg, max) = (12428.073, 13119.017, 14765.447), stdev = 935.636
[info]   CI (99.9%): [9516.215, 16721.818] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.079, 0.125), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.593 ±(99.9%) 1.138 B/op [Average]
[info]   (min, avg, max) = (0.157, 0.593, 0.928), stdev = 0.295
[info]   CI (99.9%): [≈ 0, 1.730] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala
[info] # Run progress: 31.51% complete, ETA 00:42:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 608089.598 ops/s
[info] # Warmup Iteration   2: 810603.112 ops/s
[info] # Warmup Iteration   3: 845220.061 ops/s
[info] Iteration   1: 841546.174 ops/s
[info]                  ·gc.alloc.rate:                   662.966 MB/sec
[info]                  ·gc.alloc.rate.norm:              1240.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          653.438 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1222.180 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.156 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.033 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 806066.460 ops/s
[info]                  ·gc.alloc.rate:                   635.080 MB/sec
[info]                  ·gc.alloc.rate.norm:              1240.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.177 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1277.289 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.041 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 841727.543 ops/s
[info]                  ·gc.alloc.rate:                   663.428 MB/sec
[info]                  ·gc.alloc.rate.norm:              1240.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          655.072 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1224.381 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.195 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 832682.079 ops/s
[info]                  ·gc.alloc.rate:               656.042 MB/sec
[info]                  ·gc.alloc.rate.norm:          1240.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      656.148 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1240.202 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 826243.602 ops/s
[info]                  ·gc.alloc.rate:                   651.129 MB/sec
[info]                  ·gc.alloc.rate.norm:              1240.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          657.641 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1252.401 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.079 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala":
[info]   829653.172 ±(99.9%) 56604.673 ops/s [Average]
[info]   (min, avg, max) = (806066.460, 829653.172, 841727.543), stdev = 14700.054
[info]   CI (99.9%): [773048.498, 886257.845] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   653.729 ±(99.9%) 44.711 MB/sec [Average]
[info]   (min, avg, max) = (635.080, 653.729, 663.428), stdev = 11.611
[info]   CI (99.9%): [609.018, 698.440] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1240.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1240.001, 1240.001, 1240.001), stdev = 0.001
[info]   CI (99.9%): [1240.000, 1240.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   655.295 ±(99.9%) 6.379 MB/sec [Average]
[info]   (min, avg, max) = (653.438, 655.295, 657.641), stdev = 1.657
[info]   CI (99.9%): [648.916, 661.674] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1243.291 ±(99.9%) 87.207 B/op [Average]
[info]   (min, avg, max) = (1222.180, 1243.291, 1277.289), stdev = 22.647
[info]   CI (99.9%): [1156.083, 1330.498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.465 ±(99.9%) 3.645 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.465, 2.156), stdev = 0.947
[info]   CI (99.9%): [≈ 0, 4.109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.870 ±(99.9%) 6.816 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.870, 4.033), stdev = 1.770
[info]   CI (99.9%): [≈ 0, 7.685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 7.000), stdev = 2.168
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala
[info] # Run progress: 31.85% complete, ETA 00:42:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 909874.930 ops/s
[info] # Warmup Iteration   2: 1001001.144 ops/s
[info] # Warmup Iteration   3: 1015275.835 ops/s
[info] Iteration   1: 1023573.446 ops/s
[info]                  ·gc.alloc.rate:                   556.698 MB/sec
[info]                  ·gc.alloc.rate.norm:              856.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.409 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     511.125 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.797 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.763 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1014704.494 ops/s
[info]                  ·gc.alloc.rate:                   551.993 MB/sec
[info]                  ·gc.alloc.rate.norm:              856.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.301 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1030.160 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.065 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1025054.765 ops/s
[info]                  ·gc.alloc.rate:                   557.504 MB/sec
[info]                  ·gc.alloc.rate.norm:              856.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.463 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1018.691 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.192 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1024410.812 ops/s
[info]                  ·gc.alloc.rate:                   557.139 MB/sec
[info]                  ·gc.alloc.rate.norm:              856.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.809 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1019.889 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.064 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 1028706.535 ops/s
[info]                  ·gc.alloc.rate:               559.504 MB/sec
[info]                  ·gc.alloc.rate.norm:          856.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      332.093 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 508.079 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala":
[info]   1023290.010 ±(99.9%) 19962.231 ops/s [Average]
[info]   (min, avg, max) = (1014704.494, 1023290.010, 1028706.535), stdev = 5184.128
[info]   CI (99.9%): [1003327.780, 1043252.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   556.568 ±(99.9%) 10.679 MB/sec [Average]
[info]   (min, avg, max) = (551.993, 556.568, 559.504), stdev = 2.773
[info]   CI (99.9%): [545.889, 567.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   856.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (856.000, 856.000, 856.000), stdev = 0.001
[info]   CI (99.9%): [856.000, 856.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   531.215 ±(99.9%) 699.387 MB/sec [Average]
[info]   (min, avg, max) = (332.093, 531.215, 664.301), stdev = 181.628
[info]   CI (99.9%): [≈ 0, 1230.602] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   817.589 ±(99.9%) 1082.762 B/op [Average]
[info]   (min, avg, max) = (508.079, 817.589, 1030.160), stdev = 281.190
[info]   CI (99.9%): [≈ 0, 1900.351] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.401 ±(99.9%) 3.010 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.401, 1.797), stdev = 0.782
[info]   CI (99.9%): [≈ 0, 3.411] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.617 ±(99.9%) 4.628 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.617, 2.763), stdev = 1.202
[info]   CI (99.9%): [≈ 0, 5.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 32.19% complete, ETA 00:42:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 924799.729 ops/s
[info] # Warmup Iteration   2: 992708.012 ops/s
[info] # Warmup Iteration   3: 995539.526 ops/s
[info] Iteration   1: 989127.131 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 874492.671 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 995469.159 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 995413.065 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 996277.601 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   970155.925 ±(99.9%) 206219.777 ops/s [Average]
[info]   (min, avg, max) = (874492.671, 970155.925, 996277.601), stdev = 53554.621
[info]   CI (99.9%): [763936.148, 1176375.702] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson
[info] # Run progress: 32.53% complete, ETA 00:41:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20147.474 ops/s
[info] # Warmup Iteration   2: 30420.987 ops/s
[info] # Warmup Iteration   3: 30061.710 ops/s
[info] Iteration   1: 30280.466 ops/s
[info]                  ·gc.alloc.rate:                   1672.373 MB/sec
[info]                  ·gc.alloc.rate.norm:              86887.826 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1655.769 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86025.197 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.410 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 29951.335 ops/s
[info]                  ·gc.alloc.rate:                   1653.505 MB/sec
[info]                  ·gc.alloc.rate.norm:              86872.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1667.031 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     87582.612 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.657 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 30747.473 ops/s
[info]                  ·gc.alloc.rate:                   1697.161 MB/sec
[info]                  ·gc.alloc.rate.norm:              86872.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1676.024 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     85790.102 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.197 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 30559.391 ops/s
[info]                  ·gc.alloc.rate:                   1686.833 MB/sec
[info]                  ·gc.alloc.rate.norm:              86872.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1684.343 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86743.806 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.144 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 30733.727 ops/s
[info]                  ·gc.alloc.rate:                   1696.622 MB/sec
[info]                  ·gc.alloc.rate.norm:              86872.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1689.859 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86525.685 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.198 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson":
[info]   30454.479 ±(99.9%) 1303.354 ops/s [Average]
[info]   (min, avg, max) = (29951.335, 30454.479, 30747.473), stdev = 338.477
[info]   CI (99.9%): [29151.125, 31757.832] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1681.299 ±(99.9%) 71.242 MB/sec [Average]
[info]   (min, avg, max) = (1653.505, 1681.299, 1697.161), stdev = 18.501
[info]   CI (99.9%): [1610.057, 1752.541] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   86875.177 ±(99.9%) 27.228 B/op [Average]
[info]   (min, avg, max) = (86872.014, 86875.177, 86887.826), stdev = 7.071
[info]   CI (99.9%): [86847.949, 86902.405] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1674.605 ±(99.9%) 52.433 MB/sec [Average]
[info]   (min, avg, max) = (1655.769, 1674.605, 1689.859), stdev = 13.617
[info]   CI (99.9%): [1622.172, 1727.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   86533.480 ±(99.9%) 2692.657 B/op [Average]
[info]   (min, avg, max) = (85790.102, 86533.480, 87582.612), stdev = 699.274
[info]   CI (99.9%): [83840.824, 89226.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.160 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.083, 0.146), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   4.321 ±(99.9%) 8.520 B/op [Average]
[info]   (min, avg, max) = (2.144, 4.321, 7.657), stdev = 2.213
[info]   CI (99.9%): [≈ 0, 12.841] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala
[info] # Run progress: 32.88% complete, ETA 00:41:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 116588.296 ops/s
[info] # Warmup Iteration   2: 187235.111 ops/s
[info] # Warmup Iteration   3: 187639.436 ops/s
[info] Iteration   1: 195207.165 ops/s
[info]                  ·gc.alloc.rate:                   1164.950 MB/sec
[info]                  ·gc.alloc.rate.norm:              9392.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1308.444 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10548.871 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.168 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 189175.540 ops/s
[info]                  ·gc.alloc.rate:                   1129.348 MB/sec
[info]                  ·gc.alloc.rate.norm:              9392.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          985.948 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8199.447 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.039 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 195628.470 ops/s
[info]                  ·gc.alloc.rate:                   1167.437 MB/sec
[info]                  ·gc.alloc.rate.norm:              9392.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1321.006 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10627.459 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.172 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 192765.405 ops/s
[info]                  ·gc.alloc.rate:                   1150.392 MB/sec
[info]                  ·gc.alloc.rate.norm:              9392.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          996.252 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8133.576 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.510 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 195588.119 ops/s
[info]                  ·gc.alloc.rate:                   1167.142 MB/sec
[info]                  ·gc.alloc.rate.norm:              9392.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1001.224 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8056.856 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.670 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala":
[info]   193672.940 ±(99.9%) 10701.758 ops/s [Average]
[info]   (min, avg, max) = (189175.540, 193672.940, 195628.470), stdev = 2779.212
[info]   CI (99.9%): [182971.182, 204374.698] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1155.854 ±(99.9%) 63.177 MB/sec [Average]
[info]   (min, avg, max) = (1129.348, 1155.854, 1167.437), stdev = 16.407
[info]   CI (99.9%): [1092.676, 1219.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   9392.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (9392.002, 9392.002, 9392.002), stdev = 0.001
[info]   CI (99.9%): [9392.002, 9392.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1122.575 ±(99.9%) 675.984 MB/sec [Average]
[info]   (min, avg, max) = (985.948, 1122.575, 1321.006), stdev = 175.551
[info]   CI (99.9%): [446.591, 1798.559] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   9113.242 ±(99.9%) 5189.305 B/op [Average]
[info]   (min, avg, max) = (8056.856, 9113.242, 10627.459), stdev = 1347.646
[info]   CI (99.9%): [3923.937, 14302.547] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.191 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.087, 0.146), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.712 ±(99.9%) 1.561 B/op [Average]
[info]   (min, avg, max) = (0.168, 0.712, 1.172), stdev = 0.405
[info]   CI (99.9%): [≈ 0, 2.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 4.000), stdev = 0.837
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala
[info] # Run progress: 33.22% complete, ETA 00:41:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 245220.687 ops/s
[info] # Warmup Iteration   2: 255069.741 ops/s
[info] # Warmup Iteration   3: 266368.082 ops/s
[info] Iteration   1: 262047.993 ops/s
[info]                  ·gc.alloc.rate:                   852.690 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.942 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3998.671 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.250 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 258428.107 ops/s
[info]                  ·gc.alloc.rate:                   840.760 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          998.941 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6083.282 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.507 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 263478.684 ops/s
[info]                  ·gc.alloc.rate:                   857.123 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.804 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3983.138 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.373 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 266036.883 ops/s
[info]                  ·gc.alloc.rate:                   865.452 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1001.904 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5927.253 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.616 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 256364.612 ops/s
[info]                  ·gc.alloc.rate:                   834.150 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.592 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4109.946 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.639 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala":
[info]   261271.256 ±(99.9%) 14956.408 ops/s [Average]
[info]   (min, avg, max) = (256364.612, 261271.256, 266036.883), stdev = 3884.132
[info]   CI (99.9%): [246314.848, 276227.664] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   850.035 ±(99.9%) 48.453 MB/sec [Average]
[info]   (min, avg, max) = (834.150, 850.035, 865.452), stdev = 12.583
[info]   CI (99.9%): [801.582, 898.488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   5120.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5120.002, 5120.002, 5120.002), stdev = 0.001
[info]   CI (99.9%): [5120.001, 5120.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   800.637 ±(99.9%) 702.307 MB/sec [Average]
[info]   (min, avg, max) = (665.942, 800.637, 1001.904), stdev = 182.387
[info]   CI (99.9%): [98.330, 1502.943] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4820.458 ±(99.9%) 4174.436 B/op [Average]
[info]   (min, avg, max) = (3983.138, 4820.458, 6083.282), stdev = 1084.088
[info]   CI (99.9%): [646.022, 8994.894] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.104), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.477 ±(99.9%) 0.635 B/op [Average]
[info]   (min, avg, max) = (0.250, 0.477, 0.639), stdev = 0.165
[info]   CI (99.9%): [≈ 0, 1.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson
[info] # Run progress: 33.56% complete, ETA 00:41:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 29216.374 ops/s
[info] # Warmup Iteration   2: 64921.233 ops/s
[info] # Warmup Iteration   3: 66805.050 ops/s
[info] Iteration   1: 64412.115 ops/s
[info]                  ·gc.alloc.rate:                   2677.942 MB/sec
[info]                  ·gc.alloc.rate.norm:              65408.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2999.760 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73268.318 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.017 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 65000.485 ops/s
[info]                  ·gc.alloc.rate:                   2701.392 MB/sec
[info]                  ·gc.alloc.rate.norm:              65408.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2693.354 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     65213.401 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.537 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 65865.341 ops/s
[info]                  ·gc.alloc.rate:                   2737.326 MB/sec
[info]                  ·gc.alloc.rate.norm:              65408.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2707.292 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64690.361 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.979 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 66423.841 ops/s
[info]                  ·gc.alloc.rate:                   2761.635 MB/sec
[info]                  ·gc.alloc.rate.norm:              65408.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2717.097 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64353.154 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.453 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 65782.263 ops/s
[info]                  ·gc.alloc.rate:                   2733.908 MB/sec
[info]                  ·gc.alloc.rate.norm:              65408.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2718.565 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     65040.941 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.992 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson":
[info]   65496.809 ±(99.9%) 3043.950 ops/s [Average]
[info]   (min, avg, max) = (64412.115, 65496.809, 66423.841), stdev = 790.504
[info]   CI (99.9%): [62452.859, 68540.759] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2722.440 ±(99.9%) 126.434 MB/sec [Average]
[info]   (min, avg, max) = (2677.942, 2722.440, 2761.635), stdev = 32.835
[info]   CI (99.9%): [2596.006, 2848.874] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   65408.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (65408.007, 65408.007, 65408.007), stdev = 0.001
[info]   CI (99.9%): [65408.006, 65408.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2767.214 ±(99.9%) 502.070 MB/sec [Average]
[info]   (min, avg, max) = (2693.354, 2767.214, 2999.760), stdev = 130.386
[info]   CI (99.9%): [2265.144, 3269.283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   66513.235 ±(99.9%) 14596.580 B/op [Average]
[info]   (min, avg, max) = (64353.154, 66513.235, 73268.318), stdev = 3790.685
[info]   CI (99.9%): [51916.655, 81109.815] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.125 ±(99.9%) 0.234 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.125, 0.187), stdev = 0.061
[info]   CI (99.9%): [≈ 0, 0.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2.996 ±(99.9%) 5.604 B/op [Average]
[info]   (min, avg, max) = (1.017, 2.996, 4.537), stdev = 1.455
[info]   CI (99.9%): [≈ 0, 8.600] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.count":
[info]   41.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.200, 9.000), stdev = 0.447
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 8.600, 9.000), stdev = 0.548
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala
[info] # Run progress: 33.90% complete, ETA 00:41:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 362616.409 ops/s
[info] # Warmup Iteration   2: 544057.617 ops/s
[info] # Warmup Iteration   3: 542806.575 ops/s
[info] Iteration   1: 541367.068 ops/s
[info]                  ·gc.alloc.rate:                   547.589 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          581.859 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1691.636 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.203 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.404 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 549483.110 ops/s
[info]                  ·gc.alloc.rate:                   555.943 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          652.640 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1868.903 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.119 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 568663.094 ops/s
[info]                  ·gc.alloc.rate:                   575.450 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          653.419 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1807.702 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.288 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 570822.190 ops/s
[info]                  ·gc.alloc.rate:               577.496 MB/sec
[info]                  ·gc.alloc.rate.norm:          1592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      326.809 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 900.924 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 569238.506 ops/s
[info]                  ·gc.alloc.rate:                   576.026 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          655.067 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1810.452 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.058 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala":
[info]   559914.793 ±(99.9%) 52206.901 ops/s [Average]
[info]   (min, avg, max) = (541367.068, 559914.793, 570822.190), stdev = 13557.966
[info]   CI (99.9%): [507707.892, 612121.695] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   566.501 ±(99.9%) 53.107 MB/sec [Average]
[info]   (min, avg, max) = (547.589, 566.501, 577.496), stdev = 13.792
[info]   CI (99.9%): [513.394, 619.608] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1592.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1592.001, 1592.001, 1592.001), stdev = 0.001
[info]   CI (99.9%): [1592.001, 1592.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   573.959 ±(99.9%) 545.341 MB/sec [Average]
[info]   (min, avg, max) = (326.809, 573.959, 655.067), stdev = 141.623
[info]   CI (99.9%): [28.617, 1119.300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1615.923 ±(99.9%) 1558.888 B/op [Average]
[info]   (min, avg, max) = (900.924, 1615.923, 1868.903), stdev = 404.838
[info]   CI (99.9%): [57.035, 3174.812] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.474 ±(99.9%) 3.724 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.474, 2.203), stdev = 0.967
[info]   CI (99.9%): [≈ 0, 4.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.374 ±(99.9%) 10.836 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.374, 6.404), stdev = 2.814
[info]   CI (99.9%): [≈ 0, 12.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.400, 5.000), stdev = 1.517
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala
[info] # Run progress: 34.25% complete, ETA 00:40:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 517289.135 ops/s
[info] # Warmup Iteration   2: 570646.385 ops/s
[info] # Warmup Iteration   3: 575141.742 ops/s
[info] Iteration   1: 572866.774 ops/s
[info]                  ·gc.alloc.rate:                   439.745 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.828 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     702.772 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.006 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.016 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 570406.157 ops/s
[info]                  ·gc.alloc.rate:                   437.818 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.168 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1832.532 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.818 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.015 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 559155.363 ops/s
[info]                  ·gc.alloc.rate:               429.171 MB/sec
[info]                  ·gc.alloc.rate.norm:          1208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.730 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 933.733 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 558967.028 ops/s
[info]                  ·gc.alloc.rate:                   429.208 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.870 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     934.045 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.176 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 559689.473 ops/s
[info]                  ·gc.alloc.rate:               429.623 MB/sec
[info]                  ·gc.alloc.rate.norm:          1208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.771 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 932.865 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala":
[info]   564216.959 ±(99.9%) 26314.660 ops/s [Average]
[info]   (min, avg, max) = (558967.028, 564216.959, 572866.774), stdev = 6833.834
[info]   CI (99.9%): [537902.299, 590531.619] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   433.113 ±(99.9%) 20.110 MB/sec [Average]
[info]   (min, avg, max) = (429.171, 433.113, 439.745), stdev = 5.223
[info]   CI (99.9%): [413.003, 453.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1208.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1208.001, 1208.001, 1208.001), stdev = 0.001
[info]   CI (99.9%): [1208.001, 1208.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   383.074 ±(99.9%) 618.191 MB/sec [Average]
[info]   (min, avg, max) = (255.828, 383.074, 664.168), stdev = 160.542
[info]   CI (99.9%): [≈ 0, 1001.265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1067.189 ±(99.9%) 1691.799 B/op [Average]
[info]   (min, avg, max) = (702.772, 1067.189, 1832.532), stdev = 439.355
[info]   CI (99.9%): [≈ 0, 2758.989] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.377 ±(99.9%) 3.102 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.377, 1.818), stdev = 0.806
[info]   CI (99.9%): [≈ 0, 3.480] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.041 ±(99.9%) 8.559 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.041, 5.015), stdev = 2.223
[info]   CI (99.9%): [≈ 0, 9.600] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.140
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 34.59% complete, ETA 00:40:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 519934.819 ops/s
[info] # Warmup Iteration   2: 604798.948 ops/s
[info] # Warmup Iteration   3: 598429.390 ops/s
[info] Iteration   1: 558490.539 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 607242.570 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 582456.201 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 550380.878 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 606697.960 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc":
[info]   581053.630 ±(99.9%) 101794.200 ops/s [Average]
[info]   (min, avg, max) = (550380.878, 581053.630, 607242.570), stdev = 26435.630
[info]   CI (99.9%): [479259.430, 682847.830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson
[info] # Run progress: 34.93% complete, ETA 00:40:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 202423.408 ops/s
[info] # Warmup Iteration   2: 348624.788 ops/s
[info] # Warmup Iteration   3: 336759.010 ops/s
[info] Iteration   1: 338192.042 ops/s
[info]                  ·gc.alloc.rate:                   932.086 MB/sec
[info]                  ·gc.alloc.rate.norm:              4336.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          977.614 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4547.798 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.484 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 351595.694 ops/s
[info]                  ·gc.alloc.rate:                   968.797 MB/sec
[info]                  ·gc.alloc.rate.norm:              4336.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          979.433 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4383.604 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.373 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 348929.994 ops/s
[info]                  ·gc.alloc.rate:                   961.345 MB/sec
[info]                  ·gc.alloc.rate.norm:              4336.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          983.651 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4436.612 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.188 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 350407.855 ops/s
[info]                  ·gc.alloc.rate:                   965.372 MB/sec
[info]                  ·gc.alloc.rate.norm:              4336.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          988.910 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4441.724 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.094 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 349342.841 ops/s
[info]                  ·gc.alloc.rate:                   962.396 MB/sec
[info]                  ·gc.alloc.rate.norm:              4336.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          993.499 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4476.131 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.281 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson":
[info]   347693.685 ±(99.9%) 20836.377 ops/s [Average]
[info]   (min, avg, max) = (338192.042, 347693.685, 351595.694), stdev = 5411.141
[info]   CI (99.9%): [326857.308, 368530.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   957.999 ±(99.9%) 56.886 MB/sec [Average]
[info]   (min, avg, max) = (932.086, 957.999, 968.797), stdev = 14.773
[info]   CI (99.9%): [901.113, 1014.885] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4336.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4336.001, 4336.001, 4336.001), stdev = 0.001
[info]   CI (99.9%): [4336.001, 4336.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   984.621 ±(99.9%) 25.409 MB/sec [Average]
[info]   (min, avg, max) = (977.614, 984.621, 993.499), stdev = 6.599
[info]   CI (99.9%): [959.213, 1010.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4457.174 ±(99.9%) 233.005 B/op [Average]
[info]   (min, avg, max) = (4383.604, 4457.174, 4547.798), stdev = 60.511
[info]   CI (99.9%): [4224.169, 4690.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.127 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.062, 0.104), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.284 ±(99.9%) 0.589 B/op [Average]
[info]   (min, avg, max) = (0.094, 0.284, 0.484), stdev = 0.153
[info]   CI (99.9%): [≈ 0, 0.873] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce
[info] # Run progress: 35.27% complete, ETA 00:40:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7033.044 ops/s
[info] # Warmup Iteration   2: 9237.052 ops/s
[info] # Warmup Iteration   3: 9260.796 ops/s
[info] Iteration   1: 9499.857 ops/s
[info]                  ·gc.alloc.rate:                   1244.291 MB/sec
[info]                  ·gc.alloc.rate.norm:              206144.045 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.862 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     219658.022 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.897 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 9320.227 ops/s
[info]                  ·gc.alloc.rate:                   1220.801 MB/sec
[info]                  ·gc.alloc.rate.norm:              206144.050 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.946 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     224743.065 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24.606 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 9548.388 ops/s
[info]                  ·gc.alloc.rate:                   1250.663 MB/sec
[info]                  ·gc.alloc.rate.norm:              206144.045 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1001.543 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     165082.096 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.294 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 9523.773 ops/s
[info]                  ·gc.alloc.rate:                   1247.654 MB/sec
[info]                  ·gc.alloc.rate.norm:              206147.490 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.397 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     221471.227 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.320 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 9557.162 ops/s
[info]                  ·gc.alloc.rate:                   1251.852 MB/sec
[info]                  ·gc.alloc.rate.norm:              206160.045 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.512 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     221584.216 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.284 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce":
[info]   9489.882 ±(99.9%) 375.217 ops/s [Average]
[info]   (min, avg, max) = (9320.227, 9489.882, 9557.162), stdev = 97.443
[info]   CI (99.9%): [9114.664, 9865.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1243.052 ±(99.9%) 49.207 MB/sec [Average]
[info]   (min, avg, max) = (1220.801, 1243.052, 1251.852), stdev = 12.779
[info]   CI (99.9%): [1193.845, 1292.260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   206147.935 ±(99.9%) 26.693 B/op [Average]
[info]   (min, avg, max) = (206144.045, 206147.935, 206160.045), stdev = 6.932
[info]   CI (99.9%): [206121.243, 206174.628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1268.852 ±(99.9%) 576.168 MB/sec [Average]
[info]   (min, avg, max) = (1001.543, 1268.852, 1345.512), stdev = 149.629
[info]   CI (99.9%): [692.684, 1845.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   210507.725 ±(99.9%) 98035.527 B/op [Average]
[info]   (min, avg, max) = (165082.096, 210507.725, 224743.065), stdev = 25459.515
[info]   CI (99.9%): [112472.198, 308543.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.156 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.146), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   12.480 ±(99.9%) 26.711 B/op [Average]
[info]   (min, avg, max) = (6.897, 12.480, 24.606), stdev = 6.937
[info]   CI (99.9%): [≈ 0, 39.191] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 4.000), stdev = 0.837
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala
[info] # Run progress: 35.62% complete, ETA 00:39:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5908.521 ops/s
[info] # Warmup Iteration   2: 9313.759 ops/s
[info] # Warmup Iteration   3: 9614.796 ops/s
[info] Iteration   1: 9506.019 ops/s
[info]                  ·gc.alloc.rate:                   1139.087 MB/sec
[info]                  ·gc.alloc.rate.norm:              188592.045 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1309.705 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     216840.267 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.340 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 9454.857 ops/s
[info]                  ·gc.alloc.rate:                   1133.328 MB/sec
[info]                  ·gc.alloc.rate.norm:              188592.046 B/op
[info]                  ·gc.churn.PS_Eden_Space:          987.477 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     164321.628 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.860 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 9406.958 ops/s
[info]                  ·gc.alloc.rate:                   1127.244 MB/sec
[info]                  ·gc.alloc.rate.norm:              188592.049 B/op
[info]                  ·gc.churn.PS_Eden_Space:          991.183 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     165828.578 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.413 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 9514.370 ops/s
[info]                  ·gc.alloc.rate:                   1140.278 MB/sec
[info]                  ·gc.alloc.rate.norm:              188596.906 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.121 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     219830.719 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.774 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 9337.967 ops/s
[info]                  ·gc.alloc.rate:                   1119.101 MB/sec
[info]                  ·gc.alloc.rate.norm:              188624.365 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1002.113 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     168906.059 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14.033 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala":
[info]   9444.034 ±(99.9%) 282.512 ops/s [Average]
[info]   (min, avg, max) = (9337.967, 9444.034, 9514.370), stdev = 73.368
[info]   CI (99.9%): [9161.522, 9726.546] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1131.808 ±(99.9%) 33.863 MB/sec [Average]
[info]   (min, avg, max) = (1119.101, 1131.808, 1140.278), stdev = 8.794
[info]   CI (99.9%): [1097.944, 1165.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   188599.482 ±(99.9%) 54.171 B/op [Average]
[info]   (min, avg, max) = (188592.045, 188599.482, 188624.365), stdev = 14.068
[info]   CI (99.9%): [188545.311, 188653.653] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1123.920 ±(99.9%) 688.007 MB/sec [Average]
[info]   (min, avg, max) = (987.477, 1123.920, 1329.121), stdev = 178.673
[info]   CI (99.9%): [435.912, 1811.927] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   187145.450 ±(99.9%) 109897.274 B/op [Average]
[info]   (min, avg, max) = (164321.628, 187145.450, 219830.719), stdev = 28539.973
[info]   CI (99.9%): [77248.176, 297042.724] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.083, 0.104), stdev = 0.015
[info]   CI (99.9%): [0.027, 0.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   13.884 ±(99.9%) 9.636 B/op [Average]
[info]   (min, avg, max) = (10.340, 13.884, 17.413), stdev = 2.502
[info]   CI (99.9%): [4.248, 23.520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 4.000), stdev = 0.837
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala
[info] # Run progress: 35.96% complete, ETA 00:39:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 139156.380 ops/s
[info] # Warmup Iteration   2: 140821.177 ops/s
[info] # Warmup Iteration   3: 144950.847 ops/s
[info] Iteration   1: 142194.877 ops/s
[info]                  ·gc.alloc.rate:                   925.136 MB/sec
[info]                  ·gc.alloc.rate.norm:              10240.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          999.190 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11059.684 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.691 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 140988.304 ops/s
[info]                  ·gc.alloc.rate:                   917.675 MB/sec
[info]                  ·gc.alloc.rate.norm:              10240.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1000.311 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11162.105 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.394 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 141968.783 ops/s
[info]                  ·gc.alloc.rate:                   923.670 MB/sec
[info]                  ·gc.alloc.rate.norm:              10240.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1001.866 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11106.905 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.462 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 146134.765 ops/s
[info]                  ·gc.alloc.rate:               950.758 MB/sec
[info]                  ·gc.alloc.rate.norm:          10240.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.465 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7210.381 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 144320.050 ops/s
[info]                  ·gc.alloc.rate:                   939.015 MB/sec
[info]                  ·gc.alloc.rate.norm:              10240.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1005.939 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10969.812 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.908 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala":
[info]   143121.356 ±(99.9%) 7997.436 ops/s [Average]
[info]   (min, avg, max) = (140988.304, 143121.356, 146134.765), stdev = 2076.909
[info]   CI (99.9%): [135123.920, 151118.792] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   931.251 ±(99.9%) 51.661 MB/sec [Average]
[info]   (min, avg, max) = (917.675, 931.251, 950.758), stdev = 13.416
[info]   CI (99.9%): [879.590, 982.912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   10240.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10240.003, 10240.003, 10240.003), stdev = 0.001
[info]   CI (99.9%): [10240.003, 10240.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   935.354 ±(99.9%) 572.430 MB/sec [Average]
[info]   (min, avg, max) = (669.465, 935.354, 1005.939), stdev = 148.658
[info]   CI (99.9%): [362.924, 1507.784] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   10301.777 ±(99.9%) 6660.004 B/op [Average]
[info]   (min, avg, max) = (7210.381, 10301.777, 11162.105), stdev = 1729.582
[info]   CI (99.9%): [3641.773, 16961.782] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.179 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.062, 0.125), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.691 ±(99.9%) 1.993 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.691, 1.394), stdev = 0.518
[info]   CI (99.9%): [≈ 0, 2.684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.400, 3.000), stdev = 0.894
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson
[info] # Run progress: 36.30% complete, ETA 00:39:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4507.390 ops/s
[info] # Warmup Iteration   2: 7707.695 ops/s
[info] # Warmup Iteration   3: 7954.814 ops/s
[info] Iteration   1: 7868.747 ops/s
[info]                  ·gc.alloc.rate:                   1465.324 MB/sec
[info]                  ·gc.alloc.rate.norm:              293080.059 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1645.726 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     329162.263 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.327 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 8040.166 ops/s
[info]                  ·gc.alloc.rate:                   1497.287 MB/sec
[info]                  ·gc.alloc.rate.norm:              293080.054 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1324.920 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     259340.669 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20.373 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 7990.518 ops/s
[info]                  ·gc.alloc.rate:                   1488.044 MB/sec
[info]                  ·gc.alloc.rate.norm:              293080.058 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1666.381 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     328204.813 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16.400 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 7956.226 ops/s
[info]                  ·gc.alloc.rate:                   1481.624 MB/sec
[info]                  ·gc.alloc.rate.norm:              293080.054 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.219 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     265108.685 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.235 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 8055.497 ops/s
[info]                  ·gc.alloc.rate:                   1500.167 MB/sec
[info]                  ·gc.alloc.rate.norm:              293080.054 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1683.059 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     328810.632 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.134 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson":
[info]   7982.231 ±(99.9%) 287.821 ops/s [Average]
[info]   (min, avg, max) = (7868.747, 7982.231, 8055.497), stdev = 74.746
[info]   CI (99.9%): [7694.410, 8270.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1486.489 ±(99.9%) 53.693 MB/sec [Average]
[info]   (min, avg, max) = (1465.324, 1486.489, 1500.167), stdev = 13.944
[info]   CI (99.9%): [1432.796, 1540.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   293080.056 ±(99.9%) 0.010 B/op [Average]
[info]   (min, avg, max) = (293080.054, 293080.056, 293080.059), stdev = 0.003
[info]   CI (99.9%): [293080.046, 293080.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1532.061 ±(99.9%) 703.396 MB/sec [Average]
[info]   (min, avg, max) = (1324.920, 1532.061, 1683.059), stdev = 182.670
[info]   CI (99.9%): [828.664, 2235.457] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   302125.412 ±(99.9%) 140482.549 B/op [Average]
[info]   (min, avg, max) = (259340.669, 302125.412, 329162.263), stdev = 36482.872
[info]   CI (99.9%): [161642.864, 442607.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.062, 0.104), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   12.294 ±(99.9%) 22.091 B/op [Average]
[info]   (min, avg, max) = (8.134, 12.294, 20.373), stdev = 5.737
[info]   CI (99.9%): [≈ 0, 34.385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce
[info] # Run progress: 36.64% complete, ETA 00:39:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15262.286 ops/s
[info] # Warmup Iteration   2: 19847.429 ops/s
[info] # Warmup Iteration   3: 20006.153 ops/s
[info] Iteration   1: 20211.052 ops/s
[info]                  ·gc.alloc.rate:                   1074.243 MB/sec
[info]                  ·gc.alloc.rate.norm:              83620.030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          991.898 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     77210.259 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.484 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 19815.358 ops/s
[info]                  ·gc.alloc.rate:                   1053.096 MB/sec
[info]                  ·gc.alloc.rate.norm:              83640.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          993.563 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     78911.706 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.613 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 19675.059 ops/s
[info]                  ·gc.alloc.rate:                   1045.879 MB/sec
[info]                  ·gc.alloc.rate.norm:              83622.896 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.411 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     79747.623 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.331 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 19761.099 ops/s
[info]                  ·gc.alloc.rate:                   1049.412 MB/sec
[info]                  ·gc.alloc.rate.norm:              83576.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.685 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     106295.386 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.632 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 19680.455 ops/s
[info]                  ·gc.alloc.rate:                   1045.116 MB/sec
[info]                  ·gc.alloc.rate.norm:              83576.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1004.599 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     80335.955 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.989 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce":
[info]   19828.604 ±(99.9%) 853.513 ops/s [Average]
[info]   (min, avg, max) = (19675.059, 19828.604, 20211.052), stdev = 221.655
[info]   CI (99.9%): [18975.091, 20682.118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1053.549 ±(99.9%) 46.187 MB/sec [Average]
[info]   (min, avg, max) = (1045.116, 1053.549, 1074.243), stdev = 11.995
[info]   CI (99.9%): [1007.362, 1099.736] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   83606.998 ±(99.9%) 112.795 B/op [Average]
[info]   (min, avg, max) = (83576.022, 83606.998, 83640.022), stdev = 29.292
[info]   CI (99.9%): [83494.204, 83719.793] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1064.431 ±(99.9%) 582.047 MB/sec [Average]
[info]   (min, avg, max) = (991.898, 1064.431, 1334.685), stdev = 151.156
[info]   CI (99.9%): [482.384, 1646.478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   84500.186 ±(99.9%) 47134.327 B/op [Average]
[info]   (min, avg, max) = (77210.259, 84500.186, 106295.386), stdev = 12240.635
[info]   CI (99.9%): [37365.859, 131634.513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.083, 0.125), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   6.610 ±(99.9%) 9.069 B/op [Average]
[info]   (min, avg, max) = (3.331, 6.610, 9.989), stdev = 2.355
[info]   CI (99.9%): [≈ 0, 15.678] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala
[info] # Run progress: 36.99% complete, ETA 00:39:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 611319.173 ops/s
[info] # Warmup Iteration   2: 663671.459 ops/s
[info] # Warmup Iteration   3: 672631.407 ops/s
[info] Iteration   1: 690589.608 ops/s
[info]                  ·gc.alloc.rate:                   1246.216 MB/sec
[info]                  ·gc.alloc.rate.norm:              2840.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          996.632 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2271.226 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.047 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 690347.695 ops/s
[info]                  ·gc.alloc.rate:                   1245.742 MB/sec
[info]                  ·gc.alloc.rate.norm:              2840.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.355 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3037.458 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.237 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 692101.081 ops/s
[info]                  ·gc.alloc.rate:                   1248.930 MB/sec
[info]                  ·gc.alloc.rate.norm:              2840.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.657 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3041.761 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.095 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 687376.972 ops/s
[info]                  ·gc.alloc.rate:                   1240.670 MB/sec
[info]                  ·gc.alloc.rate.norm:              2840.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.270 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3074.860 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.095 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 670993.970 ops/s
[info]                  ·gc.alloc.rate:                   1210.767 MB/sec
[info]                  ·gc.alloc.rate.norm:              2840.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1010.517 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2370.290 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.195 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala":
[info]   686281.865 ±(99.9%) 33561.952 ops/s [Average]
[info]   (min, avg, max) = (670993.970, 686281.865, 692101.081), stdev = 8715.932
[info]   CI (99.9%): [652719.914, 719843.817] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1238.465 ±(99.9%) 60.719 MB/sec [Average]
[info]   (min, avg, max) = (1210.767, 1238.465, 1248.930), stdev = 15.768
[info]   CI (99.9%): [1177.746, 1299.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2840.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2840.001, 2840.001, 2840.001), stdev = 0.001
[info]   CI (99.9%): [2840.001, 2840.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1204.086 ±(99.9%) 705.236 MB/sec [Average]
[info]   (min, avg, max) = (996.632, 1204.086, 1343.270), stdev = 183.148
[info]   CI (99.9%): [498.850, 1909.323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2759.119 ±(99.9%) 1547.795 B/op [Average]
[info]   (min, avg, max) = (2271.226, 2759.119, 3074.860), stdev = 401.957
[info]   CI (99.9%): [1211.324, 4306.914] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.058 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.058, 0.104), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.134 ±(99.9%) 0.304 B/op [Average]
[info]   (min, avg, max) = (0.047, 0.134, 0.237), stdev = 0.079
[info]   CI (99.9%): [≈ 0, 0.438] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 37.33% complete, ETA 00:38:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 484585.613 ops/s
[info] # Warmup Iteration   2: 532323.103 ops/s
[info] # Warmup Iteration   3: 534682.172 ops/s
[info] Iteration   1: 547696.041 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 547865.447 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 534172.548 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 534440.743 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 534769.385 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   539788.833 ±(99.9%) 28105.428 ops/s [Average]
[info]   (min, avg, max) = (534172.548, 539788.833, 547865.447), stdev = 7298.890
[info]   CI (99.9%): [511683.404, 567894.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson
[info] # Run progress: 37.67% complete, ETA 00:38:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16119.222 ops/s
[info] # Warmup Iteration   2: 21808.769 ops/s
[info] # Warmup Iteration   3: 21996.717 ops/s
[info] Iteration   1: 22366.064 ops/s
[info]                  ·gc.alloc.rate:                   1033.315 MB/sec
[info]                  ·gc.alloc.rate.norm:              72687.065 B/op
[info]                  ·gc.churn.PS_Eden_Space:          986.881 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69420.700 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.394 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 22473.381 ops/s
[info]                  ·gc.alloc.rate:                   1036.074 MB/sec
[info]                  ·gc.alloc.rate.norm:              72552.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          989.303 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69276.832 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.747 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 22561.323 ops/s
[info]                  ·gc.alloc.rate:                   1041.371 MB/sec
[info]                  ·gc.alloc.rate.norm:              72634.040 B/op
[info]                  ·gc.churn.PS_Eden_Space:          993.362 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69285.478 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.713 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 22461.067 ops/s
[info]                  ·gc.alloc.rate:                   1035.380 MB/sec
[info]                  ·gc.alloc.rate.norm:              72536.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.426 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69877.060 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.376 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 22475.573 ops/s
[info]                  ·gc.alloc.rate:               1035.904 MB/sec
[info]                  ·gc.alloc.rate.norm:          72536.021 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1001.306 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 70113.432 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson":
[info]   22467.482 ±(99.9%) 267.012 ops/s [Average]
[info]   (min, avg, max) = (22366.064, 22467.482, 22561.323), stdev = 69.342
[info]   CI (99.9%): [22200.470, 22734.493] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1036.409 ±(99.9%) 11.491 MB/sec [Average]
[info]   (min, avg, max) = (1033.315, 1036.409, 1041.371), stdev = 2.984
[info]   CI (99.9%): [1024.918, 1047.900] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   72589.035 ±(99.9%) 262.763 B/op [Average]
[info]   (min, avg, max) = (72536.019, 72589.035, 72687.065), stdev = 68.239
[info]   CI (99.9%): [72326.271, 72851.798] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   993.656 ±(99.9%) 22.591 MB/sec [Average]
[info]   (min, avg, max) = (986.881, 993.656, 1001.306), stdev = 5.867
[info]   CI (99.9%): [971.065, 1016.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   69594.700 ±(99.9%) 1460.892 B/op [Average]
[info]   (min, avg, max) = (69276.832, 69594.700, 70113.432), stdev = 379.389
[info]   CI (99.9%): [68133.808, 71055.593] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.201 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.075, 0.125), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   5.246 ±(99.9%) 14.054 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.246, 8.747), stdev = 3.650
[info]   CI (99.9%): [≈ 0, 19.300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce
[info] # Run progress: 38.01% complete, ETA 00:38:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16370.204 ops/s
[info] # Warmup Iteration   2: 22490.469 ops/s
[info] # Warmup Iteration   3: 22969.378 ops/s
[info] Iteration   1: 23454.412 ops/s
[info]                  ·gc.alloc.rate:                   1314.222 MB/sec
[info]                  ·gc.alloc.rate.norm:              88144.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.096 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     88873.346 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.557 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 23435.667 ops/s
[info]                  ·gc.alloc.rate:                   1313.073 MB/sec
[info]                  ·gc.alloc.rate.norm:              88144.027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.477 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     89379.473 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.592 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 23482.550 ops/s
[info]                  ·gc.alloc.rate:                   1315.188 MB/sec
[info]                  ·gc.alloc.rate.norm:              88128.565 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.517 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     89557.775 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.790 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 23564.335 ops/s
[info]                  ·gc.alloc.rate:                   1319.542 MB/sec
[info]                  ·gc.alloc.rate.norm:              88128.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.614 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     89602.107 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.171 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 23558.674 ops/s
[info]                  ·gc.alloc.rate:                   1319.128 MB/sec
[info]                  ·gc.alloc.rate.norm:              88128.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.530 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     89958.680 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.563 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce":
[info]   23499.128 ±(99.9%) 228.613 ops/s [Average]
[info]   (min, avg, max) = (23435.667, 23499.128, 23564.335), stdev = 59.370
[info]   CI (99.9%): [23270.515, 23727.741] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate":
[info]   1316.231 ±(99.9%) 11.301 MB/sec [Average]
[info]   (min, avg, max) = (1313.073, 1316.231, 1319.542), stdev = 2.935
[info]   CI (99.9%): [1304.930, 1327.532] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   88134.529 ±(99.9%) 33.381 B/op [Average]
[info]   (min, avg, max) = (88128.018, 88134.529, 88144.027), stdev = 8.669
[info]   CI (99.9%): [88101.148, 88167.910] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1336.247 ±(99.9%) 32.315 MB/sec [Average]
[info]   (min, avg, max) = (1325.096, 1336.247, 1346.530), stdev = 8.392
[info]   CI (99.9%): [1303.932, 1368.562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   89474.276 ±(99.9%) 1525.828 B/op [Average]
[info]   (min, avg, max) = (88873.346, 89474.276, 89958.680), stdev = 396.253
[info]   CI (99.9%): [87948.448, 91000.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.216 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.092, 0.187), stdev = 0.056
[info]   CI (99.9%): [≈ 0, 0.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   6.135 ±(99.9%) 14.525 B/op [Average]
[info]   (min, avg, max) = (2.790, 6.135, 12.557), stdev = 3.772
[info]   CI (99.9%): [≈ 0, 20.660] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala
[info] # Run progress: 38.36% complete, ETA 00:38:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17527.578 ops/s
[info] # Warmup Iteration   2: 28289.976 ops/s
[info] # Warmup Iteration   3: 27926.878 ops/s
[info] Iteration   1: 28537.245 ops/s
[info]                  ·gc.alloc.rate:                   1322.075 MB/sec
[info]                  ·gc.alloc.rate.norm:              72912.021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1641.004 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     90500.893 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.148 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 28692.938 ops/s
[info]                  ·gc.alloc.rate:                   1329.285 MB/sec
[info]                  ·gc.alloc.rate.norm:              72890.759 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1321.393 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72457.965 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.709 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 28596.043 ops/s
[info]                  ·gc.alloc.rate:                   1324.211 MB/sec
[info]                  ·gc.alloc.rate.norm:              72880.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.621 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73177.780 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.291 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 27718.051 ops/s
[info]                  ·gc.alloc.rate:                   1284.123 MB/sec
[info]                  ·gc.alloc.rate.norm:              72880.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1002.616 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     56903.138 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.182 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 27724.700 ops/s
[info]                  ·gc.alloc.rate:                   1283.823 MB/sec
[info]                  ·gc.alloc.rate.norm:              72880.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.548 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76156.944 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.363 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala":
[info]   28253.795 ±(99.9%) 1883.756 ops/s [Average]
[info]   (min, avg, max) = (27718.051, 28253.795, 28692.938), stdev = 489.205
[info]   CI (99.9%): [26370.040, 30137.551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1308.704 ±(99.9%) 87.515 MB/sec [Average]
[info]   (min, avg, max) = (1283.823, 1308.704, 1329.285), stdev = 22.727
[info]   CI (99.9%): [1221.189, 1396.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   72888.565 ±(99.9%) 53.573 B/op [Average]
[info]   (min, avg, max) = (72880.015, 72888.565, 72912.021), stdev = 13.913
[info]   CI (99.9%): [72834.993, 72942.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1327.236 ±(99.9%) 869.755 MB/sec [Average]
[info]   (min, avg, max) = (1002.616, 1327.236, 1641.004), stdev = 225.872
[info]   CI (99.9%): [457.482, 2196.991] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   73839.344 ±(99.9%) 46053.421 B/op [Average]
[info]   (min, avg, max) = (56903.138, 73839.344, 90500.893), stdev = 11959.927
[info]   CI (99.9%): [27785.923, 119892.765] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.046 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.046, 0.104), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.539 ±(99.9%) 7.183 B/op [Average]
[info]   (min, avg, max) = (1.148, 2.539, 5.709), stdev = 1.865
[info]   CI (99.9%): [≈ 0, 9.722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 0.707
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 5.000), stdev = 0.894
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala
[info] # Run progress: 38.70% complete, ETA 00:38:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 235429.415 ops/s
[info] # Warmup Iteration   2: 245564.135 ops/s
[info] # Warmup Iteration   3: 245062.147 ops/s
[info] Iteration   1: 247428.334 ops/s
[info]                  ·gc.alloc.rate:                   644.071 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.636 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4239.508 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.795 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 251456.962 ops/s
[info]                  ·gc.alloc.rate:                   654.410 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.155 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4169.520 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.782 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 248714.085 ops/s
[info]                  ·gc.alloc.rate:               647.382 MB/sec
[info]                  ·gc.alloc.rate.norm:          4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.268 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4215.500 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   4: 247220.231 ops/s
[info]                  ·gc.alloc.rate:                   643.396 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          333.073 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2120.417 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.133 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 250387.919 ops/s
[info]                  ·gc.alloc.rate:                   651.651 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.493 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4195.577 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.654 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala":
[info]   249041.506 ±(99.9%) 7119.481 ops/s [Average]
[info]   (min, avg, max) = (247220.231, 249041.506, 251456.962), stdev = 1848.907
[info]   CI (99.9%): [241922.025, 256160.988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   648.182 ±(99.9%) 18.393 MB/sec [Average]
[info]   (min, avg, max) = (643.396, 648.182, 654.410), stdev = 4.777
[info]   CI (99.9%): [629.789, 666.575] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.002, 4096.002, 4096.002), stdev = 0.001
[info]   CI (99.9%): [4096.002, 4096.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   599.925 ±(99.9%) 574.423 MB/sec [Average]
[info]   (min, avg, max) = (333.073, 599.925, 667.493), stdev = 149.176
[info]   CI (99.9%): [25.503, 1174.348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3788.105 ±(99.9%) 3591.190 B/op [Average]
[info]   (min, avg, max) = (2120.417, 3788.105, 4239.508), stdev = 932.621
[info]   CI (99.9%): [196.915, 7379.294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.231 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.075, 0.125), stdev = 0.060
[info]   CI (99.9%): [≈ 0, 0.306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.473 ±(99.9%) 1.455 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.473, 0.795), stdev = 0.378
[info]   CI (99.9%): [≈ 0, 1.928] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson
[info] # Run progress: 39.04% complete, ETA 00:37:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9816.970 ops/s
[info] # Warmup Iteration   2: 16831.016 ops/s
[info] # Warmup Iteration   3: 16333.047 ops/s
[info] Iteration   1: 16714.552 ops/s
[info]                  ·gc.alloc.rate:                   1655.493 MB/sec
[info]                  ·gc.alloc.rate.norm:              155864.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1650.581 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     155401.510 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.880 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 16908.664 ops/s
[info]                  ·gc.alloc.rate:                   1674.628 MB/sec
[info]                  ·gc.alloc.rate.norm:              155866.808 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1661.702 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     154663.720 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.625 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 16902.604 ops/s
[info]                  ·gc.alloc.rate:                   1673.910 MB/sec
[info]                  ·gc.alloc.rate.norm:              155864.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1673.032 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     155782.232 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.753 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 16846.745 ops/s
[info]                  ·gc.alloc.rate:                   1668.394 MB/sec
[info]                  ·gc.alloc.rate.norm:              155864.035 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1681.055 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     157046.800 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.834 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 16997.336 ops/s
[info]                  ·gc.alloc.rate:                   1683.577 MB/sec
[info]                  ·gc.alloc.rate.norm:              155864.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1688.613 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     156330.345 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.638 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson":
[info]   16873.980 ±(99.9%) 401.088 ops/s [Average]
[info]   (min, avg, max) = (16714.552, 16873.980, 16997.336), stdev = 104.161
[info]   CI (99.9%): [16472.892, 17275.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1671.200 ±(99.9%) 39.778 MB/sec [Average]
[info]   (min, avg, max) = (1655.493, 1671.200, 1683.577), stdev = 10.330
[info]   CI (99.9%): [1631.423, 1710.978] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   155864.584 ±(99.9%) 4.787 B/op [Average]
[info]   (min, avg, max) = (155864.025, 155864.584, 155866.808), stdev = 1.243
[info]   CI (99.9%): [155859.797, 155869.371] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1670.996 ±(99.9%) 58.362 MB/sec [Average]
[info]   (min, avg, max) = (1650.581, 1670.996, 1688.613), stdev = 15.156
[info]   CI (99.9%): [1612.634, 1729.358] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   155844.921 ±(99.9%) 3484.742 B/op [Average]
[info]   (min, avg, max) = (154663.720, 155844.921, 157046.800), stdev = 904.976
[info]   CI (99.9%): [152360.179, 159329.664] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.087, 0.125), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   8.146 ±(99.9%) 9.619 B/op [Average]
[info]   (min, avg, max) = (5.834, 8.146, 11.625), stdev = 2.498
[info]   CI (99.9%): [≈ 0, 17.765] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce
[info] # Run progress: 39.38% complete, ETA 00:37:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 32729.689 ops/s
[info] # Warmup Iteration   2: 42672.434 ops/s
[info] # Warmup Iteration   3: 42893.927 ops/s
[info] Iteration   1: 43369.273 ops/s
[info]                  ·gc.alloc.rate:                   1378.939 MB/sec
[info]                  ·gc.alloc.rate.norm:              50040.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1656.367 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60107.528 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.266 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 43245.342 ops/s
[info]                  ·gc.alloc.rate:                   1374.945 MB/sec
[info]                  ·gc.alloc.rate.norm:              50040.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.269 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48450.456 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.303 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 43343.599 ops/s
[info]                  ·gc.alloc.rate:                   1378.067 MB/sec
[info]                  ·gc.alloc.rate.norm:              50040.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.573 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48569.597 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.512 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 42358.328 ops/s
[info]                  ·gc.alloc.rate:                   1346.782 MB/sec
[info]                  ·gc.alloc.rate.norm:              50040.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.897 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49895.655 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.094 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 43005.228 ops/s
[info]                  ·gc.alloc.rate:                   1367.487 MB/sec
[info]                  ·gc.alloc.rate.norm:              50040.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348.122 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49331.416 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.286 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce":
[info]   43064.354 ±(99.9%) 1617.360 ops/s [Average]
[info]   (min, avg, max) = (42358.328, 43064.354, 43369.273), stdev = 420.023
[info]   CI (99.9%): [41446.994, 44681.714] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1369.244 ±(99.9%) 51.373 MB/sec [Average]
[info]   (min, avg, max) = (1346.782, 1369.244, 1378.939), stdev = 13.341
[info]   CI (99.9%): [1317.871, 1420.617] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   50040.010 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (50040.010, 50040.010, 50040.011), stdev = 0.001
[info]   CI (99.9%): [50040.009, 50040.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1403.246 ±(99.9%) 545.395 MB/sec [Average]
[info]   (min, avg, max) = (1331.269, 1403.246, 1656.367), stdev = 141.637
[info]   CI (99.9%): [857.851, 1948.641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   51270.930 ±(99.9%) 19155.824 B/op [Average]
[info]   (min, avg, max) = (48450.456, 51270.930, 60107.528), stdev = 4974.707
[info]   CI (99.9%): [32115.107, 70426.754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.146), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2.892 ±(99.9%) 5.620 B/op [Average]
[info]   (min, avg, max) = (1.512, 2.892, 5.303), stdev = 1.459
[info]   CI (99.9%): [≈ 0, 8.512] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala
[info] # Run progress: 39.73% complete, ETA 00:37:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 872352.050 ops/s
[info] # Warmup Iteration   2: 978751.291 ops/s
[info] # Warmup Iteration   3: 1005376.319 ops/s
[info] Iteration   1: 1001007.081 ops/s
[info]                  ·gc.alloc.rate:                   1073.523 MB/sec
[info]                  ·gc.alloc.rate.norm:              1688.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995.818 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1565.819 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.098 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 994971.319 ops/s
[info]                  ·gc.alloc.rate:                   1067.134 MB/sec
[info]                  ·gc.alloc.rate.norm:              1688.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          998.566 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1579.539 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.198 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 1002073.727 ops/s
[info]                  ·gc.alloc.rate:                   1074.716 MB/sec
[info]                  ·gc.alloc.rate.norm:              1688.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1000.537 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1571.491 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.131 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1000602.914 ops/s
[info]                  ·gc.alloc.rate:                   1073.113 MB/sec
[info]                  ·gc.alloc.rate.norm:              1688.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1003.848 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1579.047 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.098 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 1003086.583 ops/s
[info]                  ·gc.alloc.rate:                   1075.804 MB/sec
[info]                  ·gc.alloc.rate.norm:              1688.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1006.544 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1579.327 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.098 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala":
[info]   1000348.325 ±(99.9%) 12159.447 ops/s [Average]
[info]   (min, avg, max) = (994971.319, 1000348.325, 1003086.583), stdev = 3157.770
[info]   CI (99.9%): [988188.878, 1012507.772] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1072.858 ±(99.9%) 12.974 MB/sec [Average]
[info]   (min, avg, max) = (1067.134, 1072.858, 1075.804), stdev = 3.369
[info]   CI (99.9%): [1059.884, 1085.832] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1688.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1688.000, 1688.000, 1688.000), stdev = 0.001
[info]   CI (99.9%): [1688.000, 1688.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1001.063 ±(99.9%) 16.316 MB/sec [Average]
[info]   (min, avg, max) = (995.818, 1001.063, 1006.544), stdev = 4.237
[info]   CI (99.9%): [984.746, 1017.379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1575.045 ±(99.9%) 23.760 B/op [Average]
[info]   (min, avg, max) = (1565.819, 1575.045, 1579.539), stdev = 6.170
[info]   CI (99.9%): [1551.284, 1598.805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.079, 0.125), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.125 ±(99.9%) 0.166 B/op [Average]
[info]   (min, avg, max) = (0.098, 0.125, 0.198), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.291] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 40.07% complete, ETA 00:37:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 632893.045 ops/s
[info] # Warmup Iteration   2: 679939.875 ops/s
[info] # Warmup Iteration   3: 662685.656 ops/s
[info] Iteration   1: 661940.879 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 662762.987 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 680458.850 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 680141.318 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 680384.283 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc":
[info]   673137.663 ±(99.9%) 37932.572 ops/s [Average]
[info]   (min, avg, max) = (661940.879, 673137.663, 680458.850), stdev = 9850.969
[info]   CI (99.9%): [635205.091, 711070.236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson
[info] # Run progress: 40.41% complete, ETA 00:37:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 35587.368 ops/s
[info] # Warmup Iteration   2: 46052.545 ops/s
[info] # Warmup Iteration   3: 47011.237 ops/s
[info] Iteration   1: 47426.975 ops/s
[info]                  ·gc.alloc.rate:                   1257.414 MB/sec
[info]                  ·gc.alloc.rate.norm:              41728.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1316.973 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     43704.483 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.382 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 47455.116 ops/s
[info]                  ·gc.alloc.rate:                   1258.368 MB/sec
[info]                  ·gc.alloc.rate.norm:              41728.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1323.496 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     43887.662 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.833 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 47601.398 ops/s
[info]                  ·gc.alloc.rate:                   1262.091 MB/sec
[info]                  ·gc.alloc.rate.norm:              41728.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.669 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     43995.349 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.377 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 47632.611 ops/s
[info]                  ·gc.alloc.rate:                   1262.938 MB/sec
[info]                  ·gc.alloc.rate.norm:              41728.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.328 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     44185.901 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.376 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 47301.700 ops/s
[info]                  ·gc.alloc.rate:                   1254.077 MB/sec
[info]                  ·gc.alloc.rate.norm:              41728.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1006.508 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33490.421 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.463 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson":
[info]   47483.560 ±(99.9%) 520.856 ops/s [Average]
[info]   (min, avg, max) = (47301.700, 47483.560, 47632.611), stdev = 135.265
[info]   CI (99.9%): [46962.704, 48004.416] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1258.978 ±(99.9%) 13.912 MB/sec [Average]
[info]   (min, avg, max) = (1254.077, 1258.978, 1262.938), stdev = 3.613
[info]   CI (99.9%): [1245.066, 1272.890] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   41728.009 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (41728.009, 41728.009, 41728.010), stdev = 0.001
[info]   CI (99.9%): [41728.008, 41728.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1262.995 ±(99.9%) 552.889 MB/sec [Average]
[info]   (min, avg, max) = (1006.508, 1262.995, 1337.328), stdev = 143.583
[info]   CI (99.9%): [710.106, 1815.883] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   41852.763 ±(99.9%) 18013.098 B/op [Average]
[info]   (min, avg, max) = (33490.421, 41852.763, 44185.901), stdev = 4677.944
[info]   CI (99.9%): [23839.666, 59865.861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.185 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.146), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2.486 ±(99.9%) 6.133 B/op [Average]
[info]   (min, avg, max) = (1.376, 2.486, 4.833), stdev = 1.593
[info]   CI (99.9%): [≈ 0, 8.619] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.400, 4.000), stdev = 0.894
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce
[info] # Run progress: 40.75% complete, ETA 00:36:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10971.515 ops/s
[info] # Warmup Iteration   2: 14356.556 ops/s
[info] # Warmup Iteration   3: 14584.858 ops/s
[info] Iteration   1: 14523.553 ops/s
[info]                  ·gc.alloc.rate:                   1319.367 MB/sec
[info]                  ·gc.alloc.rate.norm:              142912.030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1327.517 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     143794.809 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.023 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 14784.997 ops/s
[info]                  ·gc.alloc.rate:                   1342.626 MB/sec
[info]                  ·gc.alloc.rate.norm:              142920.536 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.325 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     141824.035 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.080 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 14558.377 ops/s
[info]                  ·gc.alloc.rate:                   1322.714 MB/sec
[info]                  ·gc.alloc.rate.norm:              142928.030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.108 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     144591.444 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.251 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 14689.201 ops/s
[info]                  ·gc.alloc.rate:                   1333.985 MB/sec
[info]                  ·gc.alloc.rate.norm:              142928.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.898 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     143883.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.382 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 14757.370 ops/s
[info]                  ·gc.alloc.rate:                   1340.387 MB/sec
[info]                  ·gc.alloc.rate.norm:              142924.041 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347.828 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     143717.429 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.880 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce":
[info]   14662.700 ±(99.9%) 450.979 ops/s [Average]
[info]   (min, avg, max) = (14523.553, 14662.700, 14784.997), stdev = 117.118
[info]   CI (99.9%): [14211.721, 15113.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1331.816 ±(99.9%) 40.056 MB/sec [Average]
[info]   (min, avg, max) = (1319.367, 1331.816, 1342.626), stdev = 10.403
[info]   CI (99.9%): [1291.759, 1371.872] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   142922.533 ±(99.9%) 25.615 B/op [Average]
[info]   (min, avg, max) = (142912.030, 142922.533, 142928.030), stdev = 6.652
[info]   CI (99.9%): [142896.918, 142948.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1337.735 ±(99.9%) 31.184 MB/sec [Average]
[info]   (min, avg, max) = (1327.517, 1337.735, 1347.828), stdev = 8.098
[info]   CI (99.9%): [1306.551, 1368.919] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   143562.146 ±(99.9%) 3974.606 B/op [Average]
[info]   (min, avg, max) = (141824.035, 143562.146, 144591.444), stdev = 1032.192
[info]   CI (99.9%): [139587.540, 147536.751] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.100 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.100, 0.125), stdev = 0.017
[info]   CI (99.9%): [0.033, 0.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   10.723 ±(99.9%) 7.142 B/op [Average]
[info]   (min, avg, max) = (8.880, 10.723, 13.382), stdev = 1.855
[info]   CI (99.9%): [3.581, 17.866] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala
[info] # Run progress: 41.10% complete, ETA 00:36:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9386.290 ops/s
[info] # Warmup Iteration   2: 15492.430 ops/s
[info] # Warmup Iteration   3: 15655.231 ops/s
[info] Iteration   1: 15703.616 ops/s
[info]                  ·gc.alloc.rate:                   1279.107 MB/sec
[info]                  ·gc.alloc.rate.norm:              128176.030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1311.421 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     131414.137 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.345 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 15232.447 ops/s
[info]                  ·gc.alloc.rate:                   1240.808 MB/sec
[info]                  ·gc.alloc.rate.norm:              128197.651 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1319.008 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     136277.025 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.603 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 15623.341 ops/s
[info]                  ·gc.alloc.rate:                   1272.698 MB/sec
[info]                  ·gc.alloc.rate.norm:              128208.030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1326.941 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     133672.302 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.194 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 15453.584 ops/s
[info]                  ·gc.alloc.rate:                   1259.437 MB/sec
[info]                  ·gc.alloc.rate.norm:              128208.038 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1000.667 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     101865.739 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.240 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 15738.600 ops/s
[info]                  ·gc.alloc.rate:                   1282.114 MB/sec
[info]                  ·gc.alloc.rate.norm:              128193.175 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.471 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     134028.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.163 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala":
[info]   15550.318 ±(99.9%) 804.689 ops/s [Average]
[info]   (min, avg, max) = (15232.447, 15550.318, 15738.600), stdev = 208.975
[info]   CI (99.9%): [14745.629, 16355.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1266.833 ±(99.9%) 65.306 MB/sec [Average]
[info]   (min, avg, max) = (1240.808, 1266.833, 1282.114), stdev = 16.960
[info]   CI (99.9%): [1201.527, 1332.139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   128196.585 ±(99.9%) 50.846 B/op [Average]
[info]   (min, avg, max) = (128176.030, 128196.585, 128208.038), stdev = 13.205
[info]   CI (99.9%): [128145.738, 128247.431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1259.701 ±(99.9%) 559.126 MB/sec [Average]
[info]   (min, avg, max) = (1000.667, 1259.701, 1340.471), stdev = 145.203
[info]   CI (99.9%): [700.575, 1818.828] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   127451.443 ±(99.9%) 55473.749 B/op [Average]
[info]   (min, avg, max) = (101865.739, 127451.443, 136277.025), stdev = 14406.356
[info]   CI (99.9%): [71977.694, 182925.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.058 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.058, 0.083), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   5.909 ±(99.9%) 9.024 B/op [Average]
[info]   (min, avg, max) = (4.163, 5.909, 8.603), stdev = 2.343
[info]   CI (99.9%): [≈ 0, 14.933] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala
[info] # Run progress: 41.44% complete, ETA 00:36:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 256036.798 ops/s
[info] # Warmup Iteration   2: 261592.736 ops/s
[info] # Warmup Iteration   3: 263688.024 ops/s
[info] Iteration   1: 263621.418 ops/s
[info]                  ·gc.alloc.rate:                   686.493 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.206 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3974.964 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.745 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 258744.969 ops/s
[info]                  ·gc.alloc.rate:                   673.354 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.115 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4051.967 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.380 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 266309.349 ops/s
[info]                  ·gc.alloc.rate:                   693.084 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.153 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3936.850 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.492 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 266329.758 ops/s
[info]                  ·gc.alloc.rate:                   693.133 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.822 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3940.520 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.492 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 263949.548 ops/s
[info]                  ·gc.alloc.rate:               687.000 MB/sec
[info]                  ·gc.alloc.rate.norm:          4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.877 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3981.989 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala":
[info]   263791.008 ±(99.9%) 11915.814 ops/s [Average]
[info]   (min, avg, max) = (258744.969, 263791.008, 266329.758), stdev = 3094.499
[info]   CI (99.9%): [251875.194, 275706.823] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   686.613 ±(99.9%) 31.065 MB/sec [Average]
[info]   (min, avg, max) = (673.354, 686.613, 693.133), stdev = 8.067
[info]   CI (99.9%): [655.548, 717.678] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.002, 4096.002, 4096.002), stdev = 0.001
[info]   CI (99.9%): [4096.001, 4096.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   666.635 ±(99.9%) 2.896 MB/sec [Average]
[info]   (min, avg, max) = (666.115, 666.635, 667.877), stdev = 0.752
[info]   CI (99.9%): [663.738, 669.531] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3977.258 ±(99.9%) 178.459 B/op [Average]
[info]   (min, avg, max) = (3936.850, 3977.258, 4051.967), stdev = 46.345
[info]   CI (99.9%): [3798.799, 4155.717] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.176 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.071, 0.125), stdev = 0.046
[info]   CI (99.9%): [≈ 0, 0.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.422 ±(99.9%) 1.044 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.422, 0.745), stdev = 0.271
[info]   CI (99.9%): [≈ 0, 1.466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson
[info] # Run progress: 41.78% complete, ETA 00:36:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6557.817 ops/s
[info] # Warmup Iteration   2: 11309.347 ops/s
[info] # Warmup Iteration   3: 11776.156 ops/s
[info] Iteration   1: 11703.821 ops/s
[info]                  ·gc.alloc.rate:                   1608.360 MB/sec
[info]                  ·gc.alloc.rate.norm:              216280.037 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1647.196 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     221502.387 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.995 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 11748.136 ops/s
[info]                  ·gc.alloc.rate:                   1614.451 MB/sec
[info]                  ·gc.alloc.rate.norm:              216280.039 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1660.040 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     222387.353 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.944 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 11720.591 ops/s
[info]                  ·gc.alloc.rate:                   1611.297 MB/sec
[info]                  ·gc.alloc.rate.norm:              216282.640 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1671.254 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     224330.684 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.181 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 11433.780 ops/s
[info]                  ·gc.alloc.rate:                   1571.268 MB/sec
[info]                  ·gc.alloc.rate.norm:              216280.038 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1680.316 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     231290.045 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.596 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 11781.778 ops/s
[info]                  ·gc.alloc.rate:                   1617.734 MB/sec
[info]                  ·gc.alloc.rate.norm:              216280.037 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1685.572 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     225349.518 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16.684 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson":
[info]   11677.621 ±(99.9%) 537.067 ops/s [Average]
[info]   (min, avg, max) = (11433.780, 11677.621, 11781.778), stdev = 139.475
[info]   CI (99.9%): [11140.555, 12214.688] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1604.622 ±(99.9%) 73.048 MB/sec [Average]
[info]   (min, avg, max) = (1571.268, 1604.622, 1617.734), stdev = 18.970
[info]   CI (99.9%): [1531.574, 1677.670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   216280.558 ±(99.9%) 4.481 B/op [Average]
[info]   (min, avg, max) = (216280.037, 216280.558, 216282.640), stdev = 1.164
[info]   CI (99.9%): [216276.077, 216285.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1668.876 ±(99.9%) 59.759 MB/sec [Average]
[info]   (min, avg, max) = (1647.196, 1668.876, 1685.572), stdev = 15.519
[info]   CI (99.9%): [1609.117, 1728.634] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   224971.997 ±(99.9%) 14812.487 B/op [Average]
[info]   (min, avg, max) = (221502.387, 224971.997, 231290.045), stdev = 3846.756
[info]   CI (99.9%): [210159.511, 239784.484] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.096 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.096, 0.125), stdev = 0.024
[info]   CI (99.9%): [0.004, 0.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   12.880 ±(99.9%) 11.882 B/op [Average]
[info]   (min, avg, max) = (8.596, 12.880, 16.684), stdev = 3.086
[info]   CI (99.9%): [0.998, 24.762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce
[info] # Run progress: 42.12% complete, ETA 00:35:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26691.715 ops/s
[info] # Warmup Iteration   2: 34747.565 ops/s
[info] # Warmup Iteration   3: 34379.292 ops/s
[info] Iteration   1: 34632.221 ops/s
[info]                  ·gc.alloc.rate:                   1315.846 MB/sec
[info]                  ·gc.alloc.rate.norm:              59793.394 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1324.389 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60181.566 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.784 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 34250.654 ops/s
[info]                  ·gc.alloc.rate:                   1300.842 MB/sec
[info]                  ·gc.alloc.rate.norm:              59768.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.740 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61095.767 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.783 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 35341.316 ops/s
[info]                  ·gc.alloc.rate:                   1342.220 MB/sec
[info]                  ·gc.alloc.rate.norm:              59768.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.390 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     59508.401 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.927 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 35664.211 ops/s
[info]                  ·gc.alloc.rate:                   1354.872 MB/sec
[info]                  ·gc.alloc.rate.norm:              59768.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.103 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     59204.712 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.837 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 35668.792 ops/s
[info]                  ·gc.alloc.rate:                   1354.928 MB/sec
[info]                  ·gc.alloc.rate.norm:              59768.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347.300 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     59431.554 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.674 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce":
[info]   35111.439 ±(99.9%) 2465.346 ops/s [Average]
[info]   (min, avg, max) = (34250.654, 35111.439, 35668.792), stdev = 640.243
[info]   CI (99.9%): [32646.093, 37576.785] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1333.742 ±(99.9%) 93.727 MB/sec [Average]
[info]   (min, avg, max) = (1300.842, 1333.742, 1354.928), stdev = 24.341
[info]   CI (99.9%): [1240.014, 1427.469] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   59773.089 ±(99.9%) 43.709 B/op [Average]
[info]   (min, avg, max) = (59768.012, 59773.089, 59793.394), stdev = 11.351
[info]   CI (99.9%): [59729.380, 59816.797] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1335.984 ±(99.9%) 35.454 MB/sec [Average]
[info]   (min, avg, max) = (1324.389, 1335.984, 1347.300), stdev = 9.207
[info]   CI (99.9%): [1300.530, 1371.439] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   59884.400 ±(99.9%) 2960.329 B/op [Average]
[info]   (min, avg, max) = (59204.712, 59884.400, 61095.767), stdev = 768.788
[info]   CI (99.9%): [56924.071, 62844.728] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.067, 0.104), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3.001 ±(99.9%) 6.057 B/op [Average]
[info]   (min, avg, max) = (0.927, 3.001, 4.783), stdev = 1.573
[info]   CI (99.9%): [≈ 0, 9.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala
[info] # Run progress: 42.47% complete, ETA 00:35:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 999112.158 ops/s
[info] # Warmup Iteration   2: 1070426.358 ops/s
[info] # Warmup Iteration   3: 1089162.443 ops/s
[info] Iteration   1: 1090873.793 ops/s
[info]                  ·gc.alloc.rate:                   992.509 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995.793 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1436.739 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.090 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1090303.906 ops/s
[info]                  ·gc.alloc.rate:                   992.035 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.868 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1440.420 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.180 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1087496.923 ops/s
[info]                  ·gc.alloc.rate:                   989.661 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1000.098 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1447.103 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.121 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1074996.790 ops/s
[info]                  ·gc.alloc.rate:                   978.482 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1002.939 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1467.793 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.061 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 1100886.073 ops/s
[info]                  ·gc.alloc.rate:                   1001.659 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1005.913 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1438.082 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.149 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala":
[info]   1088911.497 ±(99.9%) 35750.900 ops/s [Average]
[info]   (min, avg, max) = (1074996.790, 1088911.497, 1100886.073), stdev = 9284.395
[info]   CI (99.9%): [1053160.597, 1124662.397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   990.869 ±(99.9%) 31.950 MB/sec [Average]
[info]   (min, avg, max) = (978.482, 990.869, 1001.659), stdev = 8.297
[info]   CI (99.9%): [958.920, 1022.819] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1432.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1432.000, 1432.000, 1432.000), stdev = 0.001
[info]   CI (99.9%): [1432.000, 1432.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1000.522 ±(99.9%) 15.462 MB/sec [Average]
[info]   (min, avg, max) = (995.793, 1000.522, 1005.913), stdev = 4.015
[info]   CI (99.9%): [985.061, 1015.984] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1446.027 ±(99.9%) 49.304 B/op [Average]
[info]   (min, avg, max) = (1436.739, 1446.027, 1467.793), stdev = 12.804
[info]   CI (99.9%): [1396.724, 1495.331] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.127 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.083, 0.125), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.120 ±(99.9%) 0.181 B/op [Average]
[info]   (min, avg, max) = (0.061, 0.120, 0.180), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 42.81% complete, ETA 00:35:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1200659.068 ops/s
[info] # Warmup Iteration   2: 1151069.850 ops/s
[info] # Warmup Iteration   3: 1306231.007 ops/s
[info] Iteration   1: 1309326.126 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1303860.778 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1303774.949 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1307327.739 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1307144.047 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   1306286.728 ±(99.9%) 9283.747 ops/s [Average]
[info]   (min, avg, max) = (1303774.949, 1306286.728, 1309326.126), stdev = 2410.960
[info]   CI (99.9%): [1297002.980, 1315570.475] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson
[info] # Run progress: 43.15% complete, ETA 00:35:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2682.332 ops/s
[info] # Warmup Iteration   2: 3419.805 ops/s
[info] # Warmup Iteration   3: 3611.713 ops/s
[info] Iteration   1: 3239.288 ops/s
[info]                  ·gc.alloc.rate:                   441.706 MB/sec
[info]                  ·gc.alloc.rate.norm:              214544.133 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.781 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     124237.329 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.036 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.424 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 3596.318 ops/s
[info]                  ·gc.alloc.rate:                   490.398 MB/sec
[info]                  ·gc.alloc.rate.norm:              214544.129 B/op
[info]                  ·gc.churn.PS_Eden_Space:          657.671 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     287724.357 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.032 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 889.045 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 3602.439 ops/s
[info]                  ·gc.alloc.rate:                   491.099 MB/sec
[info]                  ·gc.alloc.rate.norm:              214544.120 B/op
[info]                  ·gc.churn.PS_Eden_Space:          328.333 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     143437.283 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18.184 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 3627.290 ops/s
[info]                  ·gc.alloc.rate:                   494.444 MB/sec
[info]                  ·gc.alloc.rate.norm:              214544.119 B/op
[info]                  ·gc.churn.PS_Eden_Space:          657.098 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     285121.341 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27.096 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 3578.097 ops/s
[info]                  ·gc.alloc.rate:               487.874 MB/sec
[info]                  ·gc.alloc.rate.norm:          214544.121 B/op
[info]                  ·gc.churn.PS_Eden_Space:      328.788 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 144585.710 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson":
[info]   3528.686 ±(99.9%) 626.629 ops/s [Average]
[info]   (min, avg, max) = (3239.288, 3528.686, 3627.290), stdev = 162.734
[info]   CI (99.9%): [2902.057, 4155.316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   481.104 ±(99.9%) 85.287 MB/sec [Average]
[info]   (min, avg, max) = (441.706, 481.104, 494.444), stdev = 22.149
[info]   CI (99.9%): [395.817, 566.391] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   214544.124 ±(99.9%) 0.025 B/op [Average]
[info]   (min, avg, max) = (214544.119, 214544.124, 214544.133), stdev = 0.006
[info]   CI (99.9%): [214544.100, 214544.149] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   445.534 ±(99.9%) 753.422 MB/sec [Average]
[info]   (min, avg, max) = (255.781, 445.534, 657.671), stdev = 195.661
[info]   CI (99.9%): [≈ 0, 1198.956] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   197021.204 ±(99.9%) 315816.813 B/op [Average]
[info]   (min, avg, max) = (124237.329, 197021.204, 287724.357), stdev = 82016.623
[info]   CI (99.9%): [≈ 0, 512838.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.434 ±(99.9%) 3.440 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.434, 2.032), stdev = 0.893
[info]   CI (99.9%): [≈ 0, 3.875] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   190.350 ±(99.9%) 1504.469 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 190.350, 889.045), stdev = 390.706
[info]   CI (99.9%): [≈ 0, 1694.819] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 4.000), stdev = 1.483
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce
[info] # Run progress: 43.49% complete, ETA 00:35:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 98107.311 ops/s
[info] # Warmup Iteration   2: 114755.576 ops/s
[info] # Warmup Iteration   3: 117812.948 ops/s
[info] Iteration   1: 117991.205 ops/s
[info]                  ·gc.alloc.rate:                   2189.871 MB/sec
[info]                  ·gc.alloc.rate.norm:              29208.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.962 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26808.415 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.555 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 118792.112 ops/s
[info]                  ·gc.alloc.rate:                   2204.717 MB/sec
[info]                  ·gc.alloc.rate.norm:              29208.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2358.391 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31243.868 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.206 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 119357.481 ops/s
[info]                  ·gc.alloc.rate:                   2215.255 MB/sec
[info]                  ·gc.alloc.rate.norm:              29208.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029.562 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26759.650 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.921 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 117174.046 ops/s
[info]                  ·gc.alloc.rate:                   2174.843 MB/sec
[info]                  ·gc.alloc.rate.norm:              29208.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2374.777 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31893.109 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.118 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 118480.966 ops/s
[info]                  ·gc.alloc.rate:                   2198.743 MB/sec
[info]                  ·gc.alloc.rate.norm:              29208.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2038.404 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27078.066 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.936 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce":
[info]   118359.162 ±(99.9%) 3186.285 ops/s [Average]
[info]   (min, avg, max) = (117174.046, 118359.162, 119357.481), stdev = 827.468
[info]   CI (99.9%): [115172.876, 121545.447] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate":
[info]   2196.686 ±(99.9%) 58.939 MB/sec [Average]
[info]   (min, avg, max) = (2174.843, 2196.686, 2215.255), stdev = 15.306
[info]   CI (99.9%): [2137.747, 2255.624] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   29208.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (29208.004, 29208.004, 29208.004), stdev = 0.001
[info]   CI (99.9%): [29208.003, 29208.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2162.219 ±(99.9%) 719.809 MB/sec [Average]
[info]   (min, avg, max) = (2009.962, 2162.219, 2374.777), stdev = 186.932
[info]   CI (99.9%): [1442.410, 2882.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   28756.622 ±(99.9%) 9934.531 B/op [Average]
[info]   (min, avg, max) = (26759.650, 28756.622, 31893.109), stdev = 2579.966
[info]   CI (99.9%): [18822.091, 38691.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.117 ±(99.9%) 0.201 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.117, 0.167), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.547 ±(99.9%) 2.649 B/op [Average]
[info]   (min, avg, max) = (0.555, 1.547, 2.206), stdev = 0.688
[info]   CI (99.9%): [≈ 0, 4.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.count":
[info]   32.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala
[info] # Run progress: 43.84% complete, ETA 00:34:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 173340.303 ops/s
[info] # Warmup Iteration   2: 240130.191 ops/s
[info] # Warmup Iteration   3: 249455.160 ops/s
[info] Iteration   1: 251351.210 ops/s
[info]                  ·gc.alloc.rate:                   551.971 MB/sec
[info]                  ·gc.alloc.rate.norm:              3456.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          582.596 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3647.754 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.568 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 250852.098 ops/s
[info]                  ·gc.alloc.rate:                   550.958 MB/sec
[info]                  ·gc.alloc.rate.norm:              3456.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          653.979 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4102.220 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.131 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 247576.598 ops/s
[info]                  ·gc.alloc.rate:                   543.649 MB/sec
[info]                  ·gc.alloc.rate.norm:              3456.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.144 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4158.428 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.529 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 249358.257 ops/s
[info]                  ·gc.alloc.rate:               547.552 MB/sec
[info]                  ·gc.alloc.rate.norm:          3456.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      327.080 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2064.440 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 244363.634 ops/s
[info]                  ·gc.alloc.rate:                   536.584 MB/sec
[info]                  ·gc.alloc.rate.norm:              3456.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          655.477 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4221.763 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.670 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala":
[info]   248700.359 ±(99.9%) 10918.434 ops/s [Average]
[info]   (min, avg, max) = (244363.634, 248700.359, 251351.210), stdev = 2835.483
[info]   CI (99.9%): [237781.925, 259618.794] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   546.143 ±(99.9%) 24.103 MB/sec [Average]
[info]   (min, avg, max) = (536.584, 546.143, 551.971), stdev = 6.259
[info]   CI (99.9%): [522.040, 570.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   3456.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3456.002, 3456.002, 3456.002), stdev = 0.001
[info]   CI (99.9%): [3456.001, 3456.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   574.655 ±(99.9%) 546.261 MB/sec [Average]
[info]   (min, avg, max) = (327.080, 574.655, 655.477), stdev = 141.862
[info]   CI (99.9%): [28.394, 1120.916] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   3638.921 ±(99.9%) 3499.272 B/op [Average]
[info]   (min, avg, max) = (2064.440, 3638.921, 4221.763), stdev = 908.750
[info]   CI (99.9%): [139.649, 7138.193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.475 ±(99.9%) 3.646 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.475, 2.167), stdev = 0.947
[info]   CI (99.9%): [≈ 0, 4.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.980 ±(99.9%) 22.818 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.980, 13.568), stdev = 5.926
[info]   CI (99.9%): [≈ 0, 25.798] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 5.000), stdev = 1.643
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala
[info] # Run progress: 44.18% complete, ETA 00:34:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 466004.057 ops/s
[info] # Warmup Iteration   2: 480808.616 ops/s
[info] # Warmup Iteration   3: 483656.994 ops/s
[info] Iteration   1: 485523.641 ops/s
[info]                  ·gc.alloc.rate:                   612.016 MB/sec
[info]                  ·gc.alloc.rate.norm:              1984.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.098 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2159.323 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.563 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.067 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 485623.685 ops/s
[info]                  ·gc.alloc.rate:                   612.172 MB/sec
[info]                  ·gc.alloc.rate.norm:              1984.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2158.923 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.270 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 473259.846 ops/s
[info]                  ·gc.alloc.rate:                   596.605 MB/sec
[info]                  ·gc.alloc.rate.norm:              1984.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.513 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2213.153 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.138 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 483804.426 ops/s
[info]                  ·gc.alloc.rate:                   609.885 MB/sec
[info]                  ·gc.alloc.rate.norm:              1984.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.154 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2167.048 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.203 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 467730.243 ops/s
[info]                  ·gc.alloc.rate:                   589.741 MB/sec
[info]                  ·gc.alloc.rate.norm:              1984.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.954 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2243.761 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.140 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala":
[info]   479188.368 ±(99.9%) 31594.820 ops/s [Average]
[info]   (min, avg, max) = (467730.243, 479188.368, 485623.685), stdev = 8205.074
[info]   CI (99.9%): [447593.548, 510783.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   604.084 ±(99.9%) 39.628 MB/sec [Average]
[info]   (min, avg, max) = (589.741, 604.084, 612.172), stdev = 10.291
[info]   CI (99.9%): [564.456, 643.711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1984.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1984.001, 1984.001, 1984.001), stdev = 0.001
[info]   CI (99.9%): [1984.001, 1984.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   666.173 ±(99.9%) 1.975 MB/sec [Average]
[info]   (min, avg, max) = (665.513, 666.173, 666.954), stdev = 0.513
[info]   CI (99.9%): [664.198, 668.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2188.442 ±(99.9%) 147.231 B/op [Average]
[info]   (min, avg, max) = (2158.923, 2188.442, 2243.761), stdev = 38.235
[info]   CI (99.9%): [2041.211, 2335.673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.358 ±(99.9%) 2.594 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.358, 1.563), stdev = 0.674
[info]   CI (99.9%): [≈ 0, 2.952] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.164 ±(99.9%) 8.405 B/op [Average]
[info]   (min, avg, max) = (0.138, 1.164, 5.067), stdev = 2.183
[info]   CI (99.9%): [≈ 0, 9.569] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson
[info] # Run progress: 44.52% complete, ETA 00:34:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 42308.453 ops/s
[info] # Warmup Iteration   2: 69042.132 ops/s
[info] # Warmup Iteration   3: 69045.742 ops/s
[info] Iteration   1: 68895.969 ops/s
[info]                  ·gc.alloc.rate:                   2984.163 MB/sec
[info]                  ·gc.alloc.rate.norm:              68168.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3019.992 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68986.465 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.329 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 69608.736 ops/s
[info]                  ·gc.alloc.rate:                   3022.999 MB/sec
[info]                  ·gc.alloc.rate.norm:              68320.512 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3044.109 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68797.598 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.824 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 70278.910 ops/s
[info]                  ·gc.alloc.rate:                   3044.897 MB/sec
[info]                  ·gc.alloc.rate.norm:              68168.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3055.229 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68399.336 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.797 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 69360.202 ops/s
[info]                  ·gc.alloc.rate:                   3005.091 MB/sec
[info]                  ·gc.alloc.rate.norm:              68168.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2719.509 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61689.833 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.417 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 69987.389 ops/s
[info]                  ·gc.alloc.rate:                   3031.368 MB/sec
[info]                  ·gc.alloc.rate.norm:              68168.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3063.626 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68893.412 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.809 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson":
[info]   69626.241 ±(99.9%) 2074.337 ops/s [Average]
[info]   (min, avg, max) = (68895.969, 69626.241, 70278.910), stdev = 538.699
[info]   CI (99.9%): [67551.905, 71700.578] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3017.703 ±(99.9%) 91.088 MB/sec [Average]
[info]   (min, avg, max) = (2984.163, 3017.703, 3044.897), stdev = 23.655
[info]   CI (99.9%): [2926.615, 3108.792] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   68198.508 ±(99.9%) 262.624 B/op [Average]
[info]   (min, avg, max) = (68168.006, 68198.508, 68320.512), stdev = 68.203
[info]   CI (99.9%): [67935.884, 68461.132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2980.493 ±(99.9%) 565.324 MB/sec [Average]
[info]   (min, avg, max) = (2719.509, 2980.493, 3063.626), stdev = 146.813
[info]   CI (99.9%): [2415.169, 3545.817] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   67353.329 ±(99.9%) 12221.506 B/op [Average]
[info]   (min, avg, max) = (61689.833, 67353.329, 68986.465), stdev = 3173.886
[info]   CI (99.9%): [55131.823, 79574.835] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.117 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.117, 0.146), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2.635 ±(99.9%) 2.761 B/op [Average]
[info]   (min, avg, max) = (1.417, 2.635, 3.329), stdev = 0.717
[info]   CI (99.9%): [≈ 0, 5.396] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.count":
[info]   44.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.800, 9.000), stdev = 0.447
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.800, 9.000), stdev = 0.837
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce
[info] # Run progress: 44.86% complete, ETA 00:34:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 145548.540 ops/s
[info] # Warmup Iteration   2: 178168.511 ops/s
[info] # Warmup Iteration   3: 182776.481 ops/s
[info] Iteration   1: 186106.300 ops/s
[info]                  ·gc.alloc.rate:                   1898.615 MB/sec
[info]                  ·gc.alloc.rate.norm:              16056.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1665.048 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14080.800 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.880 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 182233.136 ops/s
[info]                  ·gc.alloc.rate:                   1859.595 MB/sec
[info]                  ·gc.alloc.rate.norm:              16056.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.896 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17362.359 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.438 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 185117.861 ops/s
[info]                  ·gc.alloc.rate:                   1888.480 MB/sec
[info]                  ·gc.alloc.rate.norm:              16056.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2021.745 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17189.028 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.885 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 186419.837 ops/s
[info]                  ·gc.alloc.rate:                   1901.807 MB/sec
[info]                  ·gc.alloc.rate.norm:              16056.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1690.649 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14273.303 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.527 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 183888.127 ops/s
[info]                  ·gc.alloc.rate:                   1876.127 MB/sec
[info]                  ·gc.alloc.rate.norm:              16056.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2034.278 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17409.464 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.069 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce":
[info]   184753.052 ±(99.9%) 6625.068 ops/s [Average]
[info]   (min, avg, max) = (182233.136, 184753.052, 186419.837), stdev = 1720.509
[info]   CI (99.9%): [178127.984, 191378.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1884.925 ±(99.9%) 66.808 MB/sec [Average]
[info]   (min, avg, max) = (1859.595, 1884.925, 1901.807), stdev = 17.350
[info]   CI (99.9%): [1818.117, 1951.733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   16056.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16056.002, 16056.002, 16056.003), stdev = 0.001
[info]   CI (99.9%): [16056.002, 16056.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1884.523 ±(99.9%) 728.024 MB/sec [Average]
[info]   (min, avg, max) = (1665.048, 1884.523, 2034.278), stdev = 189.065
[info]   CI (99.9%): [1156.499, 2612.547] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   16062.991 ±(99.9%) 6642.045 B/op [Average]
[info]   (min, avg, max) = (14080.800, 16062.991, 17409.464), stdev = 1724.918
[info]   CI (99.9%): [9420.946, 22705.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.112 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.112, 0.167), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.960 ±(99.9%) 1.277 B/op [Average]
[info]   (min, avg, max) = (0.527, 0.960, 1.438), stdev = 0.332
[info]   CI (99.9%): [≈ 0, 2.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala
[info] # Run progress: 45.21% complete, ETA 00:34:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 336426.609 ops/s
[info] # Warmup Iteration   2: 460616.967 ops/s
[info] # Warmup Iteration   3: 474192.173 ops/s
[info] Iteration   1: 473068.457 ops/s
[info]                  ·gc.alloc.rate:               485.728 MB/sec
[info]                  ·gc.alloc.rate.norm:          1616.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.803 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 851.049 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 478135.112 ops/s
[info]                  ·gc.alloc.rate:                   491.129 MB/sec
[info]                  ·gc.alloc.rate.norm:              1616.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          653.744 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2151.067 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.157 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.098 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 478614.728 ops/s
[info]                  ·gc.alloc.rate:                   491.435 MB/sec
[info]                  ·gc.alloc.rate.norm:              1616.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          327.076 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1075.534 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.068 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 475755.913 ops/s
[info]                  ·gc.alloc.rate:                   488.490 MB/sec
[info]                  ·gc.alloc.rate.norm:              1616.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2163.948 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.138 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 475420.999 ops/s
[info]                  ·gc.alloc.rate:               488.155 MB/sec
[info]                  ·gc.alloc.rate.norm:          1616.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      327.068 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1082.734 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala":
[info]   476199.042 ±(99.9%) 8650.286 ops/s [Average]
[info]   (min, avg, max) = (473068.457, 476199.042, 478614.728), stdev = 2246.452
[info]   CI (99.9%): [467548.756, 484849.328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   488.987 ±(99.9%) 9.059 MB/sec [Average]
[info]   (min, avg, max) = (485.728, 488.987, 491.435), stdev = 2.353
[info]   CI (99.9%): [479.928, 498.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1616.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1616.001, 1616.001, 1616.001), stdev = 0.001
[info]   CI (99.9%): [1616.001, 1616.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   443.563 ±(99.9%) 747.923 MB/sec [Average]
[info]   (min, avg, max) = (255.803, 443.563, 654.125), stdev = 194.233
[info]   CI (99.9%): [≈ 0, 1191.487] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1464.866 ±(99.9%) 2461.073 B/op [Average]
[info]   (min, avg, max) = (851.049, 1464.866, 2163.948), stdev = 639.133
[info]   CI (99.9%): [≈ 0, 3925.939] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.444 ±(99.9%) 3.689 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.444, 2.157), stdev = 0.958
[info]   CI (99.9%): [≈ 0, 4.133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.461 ±(99.9%) 12.137 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.461, 7.098), stdev = 3.152
[info]   CI (99.9%): [≈ 0, 13.598] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala
[info] # Run progress: 45.55% complete, ETA 00:33:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 537944.710 ops/s
[info] # Warmup Iteration   2: 591160.061 ops/s
[info] # Warmup Iteration   3: 546888.598 ops/s
[info] Iteration   1: 564123.672 ops/s
[info]                  ·gc.alloc.rate:               441.647 MB/sec
[info]                  ·gc.alloc.rate.norm:          1232.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.825 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 713.641 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 559870.127 ops/s
[info]                  ·gc.alloc.rate:                   438.325 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.897 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1868.829 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.849 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.197 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 562659.138 ops/s
[info]                  ·gc.alloc.rate:               440.445 MB/sec
[info]                  ·gc.alloc.rate.norm:          1232.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.740 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 927.935 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   4: 563068.790 ops/s
[info]                  ·gc.alloc.rate:               440.758 MB/sec
[info]                  ·gc.alloc.rate.norm:          1232.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.727 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 927.238 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 562694.716 ops/s
[info]                  ·gc.alloc.rate:                   440.477 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.489 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1855.758 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.349 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala":
[info]   562483.289 ±(99.9%) 6069.471 ops/s [Average]
[info]   (min, avg, max) = (559870.127, 562483.289, 564123.672), stdev = 1576.222
[info]   CI (99.9%): [556413.818, 568552.760] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   440.330 ±(99.9%) 4.705 MB/sec [Average]
[info]   (min, avg, max) = (438.325, 440.330, 441.647), stdev = 1.222
[info]   CI (99.9%): [435.625, 445.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1232.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1232.001, 1232.001, 1232.001), stdev = 0.001
[info]   CI (99.9%): [1232.001, 1232.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   449.536 ±(99.9%) 763.931 MB/sec [Average]
[info]   (min, avg, max) = (255.825, 449.536, 664.897), stdev = 198.390
[info]   CI (99.9%): [≈ 0, 1213.466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1258.680 ±(99.9%) 2148.350 B/op [Average]
[info]   (min, avg, max) = (713.641, 1258.680, 1868.829), stdev = 557.920
[info]   CI (99.9%): [≈ 0, 3407.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.395 ±(99.9%) 3.137 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.395, 1.849), stdev = 0.815
[info]   CI (99.9%): [≈ 0, 3.532] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.109 ±(99.9%) 8.819 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.109, 5.197), stdev = 2.290
[info]   CI (99.9%): [≈ 0, 9.928] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 45.89% complete, ETA 00:33:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 570523.130 ops/s
[info] # Warmup Iteration   2: 631255.981 ops/s
[info] # Warmup Iteration   3: 645775.478 ops/s
[info] Iteration   1: 645154.390 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 644843.877 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 645354.793 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 642684.056 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 643891.399 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc":
[info]   644385.703 ±(99.9%) 4253.121 ops/s [Average]
[info]   (min, avg, max) = (642684.056, 644385.703, 645354.793), stdev = 1104.522
[info]   CI (99.9%): [640132.581, 648638.824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson
[info] # Run progress: 46.23% complete, ETA 00:33:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18809.542 ops/s
[info] # Warmup Iteration   2: 26922.307 ops/s
[info] # Warmup Iteration   3: 27071.297 ops/s
[info] Iteration   1: 27018.653 ops/s
[info]                  ·gc.alloc.rate:                   1485.382 MB/sec
[info]                  ·gc.alloc.rate.norm:              86528.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1649.961 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     96115.263 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.063 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 26663.848 ops/s
[info]                  ·gc.alloc.rate:                   1466.445 MB/sec
[info]                  ·gc.alloc.rate.norm:              86518.473 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.848 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     78400.410 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.143 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 27108.563 ops/s
[info]                  ·gc.alloc.rate:                   1490.180 MB/sec
[info]                  ·gc.alloc.rate.norm:              86512.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1670.753 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     96995.117 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.834 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 27172.372 ops/s
[info]                  ·gc.alloc.rate:                   1493.615 MB/sec
[info]                  ·gc.alloc.rate.norm:              86512.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.923 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     77783.759 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.617 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 27171.927 ops/s
[info]                  ·gc.alloc.rate:                   1493.603 MB/sec
[info]                  ·gc.alloc.rate.norm:              86512.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348.291 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     78095.298 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.617 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson":
[info]   27027.073 ±(99.9%) 818.518 ops/s [Average]
[info]   (min, avg, max) = (26663.848, 27027.073, 27172.372), stdev = 212.567
[info]   CI (99.9%): [26208.554, 27845.591] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1485.845 ±(99.9%) 43.732 MB/sec [Average]
[info]   (min, avg, max) = (1466.445, 1485.845, 1493.615), stdev = 11.357
[info]   CI (99.9%): [1442.113, 1529.577] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   86516.508 ±(99.9%) 27.013 B/op [Average]
[info]   (min, avg, max) = (86512.016, 86516.508, 86528.017), stdev = 7.015
[info]   CI (99.9%): [86489.495, 86543.521] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1468.155 ±(99.9%) 676.761 MB/sec [Average]
[info]   (min, avg, max) = (1328.848, 1468.155, 1670.753), stdev = 175.753
[info]   CI (99.9%): [791.394, 2144.916] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   85477.970 ±(99.9%) 38965.456 B/op [Average]
[info]   (min, avg, max) = (77783.759, 85477.970, 96995.117), stdev = 10119.205
[info]   CI (99.9%): [46512.513, 124443.426] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.083, 0.104), stdev = 0.021
[info]   CI (99.9%): [0.003, 0.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   4.855 ±(99.9%) 4.788 B/op [Average]
[info]   (min, avg, max) = (3.617, 4.855, 6.143), stdev = 1.243
[info]   CI (99.9%): [0.067, 9.643] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce
[info] # Run progress: 46.58% complete, ETA 00:33:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5110.024 ops/s
[info] # Warmup Iteration   2: 7203.421 ops/s
[info] # Warmup Iteration   3: 7393.252 ops/s
[info] Iteration   1: 7348.316 ops/s
[info]                  ·gc.alloc.rate:                   1162.043 MB/sec
[info]                  ·gc.alloc.rate.norm:              248864.059 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1324.974 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     283757.505 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26.749 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 7082.356 ops/s
[info]                  ·gc.alloc.rate:                   1120.411 MB/sec
[info]                  ·gc.alloc.rate.norm:              248864.065 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.271 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     221512.420 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.877 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 7329.925 ops/s
[info]                  ·gc.alloc.rate:                   1159.254 MB/sec
[info]                  ·gc.alloc.rate.norm:              248864.059 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.882 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     286352.360 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26.819 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 7370.970 ops/s
[info]                  ·gc.alloc.rate:                   1165.883 MB/sec
[info]                  ·gc.alloc.rate.norm:              248864.063 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1003.732 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     214251.966 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.777 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 7326.617 ops/s
[info]                  ·gc.alloc.rate:                   1158.498 MB/sec
[info]                  ·gc.alloc.rate.norm:              248864.059 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.883 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     288472.873 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.886 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce":
[info]   7291.637 ±(99.9%) 455.592 ops/s [Average]
[info]   (min, avg, max) = (7082.356, 7291.637, 7370.970), stdev = 118.316
[info]   CI (99.9%): [6836.045, 7747.229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1153.218 ±(99.9%) 71.494 MB/sec [Average]
[info]   (min, avg, max) = (1120.411, 1153.218, 1165.883), stdev = 18.567
[info]   CI (99.9%): [1081.723, 1224.712] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   248864.061 ±(99.9%) 0.012 B/op [Average]
[info]   (min, avg, max) = (248864.059, 248864.061, 248864.065), stdev = 0.003
[info]   CI (99.9%): [248864.049, 248864.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1200.548 ±(99.9%) 703.670 MB/sec [Average]
[info]   (min, avg, max) = (997.271, 1200.548, 1342.883), stdev = 182.741
[info]   CI (99.9%): [496.878, 1904.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   258869.425 ±(99.9%) 144557.654 B/op [Average]
[info]   (min, avg, max) = (214251.966, 258869.425, 288472.873), stdev = 37541.164
[info]   CI (99.9%): [114311.771, 403427.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.096 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.096, 0.125), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   20.622 ±(99.9%) 22.537 B/op [Average]
[info]   (min, avg, max) = (13.877, 20.622, 26.819), stdev = 5.853
[info]   CI (99.9%): [≈ 0, 43.158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala
[info] # Run progress: 46.92% complete, ETA 00:32:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 89090.223 ops/s
[info] # Warmup Iteration   2: 92659.228 ops/s
[info] # Warmup Iteration   3: 92219.083 ops/s
[info] Iteration   1: 89833.066 ops/s
[info]                  ·gc.alloc.rate:                   870.318 MB/sec
[info]                  ·gc.alloc.rate.norm:              15248.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          999.211 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17506.222 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.824 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 92668.813 ops/s
[info]                  ·gc.alloc.rate:               898.234 MB/sec
[info]                  ·gc.alloc.rate.norm:          15248.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.463 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11313.574 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 93440.036 ops/s
[info]                  ·gc.alloc.rate:                   905.669 MB/sec
[info]                  ·gc.alloc.rate.norm:              15248.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1001.331 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16858.586 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.104 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 92703.455 ops/s
[info]                  ·gc.alloc.rate:                   898.151 MB/sec
[info]                  ·gc.alloc.rate.norm:              15248.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1003.588 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17038.017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.414 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 94602.816 ops/s
[info]                  ·gc.alloc.rate:               916.535 MB/sec
[info]                  ·gc.alloc.rate.norm:          15248.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.132 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11148.697 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala":
[info]   92649.637 ±(99.9%) 6773.187 ops/s [Average]
[info]   (min, avg, max) = (89833.066, 92649.637, 94602.816), stdev = 1758.975
[info]   CI (99.9%): [85876.450, 99422.824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   897.781 ±(99.9%) 65.814 MB/sec [Average]
[info]   (min, avg, max) = (870.318, 897.781, 916.535), stdev = 17.092
[info]   CI (99.9%): [831.968, 963.595] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   15248.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (15248.005, 15248.005, 15248.005), stdev = 0.001
[info]   CI (99.9%): [15248.004, 15248.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   868.145 ±(99.9%) 702.535 MB/sec [Average]
[info]   (min, avg, max) = (666.463, 868.145, 1003.588), stdev = 182.446
[info]   CI (99.9%): [165.610, 1570.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   14773.019 ±(99.9%) 12485.482 B/op [Average]
[info]   (min, avg, max) = (11148.697, 14773.019, 17506.222), stdev = 3242.440
[info]   CI (99.9%): [2287.538, 27258.501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.227 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.062, 0.125), stdev = 0.059
[info]   CI (99.9%): [≈ 0, 0.289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.068 ±(99.9%) 3.872 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.068, 2.104), stdev = 1.006
[info]   CI (99.9%): [≈ 0, 4.940] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 1.095
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson
[info] # Run progress: 47.26% complete, ETA 00:32:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3423.659 ops/s
[info] # Warmup Iteration   2: 6641.500 ops/s
[info] # Warmup Iteration   3: 6859.253 ops/s
[info] Iteration   1: 6775.904 ops/s
[info]                  ·gc.alloc.rate:                   1236.993 MB/sec
[info]                  ·gc.alloc.rate.norm:              287232.064 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1312.498 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     304764.639 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.669 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 6608.085 ops/s
[info]                  ·gc.alloc.rate:                   1206.649 MB/sec
[info]                  ·gc.alloc.rate.norm:              287232.065 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1319.507 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     314096.896 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14.872 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 6894.960 ops/s
[info]                  ·gc.alloc.rate:                   1258.465 MB/sec
[info]                  ·gc.alloc.rate.norm:              287232.067 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1326.231 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     302698.973 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.502 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 6868.107 ops/s
[info]                  ·gc.alloc.rate:                   1253.470 MB/sec
[info]                  ·gc.alloc.rate.norm:              287232.063 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1000.260 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     229209.035 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.541 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 6802.317 ops/s
[info]                  ·gc.alloc.rate:                   1241.916 MB/sec
[info]                  ·gc.alloc.rate.norm:              287232.063 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.340 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     309764.515 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14.448 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson":
[info]   6789.874 ±(99.9%) 432.922 ops/s [Average]
[info]   (min, avg, max) = (6608.085, 6789.874, 6894.960), stdev = 112.429
[info]   CI (99.9%): [6356.952, 7222.797] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1239.498 ±(99.9%) 78.115 MB/sec [Average]
[info]   (min, avg, max) = (1206.649, 1239.498, 1258.465), stdev = 20.286
[info]   CI (99.9%): [1161.384, 1317.613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   287232.065 ±(99.9%) 0.007 B/op [Average]
[info]   (min, avg, max) = (287232.063, 287232.065, 287232.067), stdev = 0.002
[info]   CI (99.9%): [287232.058, 287232.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1259.567 ±(99.9%) 559.480 MB/sec [Average]
[info]   (min, avg, max) = (1000.260, 1259.567, 1339.340), stdev = 145.295
[info]   CI (99.9%): [700.087, 1819.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   292106.811 ±(99.9%) 136465.851 B/op [Average]
[info]   (min, avg, max) = (229209.035, 292106.811, 314096.896), stdev = 35439.748
[info]   CI (99.9%): [155640.960, 428572.663] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.050 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.050, 0.062), stdev = 0.011
[info]   CI (99.9%): [0.006, 0.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   11.606 ±(99.9%) 10.752 B/op [Average]
[info]   (min, avg, max) = (9.502, 11.606, 14.872), stdev = 2.792
[info]   CI (99.9%): [0.854, 22.358] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 5.000), stdev = 0.894
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce
[info] # Run progress: 47.60% complete, ETA 00:32:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12405.564 ops/s
[info] # Warmup Iteration   2: 16262.594 ops/s
[info] # Warmup Iteration   3: 16723.585 ops/s
[info] Iteration   1: 16799.001 ops/s
[info]                  ·gc.alloc.rate:                   990.789 MB/sec
[info]                  ·gc.alloc.rate.norm:              92810.923 B/op
[info]                  ·gc.churn.PS_Eden_Space:          991.343 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     92862.819 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.801 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 16675.409 ops/s
[info]                  ·gc.alloc.rate:                   984.212 MB/sec
[info]                  ·gc.alloc.rate.norm:              92872.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          993.097 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     93710.429 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.929 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 16970.468 ops/s
[info]                  ·gc.alloc.rate:                   1001.437 MB/sec
[info]                  ·gc.alloc.rate.norm:              92872.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995.521 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     92323.367 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.513 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 16801.815 ops/s
[info]                  ·gc.alloc.rate:                   991.345 MB/sec
[info]                  ·gc.alloc.rate.norm:              92860.271 B/op
[info]                  ·gc.churn.PS_Eden_Space:          999.189 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     93595.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.800 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 16923.414 ops/s
[info]                  ·gc.alloc.rate:                   997.931 MB/sec
[info]                  ·gc.alloc.rate.norm:              92808.027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1002.529 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     93235.666 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.808 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce":
[info]   16834.021 ±(99.9%) 447.529 ops/s [Average]
[info]   (min, avg, max) = (16675.409, 16834.021, 16970.468), stdev = 116.222
[info]   CI (99.9%): [16386.493, 17281.550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   993.143 ±(99.9%) 25.850 MB/sec [Average]
[info]   (min, avg, max) = (984.212, 993.143, 1001.437), stdev = 6.713
[info]   CI (99.9%): [967.293, 1018.992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   92844.654 ±(99.9%) 125.096 B/op [Average]
[info]   (min, avg, max) = (92808.027, 92844.654, 92872.026), stdev = 32.487
[info]   CI (99.9%): [92719.558, 92969.751] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   996.336 ±(99.9%) 17.496 MB/sec [Average]
[info]   (min, avg, max) = (991.343, 996.336, 1002.529), stdev = 4.544
[info]   CI (99.9%): [978.839, 1013.832] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   93145.456 ±(99.9%) 2182.620 B/op [Average]
[info]   (min, avg, max) = (92323.367, 93145.456, 93710.429), stdev = 566.819
[info]   CI (99.9%): [90962.837, 95328.076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.083, 0.146), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   7.770 ±(99.9%) 13.829 B/op [Average]
[info]   (min, avg, max) = (3.929, 7.770, 13.513), stdev = 3.591
[info]   CI (99.9%): [≈ 0, 21.599] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala
[info] # Run progress: 47.95% complete, ETA 00:32:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 435725.709 ops/s
[info] # Warmup Iteration   2: 474869.869 ops/s
[info] # Warmup Iteration   3: 385491.606 ops/s
[info] Iteration   1: 384421.337 ops/s
[info]                  ·gc.alloc.rate:                   871.833 MB/sec
[info]                  ·gc.alloc.rate.norm:              3568.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995.939 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4075.908 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.170 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 377210.699 ops/s
[info]                  ·gc.alloc.rate:                   855.183 MB/sec
[info]                  ·gc.alloc.rate.norm:              3568.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.505 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2772.452 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.434 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 387024.145 ops/s
[info]                  ·gc.alloc.rate:                   877.385 MB/sec
[info]                  ·gc.alloc.rate.norm:              3568.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          998.539 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4060.689 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.339 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 386329.880 ops/s
[info]                  ·gc.alloc.rate:                   875.960 MB/sec
[info]                  ·gc.alloc.rate.norm:              3568.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.595 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2719.281 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.254 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 459543.749 ops/s
[info]                  ·gc.alloc.rate:                   1041.911 MB/sec
[info]                  ·gc.alloc.rate.norm:              3568.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1003.986 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3438.126 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.214 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala":
[info]   398905.962 ±(99.9%) 131384.928 ops/s [Average]
[info]   (min, avg, max) = (377210.699, 398905.962, 459543.749), stdev = 34120.249
[info]   CI (99.9%): [267521.034, 530290.890] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   904.455 ±(99.9%) 297.840 MB/sec [Average]
[info]   (min, avg, max) = (855.183, 904.455, 1041.911), stdev = 77.348
[info]   CI (99.9%): [606.615, 1202.294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3568.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3568.001, 3568.001, 3568.001), stdev = 0.001
[info]   CI (99.9%): [3568.001, 3568.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   866.113 ±(99.9%) 703.351 MB/sec [Average]
[info]   (min, avg, max) = (664.505, 866.113, 1003.986), stdev = 182.658
[info]   CI (99.9%): [162.762, 1569.464] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3413.291 ±(99.9%) 2547.781 B/op [Average]
[info]   (min, avg, max) = (2719.281, 3413.291, 4075.908), stdev = 661.651
[info]   CI (99.9%): [865.510, 5961.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.104), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.282 ±(99.9%) 0.405 B/op [Average]
[info]   (min, avg, max) = (0.170, 0.282, 0.434), stdev = 0.105
[info]   CI (99.9%): [≈ 0, 0.687] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 48.29% complete, ETA 00:32:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 493687.014 ops/s
[info] # Warmup Iteration   2: 537401.726 ops/s
[info] # Warmup Iteration   3: 529812.486 ops/s
[info] Iteration   1: 528598.772 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 530880.160 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 530332.978 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 522222.443 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 536866.145 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   529780.100 ±(99.9%) 20215.106 ops/s [Average]
[info]   (min, avg, max) = (522222.443, 529780.100, 536866.145), stdev = 5249.799
[info]   CI (99.9%): [509564.994, 549995.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson
[info] # Run progress: 48.63% complete, ETA 00:31:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13074.946 ops/s
[info] # Warmup Iteration   2: 18120.387 ops/s
[info] # Warmup Iteration   3: 17925.648 ops/s
[info] Iteration   1: 17857.248 ops/s
[info]                  ·gc.alloc.rate:                   904.142 MB/sec
[info]                  ·gc.alloc.rate.norm:              79688.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          657.142 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     57918.266 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.669 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 18291.516 ops/s
[info]                  ·gc.alloc.rate:                   926.422 MB/sec
[info]                  ·gc.alloc.rate.norm:              79688.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          987.154 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     84912.017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.955 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 18043.252 ops/s
[info]                  ·gc.alloc.rate:                   913.606 MB/sec
[info]                  ·gc.alloc.rate.norm:              79688.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          990.206 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86369.381 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.816 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 18209.117 ops/s
[info]                  ·gc.alloc.rate:                   922.061 MB/sec
[info]                  ·gc.alloc.rate.norm:              79678.403 B/op
[info]                  ·gc.churn.PS_Eden_Space:          994.433 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     85932.335 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.197 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 18125.686 ops/s
[info]                  ·gc.alloc.rate:                   917.638 MB/sec
[info]                  ·gc.alloc.rate.norm:              79672.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.550 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     57785.052 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.423 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson":
[info]   18105.364 ±(99.9%) 642.175 ops/s [Average]
[info]   (min, avg, max) = (17857.248, 18105.364, 18291.516), stdev = 166.771
[info]   CI (99.9%): [17463.189, 18747.539] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   916.774 ±(99.9%) 32.864 MB/sec [Average]
[info]   (min, avg, max) = (904.142, 916.774, 926.422), stdev = 8.535
[info]   CI (99.9%): [883.909, 949.638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   79682.902 ±(99.9%) 28.385 B/op [Average]
[info]   (min, avg, max) = (79672.026, 79682.902, 79688.033), stdev = 7.371
[info]   CI (99.9%): [79654.518, 79711.287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   858.897 ±(99.9%) 694.585 MB/sec [Average]
[info]   (min, avg, max) = (657.142, 858.897, 994.433), stdev = 180.382
[info]   CI (99.9%): [164.312, 1553.482] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   74583.410 ±(99.9%) 58849.984 B/op [Average]
[info]   (min, avg, max) = (57785.052, 74583.410, 86369.381), stdev = 15283.154
[info]   CI (99.9%): [15733.426, 133433.394] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.127 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.062, 0.104), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   5.412 ±(99.9%) 10.842 B/op [Average]
[info]   (min, avg, max) = (1.816, 5.412, 8.955), stdev = 2.816
[info]   CI (99.9%): [≈ 0, 16.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.400, 3.000), stdev = 0.894
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce
[info] # Run progress: 48.97% complete, ETA 00:31:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8790.849 ops/s
[info] # Warmup Iteration   2: 11499.248 ops/s
[info] # Warmup Iteration   3: 11795.736 ops/s
[info] Iteration   1: 11857.976 ops/s
[info]                  ·gc.alloc.rate:                   1222.872 MB/sec
[info]                  ·gc.alloc.rate.norm:              162248.036 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1326.301 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     175970.873 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.525 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 11911.749 ops/s
[info]                  ·gc.alloc.rate:                   1228.083 MB/sec
[info]                  ·gc.alloc.rate.norm:              162248.039 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.603 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     131798.100 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.251 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 11880.890 ops/s
[info]                  ·gc.alloc.rate:                   1225.300 MB/sec
[info]                  ·gc.alloc.rate.norm:              162256.527 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.401 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     176836.346 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.758 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 11683.037 ops/s
[info]                  ·gc.alloc.rate:                   1204.618 MB/sec
[info]                  ·gc.alloc.rate.norm:              162264.037 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.375 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     180550.699 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.413 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 11754.115 ops/s
[info]                  ·gc.alloc.rate:                   1211.883 MB/sec
[info]                  ·gc.alloc.rate.norm:              162264.037 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1008.900 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     135085.773 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.575 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce":
[info]   11817.553 ±(99.9%) 368.525 ops/s [Average]
[info]   (min, avg, max) = (11683.037, 11817.553, 11911.749), stdev = 95.705
[info]   CI (99.9%): [11449.029, 12186.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1218.551 ±(99.9%) 38.201 MB/sec [Average]
[info]   (min, avg, max) = (1204.618, 1218.551, 1228.083), stdev = 9.921
[info]   CI (99.9%): [1180.350, 1256.752] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   162256.135 ±(99.9%) 30.815 B/op [Average]
[info]   (min, avg, max) = (162248.036, 162256.135, 162264.037), stdev = 8.003
[info]   CI (99.9%): [162225.320, 162286.950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1201.716 ±(99.9%) 698.072 MB/sec [Average]
[info]   (min, avg, max) = (997.603, 1201.716, 1340.375), stdev = 181.287
[info]   CI (99.9%): [503.644, 1899.788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   160048.358 ±(99.9%) 93866.441 B/op [Average]
[info]   (min, avg, max) = (131798.100, 160048.358, 180550.699), stdev = 24376.817
[info]   CI (99.9%): [66181.918, 253914.799] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.046 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.046, 0.062), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   6.104 ±(99.9%) 8.980 B/op [Average]
[info]   (min, avg, max) = (2.758, 6.104, 8.413), stdev = 2.332
[info]   CI (99.9%): [≈ 0, 15.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala
[info] # Run progress: 49.32% complete, ETA 00:31:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7180.815 ops/s
[info] # Warmup Iteration   2: 12192.303 ops/s
[info] # Warmup Iteration   3: 12182.874 ops/s
[info] Iteration   1: 11987.307 ops/s
[info]                  ·gc.alloc.rate:                   1112.395 MB/sec
[info]                  ·gc.alloc.rate.norm:              146048.039 B/op
[info]                  ·gc.churn.PS_Eden_Space:          981.923 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     128918.260 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.466 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 12275.313 ops/s
[info]                  ·gc.alloc.rate:                   1139.309 MB/sec
[info]                  ·gc.alloc.rate.norm:              146048.035 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1315.227 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     168598.927 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.007 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 12334.248 ops/s
[info]                  ·gc.alloc.rate:                   1145.214 MB/sec
[info]                  ·gc.alloc.rate.norm:              146065.499 B/op
[info]                  ·gc.churn.PS_Eden_Space:          991.591 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     126471.678 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.624 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 12263.339 ops/s
[info]                  ·gc.alloc.rate:                   1138.623 MB/sec
[info]                  ·gc.alloc.rate.norm:              146080.035 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.426 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     170559.243 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.015 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 12205.851 ops/s
[info]                  ·gc.alloc.rate:                   1132.950 MB/sec
[info]                  ·gc.alloc.rate.norm:              146080.035 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1002.230 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     129225.311 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.737 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala":
[info]   12213.211 ±(99.9%) 516.999 ops/s [Average]
[info]   (min, avg, max) = (11987.307, 12213.211, 12334.248), stdev = 134.263
[info]   CI (99.9%): [11696.212, 12730.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1133.698 ±(99.9%) 48.812 MB/sec [Average]
[info]   (min, avg, max) = (1112.395, 1133.698, 1145.214), stdev = 12.676
[info]   CI (99.9%): [1084.886, 1182.510] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   146064.329 ±(99.9%) 61.659 B/op [Average]
[info]   (min, avg, max) = (146048.035, 146064.329, 146080.035), stdev = 16.013
[info]   CI (99.9%): [146002.670, 146125.987] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1124.080 ±(99.9%) 697.683 MB/sec [Average]
[info]   (min, avg, max) = (981.923, 1124.080, 1329.426), stdev = 181.186
[info]   CI (99.9%): [426.396, 1821.763] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   144754.684 ±(99.9%) 87398.702 B/op [Average]
[info]   (min, avg, max) = (126471.678, 144754.684, 170559.243), stdev = 22697.165
[info]   CI (99.9%): [57355.982, 232153.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.067, 0.083), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   8.570 ±(99.9%) 8.430 B/op [Average]
[info]   (min, avg, max) = (5.466, 8.570, 10.737), stdev = 2.189
[info]   CI (99.9%): [0.140, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 4.000), stdev = 0.837
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala
[info] # Run progress: 49.66% complete, ETA 00:31:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 152163.859 ops/s
[info] # Warmup Iteration   2: 165775.379 ops/s
[info] # Warmup Iteration   3: 171588.311 ops/s
[info] Iteration   1: 170315.895 ops/s
[info]                  ·gc.alloc.rate:                   985.594 MB/sec
[info]                  ·gc.alloc.rate.norm:              9104.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.425 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6155.819 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.769 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 169505.383 ops/s
[info]                  ·gc.alloc.rate:                   980.601 MB/sec
[info]                  ·gc.alloc.rate.norm:              9104.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          999.975 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9283.867 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.160 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 168519.774 ops/s
[info]                  ·gc.alloc.rate:                   975.309 MB/sec
[info]                  ·gc.alloc.rate.norm:              9104.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1002.431 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9357.175 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.389 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 171252.539 ops/s
[info]                  ·gc.alloc.rate:                   990.608 MB/sec
[info]                  ·gc.alloc.rate.norm:              9104.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1004.544 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9232.082 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.383 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 167255.154 ops/s
[info]                  ·gc.alloc.rate:                   967.461 MB/sec
[info]                  ·gc.alloc.rate.norm:              9104.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1006.548 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9471.818 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.784 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala":
[info]   169369.749 ±(99.9%) 5981.668 ops/s [Average]
[info]   (min, avg, max) = (167255.154, 169369.749, 171252.539), stdev = 1553.420
[info]   CI (99.9%): [163388.081, 175351.417] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   979.915 ±(99.9%) 34.622 MB/sec [Average]
[info]   (min, avg, max) = (967.461, 979.915, 990.608), stdev = 8.991
[info]   CI (99.9%): [945.293, 1014.536] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   9104.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (9104.003, 9104.003, 9104.003), stdev = 0.001
[info]   CI (99.9%): [9104.002, 9104.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   935.985 ±(99.9%) 580.324 MB/sec [Average]
[info]   (min, avg, max) = (666.425, 935.985, 1006.548), stdev = 150.708
[info]   CI (99.9%): [355.661, 1516.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   8700.152 ±(99.9%) 5487.827 B/op [Average]
[info]   (min, avg, max) = (6155.819, 8700.152, 9471.818), stdev = 1425.171
[info]   CI (99.9%): [3212.325, 14187.980] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.125), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.697 ±(99.9%) 1.249 B/op [Average]
[info]   (min, avg, max) = (0.383, 0.697, 1.160), stdev = 0.324
[info]   CI (99.9%): [≈ 0, 1.946] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce
[info] # Run progress: 50.00% complete, ETA 00:31:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20133.976 ops/s
[info] # Warmup Iteration   2: 26292.952 ops/s
[info] # Warmup Iteration   3: 26610.390 ops/s
[info] Iteration   1: 26924.246 ops/s
[info]                  ·gc.alloc.rate:                   1182.696 MB/sec
[info]                  ·gc.alloc.rate.norm:              69120.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          992.073 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     57979.489 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.867 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 26332.463 ops/s
[info]                  ·gc.alloc.rate:                   1156.305 MB/sec
[info]                  ·gc.alloc.rate.norm:              69079.325 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1327.539 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     79309.086 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.221 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 27339.013 ops/s
[info]                  ·gc.alloc.rate:               1200.032 MB/sec
[info]                  ·gc.alloc.rate.norm:          69056.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:      999.586 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 57521.358 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 27438.302 ops/s
[info]                  ·gc.alloc.rate:                   1203.945 MB/sec
[info]                  ·gc.alloc.rate.norm:              69056.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.634 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76724.141 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.582 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 27377.768 ops/s
[info]                  ·gc.alloc.rate:                   1201.787 MB/sec
[info]                  ·gc.alloc.rate.norm:              69056.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.493 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     77198.598 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.393 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce":
[info]   27082.358 ±(99.9%) 1792.905 ops/s [Average]
[info]   (min, avg, max) = (26332.463, 27082.358, 27438.302), stdev = 465.612
[info]   CI (99.9%): [25289.453, 28875.264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1188.953 ±(99.9%) 77.427 MB/sec [Average]
[info]   (min, avg, max) = (1156.305, 1188.953, 1203.945), stdev = 20.108
[info]   CI (99.9%): [1111.526, 1266.380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   69073.478 ±(99.9%) 107.452 B/op [Average]
[info]   (min, avg, max) = (69056.016, 69073.478, 69120.016), stdev = 27.905
[info]   CI (99.9%): [68966.025, 69180.930] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1200.065 ±(99.9%) 718.325 MB/sec [Average]
[info]   (min, avg, max) = (992.073, 1200.065, 1343.493), stdev = 186.547
[info]   CI (99.9%): [481.740, 1918.391] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   69746.534 ±(99.9%) 42338.743 B/op [Average]
[info]   (min, avg, max) = (57521.358, 69746.534, 79309.086), stdev = 10995.237
[info]   CI (99.9%): [27407.792, 112085.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.058 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.058, 0.104), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3.413 ±(99.9%) 9.176 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.413, 6.221), stdev = 2.383
[info]   CI (99.9%): [≈ 0, 12.589] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala
[info] # Run progress: 50.34% complete, ETA 00:30:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 611339.916 ops/s
[info] # Warmup Iteration   2: 653473.112 ops/s
[info] # Warmup Iteration   3: 650464.315 ops/s
[info] Iteration   1: 658850.757 ops/s
[info]                  ·gc.alloc.rate:                   904.220 MB/sec
[info]                  ·gc.alloc.rate.norm:              2160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995.214 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2377.366 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.199 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 659233.974 ops/s
[info]                  ·gc.alloc.rate:                   905.163 MB/sec
[info]                  ·gc.alloc.rate.norm:              2160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.134 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1587.217 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.248 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 654938.593 ops/s
[info]                  ·gc.alloc.rate:                   898.901 MB/sec
[info]                  ·gc.alloc.rate.norm:              2160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          998.657 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2399.707 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.050 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 669753.381 ops/s
[info]                  ·gc.alloc.rate:                   919.281 MB/sec
[info]                  ·gc.alloc.rate.norm:              2160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1000.692 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2351.288 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.196 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 667472.164 ops/s
[info]                  ·gc.alloc.rate:                   916.043 MB/sec
[info]                  ·gc.alloc.rate.norm:              2160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1003.896 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2367.155 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.196 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala":
[info]   662049.774 ±(99.9%) 24161.005 ops/s [Average]
[info]   (min, avg, max) = (654938.593, 662049.774, 669753.381), stdev = 6274.536
[info]   CI (99.9%): [637888.769, 686210.779] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   908.722 ±(99.9%) 33.039 MB/sec [Average]
[info]   (min, avg, max) = (898.901, 908.722, 919.281), stdev = 8.580
[info]   CI (99.9%): [875.683, 941.760] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2160.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2160.001, 2160.001, 2160.001), stdev = 0.001
[info]   CI (99.9%): [2160.001, 2160.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   932.718 ±(99.9%) 576.124 MB/sec [Average]
[info]   (min, avg, max) = (665.134, 932.718, 1003.896), stdev = 149.618
[info]   CI (99.9%): [356.595, 1508.842] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2216.547 ±(99.9%) 1356.369 B/op [Average]
[info]   (min, avg, max) = (1587.217, 2216.547, 2399.707), stdev = 352.245
[info]   CI (99.9%): [860.178, 3572.916] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.075, 0.104), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.178 ±(99.9%) 0.288 B/op [Average]
[info]   (min, avg, max) = (0.050, 0.178, 0.248), stdev = 0.075
[info]   CI (99.9%): [≈ 0, 0.466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 50.68% complete, ETA 00:30:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 641621.876 ops/s
[info] # Warmup Iteration   2: 692608.411 ops/s
[info] # Warmup Iteration   3: 685331.631 ops/s
[info] Iteration   1: 686630.629 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 686469.982 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 694937.997 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 695125.063 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 689507.725 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   690534.279 ±(99.9%) 16481.346 ops/s [Average]
[info]   (min, avg, max) = (686469.982, 690534.279, 695125.063), stdev = 4280.153
[info]   CI (99.9%): [674052.933, 707015.625] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce
[info] # Run progress: 51.03% complete, ETA 00:30:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5588.139 ops/s
[info] # Warmup Iteration   2: 21588.131 ops/s
[info] # Warmup Iteration   3: 22252.221 ops/s
[info] Iteration   1: 22098.286 ops/s
[info]                  ·gc.alloc.rate:                   1098.106 MB/sec
[info]                  ·gc.alloc.rate.norm:              78175.336 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1324.767 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94311.591 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.413 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 22207.566 ops/s
[info]                  ·gc.alloc.rate:                   1103.196 MB/sec
[info]                  ·gc.alloc.rate.norm:              78184.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          994.882 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70507.778 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.852 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 22247.668 ops/s
[info]                  ·gc.alloc.rate:                   1105.202 MB/sec
[info]                  ·gc.alloc.rate.norm:              78183.315 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.528 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70566.356 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.418 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 22300.674 ops/s
[info]                  ·gc.alloc.rate:                   1108.040 MB/sec
[info]                  ·gc.alloc.rate.norm:              78184.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.098 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94205.429 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.938 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 22462.056 ops/s
[info]                  ·gc.alloc.rate:                   1115.985 MB/sec
[info]                  ·gc.alloc.rate.norm:              78184.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1005.030 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70410.723 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.917 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce":
[info]   22263.250 ±(99.9%) 514.752 ops/s [Average]
[info]   (min, avg, max) = (22098.286, 22263.250, 22462.056), stdev = 133.679
[info]   CI (99.9%): [21748.498, 22778.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate":
[info]   1106.106 ±(99.9%) 25.442 MB/sec [Average]
[info]   (min, avg, max) = (1098.106, 1106.106, 1115.985), stdev = 6.607
[info]   CI (99.9%): [1080.663, 1131.548] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   78182.142 ±(99.9%) 14.697 B/op [Average]
[info]   (min, avg, max) = (78175.336, 78182.142, 78184.019), stdev = 3.817
[info]   CI (99.9%): [78167.445, 78196.839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1131.461 ±(99.9%) 697.944 MB/sec [Average]
[info]   (min, avg, max) = (994.882, 1131.461, 1335.098), stdev = 181.254
[info]   CI (99.9%): [433.518, 1829.405] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   80000.375 ±(99.9%) 50120.017 B/op [Average]
[info]   (min, avg, max) = (70410.723, 80000.375, 94311.591), stdev = 13016.009
[info]   CI (99.9%): [29880.358, 130120.392] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.125), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5.307 ±(99.9%) 10.388 B/op [Average]
[info]   (min, avg, max) = (2.917, 5.307, 8.852), stdev = 2.698
[info]   CI (99.9%): [≈ 0, 15.696] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 1.000
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala
[info] # Run progress: 51.37% complete, ETA 00:30:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5437.786 ops/s
[info] # Warmup Iteration   2: 18016.497 ops/s
[info] # Warmup Iteration   3: 17920.359 ops/s
[info] Iteration   1: 17958.059 ops/s
[info]                  ·gc.alloc.rate:                   716.534 MB/sec
[info]                  ·gc.alloc.rate.norm:              62800.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          653.455 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     57271.480 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.156 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 188.993 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 18532.619 ops/s
[info]                  ·gc.alloc.rate:                   739.851 MB/sec
[info]                  ·gc.alloc.rate.norm:              62828.538 B/op
[info]                  ·gc.churn.PS_Eden_Space:          981.623 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     83359.953 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.072 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 18734.880 ops/s
[info]                  ·gc.alloc.rate:                   748.276 MB/sec
[info]                  ·gc.alloc.rate.norm:              62832.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          655.806 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55067.449 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.498 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 18655.225 ops/s
[info]                  ·gc.alloc.rate:                   744.736 MB/sec
[info]                  ·gc.alloc.rate.norm:              62824.703 B/op
[info]                  ·gc.churn.PS_Eden_Space:          656.876 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55413.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.269 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 18241.972 ops/s
[info]                  ·gc.alloc.rate:               728.050 MB/sec
[info]                  ·gc.alloc.rate.norm:          62800.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:      658.619 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 56811.037 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala":
[info]   18424.551 ±(99.9%) 1236.027 ops/s [Average]
[info]   (min, avg, max) = (17958.059, 18424.551, 18734.880), stdev = 320.992
[info]   CI (99.9%): [17188.525, 19660.578] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   735.490 ±(99.9%) 50.304 MB/sec [Average]
[info]   (min, avg, max) = (716.534, 735.490, 748.276), stdev = 13.064
[info]   CI (99.9%): [685.186, 785.794] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   62817.063 ±(99.9%) 60.714 B/op [Average]
[info]   (min, avg, max) = (62800.024, 62817.063, 62832.023), stdev = 15.767
[info]   CI (99.9%): [62756.348, 62877.777] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   721.276 ±(99.9%) 560.463 MB/sec [Average]
[info]   (min, avg, max) = (653.455, 721.276, 981.623), stdev = 145.551
[info]   CI (99.9%): [160.813, 1281.739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   61584.586 ±(99.9%) 47007.740 B/op [Average]
[info]   (min, avg, max) = (55067.449, 61584.586, 83359.953), stdev = 12207.761
[info]   CI (99.9%): [14576.845, 108592.326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.469 ±(99.9%) 3.635 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.469, 2.156), stdev = 0.944
[info]   CI (99.9%): [≈ 0, 4.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   40.966 ±(99.9%) 318.798 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 40.966, 188.993), stdev = 82.791
[info]   CI (99.9%): [≈ 0, 359.764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala
[info] # Run progress: 51.71% complete, ETA 00:30:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 165703.340 ops/s
[info] # Warmup Iteration   2: 169367.671 ops/s
[info] # Warmup Iteration   3: 175132.924 ops/s
[info] Iteration   1: 177127.908 ops/s
[info]                  ·gc.alloc.rate:                   460.969 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.785 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2272.809 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.185 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 176923.263 ops/s
[info]                  ·gc.alloc.rate:                   460.472 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.839 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5931.691 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.593 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14.167 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 175328.019 ops/s
[info]                  ·gc.alloc.rate:               456.468 MB/sec
[info]                  ·gc.alloc.rate.norm:          4096.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      333.209 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2989.969 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   4: 176255.957 ops/s
[info]                  ·gc.alloc.rate:                   458.710 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.161 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5948.422 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.115 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 177449.239 ops/s
[info]                  ·gc.alloc.rate:               461.812 MB/sec
[info]                  ·gc.alloc.rate.norm:          4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      333.081 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2954.235 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala":
[info]   176616.877 ±(99.9%) 3244.192 ops/s [Average]
[info]   (min, avg, max) = (175328.019, 176616.877, 177449.239), stdev = 842.506
[info]   CI (99.9%): [173372.685, 179861.070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   459.686 ±(99.9%) 8.190 MB/sec [Average]
[info]   (min, avg, max) = (456.468, 459.686, 461.812), stdev = 2.127
[info]   CI (99.9%): [451.496, 467.876] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.002, 4096.002, 4096.003), stdev = 0.001
[info]   CI (99.9%): [4096.002, 4096.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   451.015 ±(99.9%) 767.162 MB/sec [Average]
[info]   (min, avg, max) = (255.785, 451.015, 666.839), stdev = 199.230
[info]   CI (99.9%): [≈ 0, 1218.177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4019.425 ±(99.9%) 6840.414 B/op [Average]
[info]   (min, avg, max) = (2272.809, 4019.425, 5948.422), stdev = 1776.434
[info]   CI (99.9%): [≈ 0, 10859.839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.348 ±(99.9%) 2.687 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.348, 1.593), stdev = 0.698
[info]   CI (99.9%): [≈ 0, 3.035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3.093 ±(99.9%) 23.903 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.093, 14.167), stdev = 6.207
[info]   CI (99.9%): [≈ 0, 26.996] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 1.095
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson
[info] # Run progress: 52.05% complete, ETA 00:29:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2609.712 ops/s
[info] # Warmup Iteration   2: 14953.072 ops/s
[info] # Warmup Iteration   3: 16108.682 ops/s
[info] Iteration   1: 16186.929 ops/s
[info]                  ·gc.alloc.rate:                   1215.392 MB/sec
[info]                  ·gc.alloc.rate.norm:              118152.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          983.365 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     95595.934 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.048 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 15698.502 ops/s
[info]                  ·gc.alloc.rate:                   1178.626 MB/sec
[info]                  ·gc.alloc.rate.norm:              118156.454 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1315.621 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     131890.052 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.434 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 15954.698 ops/s
[info]                  ·gc.alloc.rate:                   1197.966 MB/sec
[info]                  ·gc.alloc.rate.norm:              118168.027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1322.289 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     130431.342 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.214 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 15904.327 ops/s
[info]                  ·gc.alloc.rate:                   1194.285 MB/sec
[info]                  ·gc.alloc.rate.norm:              118168.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.273 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     98674.772 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.180 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 16010.843 ops/s
[info]                  ·gc.alloc.rate:                   1202.695 MB/sec
[info]                  ·gc.alloc.rate.norm:              118167.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.540 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     131317.545 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.185 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson":
[info]   15951.060 ±(99.9%) 681.224 ops/s [Average]
[info]   (min, avg, max) = (15698.502, 15951.060, 16186.929), stdev = 176.912
[info]   CI (99.9%): [15269.836, 16632.284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1197.793 ±(99.9%) 51.426 MB/sec [Average]
[info]   (min, avg, max) = (1178.626, 1197.793, 1215.392), stdev = 13.355
[info]   CI (99.9%): [1146.366, 1249.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   118162.311 ±(99.9%) 29.042 B/op [Average]
[info]   (min, avg, max) = (118152.029, 118162.311, 118168.029), stdev = 7.542
[info]   CI (99.9%): [118133.269, 118191.352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1191.018 ±(99.9%) 706.337 MB/sec [Average]
[info]   (min, avg, max) = (983.365, 1191.018, 1336.540), stdev = 183.434
[info]   CI (99.9%): [484.680, 1897.355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   117581.929 ±(99.9%) 72022.523 B/op [Average]
[info]   (min, avg, max) = (95595.934, 117581.929, 131890.052), stdev = 18704.020
[info]   CI (99.9%): [45559.407, 189604.452] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.104), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   7.412 ±(99.9%) 9.276 B/op [Average]
[info]   (min, avg, max) = (4.048, 7.412, 10.434), stdev = 2.409
[info]   CI (99.9%): [≈ 0, 16.688] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce
[info] # Run progress: 52.40% complete, ETA 00:29:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 63548.446 ops/s
[info] # Warmup Iteration   2: 79288.186 ops/s
[info] # Warmup Iteration   3: 81704.918 ops/s
[info] Iteration   1: 80616.182 ops/s
[info]                  ·gc.alloc.rate:                   1592.800 MB/sec
[info]                  ·gc.alloc.rate.norm:              31096.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1659.687 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32401.829 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.032 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 80274.890 ops/s
[info]                  ·gc.alloc.rate:                   1586.180 MB/sec
[info]                  ·gc.alloc.rate.norm:              31096.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1669.156 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32722.697 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.224 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 81566.772 ops/s
[info]                  ·gc.alloc.rate:                   1611.563 MB/sec
[info]                  ·gc.alloc.rate.norm:              31096.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1678.002 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32377.976 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.803 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 79870.918 ops/s
[info]                  ·gc.alloc.rate:                   1578.128 MB/sec
[info]                  ·gc.alloc.rate.norm:              31096.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348.006 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26561.598 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.051 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 80154.993 ops/s
[info]                  ·gc.alloc.rate:                   1583.913 MB/sec
[info]                  ·gc.alloc.rate.norm:              31096.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1690.003 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33178.811 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.861 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce":
[info]   80496.751 ±(99.9%) 2522.757 ops/s [Average]
[info]   (min, avg, max) = (79870.918, 80496.751, 81566.772), stdev = 655.152
[info]   CI (99.9%): [77973.994, 83019.508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1590.517 ±(99.9%) 49.614 MB/sec [Average]
[info]   (min, avg, max) = (1578.128, 1590.517, 1611.563), stdev = 12.885
[info]   CI (99.9%): [1540.903, 1640.131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   31096.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (31096.005, 31096.005, 31096.006), stdev = 0.001
[info]   CI (99.9%): [31096.005, 31096.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1608.971 ±(99.9%) 563.395 MB/sec [Average]
[info]   (min, avg, max) = (1348.006, 1608.971, 1690.003), stdev = 146.312
[info]   CI (99.9%): [1045.576, 2172.366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   31448.582 ±(99.9%) 10593.144 B/op [Average]
[info]   (min, avg, max) = (26561.598, 31448.582, 33178.811), stdev = 2751.006
[info]   CI (99.9%): [20855.438, 42041.726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.156 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.092, 0.146), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.794 ±(99.9%) 3.085 B/op [Average]
[info]   (min, avg, max) = (0.803, 1.794, 2.861), stdev = 0.801
[info]   CI (99.9%): [≈ 0, 4.880] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 6.000), stdev = 1.140
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala
[info] # Run progress: 52.74% complete, ETA 00:29:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 103773.869 ops/s
[info] # Warmup Iteration   2: 152719.723 ops/s
[info] # Warmup Iteration   3: 154923.901 ops/s
[info] Iteration   1: 155894.961 ops/s
[info]                  ·gc.alloc.rate:                   1646.694 MB/sec
[info]                  ·gc.alloc.rate.norm:              16624.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1647.746 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16634.616 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.051 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 155775.665 ops/s
[info]                  ·gc.alloc.rate:                   1645.288 MB/sec
[info]                  ·gc.alloc.rate.norm:              16624.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1660.305 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16775.735 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.262 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 150115.556 ops/s
[info]                  ·gc.alloc.rate:                   1585.691 MB/sec
[info]                  ·gc.alloc.rate.norm:              16624.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1672.480 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17533.886 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.655 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 153383.529 ops/s
[info]                  ·gc.alloc.rate:                   1620.272 MB/sec
[info]                  ·gc.alloc.rate.norm:              16624.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1681.209 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17249.216 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.068 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 155081.819 ops/s
[info]                  ·gc.alloc.rate:                   1638.059 MB/sec
[info]                  ·gc.alloc.rate.norm:              16624.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1688.052 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17131.363 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.845 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala":
[info]   154050.306 ±(99.9%) 9307.589 ops/s [Average]
[info]   (min, avg, max) = (150115.556, 154050.306, 155894.961), stdev = 2417.151
[info]   CI (99.9%): [144742.716, 163357.895] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1627.201 ±(99.9%) 98.100 MB/sec [Average]
[info]   (min, avg, max) = (1585.691, 1627.201, 1646.694), stdev = 25.476
[info]   CI (99.9%): [1529.101, 1725.301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   16624.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16624.003, 16624.003, 16624.003), stdev = 0.001
[info]   CI (99.9%): [16624.003, 16624.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1669.959 ±(99.9%) 62.296 MB/sec [Average]
[info]   (min, avg, max) = (1647.746, 1669.959, 1688.052), stdev = 16.178
[info]   CI (99.9%): [1607.663, 1732.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   17064.964 ±(99.9%) 1397.814 B/op [Average]
[info]   (min, avg, max) = (16634.616, 17064.964, 17533.886), stdev = 363.008
[info]   CI (99.9%): [15667.150, 18462.777] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.096 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.096, 0.125), stdev = 0.024
[info]   CI (99.9%): [0.004, 0.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.976 ±(99.9%) 0.895 B/op [Average]
[info]   (min, avg, max) = (0.655, 0.976, 1.262), stdev = 0.232
[info]   CI (99.9%): [0.081, 1.871] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala
[info] # Run progress: 53.08% complete, ETA 00:29:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 401022.766 ops/s
[info] # Warmup Iteration   2: 434885.495 ops/s
[info] # Warmup Iteration   3: 430243.348 ops/s
[info] Iteration   1: 429326.452 ops/s
[info]                  ·gc.alloc.rate:                   475.717 MB/sec
[info]                  ·gc.alloc.rate.norm:              1744.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          588.179 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2156.293 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.776 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.511 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 444199.854 ops/s
[info]                  ·gc.alloc.rate:                   492.223 MB/sec
[info]                  ·gc.alloc.rate.norm:              1744.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.409 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1177.764 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.148 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 443097.076 ops/s
[info]                  ·gc.alloc.rate:                   490.994 MB/sec
[info]                  ·gc.alloc.rate.norm:              1744.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.455 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2356.579 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.148 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 419468.504 ops/s
[info]                  ·gc.alloc.rate:               464.904 MB/sec
[info]                  ·gc.alloc.rate.norm:          1744.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.797 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1244.675 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 429138.201 ops/s
[info]                  ·gc.alloc.rate:               475.529 MB/sec
[info]                  ·gc.alloc.rate.norm:          1744.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.740 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1216.655 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala":
[info]   433046.017 ±(99.9%) 40334.779 ops/s [Average]
[info]   (min, avg, max) = (419468.504, 433046.017, 444199.854), stdev = 10474.814
[info]   CI (99.9%): [392711.238, 473380.797] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   479.873 ±(99.9%) 44.592 MB/sec [Average]
[info]   (min, avg, max) = (464.904, 479.873, 492.223), stdev = 11.580
[info]   CI (99.9%): [435.281, 524.465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1744.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1744.001, 1744.001, 1744.001), stdev = 0.001
[info]   CI (99.9%): [1744.001, 1744.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   449.516 ±(99.9%) 628.141 MB/sec [Average]
[info]   (min, avg, max) = (331.740, 449.516, 663.455), stdev = 163.126
[info]   CI (99.9%): [≈ 0, 1077.657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1630.393 ±(99.9%) 2219.343 B/op [Average]
[info]   (min, avg, max) = (1177.764, 1630.393, 2356.579), stdev = 576.356
[info]   CI (99.9%): [≈ 0, 3849.737] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.372 ±(99.9%) 3.023 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.372, 1.776), stdev = 0.785
[info]   CI (99.9%): [≈ 0, 3.395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.361 ±(99.9%) 11.088 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.361, 6.511), stdev = 2.880
[info]   CI (99.9%): [≈ 0, 12.449] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 4.000), stdev = 1.304
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 53.42% complete, ETA 00:28:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 477888.758 ops/s
[info] # Warmup Iteration   2: 520125.540 ops/s
[info] # Warmup Iteration   3: 530106.818 ops/s
[info] Iteration   1: 530314.229 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 530367.323 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 528787.223 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 528647.942 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 526499.442 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc":
[info]   528923.232 ±(99.9%) 6085.149 ops/s [Average]
[info]   (min, avg, max) = (526499.442, 528923.232, 530367.323), stdev = 1580.294
[info]   CI (99.9%): [522838.083, 535008.381] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson
[info] # Run progress: 53.77% complete, ETA 00:28:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 79443.863 ops/s
[info] # Warmup Iteration   2: 103120.386 ops/s
[info] # Warmup Iteration   3: 103224.006 ops/s
[info] Iteration   1: 105827.047 ops/s
[info]                  ·gc.alloc.rate:                   1513.760 MB/sec
[info]                  ·gc.alloc.rate.norm:              22504.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1651.704 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24554.715 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.548 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 106735.629 ops/s
[info]                  ·gc.alloc.rate:                   1526.278 MB/sec
[info]                  ·gc.alloc.rate.norm:              22504.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1662.491 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24512.383 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.456 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 106182.893 ops/s
[info]                  ·gc.alloc.rate:                   1518.603 MB/sec
[info]                  ·gc.alloc.rate.norm:              22504.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.605 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19821.806 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.926 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 103790.742 ops/s
[info]                  ·gc.alloc.rate:                   1484.105 MB/sec
[info]                  ·gc.alloc.rate.norm:              22504.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1679.469 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25466.370 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.947 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 105408.255 ops/s
[info]                  ·gc.alloc.rate:                   1507.171 MB/sec
[info]                  ·gc.alloc.rate.norm:              22504.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1349.618 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20151.534 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.554 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson":
[info]   105588.913 ±(99.9%) 4301.074 ops/s [Average]
[info]   (min, avg, max) = (103790.742, 105588.913, 106735.629), stdev = 1116.975
[info]   CI (99.9%): [101287.839, 109889.987] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1509.983 ±(99.9%) 61.841 MB/sec [Average]
[info]   (min, avg, max) = (1484.105, 1509.983, 1526.278), stdev = 16.060
[info]   CI (99.9%): [1448.143, 1571.824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   22504.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (22504.004, 22504.004, 22504.004), stdev = 0.001
[info]   CI (99.9%): [22504.004, 22504.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1536.177 ±(99.9%) 678.166 MB/sec [Average]
[info]   (min, avg, max) = (1337.605, 1536.177, 1679.469), stdev = 176.118
[info]   CI (99.9%): [858.011, 2214.343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   22901.361 ±(99.9%) 10359.852 B/op [Average]
[info]   (min, avg, max) = (19821.806, 22901.361, 25466.370), stdev = 2690.421
[info]   CI (99.9%): [12541.510, 33261.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.100 ±(99.9%) 0.164 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.100, 0.167), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.486 ±(99.9%) 2.399 B/op [Average]
[info]   (min, avg, max) = (0.926, 1.486, 2.456), stdev = 0.623
[info]   CI (99.9%): [≈ 0, 3.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 0.707
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce
[info] # Run progress: 54.11% complete, ETA 00:28:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 120824.495 ops/s
[info] # Warmup Iteration   2: 146442.356 ops/s
[info] # Warmup Iteration   3: 147577.183 ops/s
[info] Iteration   1: 146105.842 ops/s
[info]                  ·gc.alloc.rate:                   2519.764 MB/sec
[info]                  ·gc.alloc.rate.norm:              27136.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2353.365 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25344.007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.121 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 146053.429 ops/s
[info]                  ·gc.alloc.rate:                   2519.487 MB/sec
[info]                  ·gc.alloc.rate.norm:              27136.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2705.206 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29136.283 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.346 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 149099.160 ops/s
[info]                  ·gc.alloc.rate:                   2570.796 MB/sec
[info]                  ·gc.alloc.rate.norm:              27136.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2373.615 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25054.664 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.538 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 149155.653 ops/s
[info]                  ·gc.alloc.rate:                   2571.717 MB/sec
[info]                  ·gc.alloc.rate.norm:              27136.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2717.876 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28678.233 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.098 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 145546.841 ops/s
[info]                  ·gc.alloc.rate:                   2509.434 MB/sec
[info]                  ·gc.alloc.rate.norm:              27136.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2381.426 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25751.769 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.675 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce":
[info]   147192.185 ±(99.9%) 6854.747 ops/s [Average]
[info]   (min, avg, max) = (145546.841, 147192.185, 149155.653), stdev = 1780.156
[info]   CI (99.9%): [140337.438, 154046.932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate":
[info]   2538.240 ±(99.9%) 117.167 MB/sec [Average]
[info]   (min, avg, max) = (2509.434, 2538.240, 2571.717), stdev = 30.428
[info]   CI (99.9%): [2421.073, 2655.406] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   27136.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (27136.003, 27136.003, 27136.003), stdev = 0.001
[info]   CI (99.9%): [27136.003, 27136.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2506.298 ±(99.9%) 722.742 MB/sec [Average]
[info]   (min, avg, max) = (2353.365, 2506.298, 2717.876), stdev = 187.694
[info]   CI (99.9%): [1783.555, 3229.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   26792.991 ±(99.9%) 7518.779 B/op [Average]
[info]   (min, avg, max) = (25054.664, 26792.991, 29136.283), stdev = 1952.603
[info]   CI (99.9%): [19274.212, 34311.770] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.108 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.108, 0.146), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.156 ±(99.9%) 1.244 B/op [Average]
[info]   (min, avg, max) = (0.675, 1.156, 1.538), stdev = 0.323
[info]   CI (99.9%): [≈ 0, 2.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.count":
[info]   37.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.400, 8.000), stdev = 0.548
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 7.000), stdev = 0.707
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala
[info] # Run progress: 54.45% complete, ETA 00:28:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 233407.024 ops/s
[info] # Warmup Iteration   2: 354970.544 ops/s
[info] # Warmup Iteration   3: 358407.286 ops/s
[info] Iteration   1: 353187.654 ops/s
[info]                  ·gc.alloc.rate:                   360.998 MB/sec
[info]                  ·gc.alloc.rate.norm:              1608.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.916 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1139.931 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.005 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.021 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 345819.535 ops/s
[info]                  ·gc.alloc.rate:                   353.503 MB/sec
[info]                  ·gc.alloc.rate.norm:              1608.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.939 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1164.205 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.047 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 356582.659 ops/s
[info]                  ·gc.alloc.rate:                   364.309 MB/sec
[info]                  ·gc.alloc.rate.norm:              1608.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          326.746 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1442.205 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.473 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 357285.673 ops/s
[info]                  ·gc.alloc.rate:                   365.178 MB/sec
[info]                  ·gc.alloc.rate.norm:              1608.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          326.882 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1439.368 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.275 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 356958.252 ops/s
[info]                  ·gc.alloc.rate:               364.710 MB/sec
[info]                  ·gc.alloc.rate.norm:          1608.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      654.199 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2884.351 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala":
[info]   353966.755 ±(99.9%) 18645.966 ops/s [Average]
[info]   (min, avg, max) = (345819.535, 353966.755, 357285.673), stdev = 4842.298
[info]   CI (99.9%): [335320.788, 372612.721] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   361.740 ±(99.9%) 18.829 MB/sec [Average]
[info]   (min, avg, max) = (353.503, 361.740, 365.178), stdev = 4.890
[info]   CI (99.9%): [342.911, 380.569] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1608.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1608.001, 1608.001, 1608.001), stdev = 0.001
[info]   CI (99.9%): [1608.001, 1608.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   363.936 ±(99.9%) 639.544 MB/sec [Average]
[info]   (min, avg, max) = (255.916, 363.936, 654.199), stdev = 166.088
[info]   CI (99.9%): [≈ 0, 1003.481] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1614.012 ±(99.9%) 2790.626 B/op [Average]
[info]   (min, avg, max) = (1139.931, 1614.012, 2884.351), stdev = 724.717
[info]   CI (99.9%): [≈ 0, 4404.638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.445 ±(99.9%) 3.664 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.445, 2.146), stdev = 0.951
[info]   CI (99.9%): [≈ 0, 4.108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.963 ±(99.9%) 16.170 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.963, 9.473), stdev = 4.199
[info]   CI (99.9%): [≈ 0, 18.133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 0.837
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala
[info] # Run progress: 54.79% complete, ETA 00:28:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 838344.432 ops/s
[info] # Warmup Iteration   2: 890678.408 ops/s
[info] # Warmup Iteration   3: 899698.721 ops/s
[info] Iteration   1: 898658.318 ops/s
[info]                  ·gc.alloc.rate:                   310.604 MB/sec
[info]                  ·gc.alloc.rate.norm:              544.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.795 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     448.007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.005 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 892805.662 ops/s
[info]                  ·gc.alloc.rate:                   308.728 MB/sec
[info]                  ·gc.alloc.rate.norm:              544.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.825 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     901.871 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.055 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 871708.981 ops/s
[info]                  ·gc.alloc.rate:                   301.292 MB/sec
[info]                  ·gc.alloc.rate.norm:              544.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          333.070 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     601.378 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.584 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.860 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 870563.426 ops/s
[info]                  ·gc.alloc.rate:      300.915 MB/sec
[info]                  ·gc.alloc.rate.norm: 544.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 901949.127 ops/s
[info]                  ·gc.alloc.rate:                   311.750 MB/sec
[info]                  ·gc.alloc.rate.norm:              544.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          333.069 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     581.202 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.073 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala":
[info]   887137.103 ±(99.9%) 57662.693 ops/s [Average]
[info]   (min, avg, max) = (870563.426, 887137.103, 901949.127), stdev = 14974.818
[info]   CI (99.9%): [829474.410, 944799.796] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   306.658 ±(99.9%) 19.968 MB/sec [Average]
[info]   (min, avg, max) = (300.915, 306.658, 311.750), stdev = 5.186
[info]   CI (99.9%): [286.690, 326.626] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   544.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (544.000, 544.001, 544.001), stdev = 0.001
[info]   CI (99.9%): [544.000, 544.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   286.752 ±(99.9%) 715.571 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 286.752, 511.825), stdev = 185.832
[info]   CI (99.9%): [≈ 0, 1002.323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   506.492 ±(99.9%) 1263.786 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 506.492, 901.871), stdev = 328.201
[info]   CI (99.9%): [≈ 0, 1770.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.332 ±(99.9%) 2.695 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.332, 1.584), stdev = 0.700
[info]   CI (99.9%): [≈ 0, 3.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.599 ±(99.9%) 4.868 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.599, 2.860), stdev = 1.264
[info]   CI (99.9%): [≈ 0, 5.467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 0.707
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 4.000), stdev = 1.483
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson
[info] # Run progress: 55.14% complete, ETA 00:27:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 46637.338 ops/s
[info] # Warmup Iteration   2: 76668.655 ops/s
[info] # Warmup Iteration   3: 75126.861 ops/s
[info] Iteration   1: 77390.743 ops/s
[info]                  ·gc.alloc.rate:                   3320.706 MB/sec
[info]                  ·gc.alloc.rate.norm:              67512.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3364.694 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68406.301 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.963 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 77170.430 ops/s
[info]                  ·gc.alloc.rate:                   3310.449 MB/sec
[info]                  ·gc.alloc.rate.norm:              67512.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3047.642 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62152.429 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.821 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 76896.477 ops/s
[info]                  ·gc.alloc.rate:                   3300.082 MB/sec
[info]                  ·gc.alloc.rate.norm:              67512.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3397.642 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69507.853 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.556 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 77007.319 ops/s
[info]                  ·gc.alloc.rate:                   3303.301 MB/sec
[info]                  ·gc.alloc.rate.norm:              67512.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3401.340 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69515.692 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.978 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 77691.937 ops/s
[info]                  ·gc.alloc.rate:                   3333.004 MB/sec
[info]                  ·gc.alloc.rate.norm:              67512.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3404.379 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68957.741 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.374 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson":
[info]   77231.381 ±(99.9%) 1223.129 ops/s [Average]
[info]   (min, avg, max) = (76896.477, 77231.381, 77691.937), stdev = 317.643
[info]   CI (99.9%): [76008.252, 78454.510] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3313.508 ±(99.9%) 51.866 MB/sec [Average]
[info]   (min, avg, max) = (3300.082, 3313.508, 3333.004), stdev = 13.469
[info]   CI (99.9%): [3261.642, 3365.375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   67512.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (67512.006, 67512.006, 67512.006), stdev = 0.001
[info]   CI (99.9%): [67512.005, 67512.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3323.139 ±(99.9%) 596.201 MB/sec [Average]
[info]   (min, avg, max) = (3047.642, 3323.139, 3404.379), stdev = 154.832
[info]   CI (99.9%): [2726.938, 3919.340] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   67708.003 ±(99.9%) 12088.365 B/op [Average]
[info]   (min, avg, max) = (62152.429, 67708.003, 69515.692), stdev = 3139.310
[info]   CI (99.9%): [55619.638, 79796.368] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.154 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.125, 0.154, 0.187), stdev = 0.024
[info]   CI (99.9%): [0.063, 0.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   3.139 ±(99.9%) 1.843 B/op [Average]
[info]   (min, avg, max) = (2.556, 3.139, 3.821), stdev = 0.479
[info]   CI (99.9%): [1.296, 4.981] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.count":
[info]   49.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (9.000, 9.800, 10.000), stdev = 0.447
[info]   CI (99.9%): [49.000, 49.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 8.600, 9.000), stdev = 0.548
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce
[info] # Run progress: 55.48% complete, ETA 00:27:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 188402.877 ops/s
[info] # Warmup Iteration   2: 233230.342 ops/s
[info] # Warmup Iteration   3: 231268.071 ops/s
[info] Iteration   1: 235485.284 ops/s
[info]                  ·gc.alloc.rate:                   1803.795 MB/sec
[info]                  ·gc.alloc.rate.norm:              12056.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1997.036 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13347.561 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.696 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 240859.006 ops/s
[info]                  ·gc.alloc.rate:                   1845.204 MB/sec
[info]                  ·gc.alloc.rate.norm:              12056.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1674.818 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10942.753 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.680 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 234102.434 ops/s
[info]                  ·gc.alloc.rate:                   1793.570 MB/sec
[info]                  ·gc.alloc.rate.norm:              12056.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1682.934 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11312.330 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.420 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 238603.634 ops/s
[info]                  ·gc.alloc.rate:                   1828.145 MB/sec
[info]                  ·gc.alloc.rate.norm:              12056.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2027.558 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13371.062 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.687 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 240591.804 ops/s
[info]                  ·gc.alloc.rate:                   1843.318 MB/sec
[info]                  ·gc.alloc.rate.norm:              12056.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1694.277 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11081.217 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.409 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce":
[info]   237928.432 ±(99.9%) 11670.841 ops/s [Average]
[info]   (min, avg, max) = (234102.434, 237928.432, 240859.006), stdev = 3030.880
[info]   CI (99.9%): [226257.592, 249599.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1822.807 ±(99.9%) 89.626 MB/sec [Average]
[info]   (min, avg, max) = (1793.570, 1822.807, 1845.204), stdev = 23.276
[info]   CI (99.9%): [1733.180, 1912.433] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   12056.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (12056.002, 12056.002, 12056.002), stdev = 0.001
[info]   CI (99.9%): [12056.002, 12056.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1815.325 ±(99.9%) 694.141 MB/sec [Average]
[info]   (min, avg, max) = (1674.818, 1815.325, 2027.558), stdev = 180.266
[info]   CI (99.9%): [1121.183, 2509.466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   12010.985 ±(99.9%) 4766.854 B/op [Average]
[info]   (min, avg, max) = (10942.753, 12010.985, 13371.062), stdev = 1237.937
[info]   CI (99.9%): [7244.131, 16777.839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.087, 0.104), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.578 ±(99.9%) 0.577 B/op [Average]
[info]   (min, avg, max) = (0.409, 0.578, 0.696), stdev = 0.150
[info]   CI (99.9%): [0.001, 1.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala
[info] # Run progress: 55.82% complete, ETA 00:27:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 883693.579 ops/s
[info] # Warmup Iteration   2: 1223400.595 ops/s
[info] # Warmup Iteration   3: 1232666.284 ops/s
[info] Iteration   1: 1223334.185 ops/s
[info]                  ·gc.alloc.rate:                   802.171 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.186 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     841.616 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.107 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1210552.066 ops/s
[info]                  ·gc.alloc.rate:                   794.090 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          983.291 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1277.887 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.108 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1209257.993 ops/s
[info]                  ·gc.alloc.rate:                   793.265 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          657.080 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     854.830 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.054 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1247852.428 ops/s
[info]                  ·gc.alloc.rate:               818.266 MB/sec
[info]                  ·gc.alloc.rate.norm:          1032.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      658.485 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 830.484 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 1221871.610 ops/s
[info]                  ·gc.alloc.rate:                   801.510 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          991.613 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1276.771 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.107 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala":
[info]   1222573.656 ±(99.9%) 59713.330 ops/s [Average]
[info]   (min, avg, max) = (1209257.993, 1222573.656, 1247852.428), stdev = 15507.362
[info]   CI (99.9%): [1162860.327, 1282286.986] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   801.860 ±(99.9%) 38.680 MB/sec [Average]
[info]   (min, avg, max) = (793.265, 801.860, 818.266), stdev = 10.045
[info]   CI (99.9%): [763.180, 840.541] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1032.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1032.000, 1032.000, 1032.000), stdev = 0.001
[info]   CI (99.9%): [1032.000, 1032.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   788.931 ±(99.9%) 697.947 MB/sec [Average]
[info]   (min, avg, max) = (654.186, 788.931, 991.613), stdev = 181.255
[info]   CI (99.9%): [90.984, 1486.878] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1016.318 ±(99.9%) 918.094 B/op [Average]
[info]   (min, avg, max) = (830.484, 1016.318, 1277.887), stdev = 238.426
[info]   CI (99.9%): [98.224, 1934.411] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.058 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.058, 0.083), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.075 ±(99.9%) 0.185 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.075, 0.108), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala
[info] # Run progress: 56.16% complete, ETA 00:27:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1152767.755 ops/s
[info] # Warmup Iteration   2: 1238137.624 ops/s
[info] # Warmup Iteration   3: 1234898.503 ops/s
[info] Iteration   1: 1213094.497 ops/s
[info]                  ·gc.alloc.rate:                   499.529 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.128 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     430.843 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.766 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.291 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1216748.363 ops/s
[info]                  ·gc.alloc.rate:                   501.155 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.068 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     858.648 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.027 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 1218239.341 ops/s
[info]                  ·gc.alloc.rate:                   501.591 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.730 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     428.558 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.108 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 1214549.719 ops/s
[info]                  ·gc.alloc.rate:                   500.064 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.475 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     859.754 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.081 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 1260287.819 ops/s
[info]                  ·gc.alloc.rate:               519.061 MB/sec
[info]                  ·gc.alloc.rate.norm:          648.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.841 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 414.274 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala":
[info]   1224583.948 ±(99.9%) 77231.815 ops/s [Average]
[info]   (min, avg, max) = (1213094.497, 1224583.948, 1260287.819), stdev = 20056.857
[info]   CI (99.9%): [1147352.133, 1301815.763] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   504.280 ±(99.9%) 31.974 MB/sec [Average]
[info]   (min, avg, max) = (499.529, 504.280, 519.061), stdev = 8.304
[info]   CI (99.9%): [472.306, 536.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   648.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (648.000, 648.000, 648.000), stdev = 0.001
[info]   CI (99.9%): [648.000, 648.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   464.648 ±(99.9%) 699.947 MB/sec [Average]
[info]   (min, avg, max) = (331.730, 464.648, 664.068), stdev = 181.774
[info]   CI (99.9%): [≈ 0, 1164.595] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   598.415 ±(99.9%) 917.025 B/op [Average]
[info]   (min, avg, max) = (414.274, 598.415, 859.754), stdev = 238.148
[info]   CI (99.9%): [≈ 0, 1515.440] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.386 ±(99.9%) 2.972 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.386, 1.766), stdev = 0.772
[info]   CI (99.9%): [≈ 0, 3.358] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.501 ±(99.9%) 3.856 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.501, 2.291), stdev = 1.001
[info]   CI (99.9%): [≈ 0, 4.357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 56.51% complete, ETA 00:27:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1196574.728 ops/s
[info] # Warmup Iteration   2: 1056467.368 ops/s
[info] # Warmup Iteration   3: 1046574.979 ops/s
[info] Iteration   1: 1267449.458 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1310040.182 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1309838.183 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1310180.812 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1309321.498 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc":
[info]   1301366.027 ±(99.9%) 73018.760 ops/s [Average]
[info]   (min, avg, max) = (1267449.458, 1301366.027, 1310180.812), stdev = 18962.740
[info]   CI (99.9%): [1228347.267, 1374384.786] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson
[info] # Run progress: 56.85% complete, ETA 00:26:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 23378.372 ops/s
[info] # Warmup Iteration   2: 32544.981 ops/s
[info] # Warmup Iteration   3: 33112.759 ops/s
[info] Iteration   1: 32971.840 ops/s
[info]                  ·gc.alloc.rate:                   1668.490 MB/sec
[info]                  ·gc.alloc.rate.norm:              79642.471 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1655.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     79002.519 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.975 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 33122.124 ops/s
[info]                  ·gc.alloc.rate:                   1676.665 MB/sec
[info]                  ·gc.alloc.rate.norm:              79632.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1667.542 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     79198.731 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.957 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 33232.592 ops/s
[info]                  ·gc.alloc.rate:                   1682.163 MB/sec
[info]                  ·gc.alloc.rate.norm:              79632.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1676.703 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     79373.525 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.943 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 33803.201 ops/s
[info]                  ·gc.alloc.rate:                   1710.343 MB/sec
[info]                  ·gc.alloc.rate.norm:              79632.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1684.376 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     78422.989 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.846 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 33767.473 ops/s
[info]                  ·gc.alloc.rate:                   1708.497 MB/sec
[info]                  ·gc.alloc.rate.norm:              79632.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1689.631 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     78752.643 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.911 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson":
[info]   33379.446 ±(99.9%) 1471.401 ops/s [Average]
[info]   (min, avg, max) = (32971.840, 33379.446, 33803.201), stdev = 382.118
[info]   CI (99.9%): [31908.045, 34850.847] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1689.232 ±(99.9%) 73.440 MB/sec [Average]
[info]   (min, avg, max) = (1668.490, 1689.232, 1710.343), stdev = 19.072
[info]   CI (99.9%): [1615.791, 1762.672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   79634.105 ±(99.9%) 18.008 B/op [Average]
[info]   (min, avg, max) = (79632.013, 79634.105, 79642.471), stdev = 4.677
[info]   CI (99.9%): [79616.096, 79652.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1674.667 ±(99.9%) 52.959 MB/sec [Average]
[info]   (min, avg, max) = (1655.083, 1674.667, 1689.631), stdev = 13.753
[info]   CI (99.9%): [1621.707, 1727.626] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   78950.081 ±(99.9%) 1441.664 B/op [Average]
[info]   (min, avg, max) = (78422.989, 78950.081, 79373.525), stdev = 374.396
[info]   CI (99.9%): [77508.417, 80391.746] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.083, 0.104), stdev = 0.015
[info]   CI (99.9%): [0.027, 0.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   3.926 ±(99.9%) 2.641 B/op [Average]
[info]   (min, avg, max) = (2.911, 3.926, 4.846), stdev = 0.686
[info]   CI (99.9%): [1.286, 6.567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce
[info] # Run progress: 57.19% complete, ETA 00:26:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14477.307 ops/s
[info] # Warmup Iteration   2: 18043.054 ops/s
[info] # Warmup Iteration   3: 18246.897 ops/s
[info] Iteration   1: 18066.205 ops/s
[info]                  ·gc.alloc.rate:                   1895.973 MB/sec
[info]                  ·gc.alloc.rate.norm:              165166.638 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.128 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     174588.571 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.067 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 18141.569 ops/s
[info]                  ·gc.alloc.rate:                   1904.194 MB/sec
[info]                  ·gc.alloc.rate.norm:              165176.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1679.592 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     145693.347 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18.060 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 17958.434 ops/s
[info]                  ·gc.alloc.rate:                   1884.734 MB/sec
[info]                  ·gc.alloc.rate.norm:              165176.035 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2023.653 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     177350.734 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.946 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 17921.121 ops/s
[info]                  ·gc.alloc.rate:                   1880.855 MB/sec
[info]                  ·gc.alloc.rate.norm:              165175.139 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2030.442 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     178311.741 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.969 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 17930.277 ops/s
[info]                  ·gc.alloc.rate:                   1881.717 MB/sec
[info]                  ·gc.alloc.rate.norm:              165176.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1695.949 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     148869.375 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.482 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce":
[info]   18003.521 ±(99.9%) 371.212 ops/s [Average]
[info]   (min, avg, max) = (17921.121, 18003.521, 18141.569), stdev = 96.403
[info]   CI (99.9%): [17632.309, 18374.733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate":
[info]   1889.495 ±(99.9%) 39.261 MB/sec [Average]
[info]   (min, avg, max) = (1880.855, 1889.495, 1904.194), stdev = 10.196
[info]   CI (99.9%): [1850.234, 1928.755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   165173.972 ±(99.9%) 15.856 B/op [Average]
[info]   (min, avg, max) = (165166.638, 165173.972, 165176.035), stdev = 4.118
[info]   CI (99.9%): [165158.116, 165189.828] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1886.753 ±(99.9%) 700.793 MB/sec [Average]
[info]   (min, avg, max) = (1679.592, 1886.753, 2030.442), stdev = 181.994
[info]   CI (99.9%): [1185.960, 2587.546] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   164962.754 ±(99.9%) 62524.687 B/op [Average]
[info]   (min, avg, max) = (145693.347, 164962.754, 178311.741), stdev = 16237.463
[info]   CI (99.9%): [102438.067, 227487.440] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.125 ±(99.9%) 0.204 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.125, 0.208), stdev = 0.053
[info]   CI (99.9%): [≈ 0, 0.329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   10.905 ±(99.9%) 17.645 B/op [Average]
[info]   (min, avg, max) = (5.482, 10.905, 18.060), stdev = 4.582
[info]   CI (99.9%): [≈ 0, 28.549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 1.000
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala
[info] # Run progress: 57.53% complete, ETA 00:26:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 64857.380 ops/s
[info] # Warmup Iteration   2: 94612.074 ops/s
[info] # Warmup Iteration   3: 96041.839 ops/s
[info] Iteration   1: 98649.354 ops/s
[info]                  ·gc.alloc.rate:                   1295.001 MB/sec
[info]                  ·gc.alloc.rate.norm:              20656.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1311.650 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20921.568 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.329 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 98480.353 ops/s
[info]                  ·gc.alloc.rate:                   1292.573 MB/sec
[info]                  ·gc.alloc.rate.norm:              20656.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1318.419 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21069.040 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.663 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 96493.259 ops/s
[info]                  ·gc.alloc.rate:                   1266.946 MB/sec
[info]                  ·gc.alloc.rate.norm:              20656.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1327.441 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21642.301 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.019 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 98181.626 ops/s
[info]                  ·gc.alloc.rate:                   1288.895 MB/sec
[info]                  ·gc.alloc.rate.norm:              20656.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.996 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21394.825 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.002 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 97180.925 ops/s
[info]                  ·gc.alloc.rate:                   1275.434 MB/sec
[info]                  ·gc.alloc.rate.norm:              20656.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.307 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21722.838 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.023 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala":
[info]   97797.103 ±(99.9%) 3560.912 ops/s [Average]
[info]   (min, avg, max) = (96493.259, 97797.103, 98649.354), stdev = 924.757
[info]   CI (99.9%): [94236.191, 101358.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1283.770 ±(99.9%) 46.465 MB/sec [Average]
[info]   (min, avg, max) = (1266.946, 1283.770, 1295.001), stdev = 12.067
[info]   CI (99.9%): [1237.305, 1330.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   20656.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (20656.004, 20656.004, 20656.005), stdev = 0.001
[info]   CI (99.9%): [20656.004, 20656.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1326.762 ±(99.9%) 46.280 MB/sec [Average]
[info]   (min, avg, max) = (1311.650, 1326.762, 1341.307), stdev = 12.019
[info]   CI (99.9%): [1280.483, 1373.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   21350.114 ±(99.9%) 1346.280 B/op [Average]
[info]   (min, avg, max) = (20921.568, 21350.114, 21722.838), stdev = 349.625
[info]   CI (99.9%): [20003.834, 22696.395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.100 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.100, 0.125), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.607 ±(99.9%) 1.674 B/op [Average]
[info]   (min, avg, max) = (1.019, 1.607, 2.023), stdev = 0.435
[info]   CI (99.9%): [≈ 0, 3.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala
[info] # Run progress: 57.88% complete, ETA 00:26:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 223353.628 ops/s
[info] # Warmup Iteration   2: 233595.002 ops/s
[info] # Warmup Iteration   3: 229715.778 ops/s
[info] Iteration   1: 227695.819 ops/s
[info]                  ·gc.alloc.rate:                   740.757 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.173 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4604.490 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.576 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 231052.072 ops/s
[info]                  ·gc.alloc.rate:                   751.831 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.624 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4532.926 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.425 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 231965.459 ops/s
[info]                  ·gc.alloc.rate:               754.613 MB/sec
[info]                  ·gc.alloc.rate.norm:          5120.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.159 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4519.841 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   4: 230926.099 ops/s
[info]                  ·gc.alloc.rate:                   751.270 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1000.558 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6818.929 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.426 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 233801.928 ops/s
[info]                  ·gc.alloc.rate:                   760.584 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.139 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4497.690 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.140 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala":
[info]   231088.275 ±(99.9%) 8538.914 ops/s [Average]
[info]   (min, avg, max) = (227695.819, 231088.275, 233801.928), stdev = 2217.529
[info]   CI (99.9%): [222549.361, 239627.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   751.811 ±(99.9%) 27.721 MB/sec [Average]
[info]   (min, avg, max) = (740.757, 751.811, 760.584), stdev = 7.199
[info]   CI (99.9%): [724.090, 779.533] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   5120.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5120.002, 5120.002, 5120.002), stdev = 0.001
[info]   CI (99.9%): [5120.002, 5120.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   733.330 ±(99.9%) 575.239 MB/sec [Average]
[info]   (min, avg, max) = (665.624, 733.330, 1000.558), stdev = 149.388
[info]   CI (99.9%): [158.092, 1308.569] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4994.775 ±(99.9%) 3929.648 B/op [Average]
[info]   (min, avg, max) = (4497.690, 4994.775, 6818.929), stdev = 1020.517
[info]   CI (99.9%): [1065.127, 8924.423] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.046 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.083), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.313 ±(99.9%) 0.907 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.313, 0.576), stdev = 0.236
[info]   CI (99.9%): [≈ 0, 1.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson
[info] # Run progress: 58.22% complete, ETA 00:25:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9976.224 ops/s
[info] # Warmup Iteration   2: 16033.245 ops/s
[info] # Warmup Iteration   3: 16306.281 ops/s
[info] Iteration   1: 16288.033 ops/s
[info]                  ·gc.alloc.rate:                   2077.302 MB/sec
[info]                  ·gc.alloc.rate.norm:              200640.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2323.400 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     224409.811 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.057 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 16300.817 ops/s
[info]                  ·gc.alloc.rate:                   2078.470 MB/sec
[info]                  ·gc.alloc.rate.norm:              200640.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.719 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     193906.811 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.049 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 16367.717 ops/s
[info]                  ·gc.alloc.rate:                   2087.245 MB/sec
[info]                  ·gc.alloc.rate.norm:              200640.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020.938 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     194266.142 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.006 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 16519.709 ops/s
[info]                  ·gc.alloc.rate:                   2106.019 MB/sec
[info]                  ·gc.alloc.rate.norm:              200640.036 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029.140 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     193315.730 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.967 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 16307.157 ops/s
[info]                  ·gc.alloc.rate:                   2078.924 MB/sec
[info]                  ·gc.alloc.rate.norm:              200640.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2034.399 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     196342.802 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.018 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson":
[info]   16356.687 ±(99.9%) 370.272 ops/s [Average]
[info]   (min, avg, max) = (16288.033, 16356.687, 16519.709), stdev = 96.158
[info]   CI (99.9%): [15986.415, 16726.959] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2085.592 ±(99.9%) 46.524 MB/sec [Average]
[info]   (min, avg, max) = (2077.302, 2085.592, 2106.019), stdev = 12.082
[info]   CI (99.9%): [2039.068, 2132.116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   200640.029 ±(99.9%) 0.015 B/op [Average]
[info]   (min, avg, max) = (200640.026, 200640.029, 200640.036), stdev = 0.004
[info]   CI (99.9%): [200640.014, 200640.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2083.319 ±(99.9%) 518.136 MB/sec [Average]
[info]   (min, avg, max) = (2008.719, 2083.319, 2323.400), stdev = 134.558
[info]   CI (99.9%): [1565.183, 2601.455] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   200448.259 ±(99.9%) 51765.489 B/op [Average]
[info]   (min, avg, max) = (193315.730, 200448.259, 224409.811), stdev = 13443.333
[info]   CI (99.9%): [148682.770, 252213.748] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.104), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   7.219 ±(99.9%) 11.791 B/op [Average]
[info]   (min, avg, max) = (3.967, 7.219, 10.057), stdev = 3.062
[info]   CI (99.9%): [≈ 0, 19.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.count":
[info]   31.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce
[info] # Run progress: 58.56% complete, ETA 00:25:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15264.571 ops/s
[info] # Warmup Iteration   2: 20241.571 ops/s
[info] # Warmup Iteration   3: 20601.851 ops/s
[info] Iteration   1: 20731.702 ops/s
[info]                  ·gc.alloc.rate:                   1677.914 MB/sec
[info]                  ·gc.alloc.rate.norm:              127381.748 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1660.993 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     126097.143 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.580 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 20649.025 ops/s
[info]                  ·gc.alloc.rate:                   1671.490 MB/sec
[info]                  ·gc.alloc.rate.norm:              127392.021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1671.394 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     127384.747 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.520 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 20282.829 ops/s
[info]                  ·gc.alloc.rate:                   1641.639 MB/sec
[info]                  ·gc.alloc.rate.norm:              127375.829 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1679.284 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     130296.732 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.845 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 20795.916 ops/s
[info]                  ·gc.alloc.rate:                   1683.215 MB/sec
[info]                  ·gc.alloc.rate.norm:              127352.021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1687.074 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     127643.963 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.302 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 20646.608 ops/s
[info]                  ·gc.alloc.rate:                   1670.649 MB/sec
[info]                  ·gc.alloc.rate.norm:              127352.021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1691.387 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     128932.852 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.348 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce":
[info]   20621.216 ±(99.9%) 766.876 ops/s [Average]
[info]   (min, avg, max) = (20282.829, 20621.216, 20795.916), stdev = 199.155
[info]   CI (99.9%): [19854.340, 21388.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1668.981 ±(99.9%) 62.062 MB/sec [Average]
[info]   (min, avg, max) = (1641.639, 1668.981, 1683.215), stdev = 16.117
[info]   CI (99.9%): [1606.919, 1731.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   127370.728 ±(99.9%) 69.439 B/op [Average]
[info]   (min, avg, max) = (127352.021, 127370.728, 127392.021), stdev = 18.033
[info]   CI (99.9%): [127301.289, 127440.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1678.026 ±(99.9%) 47.005 MB/sec [Average]
[info]   (min, avg, max) = (1660.993, 1678.026, 1691.387), stdev = 12.207
[info]   CI (99.9%): [1631.021, 1725.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   128071.087 ±(99.9%) 6162.861 B/op [Average]
[info]   (min, avg, max) = (126097.143, 128071.087, 130296.732), stdev = 1600.475
[info]   CI (99.9%): [121908.226, 134233.949] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.075, 0.125), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5.719 ±(99.9%) 11.072 B/op [Average]
[info]   (min, avg, max) = (1.580, 5.719, 9.520), stdev = 2.875
[info]   CI (99.9%): [≈ 0, 16.791] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala
[info] # Run progress: 58.90% complete, ETA 00:25:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 62678.849 ops/s
[info] # Warmup Iteration   2: 97346.911 ops/s
[info] # Warmup Iteration   3: 96625.451 ops/s
[info] Iteration   1: 98357.674 ops/s
[info]                  ·gc.alloc.rate:               1347.462 MB/sec
[info]                  ·gc.alloc.rate.norm:          21560.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1311.041 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 20977.276 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 98361.022 ops/s
[info]                  ·gc.alloc.rate:                   1348.046 MB/sec
[info]                  ·gc.alloc.rate.norm:              21559.984 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1320.195 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21114.558 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.998 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 98539.399 ops/s
[info]                  ·gc.alloc.rate:                   1350.400 MB/sec
[info]                  ·gc.alloc.rate.norm:              21560.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.800 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21215.165 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.665 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 97445.622 ops/s
[info]                  ·gc.alloc.rate:                   1334.840 MB/sec
[info]                  ·gc.alloc.rate.norm:              21560.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.630 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21572.760 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.345 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 98282.595 ops/s
[info]                  ·gc.alloc.rate:                   1346.363 MB/sec
[info]                  ·gc.alloc.rate.norm:              21560.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.282 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21494.645 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.333 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala":
[info]   98197.263 ±(99.9%) 1658.295 ops/s [Average]
[info]   (min, avg, max) = (97445.622, 98197.263, 98539.399), stdev = 430.654
[info]   CI (99.9%): [96538.967, 99855.558] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1345.422 ±(99.9%) 23.478 MB/sec [Average]
[info]   (min, avg, max) = (1334.840, 1345.422, 1350.400), stdev = 6.097
[info]   CI (99.9%): [1321.945, 1368.900] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   21560.009 ±(99.9%) 0.065 B/op [Average]
[info]   (min, avg, max) = (21559.984, 21560.009, 21560.025), stdev = 0.017
[info]   CI (99.9%): [21559.944, 21560.074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1327.590 ±(99.9%) 47.571 MB/sec [Average]
[info]   (min, avg, max) = (1311.041, 1327.590, 1342.282), stdev = 12.354
[info]   CI (99.9%): [1280.018, 1375.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   21274.881 ±(99.9%) 971.985 B/op [Average]
[info]   (min, avg, max) = (20977.276, 21274.881, 21572.760), stdev = 252.422
[info]   CI (99.9%): [20302.895, 22246.866] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.230 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.079, 0.146), stdev = 0.060
[info]   CI (99.9%): [≈ 0, 0.309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.268 ±(99.9%) 3.676 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.268, 2.333), stdev = 0.955
[info]   CI (99.9%): [≈ 0, 4.945] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 0.707
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala
[info] # Run progress: 59.25% complete, ETA 00:25:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 213163.687 ops/s
[info] # Warmup Iteration   2: 226855.405 ops/s
[info] # Warmup Iteration   3: 223792.304 ops/s
[info] Iteration   1: 224459.362 ops/s
[info]                  ·gc.alloc.rate:                   715.409 MB/sec
[info]                  ·gc.alloc.rate.norm:              5016.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995.917 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6982.753 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.022 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 225009.370 ops/s
[info]                  ·gc.alloc.rate:                   717.130 MB/sec
[info]                  ·gc.alloc.rate.norm:              5016.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.478 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4640.727 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.728 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 223716.718 ops/s
[info]                  ·gc.alloc.rate:                   712.988 MB/sec
[info]                  ·gc.alloc.rate.norm:              5016.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.150 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4672.418 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.439 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 225170.902 ops/s
[info]                  ·gc.alloc.rate:                   717.614 MB/sec
[info]                  ·gc.alloc.rate.norm:              5016.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.792 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4646.783 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.146 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 225108.382 ops/s
[info]                  ·gc.alloc.rate:                   717.442 MB/sec
[info]                  ·gc.alloc.rate.norm:              5016.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.148 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4657.378 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.728 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala":
[info]   224692.947 ±(99.9%) 2364.885 ops/s [Average]
[info]   (min, avg, max) = (223716.718, 224692.947, 225170.902), stdev = 614.153
[info]   CI (99.9%): [222328.062, 227057.832] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   716.117 ±(99.9%) 7.535 MB/sec [Average]
[info]   (min, avg, max) = (712.988, 716.117, 717.614), stdev = 1.957
[info]   CI (99.9%): [708.582, 723.651] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   5016.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5016.002, 5016.002, 5016.002), stdev = 0.001
[info]   CI (99.9%): [5016.002, 5016.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   730.897 ±(99.9%) 570.489 MB/sec [Average]
[info]   (min, avg, max) = (663.478, 730.897, 995.917), stdev = 148.154
[info]   CI (99.9%): [160.408, 1301.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   5120.012 ±(99.9%) 4009.958 B/op [Average]
[info]   (min, avg, max) = (4640.727, 5120.012, 6982.753), stdev = 1041.373
[info]   CI (99.9%): [1110.054, 9129.970] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.183 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.087, 0.146), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.612 ±(99.9%) 1.280 B/op [Average]
[info]   (min, avg, max) = (0.146, 0.612, 1.022), stdev = 0.332
[info]   CI (99.9%): [≈ 0, 1.893] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 59.59% complete, ETA 00:25:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 232676.667 ops/s
[info] # Warmup Iteration   2: 249096.542 ops/s
[info] # Warmup Iteration   3: 254037.115 ops/s
[info] Iteration   1: 253380.066 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 251938.139 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 253753.858 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 252451.930 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 242726.242 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc":
[info]   250850.047 ±(99.9%) 17706.609 ops/s [Average]
[info]   (min, avg, max) = (242726.242, 250850.047, 253753.858), stdev = 4598.350
[info]   CI (99.9%): [233143.438, 268556.656] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
[info]   CI (99.9%): [0.002, 0.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson
[info] # Run progress: 59.93% complete, ETA 00:24:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18125.410 ops/s
[info] # Warmup Iteration   2: 25063.207 ops/s
[info] # Warmup Iteration   3: 25542.140 ops/s
[info] Iteration   1: 25566.390 ops/s
[info]                  ·gc.alloc.rate:                   1742.819 MB/sec
[info]                  ·gc.alloc.rate.norm:              107288.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1987.784 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     122368.040 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.126 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 25346.769 ops/s
[info]                  ·gc.alloc.rate:                   1728.579 MB/sec
[info]                  ·gc.alloc.rate.norm:              107288.119 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1669.028 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     103591.913 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.755 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 25663.314 ops/s
[info]                  ·gc.alloc.rate:                   1749.469 MB/sec
[info]                  ·gc.alloc.rate.norm:              107288.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1677.997 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     102904.899 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.383 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 25056.162 ops/s
[info]                  ·gc.alloc.rate:                   1708.065 MB/sec
[info]                  ·gc.alloc.rate.norm:              107288.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1686.026 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     105903.665 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.923 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 25176.328 ops/s
[info]                  ·gc.alloc.rate:                   1716.686 MB/sec
[info]                  ·gc.alloc.rate.norm:              107288.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1691.457 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     105711.286 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.904 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson":
[info]   25361.793 ±(99.9%) 983.250 ops/s [Average]
[info]   (min, avg, max) = (25056.162, 25361.793, 25663.314), stdev = 255.347
[info]   CI (99.9%): [24378.543, 26345.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1729.124 ±(99.9%) 66.694 MB/sec [Average]
[info]   (min, avg, max) = (1708.065, 1729.124, 1749.469), stdev = 17.320
[info]   CI (99.9%): [1662.430, 1795.818] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   107288.038 ±(99.9%) 0.176 B/op [Average]
[info]   (min, avg, max) = (107288.017, 107288.038, 107288.119), stdev = 0.046
[info]   CI (99.9%): [107287.862, 107288.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1742.458 ±(99.9%) 529.087 MB/sec [Average]
[info]   (min, avg, max) = (1669.028, 1742.458, 1987.784), stdev = 137.402
[info]   CI (99.9%): [1213.371, 2271.546] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   108095.961 ±(99.9%) 31129.464 B/op [Average]
[info]   (min, avg, max) = (102904.899, 108095.961, 122368.040), stdev = 8084.223
[info]   CI (99.9%): [76966.496, 139225.425] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.087, 0.125), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   5.418 ±(99.9%) 6.388 B/op [Average]
[info]   (min, avg, max) = (3.904, 5.418, 7.755), stdev = 1.659
[info]   CI (99.9%): [≈ 0, 11.806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 6.000), stdev = 0.894
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce
[info] # Run progress: 60.27% complete, ETA 00:24:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 55990.012 ops/s
[info] # Warmup Iteration   2: 71246.477 ops/s
[info] # Warmup Iteration   3: 71125.434 ops/s
[info] Iteration   1: 71815.129 ops/s
[info]                  ·gc.alloc.rate:                   1545.243 MB/sec
[info]                  ·gc.alloc.rate.norm:              33856.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1655.366 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36268.788 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.912 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 73815.196 ops/s
[info]                  ·gc.alloc.rate:                   1588.047 MB/sec
[info]                  ·gc.alloc.rate.norm:              33856.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.442 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28385.381 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.219 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 73233.192 ops/s
[info]                  ·gc.alloc.rate:                   1575.335 MB/sec
[info]                  ·gc.alloc.rate.norm:              33856.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1673.387 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35963.285 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.895 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 73518.980 ops/s
[info]                  ·gc.alloc.rate:                   1582.185 MB/sec
[info]                  ·gc.alloc.rate.norm:              33856.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1682.699 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36006.832 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.891 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 73559.679 ops/s
[info]                  ·gc.alloc.rate:                   1583.490 MB/sec
[info]                  ·gc.alloc.rate.norm:              33856.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1688.414 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36099.358 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.335 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce":
[info]   73188.435 ±(99.9%) 3061.131 ops/s [Average]
[info]   (min, avg, max) = (71815.129, 73188.435, 73815.196), stdev = 794.966
[info]   CI (99.9%): [70127.304, 76249.566] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate":
[info]   1574.860 ±(99.9%) 66.121 MB/sec [Average]
[info]   (min, avg, max) = (1545.243, 1574.860, 1588.047), stdev = 17.171
[info]   CI (99.9%): [1508.739, 1640.980] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   33856.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (33856.006, 33856.006, 33856.006), stdev = 0.001
[info]   CI (99.9%): [33856.005, 33856.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1606.262 ±(99.9%) 593.532 MB/sec [Average]
[info]   (min, avg, max) = (1331.442, 1606.262, 1688.414), stdev = 154.138
[info]   CI (99.9%): [1012.729, 2199.794] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   34544.729 ±(99.9%) 13266.135 B/op [Average]
[info]   (min, avg, max) = (28385.381, 34544.729, 36268.788), stdev = 3445.173
[info]   CI (99.9%): [21278.594, 47810.864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.058 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.058, 0.104), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.251 ±(99.9%) 2.208 B/op [Average]
[info]   (min, avg, max) = (0.891, 1.251, 2.219), stdev = 0.573
[info]   CI (99.9%): [≈ 0, 3.459] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 5.000), stdev = 0.837
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala
[info] # Run progress: 60.62% complete, ETA 00:24:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 54855.297 ops/s
[info] # Warmup Iteration   2: 87921.046 ops/s
[info] # Warmup Iteration   3: 88305.618 ops/s
[info] Iteration   1: 88554.634 ops/s
[info]                  ·gc.alloc.rate:                   1103.268 MB/sec
[info]                  ·gc.alloc.rate.norm:              19608.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          977.917 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17380.171 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.480 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 91125.825 ops/s
[info]                  ·gc.alloc.rate:                   1135.510 MB/sec
[info]                  ·gc.alloc.rate.norm:              19608.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1309.925 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22619.797 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.438 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 91760.202 ops/s
[info]                  ·gc.alloc.rate:                   1143.424 MB/sec
[info]                  ·gc.alloc.rate.norm:              19608.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          987.432 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16932.972 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.428 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 91540.092 ops/s
[info]                  ·gc.alloc.rate:                   1140.469 MB/sec
[info]                  ·gc.alloc.rate.norm:              19608.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.640 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22791.645 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.074 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 91857.103 ops/s
[info]                  ·gc.alloc.rate:                   1144.410 MB/sec
[info]                  ·gc.alloc.rate.norm:              19608.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          999.220 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17120.354 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.497 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala":
[info]   90967.572 ±(99.9%) 5305.868 ops/s [Average]
[info]   (min, avg, max) = (88554.634, 90967.572, 91857.103), stdev = 1377.917
[info]   CI (99.9%): [85661.704, 96273.439] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1133.416 ±(99.9%) 66.250 MB/sec [Average]
[info]   (min, avg, max) = (1103.268, 1133.416, 1144.410), stdev = 17.205
[info]   CI (99.9%): [1067.166, 1199.666] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   19608.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (19608.005, 19608.005, 19608.005), stdev = 0.001
[info]   CI (99.9%): [19608.004, 19608.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1120.027 ±(99.9%) 696.076 MB/sec [Average]
[info]   (min, avg, max) = (977.917, 1120.027, 1325.640), stdev = 180.769
[info]   CI (99.9%): [423.951, 1816.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   19368.987 ±(99.9%) 11747.346 B/op [Average]
[info]   (min, avg, max) = (16932.972, 19368.987, 22791.645), stdev = 3050.748
[info]   CI (99.9%): [7621.642, 31116.333] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.092, 0.146), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.583 ±(99.9%) 2.064 B/op [Average]
[info]   (min, avg, max) = (1.074, 1.583, 2.497), stdev = 0.536
[info]   CI (99.9%): [≈ 0, 3.648] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala
[info] # Run progress: 60.96% complete, ETA 00:24:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 88435.436 ops/s
[info] # Warmup Iteration   2: 104489.418 ops/s
[info] # Warmup Iteration   3: 103332.441 ops/s
[info] Iteration   1: 105702.348 ops/s
[info]                  ·gc.alloc.rate:                   1236.696 MB/sec
[info]                  ·gc.alloc.rate.norm:              18408.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1326.051 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19738.041 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.620 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 105490.020 ops/s
[info]                  ·gc.alloc.rate:                   1233.974 MB/sec
[info]                  ·gc.alloc.rate.norm:              18408.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.789 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19837.333 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.242 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 105401.145 ops/s
[info]                  ·gc.alloc.rate:                   1232.788 MB/sec
[info]                  ·gc.alloc.rate.norm:              18408.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.282 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19938.441 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.554 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 104972.222 ops/s
[info]                  ·gc.alloc.rate:                   1227.943 MB/sec
[info]                  ·gc.alloc.rate.norm:              18408.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1005.691 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15076.251 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.248 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 105759.340 ops/s
[info]                  ·gc.alloc.rate:                   1237.262 MB/sec
[info]                  ·gc.alloc.rate.norm:              18408.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.304 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20015.457 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.929 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala":
[info]   105465.015 ±(99.9%) 1203.139 ops/s [Average]
[info]   (min, avg, max) = (104972.222, 105465.015, 105759.340), stdev = 312.451
[info]   CI (99.9%): [104261.876, 106668.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1233.733 ±(99.9%) 14.371 MB/sec [Average]
[info]   (min, avg, max) = (1227.943, 1233.733, 1237.262), stdev = 3.732
[info]   CI (99.9%): [1219.362, 1248.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   18408.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (18408.004, 18408.004, 18408.004), stdev = 0.001
[info]   CI (99.9%): [18408.004, 18408.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1268.424 ±(99.9%) 566.239 MB/sec [Average]
[info]   (min, avg, max) = (1005.691, 1268.424, 1345.304), stdev = 147.051
[info]   CI (99.9%): [702.184, 1834.663] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   18921.105 ±(99.9%) 8286.121 B/op [Average]
[info]   (min, avg, max) = (15076.251, 18921.105, 20015.457), stdev = 2151.879
[info]   CI (99.9%): [10634.984, 27207.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.104), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.119 ±(99.9%) 1.370 B/op [Average]
[info]   (min, avg, max) = (0.620, 1.119, 1.554), stdev = 0.356
[info]   CI (99.9%): [≈ 0, 2.489] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.600, 5.000), stdev = 1.140
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson
[info] # Run progress: 61.30% complete, ETA 00:24:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 29762.766 ops/s
[info] # Warmup Iteration   2: 45767.696 ops/s
[info] # Warmup Iteration   3: 45908.336 ops/s
[info] Iteration   1: 46580.871 ops/s
[info]                  ·gc.alloc.rate:                   2233.639 MB/sec
[info]                  ·gc.alloc.rate.norm:              75448.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2323.119 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     78470.459 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.517 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 46155.516 ops/s
[info]                  ·gc.alloc.rate:                   2212.717 MB/sec
[info]                  ·gc.alloc.rate.norm:              75448.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.076 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68504.391 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.678 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 46579.591 ops/s
[info]                  ·gc.alloc.rate:                   2232.901 MB/sec
[info]                  ·gc.alloc.rate.norm:              75448.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2359.472 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     79724.728 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.110 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 46327.077 ops/s
[info]                  ·gc.alloc.rate:                   2220.817 MB/sec
[info]                  ·gc.alloc.rate.norm:              75448.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2030.437 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68980.201 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.829 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 46390.815 ops/s
[info]                  ·gc.alloc.rate:                   2223.981 MB/sec
[info]                  ·gc.alloc.rate.norm:              75448.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2374.788 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     80564.083 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.062 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson":
[info]   46406.774 ±(99.9%) 693.951 ops/s [Average]
[info]   (min, avg, max) = (46155.516, 46406.774, 46580.871), stdev = 180.217
[info]   CI (99.9%): [45712.823, 47100.725] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2224.811 ±(99.9%) 33.696 MB/sec [Average]
[info]   (min, avg, max) = (2212.717, 2224.811, 2233.639), stdev = 8.751
[info]   CI (99.9%): [2191.115, 2258.507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   75448.010 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (75448.009, 75448.010, 75448.010), stdev = 0.001
[info]   CI (99.9%): [75448.008, 75448.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2219.378 ±(99.9%) 706.008 MB/sec [Average]
[info]   (min, avg, max) = (2009.076, 2219.378, 2374.788), stdev = 183.348
[info]   CI (99.9%): [1513.370, 2925.387] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   75248.772 ±(99.9%) 23059.510 B/op [Average]
[info]   (min, avg, max) = (68504.391, 75248.772, 80564.083), stdev = 5988.481
[info]   CI (99.9%): [52189.263, 98308.282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.125 ±(99.9%) 0.234 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.125, 0.208), stdev = 0.061
[info]   CI (99.9%): [≈ 0, 0.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   4.239 ±(99.9%) 7.958 B/op [Average]
[info]   (min, avg, max) = (2.110, 4.239, 7.062), stdev = 2.067
[info]   CI (99.9%): [≈ 0, 12.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.count":
[info]   33.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce
[info] # Run progress: 61.64% complete, ETA 00:23:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 92191.263 ops/s
[info] # Warmup Iteration   2: 116872.802 ops/s
[info] # Warmup Iteration   3: 121788.258 ops/s
[info] Iteration   1: 120607.183 ops/s
[info]                  ·gc.alloc.rate:                   1131.673 MB/sec
[info]                  ·gc.alloc.rate.norm:              14768.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1314.240 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17150.440 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.543 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 120514.912 ops/s
[info]                  ·gc.alloc.rate:                   1130.843 MB/sec
[info]                  ·gc.alloc.rate.norm:              14768.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          989.239 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12918.747 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.087 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 119690.125 ops/s
[info]                  ·gc.alloc.rate:                   1123.100 MB/sec
[info]                  ·gc.alloc.rate.norm:              14768.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.588 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17430.573 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.095 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 118634.127 ops/s
[info]                  ·gc.alloc.rate:                   1113.277 MB/sec
[info]                  ·gc.alloc.rate.norm:              14768.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          999.346 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13256.669 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.276 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 121446.842 ops/s
[info]                  ·gc.alloc.rate:                   1139.598 MB/sec
[info]                  ·gc.alloc.rate.norm:              14768.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1002.896 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12996.486 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.079 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce":
[info]   120178.638 ±(99.9%) 4097.468 ops/s [Average]
[info]   (min, avg, max) = (118634.127, 120178.638, 121446.842), stdev = 1064.099
[info]   CI (99.9%): [116081.170, 124276.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1127.699 ±(99.9%) 38.333 MB/sec [Average]
[info]   (min, avg, max) = (1113.277, 1127.699, 1139.598), stdev = 9.955
[info]   CI (99.9%): [1089.366, 1166.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   14768.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (14768.004, 14768.004, 14768.004), stdev = 0.001
[info]   CI (99.9%): [14768.003, 14768.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1126.262 ±(99.9%) 681.163 MB/sec [Average]
[info]   (min, avg, max) = (989.239, 1126.262, 1325.588), stdev = 176.896
[info]   CI (99.9%): [445.099, 1807.424] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   14750.583 ±(99.9%) 8949.314 B/op [Average]
[info]   (min, avg, max) = (12918.747, 14750.583, 17430.573), stdev = 2324.108
[info]   CI (99.9%): [5801.269, 23699.897] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.062, 0.083), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.816 ±(99.9%) 1.474 B/op [Average]
[info]   (min, avg, max) = (0.276, 0.816, 1.095), stdev = 0.383
[info]   CI (99.9%): [≈ 0, 2.291] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 4.000), stdev = 0.837
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala
[info] # Run progress: 61.99% complete, ETA 00:23:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 245116.805 ops/s
[info] # Warmup Iteration   2: 338560.280 ops/s
[info] # Warmup Iteration   3: 341448.878 ops/s
[info] Iteration   1: 335322.017 ops/s
[info]                  ·gc.alloc.rate:                   497.739 MB/sec
[info]                  ·gc.alloc.rate.norm:              2336.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          581.901 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2730.992 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.594 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.173 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 339844.523 ops/s
[info]                  ·gc.alloc.rate:               504.418 MB/sec
[info]                  ·gc.alloc.rate.norm:          2336.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      326.080 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1510.103 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 339869.321 ops/s
[info]                  ·gc.alloc.rate:                   504.451 MB/sec
[info]                  ·gc.alloc.rate.norm:              2336.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          651.471 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3016.819 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.482 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 335057.765 ops/s
[info]                  ·gc.alloc.rate:               497.319 MB/sec
[info]                  ·gc.alloc.rate.norm:          2336.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      325.729 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1530.010 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 331151.157 ops/s
[info]                  ·gc.alloc.rate:                   491.554 MB/sec
[info]                  ·gc.alloc.rate.norm:              2336.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          652.196 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3099.420 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.396 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala":
[info]   336248.956 ±(99.9%) 14187.527 ops/s [Average]
[info]   (min, avg, max) = (331151.157, 336248.956, 339869.321), stdev = 3684.456
[info]   CI (99.9%): [322061.430, 350436.483] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   499.096 ±(99.9%) 20.993 MB/sec [Average]
[info]   (min, avg, max) = (491.554, 499.096, 504.451), stdev = 5.452
[info]   CI (99.9%): [478.103, 520.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   2336.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2336.001, 2336.001, 2336.001), stdev = 0.001
[info]   CI (99.9%): [2336.001, 2336.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   507.475 ±(99.9%) 647.648 MB/sec [Average]
[info]   (min, avg, max) = (325.729, 507.475, 652.196), stdev = 168.192
[info]   CI (99.9%): [≈ 0, 1155.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   2377.469 ±(99.9%) 3059.671 B/op [Average]
[info]   (min, avg, max) = (1510.103, 2377.469, 3099.420), stdev = 794.587
[info]   CI (99.9%): [≈ 0, 5437.139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.556 ±(99.9%) 4.390 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.556, 2.594), stdev = 1.140
[info]   CI (99.9%): [≈ 0, 4.946] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.610 ±(99.9%) 20.602 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.610, 12.173), stdev = 5.350
[info]   CI (99.9%): [≈ 0, 23.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 5.000), stdev = 1.643
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala
[info] # Run progress: 62.33% complete, ETA 00:23:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 579050.245 ops/s
[info] # Warmup Iteration   2: 621947.351 ops/s
[info] # Warmup Iteration   3: 623483.325 ops/s
[info] Iteration   1: 627843.269 ops/s
[info]                  ·gc.alloc.rate:                   778.648 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.111 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1659.853 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.209 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 629447.408 ops/s
[info]                  ·gc.alloc.rate:                   780.678 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          993.216 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2483.427 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.260 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 612400.307 ops/s
[info]                  ·gc.alloc.rate:                   759.712 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.952 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1703.384 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.107 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 632442.346 ops/s
[info]                  ·gc.alloc.rate:               784.372 MB/sec
[info]                  ·gc.alloc.rate.norm:          1952.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.127 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1652.758 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 603124.228 ops/s
[info]                  ·gc.alloc.rate:                   748.016 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.482 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1736.623 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.163 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala":
[info]   621051.512 ±(99.9%) 48806.095 ops/s [Average]
[info]   (min, avg, max) = (603124.228, 621051.512, 632442.346), stdev = 12674.788
[info]   CI (99.9%): [572245.417, 669857.607] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   770.285 ±(99.9%) 60.398 MB/sec [Average]
[info]   (min, avg, max) = (748.016, 770.285, 784.372), stdev = 15.685
[info]   CI (99.9%): [709.887, 830.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1952.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1952.001, 1952.001, 1952.001), stdev = 0.001
[info]   CI (99.9%): [1952.001, 1952.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   729.577 ±(99.9%) 567.522 MB/sec [Average]
[info]   (min, avg, max) = (662.111, 729.577, 993.216), stdev = 147.384
[info]   CI (99.9%): [162.055, 1297.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1847.209 ±(99.9%) 1375.767 B/op [Average]
[info]   (min, avg, max) = (1652.758, 1847.209, 2483.427), stdev = 357.282
[info]   CI (99.9%): [471.442, 3222.976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.058 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.058, 0.104), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.148 ±(99.9%) 0.386 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.148, 0.260), stdev = 0.100
[info]   CI (99.9%): [≈ 0, 0.533] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 62.67% complete, ETA 00:23:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 664490.055 ops/s
[info] # Warmup Iteration   2: 699778.260 ops/s
[info] # Warmup Iteration   3: 701706.403 ops/s
[info] Iteration   1: 701284.327 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 702291.133 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 699250.650 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 701791.030 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 697321.865 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc":
[info]   700387.801 ±(99.9%) 7958.956 ops/s [Average]
[info]   (min, avg, max) = (697321.865, 700387.801, 702291.133), stdev = 2066.916
[info]   CI (99.9%): [692428.845, 708346.757] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson
[info] # Run progress: 63.01% complete, ETA 00:23:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 195569.512 ops/s
[info] # Warmup Iteration   2: 257795.101 ops/s
[info] # Warmup Iteration   3: 210478.609 ops/s
[info] Iteration   1: 211934.819 ops/s
[info]                  ·gc.alloc.rate:                   692.879 MB/sec
[info]                  ·gc.alloc.rate.norm:              5144.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.368 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4858.091 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.464 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 207334.696 ops/s
[info]                  ·gc.alloc.rate:                   677.685 MB/sec
[info]                  ·gc.alloc.rate.norm:              5144.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.217 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4965.864 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.632 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 207590.192 ops/s
[info]                  ·gc.alloc.rate:                   678.457 MB/sec
[info]                  ·gc.alloc.rate.norm:              5144.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          655.470 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4969.722 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.316 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 213732.481 ops/s
[info]                  ·gc.alloc.rate:                   698.546 MB/sec
[info]                  ·gc.alloc.rate.norm:              5144.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          656.801 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4836.601 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.307 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 211535.891 ops/s
[info]                  ·gc.alloc.rate:               691.396 MB/sec
[info]                  ·gc.alloc.rate.norm:          5144.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      658.806 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4901.532 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson":
[info]   210425.616 ±(99.9%) 10897.931 ops/s [Average]
[info]   (min, avg, max) = (207334.696, 210425.616, 213732.481), stdev = 2830.158
[info]   CI (99.9%): [199527.685, 221323.547] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   687.792 ±(99.9%) 35.699 MB/sec [Average]
[info]   (min, avg, max) = (677.685, 687.792, 698.546), stdev = 9.271
[info]   CI (99.9%): [652.093, 723.491] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5144.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5144.002, 5144.002, 5144.002), stdev = 0.001
[info]   CI (99.9%): [5144.002, 5144.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   655.932 ±(99.9%) 7.362 MB/sec [Average]
[info]   (min, avg, max) = (654.217, 655.932, 658.806), stdev = 1.912
[info]   CI (99.9%): [648.571, 663.294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4906.362 ±(99.9%) 234.027 B/op [Average]
[info]   (min, avg, max) = (4836.601, 4906.362, 4969.722), stdev = 60.776
[info]   CI (99.9%): [4672.335, 5140.389] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.046 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.083), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.344 ±(99.9%) 0.899 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.344, 0.632), stdev = 0.233
[info]   CI (99.9%): [≈ 0, 1.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala
[info] # Run progress: 63.36% complete, ETA 00:22:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 121292.617 ops/s
[info] # Warmup Iteration   2: 182349.276 ops/s
[info] # Warmup Iteration   3: 187413.542 ops/s
[info] Iteration   1: 187484.877 ops/s
[info]                  ·gc.alloc.rate:                   1117.830 MB/sec
[info]                  ·gc.alloc.rate.norm:              9384.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          981.848 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8242.458 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.349 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 186730.355 ops/s
[info]                  ·gc.alloc.rate:                   1113.430 MB/sec
[info]                  ·gc.alloc.rate.norm:              9384.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1315.079 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11083.506 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.526 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 187492.553 ops/s
[info]                  ·gc.alloc.rate:                   1118.337 MB/sec
[info]                  ·gc.alloc.rate.norm:              9384.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          991.602 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8320.567 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.524 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 180710.740 ops/s
[info]                  ·gc.alloc.rate:                   1077.915 MB/sec
[info]                  ·gc.alloc.rate.norm:              9384.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          996.634 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8676.394 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.363 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 183436.563 ops/s
[info]                  ·gc.alloc.rate:                   1093.702 MB/sec
[info]                  ·gc.alloc.rate.norm:              9384.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.934 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11453.788 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.250 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala":
[info]   185171.018 ±(99.9%) 11564.345 ops/s [Average]
[info]   (min, avg, max) = (180710.740, 185171.018, 187492.553), stdev = 3003.224
[info]   CI (99.9%): [173606.673, 196735.362] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1104.243 ±(99.9%) 68.665 MB/sec [Average]
[info]   (min, avg, max) = (1077.915, 1104.243, 1118.337), stdev = 17.832
[info]   CI (99.9%): [1035.577, 1172.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   9384.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (9384.002, 9384.002, 9384.003), stdev = 0.001
[info]   CI (99.9%): [9384.002, 9384.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1124.019 ±(99.9%) 707.312 MB/sec [Average]
[info]   (min, avg, max) = (981.848, 1124.019, 1334.934), stdev = 183.687
[info]   CI (99.9%): [416.708, 1831.331] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   9555.343 ±(99.9%) 6076.294 B/op [Average]
[info]   (min, avg, max) = (8242.458, 9555.343, 11453.788), stdev = 1577.994
[info]   CI (99.9%): [3479.048, 15631.637] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.146), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.603 ±(99.9%) 1.432 B/op [Average]
[info]   (min, avg, max) = (0.349, 0.603, 1.250), stdev = 0.372
[info]   CI (99.9%): [≈ 0, 2.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala
[info] # Run progress: 63.70% complete, ETA 00:22:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 308277.088 ops/s
[info] # Warmup Iteration   2: 307585.329 ops/s
[info] # Warmup Iteration   3: 314852.413 ops/s
[info] Iteration   1: 321579.634 ops/s
[info]                  ·gc.alloc.rate:                   624.408 MB/sec
[info]                  ·gc.alloc.rate.norm:              3056.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.449 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3266.653 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.530 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.488 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 323052.464 ops/s
[info]                  ·gc.alloc.rate:                   627.291 MB/sec
[info]                  ·gc.alloc.rate.norm:              3056.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.162 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3245.371 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.406 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 319375.483 ops/s
[info]                  ·gc.alloc.rate:                   620.140 MB/sec
[info]                  ·gc.alloc.rate.norm:              3056.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.139 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3282.678 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.308 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 322449.099 ops/s
[info]                  ·gc.alloc.rate:               626.215 MB/sec
[info]                  ·gc.alloc.rate.norm:          3056.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.251 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3251.378 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 322196.252 ops/s
[info]                  ·gc.alloc.rate:                   625.604 MB/sec
[info]                  ·gc.alloc.rate.norm:              3056.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.482 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3260.570 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.305 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala":
[info]   321730.587 ±(99.9%) 5462.544 ops/s [Average]
[info]   (min, avg, max) = (319375.483, 321730.587, 323052.464), stdev = 1418.605
[info]   CI (99.9%): [316268.043, 327193.130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   624.732 ±(99.9%) 10.668 MB/sec [Average]
[info]   (min, avg, max) = (620.140, 624.732, 627.291), stdev = 2.770
[info]   CI (99.9%): [614.064, 635.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   3056.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3056.001, 3056.001, 3056.001), stdev = 0.001
[info]   CI (99.9%): [3056.001, 3056.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   666.697 ±(99.9%) 2.708 MB/sec [Average]
[info]   (min, avg, max) = (666.139, 666.697, 667.482), stdev = 0.703
[info]   CI (99.9%): [663.989, 669.404] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3261.330 ±(99.9%) 55.748 B/op [Average]
[info]   (min, avg, max) = (3245.371, 3261.330, 3282.678), stdev = 14.477
[info]   CI (99.9%): [3205.582, 3317.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.348 ±(99.9%) 2.548 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.348, 1.530), stdev = 0.662
[info]   CI (99.9%): [≈ 0, 2.896] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.701 ±(99.9%) 12.471 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.701, 7.488), stdev = 3.239
[info]   CI (99.9%): [≈ 0, 14.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala
[info] # Run progress: 64.04% complete, ETA 00:22:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 372981.119 ops/s
[info] # Warmup Iteration   2: 534171.180 ops/s
[info] # Warmup Iteration   3: 526966.754 ops/s
[info] Iteration   1: 536332.918 ops/s
[info]                  ·gc.alloc.rate:                   528.959 MB/sec
[info]                  ·gc.alloc.rate.norm:              1552.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          582.624 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1709.456 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.136 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.267 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 538255.091 ops/s
[info]                  ·gc.alloc.rate:                   530.905 MB/sec
[info]                  ·gc.alloc.rate.norm:              1552.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          653.983 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1911.796 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.183 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 525524.568 ops/s
[info]                  ·gc.alloc.rate:                   518.219 MB/sec
[info]                  ·gc.alloc.rate.norm:              1552.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          327.074 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     979.545 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.125 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 535619.044 ops/s
[info]                  ·gc.alloc.rate:                   528.231 MB/sec
[info]                  ·gc.alloc.rate.norm:              1552.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.236 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1922.215 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.122 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 528583.396 ops/s
[info]                  ·gc.alloc.rate:               521.342 MB/sec
[info]                  ·gc.alloc.rate.norm:          1552.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      327.806 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 975.857 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala":
[info]   532863.003 ±(99.9%) 21167.893 ops/s [Average]
[info]   (min, avg, max) = (525524.568, 532863.003, 538255.091), stdev = 5497.235
[info]   CI (99.9%): [511695.111, 554030.896] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   525.532 ±(99.9%) 20.997 MB/sec [Average]
[info]   (min, avg, max) = (518.219, 525.532, 530.905), stdev = 5.453
[info]   CI (99.9%): [504.535, 546.528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1552.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1552.001, 1552.001, 1552.001), stdev = 0.001
[info]   CI (99.9%): [1552.001, 1552.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   509.145 ±(99.9%) 648.528 MB/sec [Average]
[info]   (min, avg, max) = (327.074, 509.145, 654.236), stdev = 168.421
[info]   CI (99.9%): [≈ 0, 1157.673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1499.774 ±(99.9%) 1863.999 B/op [Average]
[info]   (min, avg, max) = (975.857, 1499.774, 1922.215), stdev = 484.075
[info]   CI (99.9%): [≈ 0, 3363.773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.456 ±(99.9%) 3.617 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.456, 2.136), stdev = 0.939
[info]   CI (99.9%): [≈ 0, 4.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.339 ±(99.9%) 10.610 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.339, 6.267), stdev = 2.755
[info]   CI (99.9%): [≈ 0, 11.950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 5.000), stdev = 1.732
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala
[info] # Run progress: 64.38% complete, ETA 00:22:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 932175.320 ops/s
[info] # Warmup Iteration   2: 1006189.911 ops/s
[info] # Warmup Iteration   3: 1008330.745 ops/s
[info] Iteration   1: 993950.563 ops/s
[info]                  ·gc.alloc.rate:                   737.618 MB/sec
[info]                  ·gc.alloc.rate.norm:              1168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.451 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1050.558 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.099 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 996411.856 ops/s
[info]                  ·gc.alloc.rate:                   739.445 MB/sec
[info]                  ·gc.alloc.rate.norm:              1168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.465 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1047.985 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.132 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 985860.595 ops/s
[info]                  ·gc.alloc.rate:                   731.638 MB/sec
[info]                  ·gc.alloc.rate.norm:              1168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.137 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1060.242 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.033 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 986684.952 ops/s
[info]                  ·gc.alloc.rate:                   732.208 MB/sec
[info]                  ·gc.alloc.rate.norm:              1168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.778 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1060.437 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.066 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 1006258.329 ops/s
[info]                  ·gc.alloc.rate:                   746.943 MB/sec
[info]                  ·gc.alloc.rate.norm:              1168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1000.115 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1563.888 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.163 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala":
[info]   993833.259 ±(99.9%) 31968.865 ops/s [Average]
[info]   (min, avg, max) = (985860.595, 993833.259, 1006258.329), stdev = 8302.213
[info]   CI (99.9%): [961864.393, 1025802.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   737.570 ±(99.9%) 23.994 MB/sec [Average]
[info]   (min, avg, max) = (731.638, 737.570, 746.943), stdev = 6.231
[info]   CI (99.9%): [713.576, 761.564] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1168.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1168.000, 1168.000, 1168.000), stdev = 0.001
[info]   CI (99.9%): [1168.000, 1168.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   731.189 ±(99.9%) 578.887 MB/sec [Average]
[info]   (min, avg, max) = (663.451, 731.189, 1000.115), stdev = 150.335
[info]   CI (99.9%): [152.302, 1310.076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1156.622 ±(99.9%) 876.937 B/op [Average]
[info]   (min, avg, max) = (1047.985, 1156.622, 1563.888), stdev = 227.738
[info]   CI (99.9%): [279.685, 2033.559] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.127 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.062, 0.104), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.099 ±(99.9%) 0.197 B/op [Average]
[info]   (min, avg, max) = (0.033, 0.099, 0.163), stdev = 0.051
[info]   CI (99.9%): [≈ 0, 0.296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 64.73% complete, ETA 00:21:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1035458.168 ops/s
[info] # Warmup Iteration   2: 1122421.621 ops/s
[info] # Warmup Iteration   3: 1102823.387 ops/s
[info] Iteration   1: 1114750.116 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1115006.642 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1115221.291 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1114599.162 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1112936.019 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc":
[info]   1114502.646 ±(99.9%) 3495.051 ops/s [Average]
[info]   (min, avg, max) = (1112936.019, 1114502.646, 1115221.291), stdev = 907.654
[info]   CI (99.9%): [1111007.595, 1117997.697] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce
[info] # Run progress: 65.07% complete, ETA 00:21:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 467.949 ops/s
[info] # Warmup Iteration   2: 677.810 ops/s
[info] # Warmup Iteration   3: 671.542 ops/s
[info] Iteration   1: 689.344 ops/s
[info]                  ·gc.alloc.rate:                   1439.389 MB/sec
[info]                  ·gc.alloc.rate.norm:              3284912.626 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1319.803 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3011996.568 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 142.470 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 685.012 ops/s
[info]                  ·gc.alloc.rate:                   1430.307 MB/sec
[info]                  ·gc.alloc.rate.norm:              3284912.980 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1324.779 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3042551.790 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 286.601 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 685.313 ops/s
[info]                  ·gc.alloc.rate:                   1430.727 MB/sec
[info]                  ·gc.alloc.rate.norm:              3284912.630 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1666.363 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3825926.717 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 95.534 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 676.789 ops/s
[info]                  ·gc.alloc.rate:                   1412.688 MB/sec
[info]                  ·gc.alloc.rate.norm:              3284912.638 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.507 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3119397.436 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 48.402 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 675.492 ops/s
[info]                  ·gc.alloc.rate:                   1410.100 MB/sec
[info]                  ·gc.alloc.rate.norm:              3284912.828 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.358 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3136421.112 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 145.420 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce":
[info]   682.390 ±(99.9%) 23.002 ops/s [Average]
[info]   (min, avg, max) = (675.492, 682.390, 689.344), stdev = 5.974
[info]   CI (99.9%): [659.388, 705.392] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1424.642 ±(99.9%) 48.744 MB/sec [Average]
[info]   (min, avg, max) = (1410.100, 1424.642, 1439.389), stdev = 12.659
[info]   CI (99.9%): [1375.898, 1473.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   3284912.740 ±(99.9%) 0.611 B/op [Average]
[info]   (min, avg, max) = (3284912.626, 3284912.740, 3284912.980), stdev = 0.159
[info]   CI (99.9%): [3284912.129, 3284913.351] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1399.762 ±(99.9%) 575.467 MB/sec [Average]
[info]   (min, avg, max) = (1319.803, 1399.762, 1666.363), stdev = 149.447
[info]   CI (99.9%): [824.295, 1975.229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3227258.725 ±(99.9%) 1304032.011 B/op [Average]
[info]   (min, avg, max) = (3011996.568, 3227258.725, 3825926.717), stdev = 338652.972
[info]   CI (99.9%): [1923226.713, 4531290.736] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.062, 0.125), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   143.685 ±(99.9%) 343.479 B/op [Average]
[info]   (min, avg, max) = (48.402, 143.685, 286.601), stdev = 89.200
[info]   CI (99.9%): [≈ 0, 487.164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 0.707
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala
[info] # Run progress: 65.41% complete, ETA 00:21:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19236.471 ops/s
[info] # Warmup Iteration   2: 29010.751 ops/s
[info] # Warmup Iteration   3: 29312.855 ops/s
[info] Iteration   1: 29919.990 ops/s
[info]                  ·gc.alloc.rate:                   540.589 MB/sec
[info]                  ·gc.alloc.rate.norm:              28432.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          587.616 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30905.398 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.198 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 115.624 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 30227.475 ops/s
[info]                  ·gc.alloc.rate:                   546.080 MB/sec
[info]                  ·gc.alloc.rate.norm:              28432.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.856 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     34512.028 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.084 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 30263.895 ops/s
[info]                  ·gc.alloc.rate:                   546.725 MB/sec
[info]                  ·gc.alloc.rate.norm:              28432.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.070 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17217.030 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.083 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 29399.153 ops/s
[info]                  ·gc.alloc.rate:                   531.090 MB/sec
[info]                  ·gc.alloc.rate.norm:              28432.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.126 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35447.033 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.458 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 30257.905 ops/s
[info]                  ·gc.alloc.rate:               546.621 MB/sec
[info]                  ·gc.alloc.rate.norm:          28432.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.073 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17220.443 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala":
[info]   30013.684 ±(99.9%) 1433.534 ops/s [Average]
[info]   (min, avg, max) = (29399.153, 30013.684, 30263.895), stdev = 372.284
[info]   CI (99.9%): [28580.150, 31447.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   542.221 ±(99.9%) 25.909 MB/sec [Average]
[info]   (min, avg, max) = (531.090, 542.221, 546.725), stdev = 6.729
[info]   CI (99.9%): [516.312, 568.131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   28432.016 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (28432.014, 28432.016, 28432.020), stdev = 0.002
[info]   CI (99.9%): [28432.007, 28432.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   514.948 ±(99.9%) 656.984 MB/sec [Average]
[info]   (min, avg, max) = (331.070, 514.948, 662.856), stdev = 170.617
[info]   CI (99.9%): [≈ 0, 1171.932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   27060.386 ±(99.9%) 35205.662 B/op [Average]
[info]   (min, avg, max) = (17217.030, 27060.386, 35447.033), stdev = 9142.799
[info]   CI (99.9%): [≈ 0, 62266.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.465 ±(99.9%) 3.734 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.465, 2.198), stdev = 0.970
[info]   CI (99.9%): [≈ 0, 4.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   24.450 ±(99.9%) 196.365 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 24.450, 115.624), stdev = 50.995
[info]   CI (99.9%): [≈ 0, 220.815] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 4.000), stdev = 1.483
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson
[info] # Run progress: 65.75% complete, ETA 00:21:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 360.628 ops/s
[info] # Warmup Iteration   2: 635.517 ops/s
[info] # Warmup Iteration   3: 670.728 ops/s
[info] Iteration   1: 673.137 ops/s
[info]                  ·gc.alloc.rate:                   1441.351 MB/sec
[info]                  ·gc.alloc.rate.norm:              3368480.688 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1306.760 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3053938.706 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 97.234 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 668.288 ops/s
[info]                  ·gc.alloc.rate:                   1430.953 MB/sec
[info]                  ·gc.alloc.rate.norm:              3368509.345 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1645.592 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3873775.163 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 97.961 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 656.033 ops/s
[info]                  ·gc.alloc.rate:                   1404.650 MB/sec
[info]                  ·gc.alloc.rate.norm:              3368472.402 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.742 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3179244.128 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 99.750 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 670.215 ops/s
[info]                  ·gc.alloc.rate:               1434.946 MB/sec
[info]                  ·gc.alloc.rate.norm:          3368464.644 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1334.070 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3131663.642 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 671.869 ops/s
[info]                  ·gc.alloc.rate:                   1437.970 MB/sec
[info]                  ·gc.alloc.rate.norm:              3368464.690 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1677.608 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3929819.429 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 146.286 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson":
[info]   667.908 ±(99.9%) 26.505 ops/s [Average]
[info]   (min, avg, max) = (656.033, 667.908, 673.137), stdev = 6.883
[info]   CI (99.9%): [641.404, 694.413] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1429.974 ±(99.9%) 56.474 MB/sec [Average]
[info]   (min, avg, max) = (1404.650, 1429.974, 1441.351), stdev = 14.666
[info]   CI (99.9%): [1373.500, 1486.448] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   3368478.354 ±(99.9%) 71.419 B/op [Average]
[info]   (min, avg, max) = (3368464.644, 3368478.354, 3368509.345), stdev = 18.547
[info]   CI (99.9%): [3368406.935, 3368549.773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1457.954 ±(99.9%) 718.180 MB/sec [Average]
[info]   (min, avg, max) = (1306.760, 1457.954, 1677.608), stdev = 186.509
[info]   CI (99.9%): [739.774, 2176.135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3433688.214 ±(99.9%) 1656216.776 B/op [Average]
[info]   (min, avg, max) = (3053938.706, 3433688.214, 3929819.429), stdev = 430114.237
[info]   CI (99.9%): [1777471.437, 5089904.990] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.037 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.062), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   88.246 ±(99.9%) 206.140 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 88.246, 146.286), stdev = 53.534
[info]   CI (99.9%): [≈ 0, 294.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 6.000), stdev = 1.140
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce
[info] # Run progress: 66.10% complete, ETA 00:21:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9861.334 ops/s
[info] # Warmup Iteration   2: 12685.118 ops/s
[info] # Warmup Iteration   3: 13019.166 ops/s
[info] Iteration   1: 13022.209 ops/s
[info]                  ·gc.alloc.rate:                   1048.415 MB/sec
[info]                  ·gc.alloc.rate.norm:              126712.036 B/op
[info]                  ·gc.churn.PS_Eden_Space:          985.491 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     119106.963 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.547 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 12957.359 ops/s
[info]                  ·gc.alloc.rate:                   1043.255 MB/sec
[info]                  ·gc.alloc.rate.norm:              126712.596 B/op
[info]                  ·gc.churn.PS_Eden_Space:          987.553 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     119947.062 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.114 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 13012.930 ops/s
[info]                  ·gc.alloc.rate:                   1048.189 MB/sec
[info]                  ·gc.alloc.rate.norm:              126776.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          991.200 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     119883.295 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.553 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 13024.028 ops/s
[info]                  ·gc.alloc.rate:                   1049.166 MB/sec
[info]                  ·gc.alloc.rate.norm:              126776.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995.283 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     120265.050 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.031 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 13021.310 ops/s
[info]                  ·gc.alloc.rate:                   1048.874 MB/sec
[info]                  ·gc.alloc.rate.norm:              126776.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.205 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     161263.646 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.548 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce":
[info]   13007.567 ±(99.9%) 109.317 ops/s [Average]
[info]   (min, avg, max) = (12957.359, 13007.567, 13024.028), stdev = 28.389
[info]   CI (99.9%): [12898.249, 13116.884] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1047.580 ±(99.9%) 9.425 MB/sec [Average]
[info]   (min, avg, max) = (1043.255, 1047.580, 1049.166), stdev = 2.448
[info]   CI (99.9%): [1038.155, 1057.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   126750.546 ±(99.9%) 134.387 B/op [Average]
[info]   (min, avg, max) = (126712.036, 126750.546, 126776.033), stdev = 34.900
[info]   CI (99.9%): [126616.159, 126884.933] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1058.746 ±(99.9%) 593.120 MB/sec [Average]
[info]   (min, avg, max) = (985.491, 1058.746, 1334.205), stdev = 154.031
[info]   CI (99.9%): [465.627, 1651.866] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   128093.203 ±(99.9%) 71420.700 B/op [Average]
[info]   (min, avg, max) = (119106.963, 128093.203, 161263.646), stdev = 18547.729
[info]   CI (99.9%): [56672.504, 199513.903] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.062, 0.083), stdev = 0.015
[info]   CI (99.9%): [0.006, 0.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   7.559 ±(99.9%) 6.919 B/op [Average]
[info]   (min, avg, max) = (5.031, 7.559, 10.114), stdev = 1.797
[info]   CI (99.9%): [0.639, 14.478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 4.000), stdev = 0.894
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala
[info] # Run progress: 66.44% complete, ETA 00:20:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 253399.999 ops/s
[info] # Warmup Iteration   2: 278086.786 ops/s
[info] # Warmup Iteration   3: 275879.060 ops/s
[info] Iteration   1: 271563.812 ops/s
[info]                  ·gc.alloc.rate:                   958.085 MB/sec
[info]                  ·gc.alloc.rate.norm:              5552.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          993.387 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5756.570 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.241 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 272602.593 ops/s
[info]                  ·gc.alloc.rate:                   961.593 MB/sec
[info]                  ·gc.alloc.rate.norm:              5552.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.451 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3824.828 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.721 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 274702.241 ops/s
[info]                  ·gc.alloc.rate:                   969.022 MB/sec
[info]                  ·gc.alloc.rate.norm:              5552.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995.553 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5704.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.477 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 277024.808 ops/s
[info]                  ·gc.alloc.rate:                   977.201 MB/sec
[info]                  ·gc.alloc.rate.norm:              5552.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          998.861 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5675.067 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.355 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 271730.406 ops/s
[info]                  ·gc.alloc.rate:                   958.565 MB/sec
[info]                  ·gc.alloc.rate.norm:              5552.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1002.211 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5804.802 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.603 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala":
[info]   273524.772 ±(99.9%) 8938.185 ops/s [Average]
[info]   (min, avg, max) = (271563.812, 273524.772, 277024.808), stdev = 2321.218
[info]   CI (99.9%): [264586.587, 282462.957] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   964.893 ±(99.9%) 31.390 MB/sec [Average]
[info]   (min, avg, max) = (958.085, 964.893, 977.201), stdev = 8.152
[info]   CI (99.9%): [933.503, 996.283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   5552.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5552.002, 5552.002, 5552.002), stdev = 0.001
[info]   CI (99.9%): [5552.001, 5552.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   930.493 ±(99.9%) 577.124 MB/sec [Average]
[info]   (min, avg, max) = (662.451, 930.493, 1002.211), stdev = 149.877
[info]   CI (99.9%): [353.369, 1507.616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   5353.055 ±(99.9%) 3295.191 B/op [Average]
[info]   (min, avg, max) = (3824.828, 5353.055, 5804.802), stdev = 855.751
[info]   CI (99.9%): [2057.864, 8648.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.127 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.083, 0.125), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.479 ±(99.9%) 0.735 B/op [Average]
[info]   (min, avg, max) = (0.241, 0.479, 0.721), stdev = 0.191
[info]   CI (99.9%): [≈ 0, 1.215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 66.78% complete, ETA 00:20:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 277548.056 ops/s
[info] # Warmup Iteration   2: 291356.577 ops/s
[info] # Warmup Iteration   3: 298648.621 ops/s
[info] Iteration   1: 298528.776 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 297832.940 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 297626.451 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 294039.235 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 297865.181 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   297178.516 ±(99.9%) 6882.511 ops/s [Average]
[info]   (min, avg, max) = (294039.235, 297178.516, 298528.776), stdev = 1787.366
[info]   CI (99.9%): [290296.006, 304061.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson
[info] # Run progress: 67.12% complete, ETA 00:20:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10717.298 ops/s
[info] # Warmup Iteration   2: 14762.386 ops/s
[info] # Warmup Iteration   3: 14967.727 ops/s
[info] Iteration   1: 14856.448 ops/s
[info]                  ·gc.alloc.rate:                   984.342 MB/sec
[info]                  ·gc.alloc.rate.norm:              104280.031 B/op
[info]                  ·gc.churn.PS_Eden_Space:          981.201 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     103947.268 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.026 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 14737.204 ops/s
[info]                  ·gc.alloc.rate:                   976.455 MB/sec
[info]                  ·gc.alloc.rate.norm:              104280.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          982.929 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     104971.429 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.670 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 15013.542 ops/s
[info]                  ·gc.alloc.rate:                   995.139 MB/sec
[info]                  ·gc.alloc.rate.norm:              104279.899 B/op
[info]                  ·gc.churn.PS_Eden_Space:          986.591 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     103384.175 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.364 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 15009.783 ops/s
[info]                  ·gc.alloc.rate:                   994.584 MB/sec
[info]                  ·gc.alloc.rate.norm:              104280.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          991.632 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     103970.515 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.366 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 14687.308 ops/s
[info]                  ·gc.alloc.rate:                   973.552 MB/sec
[info]                  ·gc.alloc.rate.norm:              104275.490 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995.913 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     106670.535 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.691 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson":
[info]   14860.857 ±(99.9%) 580.543 ops/s [Average]
[info]   (min, avg, max) = (14687.308, 14860.857, 15013.542), stdev = 150.765
[info]   CI (99.9%): [14280.314, 15441.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   984.814 ±(99.9%) 38.458 MB/sec [Average]
[info]   (min, avg, max) = (973.552, 984.814, 995.139), stdev = 9.987
[info]   CI (99.9%): [946.357, 1023.272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   104279.096 ±(99.9%) 7.764 B/op [Average]
[info]   (min, avg, max) = (104275.490, 104279.096, 104280.031), stdev = 2.016
[info]   CI (99.9%): [104271.331, 104286.860] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   987.653 ±(99.9%) 23.511 MB/sec [Average]
[info]   (min, avg, max) = (981.201, 987.653, 995.913), stdev = 6.106
[info]   CI (99.9%): [964.142, 1011.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   104588.784 ±(99.9%) 4992.857 B/op [Average]
[info]   (min, avg, max) = (103384.175, 104588.784, 106670.535), stdev = 1296.629
[info]   CI (99.9%): [99595.927, 109581.641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.062, 0.104), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   6.623 ±(99.9%) 10.474 B/op [Average]
[info]   (min, avg, max) = (4.364, 6.623, 11.026), stdev = 2.720
[info]   CI (99.9%): [≈ 0, 17.097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce
[info] # Run progress: 67.47% complete, ETA 00:20:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 581202.095 ops/s
[info] # Warmup Iteration   2: 868133.915 ops/s
[info] # Warmup Iteration   3: 881448.012 ops/s
[info] Iteration   1: 885786.220 ops/s
[info]                  ·gc.alloc.rate:                   2895.047 MB/sec
[info]                  ·gc.alloc.rate.norm:              5144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3028.275 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5380.724 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.222 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 878788.805 ops/s
[info]                  ·gc.alloc.rate:                   2872.449 MB/sec
[info]                  ·gc.alloc.rate.norm:              5144.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2707.419 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4848.465 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.224 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 883625.733 ops/s
[info]                  ·gc.alloc.rate:                   2888.751 MB/sec
[info]                  ·gc.alloc.rate.norm:              5144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3056.304 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5442.362 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.222 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 879374.133 ops/s
[info]                  ·gc.alloc.rate:                   2874.113 MB/sec
[info]                  ·gc.alloc.rate.norm:              5144.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2719.939 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4868.064 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.224 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 889446.202 ops/s
[info]                  ·gc.alloc.rate:                   2907.050 MB/sec
[info]                  ·gc.alloc.rate.norm:              5144.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3063.609 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5421.029 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.332 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce":
[info]   883404.219 ±(99.9%) 17196.068 ops/s [Average]
[info]   (min, avg, max) = (878788.805, 883404.219, 889446.202), stdev = 4465.764
[info]   CI (99.9%): [866208.150, 900600.287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.alloc.rate":
[info]   2887.482 ±(99.9%) 56.016 MB/sec [Average]
[info]   (min, avg, max) = (2872.449, 2887.482, 2907.050), stdev = 14.547
[info]   CI (99.9%): [2831.466, 2943.498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5144.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5144.000, 5144.001, 5144.001), stdev = 0.001
[info]   CI (99.9%): [5144.000, 5144.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2915.109 ±(99.9%) 710.078 MB/sec [Average]
[info]   (min, avg, max) = (2707.419, 2915.109, 3063.609), stdev = 184.405
[info]   CI (99.9%): [2205.031, 3625.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5192.129 ±(99.9%) 1176.973 B/op [Average]
[info]   (min, avg, max) = (4848.465, 5192.129, 5442.362), stdev = 305.656
[info]   CI (99.9%): [4015.156, 6369.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.137 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (0.125, 0.137, 0.187), stdev = 0.028
[info]   CI (99.9%): [0.030, 0.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.245 ±(99.9%) 0.187 B/op [Average]
[info]   (min, avg, max) = (0.222, 0.245, 0.332), stdev = 0.049
[info]   CI (99.9%): [0.058, 0.432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.count":
[info]   43.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.600, 9.000), stdev = 0.548
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.000, 7.000), stdev = 0.001
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala
[info] # Run progress: 67.81% complete, ETA 00:20:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 760380.841 ops/s
[info] # Warmup Iteration   2: 1583357.829 ops/s
[info] # Warmup Iteration   3: 1615858.349 ops/s
[info] Iteration   1: 1622251.822 ops/s
[info]                  ·gc.alloc.rate:                   1525.804 MB/sec
[info]                  ·gc.alloc.rate.norm:              1480.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1638.075 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1588.900 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.040 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 1628049.114 ops/s
[info]                  ·gc.alloc.rate:                   1530.996 MB/sec
[info]                  ·gc.alloc.rate.norm:              1480.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1651.067 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1596.072 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.161 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 1619734.538 ops/s
[info]                  ·gc.alloc.rate:                   1523.134 MB/sec
[info]                  ·gc.alloc.rate.norm:              1480.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.961 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1293.269 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.081 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 1618601.732 ops/s
[info]                  ·gc.alloc.rate:                   1522.469 MB/sec
[info]                  ·gc.alloc.rate.norm:              1480.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1674.473 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1627.764 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.040 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 1572353.752 ops/s
[info]                  ·gc.alloc.rate:                   1478.594 MB/sec
[info]                  ·gc.alloc.rate.norm:              1480.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.625 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1346.905 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.104 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala":
[info]   1612198.192 ±(99.9%) 86910.927 ops/s [Average]
[info]   (min, avg, max) = (1572353.752, 1612198.192, 1628049.114), stdev = 22570.492
[info]   CI (99.9%): [1525287.264, 1699109.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1516.199 ±(99.9%) 81.973 MB/sec [Average]
[info]   (min, avg, max) = (1478.594, 1516.199, 1530.996), stdev = 21.288
[info]   CI (99.9%): [1434.226, 1598.173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1480.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1480.000, 1480.000, 1480.000), stdev = 0.001
[info]   CI (99.9%): [1480.000, 1480.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1528.040 ±(99.9%) 669.175 MB/sec [Average]
[info]   (min, avg, max) = (1330.961, 1528.040, 1674.473), stdev = 173.783
[info]   CI (99.9%): [858.865, 2197.215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1490.582 ±(99.9%) 606.367 B/op [Average]
[info]   (min, avg, max) = (1293.269, 1490.582, 1627.764), stdev = 157.471
[info]   CI (99.9%): [884.216, 2096.949] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.200 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.087, 0.167), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.085 ±(99.9%) 0.194 B/op [Average]
[info]   (min, avg, max) = (0.040, 0.085, 0.161), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala
[info] # Run progress: 68.15% complete, ETA 00:19:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6101443.045 ops/s
[info] # Warmup Iteration   2: 6950587.535 ops/s
[info] # Warmup Iteration   3: 7090867.949 ops/s
[info] Iteration   1: 6891494.266 ops/s
[info]                  ·gc.alloc.rate:                   2066.752 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.539 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     460.076 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 7076054.055 ops/s
[info]                  ·gc.alloc.rate:                   2123.098 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2362.666 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     525.260 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.032 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 7086731.777 ops/s
[info]                  ·gc.alloc.rate:                   2125.245 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2031.690 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     451.222 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.023 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 7094854.728 ops/s
[info]                  ·gc.alloc.rate:                   2127.712 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2036.416 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     451.748 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 7122185.136 ops/s
[info]                  ·gc.alloc.rate:                   2136.193 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2038.659 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     450.450 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.014 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala":
[info]   7054263.992 ±(99.9%) 356490.596 ops/s [Average]
[info]   (min, avg, max) = (6891494.266, 7054263.992, 7122185.136), stdev = 92579.476
[info]   CI (99.9%): [6697773.396, 7410754.588] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   2115.800 ±(99.9%) 107.301 MB/sec [Average]
[info]   (min, avg, max) = (2066.752, 2115.800, 2136.193), stdev = 27.866
[info]   CI (99.9%): [2008.499, 2223.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   472.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (472.000, 472.000, 472.000), stdev = 0.001
[info]   CI (99.9%): [472.000, 472.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   2096.794 ±(99.9%) 573.467 MB/sec [Average]
[info]   (min, avg, max) = (2014.539, 2096.794, 2362.666), stdev = 148.927
[info]   CI (99.9%): [1523.328, 2670.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   467.751 ±(99.9%) 124.698 B/op [Average]
[info]   (min, avg, max) = (450.450, 467.751, 525.260), stdev = 32.384
[info]   CI (99.9%): [343.053, 592.450] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.146), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.018 ±(99.9%) 0.038 B/op [Average]
[info]   (min, avg, max) = (0.009, 0.018, 0.032), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.count":
[info]   31.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 6.000), stdev = 0.837
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson
[info] # Run progress: 68.49% complete, ETA 00:19:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 80918.640 ops/s
[info] # Warmup Iteration   2: 316336.743 ops/s
[info] # Warmup Iteration   3: 313272.491 ops/s
[info] Iteration   1: 313915.466 ops/s
[info]                  ·gc.alloc.rate:                   1913.956 MB/sec
[info]                  ·gc.alloc.rate.norm:              9592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1971.190 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9878.836 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.522 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 317857.999 ops/s
[info]                  ·gc.alloc.rate:                   1937.441 MB/sec
[info]                  ·gc.alloc.rate.norm:              9592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1991.351 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9858.900 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.825 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 318227.987 ops/s
[info]                  ·gc.alloc.rate:                   1939.457 MB/sec
[info]                  ·gc.alloc.rate.norm:              9592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.406 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9933.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.515 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 316367.799 ops/s
[info]                  ·gc.alloc.rate:                   1928.163 MB/sec
[info]                  ·gc.alloc.rate.norm:              9592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020.477 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10051.234 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.518 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 315673.556 ops/s
[info]                  ·gc.alloc.rate:                   1923.886 MB/sec
[info]                  ·gc.alloc.rate.norm:              9592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1690.726 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8429.527 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.311 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson":
[info]   316408.561 ±(99.9%) 6716.200 ops/s [Average]
[info]   (min, avg, max) = (313915.466, 316408.561, 318227.987), stdev = 1744.176
[info]   CI (99.9%): [309692.361, 323124.762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1928.581 ±(99.9%) 40.059 MB/sec [Average]
[info]   (min, avg, max) = (1913.956, 1928.581, 1939.457), stdev = 10.403
[info]   CI (99.9%): [1888.522, 1968.639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   9592.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (9592.001, 9592.001, 9592.001), stdev = 0.001
[info]   CI (99.9%): [9592.001, 9592.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1936.430 ±(99.9%) 533.698 MB/sec [Average]
[info]   (min, avg, max) = (1690.726, 1936.430, 2020.477), stdev = 138.600
[info]   CI (99.9%): [1402.733, 2470.128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   9630.300 ±(99.9%) 2600.753 B/op [Average]
[info]   (min, avg, max) = (8429.527, 9630.300, 10051.234), stdev = 675.407
[info]   CI (99.9%): [7029.547, 12231.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.108 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.108, 0.167), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.538 ±(99.9%) 0.707 B/op [Average]
[info]   (min, avg, max) = (0.311, 0.538, 0.825), stdev = 0.184
[info]   CI (99.9%): [≈ 0, 1.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.200, 7.000), stdev = 0.837
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce
[info] # Run progress: 68.84% complete, ETA 00:19:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 616524.544 ops/s
[info] # Warmup Iteration   2: 1023249.933 ops/s
[info] # Warmup Iteration   3: 1035297.110 ops/s
[info] Iteration   1: 1035165.482 ops/s
[info]                  ·gc.alloc.rate:                   2383.581 MB/sec
[info]                  ·gc.alloc.rate.norm:              3624.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2342.237 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3561.142 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.222 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 1048790.594 ops/s
[info]                  ·gc.alloc.rate:                   2416.030 MB/sec
[info]                  ·gc.alloc.rate.norm:              3624.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2358.533 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3537.755 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.125 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 1040105.764 ops/s
[info]                  ·gc.alloc.rate:                   2395.289 MB/sec
[info]                  ·gc.alloc.rate.norm:              3624.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2369.142 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3584.441 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.157 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 1025997.662 ops/s
[info]                  ·gc.alloc.rate:                   2362.423 MB/sec
[info]                  ·gc.alloc.rate.norm:              3624.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2375.470 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3644.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.160 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 1033846.679 ops/s
[info]                  ·gc.alloc.rate:                   2380.501 MB/sec
[info]                  ·gc.alloc.rate.norm:              3624.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2378.436 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3620.857 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.127 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce":
[info]   1036781.236 ±(99.9%) 32376.619 ops/s [Average]
[info]   (min, avg, max) = (1025997.662, 1036781.236, 1048790.594), stdev = 8408.105
[info]   CI (99.9%): [1004404.617, 1069157.855] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.alloc.rate":
[info]   2387.565 ±(99.9%) 76.235 MB/sec [Average]
[info]   (min, avg, max) = (2362.423, 2387.565, 2416.030), stdev = 19.798
[info]   CI (99.9%): [2311.330, 2463.799] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   3624.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3624.000, 3624.000, 3624.000), stdev = 0.001
[info]   CI (99.9%): [3624.000, 3624.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2364.764 ±(99.9%) 56.691 MB/sec [Average]
[info]   (min, avg, max) = (2342.237, 2364.764, 2378.436), stdev = 14.722
[info]   CI (99.9%): [2308.073, 2421.454] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3589.642 ±(99.9%) 166.319 B/op [Average]
[info]   (min, avg, max) = (3537.755, 3589.642, 3644.015), stdev = 43.192
[info]   CI (99.9%): [3423.323, 3755.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.104 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.104, 0.146), stdev = 0.025
[info]   CI (99.9%): [0.006, 0.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.158 ±(99.9%) 0.150 B/op [Average]
[info]   (min, avg, max) = (0.125, 0.158, 0.222), stdev = 0.039
[info]   CI (99.9%): [0.008, 0.309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.count":
[info]   35.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.000, 7.000), stdev = 0.001
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala
[info] # Run progress: 69.18% complete, ETA 00:19:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1473953.922 ops/s
[info] # Warmup Iteration   2: 3344514.279 ops/s
[info] # Warmup Iteration   3: 3367000.468 ops/s
[info] Iteration   1: 3448739.569 ops/s
[info]                  ·gc.alloc.rate:                   1998.414 MB/sec
[info]                  ·gc.alloc.rate.norm:              912.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1979.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     903.207 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.067 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 3463010.400 ops/s
[info]                  ·gc.alloc.rate:                   2006.767 MB/sec
[info]                  ·gc.alloc.rate.norm:              912.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.624 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     908.299 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.066 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 3440569.762 ops/s
[info]                  ·gc.alloc.rate:                   1993.695 MB/sec
[info]                  ·gc.alloc.rate.norm:              912.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.806 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     921.200 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.029 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 3456890.462 ops/s
[info]                  ·gc.alloc.rate:                   2003.152 MB/sec
[info]                  ·gc.alloc.rate.norm:              912.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2024.434 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     921.689 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.019 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 3422764.945 ops/s
[info]                  ·gc.alloc.rate:                   1983.332 MB/sec
[info]                  ·gc.alloc.rate.norm:              912.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1693.296 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     778.633 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.057 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala":
[info]   3446395.027 ±(99.9%) 60396.100 ops/s [Average]
[info]   (min, avg, max) = (3422764.945, 3446395.027, 3463010.400), stdev = 15684.675
[info]   CI (99.9%): [3385998.928, 3506791.127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1997.072 ±(99.9%) 35.132 MB/sec [Average]
[info]   (min, avg, max) = (1983.332, 1997.072, 2006.767), stdev = 9.124
[info]   CI (99.9%): [1961.940, 2032.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   912.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (912.000, 912.000, 912.000), stdev = 0.001
[info]   CI (99.9%): [912.000, 912.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1941.861 ±(99.9%) 539.059 MB/sec [Average]
[info]   (min, avg, max) = (1693.296, 1941.861, 2024.434), stdev = 139.992
[info]   CI (99.9%): [1402.802, 2480.920] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   886.606 ±(99.9%) 234.479 B/op [Average]
[info]   (min, avg, max) = (778.633, 886.606, 921.689), stdev = 60.893
[info]   CI (99.9%): [652.127, 1121.085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.104 ±(99.9%) 0.188 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.104, 0.146), stdev = 0.049
[info]   CI (99.9%): [≈ 0, 0.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.048 ±(99.9%) 0.086 B/op [Average]
[info]   (min, avg, max) = (0.019, 0.048, 0.067), stdev = 0.022
[info]   CI (99.9%): [≈ 0, 0.133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala
[info] # Run progress: 69.52% complete, ETA 00:18:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11006858.928 ops/s
[info] # Warmup Iteration   2: 12800991.282 ops/s
[info] # Warmup Iteration   3: 13081075.913 ops/s
[info] Iteration   1: 12972145.748 ops/s
[info]                  ·gc.alloc.rate:                   791.598 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.119 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     80.661 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.013 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 13076174.321 ops/s
[info]                  ·gc.alloc.rate:                   797.890 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.612 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     120.030 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 13194297.532 ops/s
[info]                  ·gc.alloc.rate:                   804.735 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.111 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     79.344 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 13357888.387 ops/s
[info]                  ·gc.alloc.rate:               814.775 MB/sec
[info]                  ·gc.alloc.rate.norm:          96.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 78.486 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 13288129.428 ops/s
[info]                  ·gc.alloc.rate:                   810.749 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1001.826 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     118.625 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala":
[info]   13177727.083 ±(99.9%) 601175.431 ops/s [Average]
[info]   (min, avg, max) = (12972145.748, 13177727.083, 13357888.387), stdev = 156123.350
[info]   CI (99.9%): [12576551.652, 13778902.514] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   803.949 ±(99.9%) 36.189 MB/sec [Average]
[info]   (min, avg, max) = (791.598, 803.949, 814.775), stdev = 9.398
[info]   CI (99.9%): [767.760, 840.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   96.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (96.000, 96.000, 96.000), stdev = 0.001
[info]   CI (99.9%): [96.000, 96.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   799.158 ±(99.9%) 705.024 MB/sec [Average]
[info]   (min, avg, max) = (665.111, 799.158, 1001.826), stdev = 183.092
[info]   CI (99.9%): [94.135, 1504.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   95.429 ±(99.9%) 84.081 B/op [Average]
[info]   (min, avg, max) = (78.486, 95.429, 120.030), stdev = 21.836
[info]   CI (99.9%): [11.348, 179.511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.193 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.071, 0.125), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.008 ±(99.9%) 0.023 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.015), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 1.000
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson
[info] # Run progress: 69.86% complete, ETA 00:18:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 130847.769 ops/s
[info] # Warmup Iteration   2: 425248.866 ops/s
[info] # Warmup Iteration   3: 430275.527 ops/s
[info] Iteration   1: 428290.515 ops/s
[info]                  ·gc.alloc.rate:                   1528.179 MB/sec
[info]                  ·gc.alloc.rate.norm:              5616.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1636.300 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6013.342 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.306 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 430155.437 ops/s
[info]                  ·gc.alloc.rate:                   1534.929 MB/sec
[info]                  ·gc.alloc.rate.norm:              5616.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1318.309 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4823.432 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.533 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 428310.349 ops/s
[info]                  ·gc.alloc.rate:                   1528.937 MB/sec
[info]                  ·gc.alloc.rate.norm:              5616.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1661.732 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6103.773 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.153 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 424670.975 ops/s
[info]                  ·gc.alloc.rate:                   1515.784 MB/sec
[info]                  ·gc.alloc.rate.norm:              5616.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.002 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4957.316 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.154 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 431047.827 ops/s
[info]                  ·gc.alloc.rate:                   1538.128 MB/sec
[info]                  ·gc.alloc.rate.norm:              5616.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1681.393 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6139.093 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.304 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson":
[info]   428495.021 ±(99.9%) 9426.817 ops/s [Average]
[info]   (min, avg, max) = (424670.975, 428495.021, 431047.827), stdev = 2448.114
[info]   CI (99.9%): [419068.204, 437921.838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1529.192 ±(99.9%) 32.991 MB/sec [Average]
[info]   (min, avg, max) = (1515.784, 1529.192, 1538.128), stdev = 8.568
[info]   CI (99.9%): [1496.201, 1562.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5616.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5616.001, 5616.001, 5616.001), stdev = 0.001
[info]   CI (99.9%): [5616.001, 5616.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1527.147 ±(99.9%) 702.699 MB/sec [Average]
[info]   (min, avg, max) = (1318.309, 1527.147, 1681.393), stdev = 182.489
[info]   CI (99.9%): [824.448, 2229.846] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   5607.391 ±(99.9%) 2533.161 B/op [Average]
[info]   (min, avg, max) = (4823.432, 5607.391, 6139.093), stdev = 657.854
[info]   CI (99.9%): [3074.229, 8140.552] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.164 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.146), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.290 ±(99.9%) 0.599 B/op [Average]
[info]   (min, avg, max) = (0.153, 0.290, 0.533), stdev = 0.156
[info]   CI (99.9%): [≈ 0, 0.889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala
[info] # Run progress: 70.21% complete, ETA 00:18:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1144973.804 ops/s
[info] # Warmup Iteration   2: 2072189.622 ops/s
[info] # Warmup Iteration   3: 2139286.906 ops/s
[info] Iteration   1: 2133878.451 ops/s
[info]                  ·gc.alloc.rate:                   1291.026 MB/sec
[info]                  ·gc.alloc.rate.norm:              952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1304.904 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     962.234 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.061 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 2134950.510 ops/s
[info]                  ·gc.alloc.rate:                   1291.426 MB/sec
[info]                  ·gc.alloc.rate.norm:              952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1312.684 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     967.671 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.092 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 2107735.778 ops/s
[info]                  ·gc.alloc.rate:                   1274.914 MB/sec
[info]                  ·gc.alloc.rate.norm:              952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1322.559 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     987.578 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.031 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 2144663.969 ops/s
[info]                  ·gc.alloc.rate:                   1297.809 MB/sec
[info]                  ·gc.alloc.rate.norm:              952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.559 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     976.757 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.031 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 2138629.688 ops/s
[info]                  ·gc.alloc.rate:                   1293.611 MB/sec
[info]                  ·gc.alloc.rate.norm:              952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1003.224 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     738.298 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.061 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala":
[info]   2131971.679 ±(99.9%) 54636.806 ops/s [Average]
[info]   (min, avg, max) = (2107735.778, 2131971.679, 2144663.969), stdev = 14189.005
[info]   CI (99.9%): [2077334.874, 2186608.485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1289.757 ±(99.9%) 33.592 MB/sec [Average]
[info]   (min, avg, max) = (1274.914, 1289.757, 1297.809), stdev = 8.724
[info]   CI (99.9%): [1256.165, 1323.349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   952.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (952.000, 952.000, 952.000), stdev = 0.001
[info]   CI (99.9%): [952.000, 952.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1254.986 ±(99.9%) 543.318 MB/sec [Average]
[info]   (min, avg, max) = (1003.224, 1254.986, 1331.559), stdev = 141.098
[info]   CI (99.9%): [711.669, 1798.304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   926.508 ±(99.9%) 406.824 B/op [Average]
[info]   (min, avg, max) = (738.298, 926.508, 987.578), stdev = 105.651
[info]   CI (99.9%): [519.684, 1333.332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.125), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.055 ±(99.9%) 0.099 B/op [Average]
[info]   (min, avg, max) = (0.031, 0.055, 0.092), stdev = 0.026
[info]   CI (99.9%): [≈ 0, 0.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala
[info] # Run progress: 70.55% complete, ETA 00:18:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8431849.355 ops/s
[info] # Warmup Iteration   2: 4850673.071 ops/s
[info] # Warmup Iteration   3: 5067178.074 ops/s
[info] Iteration   1: 5134408.503 ops/s
[info]                  ·gc.alloc.rate:                   678.785 MB/sec
[info]                  ·gc.alloc.rate.norm:              208.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.040 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     203.788 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.038 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 5130512.912 ops/s
[info]                  ·gc.alloc.rate:                   678.068 MB/sec
[info]                  ·gc.alloc.rate.norm:              208.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.822 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     203.937 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.026 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 5140318.639 ops/s
[info]                  ·gc.alloc.rate:                   679.347 MB/sec
[info]                  ·gc.alloc.rate.norm:              208.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.172 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     203.966 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.013 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 5118379.500 ops/s
[info]                  ·gc.alloc.rate:                   676.437 MB/sec
[info]                  ·gc.alloc.rate.norm:              208.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.143 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     204.835 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.019 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 5127173.859 ops/s
[info]                  ·gc.alloc.rate:                   677.752 MB/sec
[info]                  ·gc.alloc.rate.norm:              208.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1002.140 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     307.554 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.026 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala":
[info]   5130158.683 ±(99.9%) 31581.706 ops/s [Average]
[info]   (min, avg, max) = (5118379.500, 5130158.683, 5140318.639), stdev = 8201.669
[info]   CI (99.9%): [5098576.976, 5161740.389] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   678.078 ±(99.9%) 4.266 MB/sec [Average]
[info]   (min, avg, max) = (676.437, 678.078, 679.347), stdev = 1.108
[info]   CI (99.9%): [673.812, 682.344] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   208.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (208.000, 208.000, 208.000), stdev = 0.001
[info]   CI (99.9%): [208.000, 208.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   732.863 ±(99.9%) 579.642 MB/sec [Average]
[info]   (min, avg, max) = (664.822, 732.863, 1002.140), stdev = 150.531
[info]   CI (99.9%): [153.221, 1312.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   224.816 ±(99.9%) 178.107 B/op [Average]
[info]   (min, avg, max) = (203.788, 224.816, 307.554), stdev = 46.254
[info]   CI (99.9%): [46.709, 402.923] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.125), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.024 ±(99.9%) 0.036 B/op [Average]
[info]   (min, avg, max) = (0.013, 0.024, 0.038), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson
[info] # Run progress: 70.89% complete, ETA 00:18:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 129091.021 ops/s
[info] # Warmup Iteration   2: 359568.297 ops/s
[info] # Warmup Iteration   3: 363702.132 ops/s
[info] Iteration   1: 373372.540 ops/s
[info]                  ·gc.alloc.rate:                   1751.674 MB/sec
[info]                  ·gc.alloc.rate.norm:              7384.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1967.448 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8293.572 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.790 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 373812.726 ops/s
[info]                  ·gc.alloc.rate:                   1753.883 MB/sec
[info]                  ·gc.alloc.rate.norm:              7384.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1655.200 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6968.536 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.438 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 376318.573 ops/s
[info]                  ·gc.alloc.rate:                   1765.549 MB/sec
[info]                  ·gc.alloc.rate.norm:              7384.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1668.359 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6977.524 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.348 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 374389.641 ops/s
[info]                  ·gc.alloc.rate:                   1756.453 MB/sec
[info]                  ·gc.alloc.rate.norm:              7384.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1678.301 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7055.456 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.350 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 373236.166 ops/s
[info]                  ·gc.alloc.rate:                   1751.077 MB/sec
[info]                  ·gc.alloc.rate.norm:              7384.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2023.730 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8533.732 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.439 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson":
[info]   374225.929 ±(99.9%) 4826.609 ops/s [Average]
[info]   (min, avg, max) = (373236.166, 374225.929, 376318.573), stdev = 1253.455
[info]   CI (99.9%): [369399.320, 379052.539] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1755.727 ±(99.9%) 22.654 MB/sec [Average]
[info]   (min, avg, max) = (1751.077, 1755.727, 1765.549), stdev = 5.883
[info]   CI (99.9%): [1733.073, 1778.381] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   7384.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (7384.001, 7384.001, 7384.001), stdev = 0.001
[info]   CI (99.9%): [7384.001, 7384.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1798.607 ±(99.9%) 697.359 MB/sec [Average]
[info]   (min, avg, max) = (1655.200, 1798.607, 2023.730), stdev = 181.102
[info]   CI (99.9%): [1101.248, 2495.966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   7565.764 ±(99.9%) 3001.150 B/op [Average]
[info]   (min, avg, max) = (6968.536, 7565.764, 8533.732), stdev = 779.389
[info]   CI (99.9%): [4564.614, 10566.914] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.112 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.112, 0.187), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.473 ±(99.9%) 0.703 B/op [Average]
[info]   (min, avg, max) = (0.348, 0.473, 0.790), stdev = 0.183
[info]   CI (99.9%): [≈ 0, 1.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala
[info] # Run progress: 71.23% complete, ETA 00:17:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1461642.581 ops/s
[info] # Warmup Iteration   2: 2661729.619 ops/s
[info] # Warmup Iteration   3: 2683889.054 ops/s
[info] Iteration   1: 2695881.355 ops/s
[info]                  ·gc.alloc.rate:                   1425.643 MB/sec
[info]                  ·gc.alloc.rate.norm:              832.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1308.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     763.442 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 2666050.152 ops/s
[info]                  ·gc.alloc.rate:                   1409.484 MB/sec
[info]                  ·gc.alloc.rate.norm:              832.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1645.940 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     971.577 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.098 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 2726273.713 ops/s
[info]                  ·gc.alloc.rate:                   1441.246 MB/sec
[info]                  ·gc.alloc.rate.norm:              832.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1327.733 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     766.471 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.036 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 2729214.477 ops/s
[info]                  ·gc.alloc.rate:                   1442.756 MB/sec
[info]                  ·gc.alloc.rate.norm:              832.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.659 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     770.240 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.024 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 2716977.665 ops/s
[info]                  ·gc.alloc.rate:                   1436.363 MB/sec
[info]                  ·gc.alloc.rate.norm:              832.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1677.722 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     971.805 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.048 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala":
[info]   2706879.472 ±(99.9%) 101238.887 ops/s [Average]
[info]   (min, avg, max) = (2666050.152, 2706879.472, 2729214.477), stdev = 26291.417
[info]   CI (99.9%): [2605640.586, 2808118.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1431.098 ±(99.9%) 53.201 MB/sec [Average]
[info]   (min, avg, max) = (1409.484, 1431.098, 1442.756), stdev = 13.816
[info]   CI (99.9%): [1377.897, 1484.299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   832.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (832.000, 832.000, 832.000), stdev = 0.001
[info]   CI (99.9%): [832.000, 832.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1459.044 ±(99.9%) 715.175 MB/sec [Average]
[info]   (min, avg, max) = (1308.167, 1459.044, 1677.722), stdev = 185.729
[info]   CI (99.9%): [743.869, 2174.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   848.707 ±(99.9%) 432.406 B/op [Average]
[info]   (min, avg, max) = (763.442, 848.707, 971.805), stdev = 112.294
[info]   CI (99.9%): [416.301, 1281.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.217 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.075, 0.167), stdev = 0.056
[info]   CI (99.9%): [≈ 0, 0.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.044 ±(99.9%) 0.128 B/op [Average]
[info]   (min, avg, max) = (0.012, 0.044, 0.098), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala
[info] # Run progress: 71.58% complete, ETA 00:17:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5685290.539 ops/s
[info] # Warmup Iteration   2: 6268041.313 ops/s
[info] # Warmup Iteration   3: 6121369.446 ops/s
[info] Iteration   1: 6344708.200 ops/s
[info]                  ·gc.alloc.rate:                   967.514 MB/sec
[info]                  ·gc.alloc.rate.norm:              240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995.227 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     246.875 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 6398560.457 ops/s
[info]                  ·gc.alloc.rate:                   976.116 MB/sec
[info]                  ·gc.alloc.rate.norm:              240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          996.960 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     245.125 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 6351911.260 ops/s
[info]                  ·gc.alloc.rate:                   969.017 MB/sec
[info]                  ·gc.alloc.rate.norm:              240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          998.969 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     247.418 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.026 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 6419700.502 ops/s
[info]                  ·gc.alloc.rate:                   978.977 MB/sec
[info]                  ·gc.alloc.rate.norm:              240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1001.880 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     245.615 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 6311788.110 ops/s
[info]                  ·gc.alloc.rate:                   962.515 MB/sec
[info]                  ·gc.alloc.rate.norm:              240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1004.600 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     250.494 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.016 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala":
[info]   6365333.706 ±(99.9%) 167098.315 ops/s [Average]
[info]   (min, avg, max) = (6311788.110, 6365333.706, 6419700.502), stdev = 43394.902
[info]   CI (99.9%): [6198235.391, 6532432.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   970.828 ±(99.9%) 25.668 MB/sec [Average]
[info]   (min, avg, max) = (962.515, 970.828, 978.977), stdev = 6.666
[info]   CI (99.9%): [945.160, 996.496] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   240.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (240.000, 240.000, 240.000), stdev = 0.001
[info]   CI (99.9%): [240.000, 240.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   999.527 ±(99.9%) 14.493 MB/sec [Average]
[info]   (min, avg, max) = (995.227, 999.527, 1004.600), stdev = 3.764
[info]   CI (99.9%): [985.034, 1014.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   247.105 ±(99.9%) 8.117 B/op [Average]
[info]   (min, avg, max) = (245.125, 247.105, 250.494), stdev = 2.108
[info]   CI (99.9%): [238.988, 255.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.062, 0.104), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.015 ±(99.9%) 0.028 B/op [Average]
[info]   (min, avg, max) = (0.005, 0.015, 0.026), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson
[info] # Run progress: 71.92% complete, ETA 00:17:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 259466.718 ops/s
[info] # Warmup Iteration   2: 636036.091 ops/s
[info] # Warmup Iteration   3: 641057.344 ops/s
[info] Iteration   1: 645984.058 ops/s
[info]                  ·gc.alloc.rate:                   1911.419 MB/sec
[info]                  ·gc.alloc.rate.norm:              4656.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1975.528 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4812.163 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.254 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 651860.914 ops/s
[info]                  ·gc.alloc.rate:                   1928.745 MB/sec
[info]                  ·gc.alloc.rate.norm:              4656.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1995.456 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4817.042 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.302 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 649486.311 ops/s
[info]                  ·gc.alloc.rate:                   1921.359 MB/sec
[info]                  ·gc.alloc.rate.norm:              4656.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1675.035 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4059.086 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.151 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 646233.824 ops/s
[info]                  ·gc.alloc.rate:                   1911.694 MB/sec
[info]                  ·gc.alloc.rate.norm:              4656.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2021.657 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4923.821 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.203 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 645756.602 ops/s
[info]                  ·gc.alloc.rate:                   1911.260 MB/sec
[info]                  ·gc.alloc.rate.norm:              4656.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2030.095 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4945.493 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.254 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson":
[info]   647864.342 ±(99.9%) 10410.989 ops/s [Average]
[info]   (min, avg, max) = (645756.602, 647864.342, 651860.914), stdev = 2703.701
[info]   CI (99.9%): [637453.353, 658275.331] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1916.896 ±(99.9%) 30.389 MB/sec [Average]
[info]   (min, avg, max) = (1911.260, 1916.896, 1928.745), stdev = 7.892
[info]   CI (99.9%): [1886.507, 1947.284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4656.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4656.001, 4656.001, 4656.001), stdev = 0.001
[info]   CI (99.9%): [4656.001, 4656.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1939.554 ±(99.9%) 575.437 MB/sec [Average]
[info]   (min, avg, max) = (1675.035, 1939.554, 2030.095), stdev = 149.439
[info]   CI (99.9%): [1364.117, 2514.991] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4711.521 ±(99.9%) 1423.631 B/op [Average]
[info]   (min, avg, max) = (4059.086, 4711.521, 4945.493), stdev = 369.712
[info]   CI (99.9%): [3287.890, 6135.152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.096 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.096, 0.125), stdev = 0.024
[info]   CI (99.9%): [0.004, 0.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.233 ±(99.9%) 0.221 B/op [Average]
[info]   (min, avg, max) = (0.151, 0.233, 0.302), stdev = 0.057
[info]   CI (99.9%): [0.012, 0.453] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 7.000), stdev = 0.707
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce
[info] # Run progress: 72.26% complete, ETA 00:17:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 443752.856 ops/s
[info] # Warmup Iteration   2: 793368.804 ops/s
[info] # Warmup Iteration   3: 802452.734 ops/s
[info] Iteration   1: 807490.601 ops/s
[info]                  ·gc.alloc.rate:                   2689.108 MB/sec
[info]                  ·gc.alloc.rate.norm:              5240.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2686.565 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5235.044 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.203 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 807168.978 ops/s
[info]                  ·gc.alloc.rate:                   2687.582 MB/sec
[info]                  ·gc.alloc.rate.norm:              5240.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2364.296 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4609.688 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.365 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 807462.220 ops/s
[info]                  ·gc.alloc.rate:                   2688.383 MB/sec
[info]                  ·gc.alloc.rate.norm:              5240.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2711.819 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5285.681 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.243 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 802754.460 ops/s
[info]                  ·gc.alloc.rate:                   2672.706 MB/sec
[info]                  ·gc.alloc.rate.norm:              5240.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2717.911 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5328.628 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.163 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 781429.132 ops/s
[info]                  ·gc.alloc.rate:                   2601.886 MB/sec
[info]                  ·gc.alloc.rate.norm:              5240.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2722.662 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5483.233 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.168 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce":
[info]   801261.078 ±(99.9%) 43381.767 ops/s [Average]
[info]   (min, avg, max) = (781429.132, 801261.078, 807490.601), stdev = 11266.107
[info]   CI (99.9%): [757879.311, 844642.845] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.alloc.rate":
[info]   2667.933 ±(99.9%) 144.561 MB/sec [Average]
[info]   (min, avg, max) = (2601.886, 2667.933, 2689.108), stdev = 37.542
[info]   CI (99.9%): [2523.372, 2812.494] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5240.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5240.001, 5240.001, 5240.001), stdev = 0.001
[info]   CI (99.9%): [5240.000, 5240.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2640.650 ±(99.9%) 597.284 MB/sec [Average]
[info]   (min, avg, max) = (2364.296, 2640.650, 2722.662), stdev = 155.113
[info]   CI (99.9%): [2043.366, 3237.935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5188.455 ±(99.9%) 1296.040 B/op [Average]
[info]   (min, avg, max) = (4609.688, 5188.455, 5483.233), stdev = 336.577
[info]   CI (99.9%): [3892.415, 6484.494] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.117 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.117, 0.187), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.229 ±(99.9%) 0.320 B/op [Average]
[info]   (min, avg, max) = (0.163, 0.229, 0.365), stdev = 0.083
[info]   CI (99.9%): [≈ 0, 0.548] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.count":
[info]   39.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.800, 8.000), stdev = 0.447
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala
[info] # Run progress: 72.60% complete, ETA 00:17:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 277454.026 ops/s
[info] # Warmup Iteration   2: 973059.180 ops/s
[info] # Warmup Iteration   3: 992587.322 ops/s
[info] Iteration   1: 1000790.899 ops/s
[info]                  ·gc.alloc.rate:                   1241.421 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          979.057 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1539.462 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.098 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 998873.605 ops/s
[info]                  ·gc.alloc.rate:                   1239.169 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1311.310 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2065.640 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.164 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 991572.207 ops/s
[info]                  ·gc.alloc.rate:                   1229.839 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1320.310 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2095.596 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.132 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 973260.414 ops/s
[info]                  ·gc.alloc.rate:                   1207.095 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995.548 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1609.907 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.101 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 961546.151 ops/s
[info]                  ·gc.alloc.rate:                   1192.580 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.965 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2185.054 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.204 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala":
[info]   985208.655 ±(99.9%) 65932.272 ops/s [Average]
[info]   (min, avg, max) = (961546.151, 985208.655, 1000790.899), stdev = 17122.402
[info]   CI (99.9%): [919276.383, 1051140.927] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1222.021 ±(99.9%) 82.161 MB/sec [Average]
[info]   (min, avg, max) = (1192.580, 1222.021, 1241.421), stdev = 21.337
[info]   CI (99.9%): [1139.859, 1304.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1952.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1952.000, 1952.000, 1952.000), stdev = 0.001
[info]   CI (99.9%): [1952.000, 1952.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1188.238 ±(99.9%) 707.420 MB/sec [Average]
[info]   (min, avg, max) = (979.057, 1188.238, 1334.965), stdev = 183.715
[info]   CI (99.9%): [480.818, 1895.658] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1899.132 ±(99.9%) 1156.937 B/op [Average]
[info]   (min, avg, max) = (1539.462, 1899.132, 2185.054), stdev = 300.453
[info]   CI (99.9%): [742.195, 3056.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.087, 0.125), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.140 ±(99.9%) 0.173 B/op [Average]
[info]   (min, avg, max) = (0.098, 0.140, 0.204), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala
[info] # Run progress: 72.95% complete, ETA 00:16:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6976112.377 ops/s
[info] # Warmup Iteration   2: 7486738.025 ops/s
[info] # Warmup Iteration   3: 7525200.392 ops/s
[info] Iteration   1: 7468831.100 ops/s
[info]                  ·gc.alloc.rate:                   341.666 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.797 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     53.905 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.005 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 7345828.625 ops/s
[info]                  ·gc.alloc.rate:               336.212 MB/sec
[info]                  ·gc.alloc.rate.norm:          72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.923 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 54.806 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 7618221.378 ops/s
[info]                  ·gc.alloc.rate:                   348.517 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          335.742 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69.361 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.526 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.315 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 7673904.091 ops/s
[info]                  ·gc.alloc.rate:                   351.061 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          335.739 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68.858 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 7502782.712 ops/s
[info]                  ·gc.alloc.rate:                   343.261 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          335.102 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70.289 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala":
[info]   7521913.581 ±(99.9%) 496740.374 ops/s [Average]
[info]   (min, avg, max) = (7345828.625, 7521913.581, 7673904.091), stdev = 129001.898
[info]   CI (99.9%): [7025173.207, 8018653.955] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   344.143 ±(99.9%) 22.519 MB/sec [Average]
[info]   (min, avg, max) = (336.212, 344.143, 351.061), stdev = 5.848
[info]   CI (99.9%): [321.624, 366.663] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   72.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (72.000, 72.000, 72.000), stdev = 0.001
[info]   CI (99.9%): [72.000, 72.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   303.660 ±(99.9%) 168.028 MB/sec [Average]
[info]   (min, avg, max) = (255.797, 303.660, 335.742), stdev = 43.636
[info]   CI (99.9%): [135.632, 471.689] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   63.444 ±(99.9%) 32.031 B/op [Average]
[info]   (min, avg, max) = (53.905, 63.444, 70.289), stdev = 8.318
[info]   CI (99.9%): [31.413, 95.474] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.319 ±(99.9%) 2.600 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.319, 1.526), stdev = 0.675
[info]   CI (99.9%): [≈ 0, 2.919] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.066 ±(99.9%) 0.537 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.066, 0.315), stdev = 0.139
[info]   CI (99.9%): [≈ 0, 0.603] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson
[info] # Run progress: 73.29% complete, ETA 00:16:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 37281.529 ops/s
[info] # Warmup Iteration   2: 310729.381 ops/s
[info] # Warmup Iteration   3: 312314.997 ops/s
[info] Iteration   1: 313789.329 ops/s
[info]                  ·gc.alloc.rate:                   1741.714 MB/sec
[info]                  ·gc.alloc.rate.norm:              8736.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1965.157 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9856.733 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.835 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 317299.752 ops/s
[info]                  ·gc.alloc.rate:                   1761.248 MB/sec
[info]                  ·gc.alloc.rate.norm:              8736.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1652.427 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8196.234 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.413 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 314677.415 ops/s
[info]                  ·gc.alloc.rate:                   1746.592 MB/sec
[info]                  ·gc.alloc.rate.norm:              8736.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1665.667 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8331.234 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.312 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 316294.027 ops/s
[info]                  ·gc.alloc.rate:                   1755.601 MB/sec
[info]                  ·gc.alloc.rate.norm:              8736.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1676.654 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8343.157 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.207 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 315291.511 ops/s
[info]                  ·gc.alloc.rate:                   1750.147 MB/sec
[info]                  ·gc.alloc.rate.norm:              8736.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2023.095 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10098.448 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.416 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson":
[info]   315470.407 ±(99.9%) 5276.829 ops/s [Average]
[info]   (min, avg, max) = (313789.329, 315470.407, 317299.752), stdev = 1370.376
[info]   CI (99.9%): [310193.578, 320747.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1751.060 ±(99.9%) 29.361 MB/sec [Average]
[info]   (min, avg, max) = (1741.714, 1751.060, 1761.248), stdev = 7.625
[info]   CI (99.9%): [1721.700, 1780.421] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   8736.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8736.001, 8736.001, 8736.001), stdev = 0.001
[info]   CI (99.9%): [8736.001, 8736.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1796.600 ±(99.9%) 699.578 MB/sec [Average]
[info]   (min, avg, max) = (1652.427, 1796.600, 2023.095), stdev = 181.678
[info]   CI (99.9%): [1097.022, 2496.178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   8965.161 ±(99.9%) 3580.914 B/op [Average]
[info]   (min, avg, max) = (8196.234, 8965.161, 10098.448), stdev = 929.952
[info]   CI (99.9%): [5384.247, 12546.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.183 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.087, 0.167), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.437 ±(99.9%) 0.919 B/op [Average]
[info]   (min, avg, max) = (0.207, 0.437, 0.835), stdev = 0.239
[info]   CI (99.9%): [≈ 0, 1.356] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce
[info] # Run progress: 73.63% complete, ETA 00:16:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5422.938 ops/s
[info] # Warmup Iteration   2: 7479.508 ops/s
[info] # Warmup Iteration   3: 7973.810 ops/s
[info] Iteration   1: 7783.268 ops/s
[info]                  ·gc.alloc.rate:                   2003.068 MB/sec
[info]                  ·gc.alloc.rate.norm:              405016.060 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1996.418 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     403671.454 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.066 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.417 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 8040.391 ops/s
[info]                  ·gc.alloc.rate:                   2069.964 MB/sec
[info]                  ·gc.alloc.rate.norm:              405016.054 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2347.347 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     459289.848 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.179 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35.016 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 7959.501 ops/s
[info]                  ·gc.alloc.rate:                   2048.320 MB/sec
[info]                  ·gc.alloc.rate.norm:              405016.054 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022.778 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     399965.500 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.212 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 41.927 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 7838.806 ops/s
[info]                  ·gc.alloc.rate:                   2018.117 MB/sec
[info]                  ·gc.alloc.rate.norm:              405016.055 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2030.348 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     407470.779 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.158 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 31.735 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 7840.955 ops/s
[info]                  ·gc.alloc.rate:                   2017.745 MB/sec
[info]                  ·gc.alloc.rate.norm:              405016.059 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2034.399 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     408358.978 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.283 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 56.802 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce":
[info]   7892.584 ±(99.9%) 403.088 ops/s [Average]
[info]   (min, avg, max) = (7783.268, 7892.584, 8040.391), stdev = 104.681
[info]   CI (99.9%): [7489.496, 8295.673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate":
[info]   2031.443 ±(99.9%) 104.377 MB/sec [Average]
[info]   (min, avg, max) = (2003.068, 2031.443, 2069.964), stdev = 27.106
[info]   CI (99.9%): [1927.065, 2135.820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   405016.056 ±(99.9%) 0.011 B/op [Average]
[info]   (min, avg, max) = (405016.054, 405016.056, 405016.060), stdev = 0.003
[info]   CI (99.9%): [405016.046, 405016.067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2086.258 ±(99.9%) 564.890 MB/sec [Average]
[info]   (min, avg, max) = (1996.418, 2086.258, 2347.347), stdev = 146.700
[info]   CI (99.9%): [1521.368, 2651.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   415751.312 ±(99.9%) 94594.515 B/op [Average]
[info]   (min, avg, max) = (399965.500, 415751.312, 459289.848), stdev = 24565.895
[info]   CI (99.9%): [321156.797, 510345.826] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.180 ±(99.9%) 0.305 MB/sec [Average]
[info]   (min, avg, max) = (0.066, 0.180, 0.283), stdev = 0.079
[info]   CI (99.9%): [≈ 0, 0.484] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   35.779 ±(99.9%) 60.786 B/op [Average]
[info]   (min, avg, max) = (13.417, 35.779, 56.802), stdev = 15.786
[info]   CI (99.9%): [≈ 0, 96.565] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.count":
[info]   31.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala
[info] # Run progress: 73.97% complete, ETA 00:16:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7154.571 ops/s
[info] # Warmup Iteration   2: 13138.721 ops/s
[info] # Warmup Iteration   3: 13565.335 ops/s
[info] Iteration   1: 13683.578 ops/s
[info]                  ·gc.alloc.rate:               498.777 MB/sec
[info]                  ·gc.alloc.rate.norm:          57368.034 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.795 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 29420.808 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 13570.239 ops/s
[info]                  ·gc.alloc.rate:                   494.668 MB/sec
[info]                  ·gc.alloc.rate.norm:              57368.032 B/op
[info]                  ·gc.churn.PS_Eden_Space:          648.157 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     75168.677 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.642 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 306.382 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 13596.617 ops/s
[info]                  ·gc.alloc.rate:               495.615 MB/sec
[info]                  ·gc.alloc.rate.norm:          57368.034 B/op
[info]                  ·gc.churn.PS_Eden_Space:      323.746 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 37473.927 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   4: 13463.371 ops/s
[info]                  ·gc.alloc.rate:                   490.963 MB/sec
[info]                  ·gc.alloc.rate.norm:              57368.032 B/op
[info]                  ·gc.churn.PS_Eden_Space:          648.415 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     75765.962 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.433 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 13606.244 ops/s
[info]                  ·gc.alloc.rate:               496.145 MB/sec
[info]                  ·gc.alloc.rate.norm:          57368.044 B/op
[info]                  ·gc.churn.PS_Eden_Space:      324.544 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 37526.199 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala":
[info]   13584.010 ±(99.9%) 306.305 ops/s [Average]
[info]   (min, avg, max) = (13463.371, 13584.010, 13683.578), stdev = 79.547
[info]   CI (99.9%): [13277.704, 13890.315] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   495.234 ±(99.9%) 10.907 MB/sec [Average]
[info]   (min, avg, max) = (490.963, 495.234, 498.777), stdev = 2.833
[info]   CI (99.9%): [484.326, 506.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   57368.035 ±(99.9%) 0.019 B/op [Average]
[info]   (min, avg, max) = (57368.032, 57368.035, 57368.044), stdev = 0.005
[info]   CI (99.9%): [57368.017, 57368.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   440.131 ±(99.9%) 739.541 MB/sec [Average]
[info]   (min, avg, max) = (255.795, 440.131, 648.415), stdev = 192.057
[info]   CI (99.9%): [≈ 0, 1179.672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   51071.115 ±(99.9%) 86695.348 B/op [Average]
[info]   (min, avg, max) = (29420.808, 51071.115, 75765.962), stdev = 22514.506
[info]   CI (99.9%): [≈ 0, 137766.462] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.533 ±(99.9%) 4.541 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.533, 2.642), stdev = 1.179
[info]   CI (99.9%): [≈ 0, 5.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   61.763 ±(99.9%) 526.577 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 61.763, 306.382), stdev = 136.750
[info]   CI (99.9%): [≈ 0, 588.340] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.400, 4.000), stdev = 1.342
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala
[info] # Run progress: 74.32% complete, ETA 00:15:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19500.381 ops/s
[info] # Warmup Iteration   2: 22556.248 ops/s
[info] # Warmup Iteration   3: 22840.523 ops/s
[info] Iteration   1: 22744.203 ops/s
[info]                  ·gc.alloc.rate:                   425.741 MB/sec
[info]                  ·gc.alloc.rate.norm:              29448.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.786 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35399.638 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.035 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.454 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 22740.357 ops/s
[info]                  ·gc.alloc.rate:                   425.692 MB/sec
[info]                  ·gc.alloc.rate.norm:              29448.027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.896 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23028.654 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.681 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 116.273 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 22891.370 ops/s
[info]                  ·gc.alloc.rate:                   428.347 MB/sec
[info]                  ·gc.alloc.rate.norm:              29448.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.163 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     45728.648 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.431 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 22899.235 ops/s
[info]                  ·gc.alloc.rate:                   428.470 MB/sec
[info]                  ·gc.alloc.rate.norm:              29448.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.409 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22845.890 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.431 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 22894.561 ops/s
[info]                  ·gc.alloc.rate:               428.387 MB/sec
[info]                  ·gc.alloc.rate.norm:          29448.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:      332.417 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 22850.879 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala":
[info]   22833.945 ±(99.9%) 322.438 ops/s [Average]
[info]   (min, avg, max) = (22740.357, 22833.945, 22899.235), stdev = 83.736
[info]   CI (99.9%): [22511.507, 23156.384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   427.328 ±(99.9%) 5.665 MB/sec [Average]
[info]   (min, avg, max) = (425.692, 427.328, 428.470), stdev = 1.471
[info]   CI (99.9%): [421.663, 432.993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   29448.021 ±(99.9%) 0.014 B/op [Average]
[info]   (min, avg, max) = (29448.019, 29448.021, 29448.027), stdev = 0.004
[info]   CI (99.9%): [29448.007, 29448.035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   434.934 ±(99.9%) 578.701 MB/sec [Average]
[info]   (min, avg, max) = (332.409, 434.934, 665.163), stdev = 150.287
[info]   CI (99.9%): [≈ 0, 1013.635] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   29970.742 ±(99.9%) 39804.982 B/op [Average]
[info]   (min, avg, max) = (22845.890, 29970.742, 45728.648), stdev = 10337.227
[info]   CI (99.9%): [≈ 0, 69775.724] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.352 ±(99.9%) 2.862 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.352, 1.681), stdev = 0.743
[info]   CI (99.9%): [≈ 0, 3.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   24.318 ±(99.9%) 197.970 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 24.318, 116.273), stdev = 51.412
[info]   CI (99.9%): [≈ 0, 222.288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 4.000), stdev = 1.304
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson
[info] # Run progress: 74.66% complete, ETA 00:15:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 893.446 ops/s
[info] # Warmup Iteration   2: 2214.215 ops/s
[info] # Warmup Iteration   3: 2296.200 ops/s
[info] Iteration   1: 2290.428 ops/s
[info]                  ·gc.alloc.rate:                   1434.233 MB/sec
[info]                  ·gc.alloc.rate.norm:              985535.588 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1628.883 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1119289.659 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28.606 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 2218.108 ops/s
[info]                  ·gc.alloc.rate:                   1389.097 MB/sec
[info]                  ·gc.alloc.rate.norm:              985528.195 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1453.409 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1031156.013 B/op
[info]                  ·gc.churn.PS_Old_Gen:             0.137 MB/sec
[info]                  ·gc.churn.PS_Old_Gen.norm:        97.183 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 132.903 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         31.000 ms
[info] Iteration   3: 2312.313 ops/s
[info]                  ·gc.alloc.rate:                   1448.725 MB/sec
[info]                  ·gc.alloc.rate.norm:              985528.187 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.822 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     901920.429 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28.334 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 2306.838 ops/s
[info]                  ·gc.alloc.rate:                   1445.084 MB/sec
[info]                  ·gc.alloc.rate.norm:              985528.187 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.682 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     909553.359 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14.198 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 2258.406 ops/s
[info]                  ·gc.alloc.rate:                   1414.455 MB/sec
[info]                  ·gc.alloc.rate.norm:              985528.205 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1676.822 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1168333.684 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14.506 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson":
[info]   2277.219 ±(99.9%) 150.759 ops/s [Average]
[info]   (min, avg, max) = (2218.108, 2277.219, 2312.313), stdev = 39.152
[info]   CI (99.9%): [2126.460, 2427.978] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1426.319 ±(99.9%) 95.162 MB/sec [Average]
[info]   (min, avg, max) = (1389.097, 1426.319, 1448.725), stdev = 24.713
[info]   CI (99.9%): [1331.157, 1521.481] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   985529.672 ±(99.9%) 12.734 B/op [Average]
[info]   (min, avg, max) = (985528.187, 985529.672, 985535.588), stdev = 3.307
[info]   CI (99.9%): [985516.939, 985542.406] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1483.723 ±(99.9%) 628.973 MB/sec [Average]
[info]   (min, avg, max) = (1325.822, 1483.723, 1676.822), stdev = 163.342
[info]   CI (99.9%): [854.750, 2112.697] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1026050.629 ±(99.9%) 463454.911 B/op [Average]
[info]   (min, avg, max) = (901920.429, 1026050.629, 1168333.684), stdev = 120357.769
[info]   CI (99.9%): [562595.718, 1489505.540] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Old_Gen":
[info]   0.027 ±(99.9%) 0.236 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.027, 0.137), stdev = 0.061
[info]   CI (99.9%): [≈ 0, 0.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Old_Gen.norm":
[info]   19.437 ±(99.9%) 167.354 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 19.437, 97.183), stdev = 43.461
[info]   CI (99.9%): [≈ 0, 186.791] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.272 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.062, 0.187), stdev = 0.071
[info]   CI (99.9%): [≈ 0, 0.334] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   43.709 ±(99.9%) 193.912 B/op [Average]
[info]   (min, avg, max) = (14.198, 43.709, 132.903), stdev = 50.358
[info]   CI (99.9%): [≈ 0, 237.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 6.000), stdev = 0.837
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.time":
[info]   52.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 10.400, 31.000), stdev = 11.567
[info]   CI (99.9%): [52.000, 52.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce
[info] # Run progress: 75.00% complete, ETA 00:15:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6240.182 ops/s
[info] # Warmup Iteration   2: 8403.908 ops/s
[info] # Warmup Iteration   3: 8627.358 ops/s
[info] Iteration   1: 8731.588 ops/s
[info]                  ·gc.alloc.rate:                   1943.442 MB/sec
[info]                  ·gc.alloc.rate.norm:              350232.053 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1994.821 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     359491.188 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.752 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 8723.481 ops/s
[info]                  ·gc.alloc.rate:                   1941.595 MB/sec
[info]                  ·gc.alloc.rate.norm:              350232.050 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1674.287 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     302013.924 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.152 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27.336 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 8749.052 ops/s
[info]                  ·gc.alloc.rate:                   1947.223 MB/sec
[info]                  ·gc.alloc.rate.norm:              350232.049 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019.906 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     363305.043 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.102 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18.415 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 8721.480 ops/s
[info]                  ·gc.alloc.rate:                   1940.848 MB/sec
[info]                  ·gc.alloc.rate.norm:              350232.050 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2028.183 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     365991.967 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18.780 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 8694.664 ops/s
[info]                  ·gc.alloc.rate:                   1935.909 MB/sec
[info]                  ·gc.alloc.rate.norm:              350262.188 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2034.459 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     368092.736 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.768 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce":
[info]   8724.053 ±(99.9%) 75.858 ops/s [Average]
[info]   (min, avg, max) = (8694.664, 8724.053, 8749.052), stdev = 19.700
[info]   CI (99.9%): [8648.195, 8799.911] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate":
[info]   1941.803 ±(99.9%) 15.847 MB/sec [Average]
[info]   (min, avg, max) = (1935.909, 1941.803, 1947.223), stdev = 4.116
[info]   CI (99.9%): [1925.956, 1957.651] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   350238.078 ±(99.9%) 51.899 B/op [Average]
[info]   (min, avg, max) = (350232.049, 350238.078, 350262.188), stdev = 13.478
[info]   CI (99.9%): [350186.179, 350289.976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1950.331 ±(99.9%) 597.033 MB/sec [Average]
[info]   (min, avg, max) = (1674.287, 1950.331, 2034.459), stdev = 155.048
[info]   CI (99.9%): [1353.298, 2547.364] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   351778.972 ±(99.9%) 107835.850 B/op [Average]
[info]   (min, avg, max) = (302013.924, 351778.972, 368092.736), stdev = 28004.628
[info]   CI (99.9%): [243943.122, 459614.822] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.080 ±(99.9%) 0.221 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.080, 0.152), stdev = 0.057
[info]   CI (99.9%): [≈ 0, 0.301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   14.410 ±(99.9%) 39.881 B/op [Average]
[info]   (min, avg, max) = (3.752, 14.410, 27.336), stdev = 10.357
[info]   CI (99.9%): [≈ 0, 54.291] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala
[info] # Run progress: 75.34% complete, ETA 00:15:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24701.339 ops/s
[info] # Warmup Iteration   2: 40997.723 ops/s
[info] # Warmup Iteration   3: 41551.081 ops/s
[info] Iteration   1: 41724.194 ops/s
[info]                  ·gc.alloc.rate:                   604.662 MB/sec
[info]                  ·gc.alloc.rate.norm:              22807.776 B/op
[info]                  ·gc.churn.PS_Eden_Space:          648.147 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24448.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.715 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 102.412 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 41657.717 ops/s
[info]                  ·gc.alloc.rate:                   603.720 MB/sec
[info]                  ·gc.alloc.rate.norm:              22807.755 B/op
[info]                  ·gc.churn.PS_Eden_Space:          647.512 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24462.159 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.786 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 41911.766 ops/s
[info]                  ·gc.alloc.rate:                   607.403 MB/sec
[info]                  ·gc.alloc.rate.norm:              22807.955 B/op
[info]                  ·gc.churn.PS_Eden_Space:          324.421 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12181.982 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.563 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 40924.304 ops/s
[info]                  ·gc.alloc.rate:                   593.125 MB/sec
[info]                  ·gc.alloc.rate.norm:              22807.866 B/op
[info]                  ·gc.churn.PS_Eden_Space:          649.584 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24978.905 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.801 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 41620.430 ops/s
[info]                  ·gc.alloc.rate:                   603.281 MB/sec
[info]                  ·gc.alloc.rate.norm:              22807.826 B/op
[info]                  ·gc.churn.PS_Eden_Space:          651.278 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24622.443 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.574 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala":
[info]   41567.682 ±(99.9%) 1450.669 ops/s [Average]
[info]   (min, avg, max) = (40924.304, 41567.682, 41911.766), stdev = 376.734
[info]   CI (99.9%): [40117.014, 43018.351] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   602.438 ±(99.9%) 20.974 MB/sec [Average]
[info]   (min, avg, max) = (593.125, 602.438, 607.403), stdev = 5.447
[info]   CI (99.9%): [581.464, 623.412] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   22807.835 ±(99.9%) 0.306 B/op [Average]
[info]   (min, avg, max) = (22807.755, 22807.835, 22807.955), stdev = 0.080
[info]   CI (99.9%): [22807.529, 22808.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   584.188 ±(99.9%) 559.198 MB/sec [Average]
[info]   (min, avg, max) = (324.421, 584.188, 651.278), stdev = 145.222
[info]   CI (99.9%): [24.991, 1143.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   22138.700 ±(99.9%) 21448.411 B/op [Average]
[info]   (min, avg, max) = (12181.982, 22138.700, 24978.905), stdev = 5570.084
[info]   CI (99.9%): [690.289, 43587.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.568 ±(99.9%) 4.622 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.568, 2.715), stdev = 1.200
[info]   CI (99.9%): [≈ 0, 5.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   21.427 ±(99.9%) 174.332 B/op [Average]
[info]   (min, avg, max) = (0.786, 21.427, 102.412), stdev = 45.273
[info]   CI (99.9%): [≈ 0, 195.759] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 4.000), stdev = 1.095
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala
[info] # Run progress: 75.68% complete, ETA 00:15:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 66146.458 ops/s
[info] # Warmup Iteration   2: 68788.445 ops/s
[info] # Warmup Iteration   3: 75861.073 ops/s
[info] Iteration   1: 77426.567 ops/s
[info]                  ·gc.alloc.rate:                   582.324 MB/sec
[info]                  ·gc.alloc.rate.norm:              11832.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.760 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13486.682 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.941 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 39.440 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 77925.310 ops/s
[info]                  ·gc.alloc.rate:               585.995 MB/sec
[info]                  ·gc.alloc.rate.norm:          11832.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.176 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6686.884 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 76095.982 ops/s
[info]                  ·gc.alloc.rate:                   572.088 MB/sec
[info]                  ·gc.alloc.rate.norm:              11832.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.147 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13694.629 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.583 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 74713.250 ops/s
[info]                  ·gc.alloc.rate:                   561.694 MB/sec
[info]                  ·gc.alloc.rate.norm:              11832.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.789 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13961.556 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.315 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 74683.731 ops/s
[info]                  ·gc.alloc.rate:               561.471 MB/sec
[info]                  ·gc.alloc.rate.norm:          11832.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.742 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6990.881 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala":
[info]   76168.968 ±(99.9%) 5774.895 ops/s [Average]
[info]   (min, avg, max) = (74683.731, 76168.968, 77925.310), stdev = 1499.722
[info]   CI (99.9%): [70394.073, 81943.863] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   572.714 ±(99.9%) 43.776 MB/sec [Average]
[info]   (min, avg, max) = (561.471, 572.714, 585.995), stdev = 11.368
[info]   CI (99.9%): [528.938, 616.490] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   11832.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (11832.006, 11832.006, 11832.006), stdev = 0.001
[info]   CI (99.9%): [11832.005, 11832.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   530.323 ±(99.9%) 699.038 MB/sec [Average]
[info]   (min, avg, max) = (331.176, 530.323, 663.760), stdev = 181.538
[info]   CI (99.9%): [≈ 0, 1229.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   10964.126 ±(99.9%) 14521.192 B/op [Average]
[info]   (min, avg, max) = (6686.884, 10964.126, 13961.556), stdev = 3771.107
[info]   CI (99.9%): [≈ 0, 25485.318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.426 ±(99.9%) 3.268 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.426, 1.941), stdev = 0.849
[info]   CI (99.9%): [≈ 0, 3.694] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   8.668 ±(99.9%) 66.368 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.668, 39.440), stdev = 17.236
[info]   CI (99.9%): [≈ 0, 75.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 2.000), stdev = 0.894
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 76.03% complete, ETA 00:14:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 70584.917 ops/s
[info] # Warmup Iteration   2: 79874.742 ops/s
[info] # Warmup Iteration   3: 80058.894 ops/s
[info] Iteration   1: 80141.047 ops/s
[info]                  ·gc.alloc.rate:      1.222 MB/sec
[info]                  ·gc.alloc.rate.norm: 24.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 80190.787 ops/s
[info]                  ·gc.alloc.rate:      1.223 MB/sec
[info]                  ·gc.alloc.rate.norm: 24.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 80080.806 ops/s
[info]                  ·gc.alloc.rate:      1.221 MB/sec
[info]                  ·gc.alloc.rate.norm: 24.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 80128.310 ops/s
[info]                  ·gc.alloc.rate:      1.222 MB/sec
[info]                  ·gc.alloc.rate.norm: 24.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 80165.349 ops/s
[info]                  ·gc.alloc.rate:      1.223 MB/sec
[info]                  ·gc.alloc.rate.norm: 24.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc":
[info]   80141.260 ±(99.9%) 159.415 ops/s [Average]
[info]   (min, avg, max) = (80080.806, 80141.260, 80190.787), stdev = 41.400
[info]   CI (99.9%): [79981.844, 80300.675] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1.222 ±(99.9%) 0.002 MB/sec [Average]
[info]   (min, avg, max) = (1.221, 1.222, 1.223), stdev = 0.001
[info]   CI (99.9%): [1.220, 1.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   24.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (24.005, 24.005, 24.005), stdev = 0.001
[info]   CI (99.9%): [24.005, 24.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson
[info] # Run progress: 76.37% complete, ETA 00:14:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2762.769 ops/s
[info] # Warmup Iteration   2: 5699.693 ops/s
[info] # Warmup Iteration   3: 5881.506 ops/s
[info] Iteration   1: 5794.299 ops/s
[info]                  ·gc.alloc.rate:                   1732.099 MB/sec
[info]                  ·gc.alloc.rate.norm:              470337.060 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1639.300 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     445138.242 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.307 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 5802.379 ops/s
[info]                  ·gc.alloc.rate:                   1734.096 MB/sec
[info]                  ·gc.alloc.rate.norm:              470335.318 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1655.587 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     449041.290 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.292 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 5886.366 ops/s
[info]                  ·gc.alloc.rate:                   1760.003 MB/sec
[info]                  ·gc.alloc.rate.norm:              470335.675 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1669.009 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     446018.783 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.565 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 5863.573 ops/s
[info]                  ·gc.alloc.rate:                   1752.338 MB/sec
[info]                  ·gc.alloc.rate.norm:              470336.053 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1679.579 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     450807.227 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27.935 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 5861.955 ops/s
[info]                  ·gc.alloc.rate:                   1751.857 MB/sec
[info]                  ·gc.alloc.rate.norm:              470335.232 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1686.068 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     452672.262 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16.764 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson":
[info]   5841.714 ±(99.9%) 157.321 ops/s [Average]
[info]   (min, avg, max) = (5794.299, 5841.714, 5886.366), stdev = 40.856
[info]   CI (99.9%): [5684.393, 5999.035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1746.079 ±(99.9%) 47.375 MB/sec [Average]
[info]   (min, avg, max) = (1732.099, 1746.079, 1760.003), stdev = 12.303
[info]   CI (99.9%): [1698.704, 1793.453] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   470335.868 ±(99.9%) 2.856 B/op [Average]
[info]   (min, avg, max) = (470335.232, 470335.868, 470337.060), stdev = 0.742
[info]   CI (99.9%): [470333.012, 470338.723] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1665.908 ±(99.9%) 72.487 MB/sec [Average]
[info]   (min, avg, max) = (1639.300, 1665.908, 1686.068), stdev = 18.825
[info]   CI (99.9%): [1593.422, 1738.395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   448735.561 ±(99.9%) 12207.889 B/op [Average]
[info]   (min, avg, max) = (445138.242, 448735.561, 452672.262), stdev = 3170.350
[info]   CI (99.9%): [436527.672, 460943.449] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.054 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.054, 0.104), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   14.573 ±(99.9%) 32.556 B/op [Average]
[info]   (min, avg, max) = (5.565, 14.573, 27.935), stdev = 8.455
[info]   CI (99.9%): [≈ 0, 47.128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala
[info] # Run progress: 76.71% complete, ETA 00:14:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4677938.228 ops/s
[info] # Warmup Iteration   2: 5238737.712 ops/s
[info] # Warmup Iteration   3: 5230450.402 ops/s
[info] Iteration   1: 5108722.507 ops/s
[info]                  ·gc.alloc.rate:                   1532.062 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.218 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     411.356 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.038 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 5172704.964 ops/s
[info]                  ·gc.alloc.rate:                   1551.273 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1676.017 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     509.955 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.025 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 5261435.456 ops/s
[info]                  ·gc.alloc.rate:                   1577.947 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1683.439 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     503.555 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 5337798.813 ops/s
[info]                  ·gc.alloc.rate:                   1600.891 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350.721 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     398.241 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.025 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 5342860.044 ops/s
[info]                  ·gc.alloc.rate:                   1603.014 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1693.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     498.545 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.031 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala":
[info]   5244704.357 ±(99.9%) 395774.375 ops/s [Average]
[info]   (min, avg, max) = (5108722.507, 5244704.357, 5342860.044), stdev = 102781.348
[info]   CI (99.9%): [4848929.982, 5640478.732] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1573.038 ±(99.9%) 119.481 MB/sec [Average]
[info]   (min, avg, max) = (1532.062, 1573.038, 1603.014), stdev = 31.029
[info]   CI (99.9%): [1453.556, 1692.519] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   472.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (472.000, 472.000, 472.000), stdev = 0.001
[info]   CI (99.9%): [472.000, 472.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1547.712 ±(99.9%) 720.390 MB/sec [Average]
[info]   (min, avg, max) = (1335.218, 1547.712, 1693.167), stdev = 187.083
[info]   CI (99.9%): [827.323, 2268.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   464.330 ±(99.9%) 210.600 B/op [Average]
[info]   (min, avg, max) = (398.241, 464.330, 509.955), stdev = 54.692
[info]   CI (99.9%): [253.730, 674.931] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.087, 0.125), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.026 ±(99.9%) 0.037 B/op [Average]
[info]   (min, avg, max) = (0.012, 0.026, 0.038), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson
[info] # Run progress: 77.05% complete, ETA 00:14:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 134415.254 ops/s
[info] # Warmup Iteration   2: 342182.559 ops/s
[info] # Warmup Iteration   3: 345803.916 ops/s
[info] Iteration   1: 352141.957 ops/s
[info]                  ·gc.alloc.rate:                   1891.964 MB/sec
[info]                  ·gc.alloc.rate.norm:              8456.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1643.697 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7346.388 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.372 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 350760.570 ops/s
[info]                  ·gc.alloc.rate:                   1885.393 MB/sec
[info]                  ·gc.alloc.rate.norm:              8456.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1992.644 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8937.024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.467 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 353512.477 ops/s
[info]                  ·gc.alloc.rate:                   1899.857 MB/sec
[info]                  ·gc.alloc.rate.norm:              8456.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.932 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8941.479 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.278 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 351188.568 ops/s
[info]                  ·gc.alloc.rate:                   1887.829 MB/sec
[info]                  ·gc.alloc.rate.norm:              8456.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1685.201 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7548.384 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.280 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 350079.403 ops/s
[info]                  ·gc.alloc.rate:                   1880.921 MB/sec
[info]                  ·gc.alloc.rate.norm:              8456.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2028.072 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9117.544 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.374 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson":
[info]   351536.595 ±(99.9%) 5136.432 ops/s [Average]
[info]   (min, avg, max) = (350079.403, 351536.595, 353512.477), stdev = 1333.915
[info]   CI (99.9%): [346400.163, 356673.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1889.193 ±(99.9%) 27.641 MB/sec [Average]
[info]   (min, avg, max) = (1880.921, 1889.193, 1899.857), stdev = 7.178
[info]   CI (99.9%): [1861.552, 1916.834] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   8456.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8456.001, 8456.001, 8456.001), stdev = 0.001
[info]   CI (99.9%): [8456.001, 8456.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1871.709 ±(99.9%) 732.331 MB/sec [Average]
[info]   (min, avg, max) = (1643.697, 1871.709, 2028.072), stdev = 190.184
[info]   CI (99.9%): [1139.379, 2604.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   8378.164 ±(99.9%) 3295.299 B/op [Average]
[info]   (min, avg, max) = (7346.388, 8378.164, 9117.544), stdev = 855.779
[info]   CI (99.9%): [5082.865, 11673.463] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.079, 0.104), stdev = 0.017
[info]   CI (99.9%): [0.012, 0.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.354 ±(99.9%) 0.303 B/op [Average]
[info]   (min, avg, max) = (0.278, 0.354, 0.467), stdev = 0.079
[info]   CI (99.9%): [0.051, 0.657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala
[info] # Run progress: 77.40% complete, ETA 00:14:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2791802.851 ops/s
[info] # Warmup Iteration   2: 3256643.623 ops/s
[info] # Warmup Iteration   3: 3364729.751 ops/s
[info] Iteration   1: 3357778.334 ops/s
[info]                  ·gc.alloc.rate:                   494.965 MB/sec
[info]                  ·gc.alloc.rate.norm:              232.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          587.894 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     275.558 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.786 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.837 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 3342668.443 ops/s
[info]                  ·gc.alloc.rate:                   492.768 MB/sec
[info]                  ·gc.alloc.rate.norm:              232.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.088 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     156.350 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 3343287.458 ops/s
[info]                  ·gc.alloc.rate:                   492.831 MB/sec
[info]                  ·gc.alloc.rate.norm:              232.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.488 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     312.337 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.039 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 3360307.846 ops/s
[info]                  ·gc.alloc.rate:               495.538 MB/sec
[info]                  ·gc.alloc.rate.norm:          232.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.894 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 155.385 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 3371999.642 ops/s
[info]                  ·gc.alloc.rate:                   497.088 MB/sec
[info]                  ·gc.alloc.rate.norm:              232.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.558 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     309.695 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.049 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala":
[info]   3355208.345 ±(99.9%) 47704.260 ops/s [Average]
[info]   (min, avg, max) = (3342668.443, 3355208.345, 3371999.642), stdev = 12388.645
[info]   CI (99.9%): [3307504.084, 3402912.605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   494.638 ±(99.9%) 7.122 MB/sec [Average]
[info]   (min, avg, max) = (492.768, 494.638, 497.088), stdev = 1.849
[info]   CI (99.9%): [487.516, 501.760] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   232.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (232.000, 232.000, 232.000), stdev = 0.001
[info]   CI (99.9%): [232.000, 232.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   515.784 ±(99.9%) 656.908 MB/sec [Average]
[info]   (min, avg, max) = (331.894, 515.784, 663.558), stdev = 170.597
[info]   CI (99.9%): [≈ 0, 1172.692] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   241.865 ±(99.9%) 307.412 B/op [Average]
[info]   (min, avg, max) = (155.385, 241.865, 312.337), stdev = 79.834
[info]   CI (99.9%): [≈ 0, 549.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.399 ±(99.9%) 2.991 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.399, 1.786), stdev = 0.777
[info]   CI (99.9%): [≈ 0, 3.390] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.187 ±(99.9%) 1.402 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.187, 0.837), stdev = 0.364
[info]   CI (99.9%): [≈ 0, 1.589] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 4.000), stdev = 1.225
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson
[info] # Run progress: 77.74% complete, ETA 00:13:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 92163.383 ops/s
[info] # Warmup Iteration   2: 328645.808 ops/s
[info] # Warmup Iteration   3: 334559.825 ops/s
[info] Iteration   1: 336887.357 ops/s
[info]                  ·gc.alloc.rate:                   1320.904 MB/sec
[info]                  ·gc.alloc.rate.norm:              6168.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1304.890 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6093.224 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.097 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 335887.125 ops/s
[info]                  ·gc.alloc.rate:                   1316.571 MB/sec
[info]                  ·gc.alloc.rate.norm:              6168.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1312.593 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6149.365 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.488 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 332864.198 ops/s
[info]                  ·gc.alloc.rate:                   1304.880 MB/sec
[info]                  ·gc.alloc.rate.norm:              6168.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1320.748 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6243.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.197 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 334355.867 ops/s
[info]                  ·gc.alloc.rate:                   1310.410 MB/sec
[info]                  ·gc.alloc.rate.norm:              6168.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.754 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6259.051 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.392 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 335921.051 ops/s
[info]                  ·gc.alloc.rate:                   1316.477 MB/sec
[info]                  ·gc.alloc.rate.norm:              6168.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.642 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6267.161 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.390 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson":
[info]   335183.120 ±(99.9%) 6090.331 ops/s [Average]
[info]   (min, avg, max) = (332864.198, 335183.120, 336887.357), stdev = 1581.640
[info]   CI (99.9%): [329092.788, 341273.451] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1313.849 ±(99.9%) 24.075 MB/sec [Average]
[info]   (min, avg, max) = (1304.880, 1313.849, 1320.904), stdev = 6.252
[info]   CI (99.9%): [1289.774, 1337.923] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   6168.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6168.001, 6168.001, 6168.001), stdev = 0.001
[info]   CI (99.9%): [6168.001, 6168.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1321.125 ±(99.9%) 50.345 MB/sec [Average]
[info]   (min, avg, max) = (1304.890, 1321.125, 1337.642), stdev = 13.074
[info]   CI (99.9%): [1270.780, 1371.471] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   6202.361 ±(99.9%) 296.926 B/op [Average]
[info]   (min, avg, max) = (6093.224, 6202.361, 6267.161), stdev = 77.111
[info]   CI (99.9%): [5905.436, 6499.287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.067, 0.104), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.313 ±(99.9%) 0.617 B/op [Average]
[info]   (min, avg, max) = (0.097, 0.313, 0.488), stdev = 0.160
[info]   CI (99.9%): [≈ 0, 0.930] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce
[info] # Run progress: 78.08% complete, ETA 00:13:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 456092.604 ops/s
[info] # Warmup Iteration   2: 650472.649 ops/s
[info] # Warmup Iteration   3: 657384.098 ops/s
[info] Iteration   1: 661018.429 ops/s
[info]                  ·gc.alloc.rate:                   2409.130 MB/sec
[info]                  ·gc.alloc.rate.norm:              5736.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2680.514 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6382.151 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.198 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 665178.785 ops/s
[info]                  ·gc.alloc.rate:                   2424.278 MB/sec
[info]                  ·gc.alloc.rate.norm:              5736.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2361.176 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5586.695 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.345 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 667056.448 ops/s
[info]                  ·gc.alloc.rate:                   2431.530 MB/sec
[info]                  ·gc.alloc.rate.norm:              5736.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2370.757 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5592.638 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.246 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 660765.705 ops/s
[info]                  ·gc.alloc.rate:                   2408.137 MB/sec
[info]                  ·gc.alloc.rate.norm:              5736.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2376.771 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5661.289 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.149 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 664569.923 ops/s
[info]                  ·gc.alloc.rate:                   2422.291 MB/sec
[info]                  ·gc.alloc.rate.norm:              5736.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2379.654 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5635.037 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.197 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce":
[info]   663717.858 ±(99.9%) 10546.940 ops/s [Average]
[info]   (min, avg, max) = (660765.705, 663717.858, 667056.448), stdev = 2739.007
[info]   CI (99.9%): [653170.919, 674264.798] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.alloc.rate":
[info]   2419.073 ±(99.9%) 39.036 MB/sec [Average]
[info]   (min, avg, max) = (2408.137, 2419.073, 2431.530), stdev = 10.138
[info]   CI (99.9%): [2380.037, 2458.110] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5736.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5736.001, 5736.001, 5736.001), stdev = 0.001
[info]   CI (99.9%): [5736.001, 5736.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2433.774 ±(99.9%) 531.823 MB/sec [Average]
[info]   (min, avg, max) = (2361.176, 2433.774, 2680.514), stdev = 138.113
[info]   CI (99.9%): [1901.951, 2965.597] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5771.562 ±(99.9%) 1319.664 B/op [Average]
[info]   (min, avg, max) = (5586.695, 5771.562, 6382.151), stdev = 342.713
[info]   CI (99.9%): [4451.898, 7091.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.096 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.096, 0.146), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.227 ±(99.9%) 0.286 B/op [Average]
[info]   (min, avg, max) = (0.149, 0.227, 0.345), stdev = 0.074
[info]   CI (99.9%): [≈ 0, 0.513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.count":
[info]   36.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.200, 8.000), stdev = 0.447
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala
[info] # Run progress: 78.42% complete, ETA 00:13:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 268702.806 ops/s
[info] # Warmup Iteration   2: 599715.294 ops/s
[info] # Warmup Iteration   3: 609681.141 ops/s
[info] Iteration   1: 615316.449 ops/s
[info]                  ·gc.alloc.rate:                   716.220 MB/sec
[info]                  ·gc.alloc.rate.norm:              1832.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          971.893 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2485.980 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.692 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.886 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 610972.933 ops/s
[info]                  ·gc.alloc.rate:                   711.182 MB/sec
[info]                  ·gc.alloc.rate.norm:              1832.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          648.162 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1669.661 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.161 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 602097.664 ops/s
[info]                  ·gc.alloc.rate:                   700.937 MB/sec
[info]                  ·gc.alloc.rate.norm:              1832.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          649.561 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1697.722 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.163 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 608043.433 ops/s
[info]                  ·gc.alloc.rate:                   707.920 MB/sec
[info]                  ·gc.alloc.rate.norm:              1832.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          651.267 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1685.392 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.108 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 613700.439 ops/s
[info]                  ·gc.alloc.rate:               714.360 MB/sec
[info]                  ·gc.alloc.rate.norm:          1832.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      653.511 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1675.950 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala":
[info]   610026.183 ±(99.9%) 20117.184 ops/s [Average]
[info]   (min, avg, max) = (602097.664, 610026.183, 615316.449), stdev = 5224.369
[info]   CI (99.9%): [589909.000, 630143.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   710.124 ±(99.9%) 23.223 MB/sec [Average]
[info]   (min, avg, max) = (700.937, 710.124, 716.220), stdev = 6.031
[info]   CI (99.9%): [686.901, 733.347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1832.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1832.001, 1832.001, 1832.001), stdev = 0.001
[info]   CI (99.9%): [1832.001, 1832.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   714.879 ±(99.9%) 553.295 MB/sec [Average]
[info]   (min, avg, max) = (648.162, 714.879, 971.893), stdev = 143.689
[info]   CI (99.9%): [161.583, 1268.174] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1842.941 ±(99.9%) 1384.790 B/op [Average]
[info]   (min, avg, max) = (1669.661, 1842.941, 2485.980), stdev = 359.625
[info]   CI (99.9%): [458.152, 3227.731] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.572 ±(99.9%) 4.565 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.572, 2.692), stdev = 1.186
[info]   CI (99.9%): [≈ 0, 5.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.463 ±(99.9%) 11.674 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.463, 6.886), stdev = 3.032
[info]   CI (99.9%): [≈ 0, 13.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 5.000), stdev = 1.342
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala
[info] # Run progress: 78.77% complete, ETA 00:13:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3192677.601 ops/s
[info] # Warmup Iteration   2: 3695525.315 ops/s
[info] # Warmup Iteration   3: 3738122.094 ops/s
[info] Iteration   1: 3708208.783 ops/s
[info]                  ·gc.alloc.rate:                   1470.132 MB/sec
[info]                  ·gc.alloc.rate.norm:              624.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.222 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     566.313 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.062 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 3697237.030 ops/s
[info]                  ·gc.alloc.rate:                   1466.446 MB/sec
[info]                  ·gc.alloc.rate.norm:              624.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.522 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     569.992 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.035 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 3705208.918 ops/s
[info]                  ·gc.alloc.rate:                   1469.042 MB/sec
[info]                  ·gc.alloc.rate.norm:              624.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1681.090 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     714.071 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.044 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 3733475.939 ops/s
[info]                  ·gc.alloc.rate:                   1480.242 MB/sec
[info]                  ·gc.alloc.rate.norm:              624.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348.649 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     568.527 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 3749154.601 ops/s
[info]                  ·gc.alloc.rate:                   1486.458 MB/sec
[info]                  ·gc.alloc.rate.norm:              624.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1690.687 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     709.733 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.044 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala":
[info]   3718657.054 ±(99.9%) 83890.498 ops/s [Average]
[info]   (min, avg, max) = (3697237.030, 3718657.054, 3749154.601), stdev = 21786.096
[info]   CI (99.9%): [3634766.556, 3802547.552] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1474.464 ±(99.9%) 32.770 MB/sec [Average]
[info]   (min, avg, max) = (1466.446, 1474.464, 1486.458), stdev = 8.510
[info]   CI (99.9%): [1441.694, 1507.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   624.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (624.000, 624.000, 624.000), stdev = 0.001
[info]   CI (99.9%): [624.000, 624.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1478.834 ±(99.9%) 728.214 MB/sec [Average]
[info]   (min, avg, max) = (1334.222, 1478.834, 1690.687), stdev = 189.115
[info]   CI (99.9%): [750.620, 2207.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   625.727 ±(99.9%) 303.017 B/op [Average]
[info]   (min, avg, max) = (566.313, 625.727, 714.071), stdev = 78.693
[info]   CI (99.9%): [322.710, 928.744] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.176 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.092, 0.146), stdev = 0.046
[info]   CI (99.9%): [≈ 0, 0.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.039 ±(99.9%) 0.074 B/op [Average]
[info]   (min, avg, max) = (0.009, 0.039, 0.062), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson
[info] # Run progress: 79.11% complete, ETA 00:12:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 62130.572 ops/s
[info] # Warmup Iteration   2: 227165.018 ops/s
[info] # Warmup Iteration   3: 233959.483 ops/s
[info] Iteration   1: 232915.784 ops/s
[info]                  ·gc.alloc.rate:                   1620.775 MB/sec
[info]                  ·gc.alloc.rate.norm:              10952.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1635.044 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11048.422 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.563 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 232994.430 ops/s
[info]                  ·gc.alloc.rate:                   1621.677 MB/sec
[info]                  ·gc.alloc.rate.norm:              10952.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1648.718 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11134.623 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.844 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 235111.730 ops/s
[info]                  ·gc.alloc.rate:                   1636.020 MB/sec
[info]                  ·gc.alloc.rate.norm:              10952.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1663.696 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11137.274 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.697 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 230916.065 ops/s
[info]                  ·gc.alloc.rate:                   1607.531 MB/sec
[info]                  ·gc.alloc.rate.norm:              10952.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1675.032 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11411.877 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.568 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 234750.809 ops/s
[info]                  ·gc.alloc.rate:                   1633.567 MB/sec
[info]                  ·gc.alloc.rate.norm:              10952.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1683.082 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11283.967 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.558 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson":
[info]   233337.763 ±(99.9%) 6473.271 ops/s [Average]
[info]   (min, avg, max) = (230916.065, 233337.763, 235111.730), stdev = 1681.088
[info]   CI (99.9%): [226864.493, 239811.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1623.914 ±(99.9%) 44.030 MB/sec [Average]
[info]   (min, avg, max) = (1607.531, 1623.914, 1636.020), stdev = 11.434
[info]   CI (99.9%): [1579.884, 1667.944] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   10952.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10952.002, 10952.002, 10952.002), stdev = 0.001
[info]   CI (99.9%): [10952.002, 10952.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1661.114 ±(99.9%) 74.970 MB/sec [Average]
[info]   (min, avg, max) = (1635.044, 1661.114, 1683.082), stdev = 19.469
[info]   CI (99.9%): [1586.145, 1736.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   11203.233 ±(99.9%) 554.930 B/op [Average]
[info]   (min, avg, max) = (11048.422, 11203.233, 11411.877), stdev = 144.113
[info]   CI (99.9%): [10648.303, 11758.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.096 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.096, 0.125), stdev = 0.019
[info]   CI (99.9%): [0.024, 0.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.646 ±(99.9%) 0.481 B/op [Average]
[info]   (min, avg, max) = (0.558, 0.646, 0.844), stdev = 0.125
[info]   CI (99.9%): [0.165, 1.127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce
[info] # Run progress: 79.45% complete, ETA 00:12:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 604704.948 ops/s
[info] # Warmup Iteration   2: 914559.665 ops/s
[info] # Warmup Iteration   3: 914920.938 ops/s
[info] Iteration   1: 904426.962 ops/s
[info]                  ·gc.alloc.rate:                   2179.420 MB/sec
[info]                  ·gc.alloc.rate.norm:              3792.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.414 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3487.506 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.145 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 930128.091 ops/s
[info]                  ·gc.alloc.rate:                   2241.041 MB/sec
[info]                  ·gc.alloc.rate.norm:              3792.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2353.530 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3982.339 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.141 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 909154.516 ops/s
[info]                  ·gc.alloc.rate:                   2190.495 MB/sec
[info]                  ·gc.alloc.rate.norm:              3792.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2027.136 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3509.207 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.144 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 917563.389 ops/s
[info]                  ·gc.alloc.rate:                   2210.669 MB/sec
[info]                  ·gc.alloc.rate.norm:              3792.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2372.408 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4069.434 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.179 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 927795.158 ops/s
[info]                  ·gc.alloc.rate:                   2235.317 MB/sec
[info]                  ·gc.alloc.rate.norm:              3792.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2377.747 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4033.619 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.141 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce":
[info]   917813.623 ±(99.9%) 43288.612 ops/s [Average]
[info]   (min, avg, max) = (904426.962, 917813.623, 930128.091), stdev = 11241.915
[info]   CI (99.9%): [874525.011, 961102.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.alloc.rate":
[info]   2211.389 ±(99.9%) 103.876 MB/sec [Average]
[info]   (min, avg, max) = (2179.420, 2211.389, 2241.041), stdev = 26.976
[info]   CI (99.9%): [2107.512, 2315.265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   3792.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3792.000, 3792.000, 3792.001), stdev = 0.001
[info]   CI (99.9%): [3792.000, 3792.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2227.047 ±(99.9%) 744.101 MB/sec [Average]
[info]   (min, avg, max) = (2004.414, 2227.047, 2377.747), stdev = 193.241
[info]   CI (99.9%): [1482.946, 2971.149] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3816.421 ±(99.9%) 1124.766 B/op [Average]
[info]   (min, avg, max) = (3487.506, 3816.421, 4069.434), stdev = 292.098
[info]   CI (99.9%): [2691.656, 4941.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.087, 0.104), stdev = 0.009
[info]   CI (99.9%): [0.052, 0.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.150 ±(99.9%) 0.062 B/op [Average]
[info]   (min, avg, max) = (0.141, 0.150, 0.179), stdev = 0.016
[info]   CI (99.9%): [0.088, 0.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.count":
[info]   33.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala
[info] # Run progress: 79.79% complete, ETA 00:12:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 658226.308 ops/s
[info] # Warmup Iteration   2: 1513165.899 ops/s
[info] # Warmup Iteration   3: 1553054.524 ops/s
[info] Iteration   1: 1565463.422 ops/s
[info]                  ·gc.alloc.rate:                   1026.448 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          973.891 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     979.159 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.063 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1555763.309 ops/s
[info]                  ·gc.alloc.rate:                   1020.187 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          977.275 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     988.591 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.126 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 1530734.938 ops/s
[info]                  ·gc.alloc.rate:                   1003.715 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          981.237 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1008.890 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.107 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1557266.233 ops/s
[info]                  ·gc.alloc.rate:                   1021.137 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          987.525 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     998.031 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.042 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1564807.308 ops/s
[info]                  ·gc.alloc.rate:                   1026.217 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          993.043 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     998.639 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.063 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala":
[info]   1554807.042 ±(99.9%) 54456.057 ops/s [Average]
[info]   (min, avg, max) = (1530734.938, 1554807.042, 1565463.422), stdev = 14142.065
[info]   CI (99.9%): [1500350.985, 1609263.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1019.541 ±(99.9%) 35.798 MB/sec [Average]
[info]   (min, avg, max) = (1003.715, 1019.541, 1026.448), stdev = 9.297
[info]   CI (99.9%): [983.743, 1055.339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1032.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1032.000, 1032.000, 1032.000), stdev = 0.001
[info]   CI (99.9%): [1032.000, 1032.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   982.594 ±(99.9%) 29.788 MB/sec [Average]
[info]   (min, avg, max) = (973.891, 982.594, 993.043), stdev = 7.736
[info]   CI (99.9%): [952.807, 1012.382] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   994.662 ±(99.9%) 43.343 B/op [Average]
[info]   (min, avg, max) = (979.159, 994.662, 1008.890), stdev = 11.256
[info]   CI (99.9%): [951.319, 1038.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.125), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.080 ±(99.9%) 0.135 B/op [Average]
[info]   (min, avg, max) = (0.042, 0.080, 0.126), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala
[info] # Run progress: 80.14% complete, ETA 00:12:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5927516.110 ops/s
[info] # Warmup Iteration   2: 6552742.644 ops/s
[info] # Warmup Iteration   3: 6881349.802 ops/s
[info] Iteration   1: 6902924.775 ops/s
[info]                  ·gc.alloc.rate:                   771.952 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.536 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     151.282 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.024 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 6855713.174 ops/s
[info]                  ·gc.alloc.rate:                   766.760 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.564 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     152.313 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.014 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 6765557.718 ops/s
[info]                  ·gc.alloc.rate:                   756.564 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.476 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     154.345 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 6757579.144 ops/s
[info]                  ·gc.alloc.rate:                   755.685 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.873 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     232.406 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 6765537.663 ops/s
[info]                  ·gc.alloc.rate:                   756.638 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.861 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     155.117 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.024 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala":
[info]   6809462.495 ±(99.9%) 254136.850 ops/s [Average]
[info]   (min, avg, max) = (6757579.144, 6809462.495, 6902924.775), stdev = 65998.533
[info]   CI (99.9%): [6555325.645, 7063599.345] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   761.520 ±(99.9%) 28.474 MB/sec [Average]
[info]   (min, avg, max) = (755.685, 761.520, 771.952), stdev = 7.395
[info]   CI (99.9%): [733.046, 789.994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   176.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (176.000, 176.000, 176.000), stdev = 0.001
[info]   CI (99.9%): [176.000, 176.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   731.062 ±(99.9%) 574.357 MB/sec [Average]
[info]   (min, avg, max) = (663.476, 731.062, 997.873), stdev = 149.159
[info]   CI (99.9%): [156.705, 1305.419] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   169.093 ±(99.9%) 136.415 B/op [Average]
[info]   (min, avg, max) = (151.282, 169.093, 232.406), stdev = 35.426
[info]   CI (99.9%): [32.678, 305.507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.071, 0.104), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.016 ±(99.9%) 0.031 B/op [Average]
[info]   (min, avg, max) = (0.005, 0.016, 0.024), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson
[info] # Run progress: 80.48% complete, ETA 00:12:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 179465.158 ops/s
[info] # Warmup Iteration   2: 475398.975 ops/s
[info] # Warmup Iteration   3: 482647.845 ops/s
[info] Iteration   1: 479620.414 ops/s
[info]                  ·gc.alloc.rate:                   1669.974 MB/sec
[info]                  ·gc.alloc.rate.norm:              5480.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1638.671 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5377.279 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.410 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 486983.177 ops/s
[info]                  ·gc.alloc.rate:                   1696.296 MB/sec
[info]                  ·gc.alloc.rate.norm:              5480.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1653.069 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5340.354 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.336 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 481167.901 ops/s
[info]                  ·gc.alloc.rate:                   1675.896 MB/sec
[info]                  ·gc.alloc.rate.norm:              5480.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1666.269 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5448.521 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.272 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 485797.137 ops/s
[info]                  ·gc.alloc.rate:                   1691.550 MB/sec
[info]                  ·gc.alloc.rate.norm:              5480.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.198 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6522.023 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.270 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 485155.188 ops/s
[info]                  ·gc.alloc.rate:                   1689.244 MB/sec
[info]                  ·gc.alloc.rate.norm:              5480.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1686.012 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5469.516 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.270 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson":
[info]   483744.763 ±(99.9%) 12228.347 ops/s [Average]
[info]   (min, avg, max) = (479620.414, 483744.763, 486983.177), stdev = 3175.663
[info]   CI (99.9%): [471516.416, 495973.110] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1684.592 ±(99.9%) 42.893 MB/sec [Average]
[info]   (min, avg, max) = (1669.974, 1684.592, 1696.296), stdev = 11.139
[info]   CI (99.9%): [1641.699, 1727.485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5480.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5480.001, 5480.001, 5480.001), stdev = 0.001
[info]   CI (99.9%): [5480.001, 5480.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1731.444 ±(99.9%) 610.199 MB/sec [Average]
[info]   (min, avg, max) = (1638.671, 1731.444, 2013.198), stdev = 158.467
[info]   CI (99.9%): [1121.245, 2341.643] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   5631.539 ±(99.9%) 1927.387 B/op [Average]
[info]   (min, avg, max) = (5340.354, 5631.539, 6522.023), stdev = 500.536
[info]   CI (99.9%): [3704.152, 7558.925] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.096 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.096, 0.125), stdev = 0.019
[info]   CI (99.9%): [0.024, 0.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.312 ±(99.9%) 0.238 B/op [Average]
[info]   (min, avg, max) = (0.270, 0.312, 0.410), stdev = 0.062
[info]   CI (99.9%): [0.074, 0.550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce
[info] # Run progress: 80.82% complete, ETA 00:11:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 411543.707 ops/s
[info] # Warmup Iteration   2: 632517.827 ops/s
[info] # Warmup Iteration   3: 640182.739 ops/s
[info] Iteration   1: 645512.811 ops/s
[info]                  ·gc.alloc.rate:                   2287.912 MB/sec
[info]                  ·gc.alloc.rate.norm:              5576.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2342.435 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5708.881 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.254 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 648478.758 ops/s
[info]                  ·gc.alloc.rate:                   2297.475 MB/sec
[info]                  ·gc.alloc.rate.norm:              5576.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2357.496 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5721.672 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.303 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 647277.346 ops/s
[info]                  ·gc.alloc.rate:                   2293.154 MB/sec
[info]                  ·gc.alloc.rate.norm:              5576.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2368.133 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5758.318 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.202 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 644590.645 ops/s
[info]                  ·gc.alloc.rate:                   2283.741 MB/sec
[info]                  ·gc.alloc.rate.norm:              5576.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2035.121 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4968.969 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.152 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 638223.833 ops/s
[info]                  ·gc.alloc.rate:                   2261.108 MB/sec
[info]                  ·gc.alloc.rate.norm:              5576.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2378.108 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5864.528 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.308 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce":
[info]   644816.678 ±(99.9%) 15338.306 ops/s [Average]
[info]   (min, avg, max) = (638223.833, 644816.678, 648478.758), stdev = 3983.309
[info]   CI (99.9%): [629478.372, 660154.984] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.alloc.rate":
[info]   2284.678 ±(99.9%) 54.542 MB/sec [Average]
[info]   (min, avg, max) = (2261.108, 2284.678, 2297.475), stdev = 14.164
[info]   CI (99.9%): [2230.136, 2339.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5576.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5576.001, 5576.001, 5576.001), stdev = 0.001
[info]   CI (99.9%): [5576.001, 5576.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2296.258 ±(99.9%) 564.419 MB/sec [Average]
[info]   (min, avg, max) = (2035.121, 2296.258, 2378.108), stdev = 146.578
[info]   CI (99.9%): [1731.839, 2860.677] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5604.474 ±(99.9%) 1388.102 B/op [Average]
[info]   (min, avg, max) = (4968.969, 5604.474, 5864.528), stdev = 360.486
[info]   CI (99.9%): [4216.372, 6992.575] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.100 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.100, 0.125), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.244 ±(99.9%) 0.257 B/op [Average]
[info]   (min, avg, max) = (0.152, 0.244, 0.308), stdev = 0.067
[info]   CI (99.9%): [≈ 0, 0.501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.count":
[info]   34.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 7.000), stdev = 0.447
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala
[info] # Run progress: 81.16% complete, ETA 00:11:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4122537.006 ops/s
[info] # Warmup Iteration   2: 4262571.523 ops/s
[info] # Warmup Iteration   3: 4534860.270 ops/s
[info] Iteration   1: 4540962.492 ops/s
[info]                  ·gc.alloc.rate:                   1131.512 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          999.020 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     346.100 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.014 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 4365883.462 ops/s
[info]                  ·gc.alloc.rate:                   1087.451 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          999.901 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     360.440 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 4598399.261 ops/s
[info]                  ·gc.alloc.rate:                   1145.362 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.722 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     457.835 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.021 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 4503915.755 ops/s
[info]                  ·gc.alloc.rate:                   1121.812 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1006.552 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     351.724 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.022 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 4378647.151 ops/s
[info]                  ·gc.alloc.rate:                   1090.571 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1008.871 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     362.634 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.030 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala":
[info]   4477561.624 ±(99.9%) 392558.133 ops/s [Average]
[info]   (min, avg, max) = (4365883.462, 4477561.624, 4598399.261), stdev = 101946.100
[info]   CI (99.9%): [4085003.491, 4870119.757] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1115.342 ±(99.9%) 98.097 MB/sec [Average]
[info]   (min, avg, max) = (1087.451, 1115.342, 1145.362), stdev = 25.476
[info]   CI (99.9%): [1017.244, 1213.439] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   392.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (392.000, 392.000, 392.000), stdev = 0.001
[info]   CI (99.9%): [392.000, 392.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1070.413 ±(99.9%) 575.631 MB/sec [Average]
[info]   (min, avg, max) = (999.020, 1070.413, 1337.722), stdev = 149.490
[info]   CI (99.9%): [494.782, 1646.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   375.747 ±(99.9%) 178.555 B/op [Average]
[info]   (min, avg, max) = (346.100, 375.747, 457.835), stdev = 46.370
[info]   CI (99.9%): [197.191, 554.302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.058 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.058, 0.083), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.021 ±(99.9%) 0.024 B/op [Average]
[info]   (min, avg, max) = (0.014, 0.021, 0.030), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson
[info] # Run progress: 81.51% complete, ETA 00:11:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 133745.566 ops/s
[info] # Warmup Iteration   2: 352724.983 ops/s
[info] # Warmup Iteration   3: 352398.185 ops/s
[info] Iteration   1: 361073.022 ops/s
[info]                  ·gc.alloc.rate:                   1877.626 MB/sec
[info]                  ·gc.alloc.rate.norm:              8184.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1971.152 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8591.648 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.726 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 360514.376 ops/s
[info]                  ·gc.alloc.rate:                   1875.016 MB/sec
[info]                  ·gc.alloc.rate.norm:              8184.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1991.495 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8692.403 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.727 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 362804.254 ops/s
[info]                  ·gc.alloc.rate:                   1887.413 MB/sec
[info]                  ·gc.alloc.rate.norm:              8184.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1673.759 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7257.576 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.361 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 363676.499 ops/s
[info]                  ·gc.alloc.rate:                   1891.400 MB/sec
[info]                  ·gc.alloc.rate.norm:              8184.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020.081 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8740.800 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.180 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 363094.118 ops/s
[info]                  ·gc.alloc.rate:                   1888.382 MB/sec
[info]                  ·gc.alloc.rate.norm:              8184.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2028.413 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8790.878 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.451 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson":
[info]   362232.454 ±(99.9%) 5255.375 ops/s [Average]
[info]   (min, avg, max) = (360514.376, 362232.454, 363676.499), stdev = 1364.804
[info]   CI (99.9%): [356977.079, 367487.828] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1883.968 ±(99.9%) 27.696 MB/sec [Average]
[info]   (min, avg, max) = (1875.016, 1883.968, 1891.400), stdev = 7.193
[info]   CI (99.9%): [1856.271, 1911.664] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   8184.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8184.001, 8184.001, 8184.001), stdev = 0.001
[info]   CI (99.9%): [8184.001, 8184.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1936.980 ±(99.9%) 573.380 MB/sec [Average]
[info]   (min, avg, max) = (1673.759, 1936.980, 2028.413), stdev = 148.905
[info]   CI (99.9%): [1363.600, 2510.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   8414.661 ±(99.9%) 2506.778 B/op [Average]
[info]   (min, avg, max) = (7257.576, 8414.661, 8790.878), stdev = 651.002
[info]   CI (99.9%): [5907.883, 10921.439] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.112 ±(99.9%) 0.209 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.112, 0.167), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.489 ±(99.9%) 0.915 B/op [Average]
[info]   (min, avg, max) = (0.180, 0.489, 0.727), stdev = 0.238
[info]   CI (99.9%): [≈ 0, 1.404] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.200, 7.000), stdev = 0.837
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce
[info] # Run progress: 81.85% complete, ETA 00:11:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 253433.001 ops/s
[info] # Warmup Iteration   2: 468747.115 ops/s
[info] # Warmup Iteration   3: 481353.065 ops/s
[info] Iteration   1: 484176.873 ops/s
[info]                  ·gc.alloc.rate:                   1319.195 MB/sec
[info]                  ·gc.alloc.rate.norm:              4288.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1321.723 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4296.218 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.068 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 487120.351 ops/s
[info]                  ·gc.alloc.rate:                   1327.151 MB/sec
[info]                  ·gc.alloc.rate.norm:              4288.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1327.324 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4288.560 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.269 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 477363.555 ops/s
[info]                  ·gc.alloc.rate:                   1300.589 MB/sec
[info]                  ·gc.alloc.rate.norm:              4288.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.984 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4398.104 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.137 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 474722.857 ops/s
[info]                  ·gc.alloc.rate:                   1293.362 MB/sec
[info]                  ·gc.alloc.rate.norm:              4288.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.273 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4443.530 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.207 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 483822.292 ops/s
[info]                  ·gc.alloc.rate:                   1318.305 MB/sec
[info]                  ·gc.alloc.rate.norm:              4288.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.787 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4377.392 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.135 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce":
[info]   481441.186 ±(99.9%) 19931.463 ops/s [Average]
[info]   (min, avg, max) = (474722.857, 481441.186, 487120.351), stdev = 5176.138
[info]   CI (99.9%): [461509.723, 501372.648] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1311.720 ±(99.9%) 54.398 MB/sec [Average]
[info]   (min, avg, max) = (1293.362, 1311.720, 1327.151), stdev = 14.127
[info]   CI (99.9%): [1257.322, 1366.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   4288.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4288.001, 4288.001, 4288.001), stdev = 0.001
[info]   CI (99.9%): [4288.001, 4288.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1333.818 ±(99.9%) 37.204 MB/sec [Average]
[info]   (min, avg, max) = (1321.723, 1333.818, 1345.787), stdev = 9.662
[info]   CI (99.9%): [1296.614, 1371.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4360.761 ±(99.9%) 257.595 B/op [Average]
[info]   (min, avg, max) = (4288.560, 4360.761, 4443.530), stdev = 66.897
[info]   CI (99.9%): [4103.165, 4618.356] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.050 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.050, 0.083), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.163 ±(99.9%) 0.296 B/op [Average]
[info]   (min, avg, max) = (0.068, 0.163, 0.269), stdev = 0.077
[info]   CI (99.9%): [≈ 0, 0.460] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala
[info] # Run progress: 82.19% complete, ETA 00:11:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3053272.760 ops/s
[info] # Warmup Iteration   2: 3487510.267 ops/s
[info] # Warmup Iteration   3: 3544856.229 ops/s
[info] Iteration   1: 3572178.725 ops/s
[info]                  ·gc.alloc.rate:                   581.160 MB/sec
[info]                  ·gc.alloc.rate.norm:              256.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.956 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     292.912 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.751 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.771 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 3600642.166 ops/s
[info]                  ·gc.alloc.rate:                   585.901 MB/sec
[info]                  ·gc.alloc.rate.norm:              256.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.882 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     145.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 3594372.920 ops/s
[info]                  ·gc.alloc.rate:                   584.632 MB/sec
[info]                  ·gc.alloc.rate.norm:              256.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.479 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     290.526 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.036 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 3572348.245 ops/s
[info]                  ·gc.alloc.rate:               581.083 MB/sec
[info]                  ·gc.alloc.rate.norm:          256.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.815 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 292.448 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 3568867.994 ops/s
[info]                  ·gc.alloc.rate:                   580.511 MB/sec
[info]                  ·gc.alloc.rate.norm:              256.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.488 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     293.034 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.037 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala":
[info]   3581682.010 ±(99.9%) 56532.952 ops/s [Average]
[info]   (min, avg, max) = (3568867.994, 3581682.010, 3600642.166), stdev = 14681.428
[info]   CI (99.9%): [3525149.058, 3638214.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   582.657 ±(99.9%) 9.382 MB/sec [Average]
[info]   (min, avg, max) = (580.511, 582.657, 585.901), stdev = 2.437
[info]   CI (99.9%): [573.275, 592.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   256.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (256.000, 256.000, 256.000), stdev = 0.001
[info]   CI (99.9%): [256.000, 256.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   597.724 ±(99.9%) 572.250 MB/sec [Average]
[info]   (min, avg, max) = (331.882, 597.724, 664.956), stdev = 148.612
[info]   CI (99.9%): [25.474, 1169.974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   262.786 ±(99.9%) 253.551 B/op [Average]
[info]   (min, avg, max) = (145.010, 262.786, 293.034), stdev = 65.846
[info]   CI (99.9%): [9.235, 516.337] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.392 ±(99.9%) 2.929 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.392, 1.751), stdev = 0.761
[info]   CI (99.9%): [≈ 0, 3.320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.173 ±(99.9%) 1.290 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.173, 0.771), stdev = 0.335
[info]   CI (99.9%): [≈ 0, 1.463] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson
[info] # Run progress: 82.53% complete, ETA 00:10:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 94127.072 ops/s
[info] # Warmup Iteration   2: 318520.002 ops/s
[info] # Warmup Iteration   3: 324515.372 ops/s
[info] Iteration   1: 316010.659 ops/s
[info]                  ·gc.alloc.rate:                   1164.667 MB/sec
[info]                  ·gc.alloc.rate.norm:              5800.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1303.164 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6489.711 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.311 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 324284.479 ops/s
[info]                  ·gc.alloc.rate:                   1195.442 MB/sec
[info]                  ·gc.alloc.rate.norm:              5800.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1310.467 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6358.073 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.404 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 324382.286 ops/s
[info]                  ·gc.alloc.rate:                   1195.399 MB/sec
[info]                  ·gc.alloc.rate.norm:              5800.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          987.576 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4791.656 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.303 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 315422.635 ops/s
[info]                  ·gc.alloc.rate:                   1162.430 MB/sec
[info]                  ·gc.alloc.rate.norm:              5800.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.703 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6614.657 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.104 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 318459.869 ops/s
[info]                  ·gc.alloc.rate:                   1173.623 MB/sec
[info]                  ·gc.alloc.rate.norm:              5800.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          999.592 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4939.948 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.514 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson":
[info]   319711.986 ±(99.9%) 16827.087 ops/s [Average]
[info]   (min, avg, max) = (315422.635, 319711.986, 324382.286), stdev = 4369.941
[info]   CI (99.9%): [302884.899, 336539.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1178.312 ±(99.9%) 62.263 MB/sec [Average]
[info]   (min, avg, max) = (1162.430, 1178.312, 1195.442), stdev = 16.169
[info]   CI (99.9%): [1116.049, 1240.575] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5800.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5800.001, 5800.001, 5800.001), stdev = 0.001
[info]   CI (99.9%): [5800.001, 5800.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1185.300 ±(99.9%) 674.835 MB/sec [Average]
[info]   (min, avg, max) = (987.576, 1185.300, 1325.703), stdev = 175.253
[info]   CI (99.9%): [510.465, 1860.135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   5838.809 ±(99.9%) 3443.974 B/op [Average]
[info]   (min, avg, max) = (4791.656, 5838.809, 6614.657), stdev = 894.389
[info]   CI (99.9%): [2394.835, 9282.783] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.067, 0.104), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.327 ±(99.9%) 0.583 B/op [Average]
[info]   (min, avg, max) = (0.104, 0.327, 0.514), stdev = 0.151
[info]   CI (99.9%): [≈ 0, 0.910] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce
[info] # Run progress: 82.88% complete, ETA 00:10:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1010584.360 ops/s
[info] # Warmup Iteration   2: 1930793.560 ops/s
[info] # Warmup Iteration   3: 1968234.185 ops/s
[info] Iteration   1: 1975466.274 ops/s
[info]                  ·gc.alloc.rate:                   3172.860 MB/sec
[info]                  ·gc.alloc.rate.norm:              2528.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3029.769 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2413.991 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.133 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 1985693.809 ops/s
[info]                  ·gc.alloc.rate:                   3190.055 MB/sec
[info]                  ·gc.alloc.rate.norm:              2528.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3387.294 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2684.305 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.082 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 1965980.495 ops/s
[info]                  ·gc.alloc.rate:                   3158.181 MB/sec
[info]                  ·gc.alloc.rate.norm:              2528.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3057.377 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2447.311 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.067 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 1993653.062 ops/s
[info]                  ·gc.alloc.rate:                   3202.474 MB/sec
[info]                  ·gc.alloc.rate.norm:              2528.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3063.119 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2417.994 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.082 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 1970937.122 ops/s
[info]                  ·gc.alloc.rate:                   3165.724 MB/sec
[info]                  ·gc.alloc.rate.norm:              2528.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3403.947 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2718.234 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.050 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce":
[info]   1978346.152 ±(99.9%) 43239.939 ops/s [Average]
[info]   (min, avg, max) = (1965980.495, 1978346.152, 1993653.062), stdev = 11229.275
[info]   CI (99.9%): [1935106.213, 2021586.091] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.alloc.rate":
[info]   3177.859 ±(99.9%) 69.794 MB/sec [Average]
[info]   (min, avg, max) = (3158.181, 3177.859, 3202.474), stdev = 18.125
[info]   CI (99.9%): [3108.064, 3247.653] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2528.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2528.000, 2528.000, 2528.000), stdev = 0.001
[info]   CI (99.9%): [2528.000, 2528.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   3188.301 ±(99.9%) 730.724 MB/sec [Average]
[info]   (min, avg, max) = (3029.769, 3188.301, 3403.947), stdev = 189.767
[info]   CI (99.9%): [2457.577, 3919.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2536.367 ±(99.9%) 583.599 B/op [Average]
[info]   (min, avg, max) = (2413.991, 2536.367, 2718.234), stdev = 151.559
[info]   CI (99.9%): [1952.769, 3119.966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.104 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.104, 0.167), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.083 ±(99.9%) 0.119 B/op [Average]
[info]   (min, avg, max) = (0.050, 0.083, 0.133), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.count":
[info]   47.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (9.000, 9.400, 10.000), stdev = 0.548
[info]   CI (99.9%): [47.000, 47.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.400, 8.000), stdev = 0.548
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala
[info] # Run progress: 83.22% complete, ETA 00:10:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 72525.770 ops/s
[info] # Warmup Iteration   2: 305089.740 ops/s
[info] # Warmup Iteration   3: 311005.273 ops/s
[info] Iteration   1: 311597.958 ops/s
[info]                  ·gc.alloc.rate:                   733.306 MB/sec
[info]                  ·gc.alloc.rate.norm:              3704.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          650.806 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3287.283 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.338 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.810 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 314142.946 ops/s
[info]                  ·gc.alloc.rate:                   739.327 MB/sec
[info]                  ·gc.alloc.rate.norm:              3704.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          977.583 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4897.658 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.417 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 316605.561 ops/s
[info]                  ·gc.alloc.rate:                   745.446 MB/sec
[info]                  ·gc.alloc.rate.norm:              3704.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          653.095 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3245.125 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.207 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 315562.773 ops/s
[info]                  ·gc.alloc.rate:                   742.670 MB/sec
[info]                  ·gc.alloc.rate.norm:              3704.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.182 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3262.679 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.208 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 315755.576 ops/s
[info]                  ·gc.alloc.rate:               743.467 MB/sec
[info]                  ·gc.alloc.rate.norm:          3704.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      656.466 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3270.554 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala":
[info]   314732.963 ±(99.9%) 7559.756 ops/s [Average]
[info]   (min, avg, max) = (311597.958, 314732.963, 316605.561), stdev = 1963.245
[info]   CI (99.9%): [307173.207, 322292.719] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   740.843 ±(99.9%) 18.317 MB/sec [Average]
[info]   (min, avg, max) = (733.306, 740.843, 745.446), stdev = 4.757
[info]   CI (99.9%): [722.526, 759.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   3704.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3704.001, 3704.001, 3704.001), stdev = 0.001
[info]   CI (99.9%): [3704.001, 3704.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   718.426 ±(99.9%) 557.909 MB/sec [Average]
[info]   (min, avg, max) = (650.806, 718.426, 977.583), stdev = 144.887
[info]   CI (99.9%): [160.517, 1276.336] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   3592.660 ±(99.9%) 2809.713 B/op [Average]
[info]   (min, avg, max) = (3245.125, 3592.660, 4897.658), stdev = 729.674
[info]   CI (99.9%): [782.946, 6402.373] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.501 ±(99.9%) 3.956 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.501, 2.338), stdev = 1.027
[info]   CI (99.9%): [≈ 0, 4.457] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.528 ±(99.9%) 19.987 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.528, 11.810), stdev = 5.190
[info]   CI (99.9%): [≈ 0, 22.515] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 4.000), stdev = 0.894
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala
[info] # Run progress: 83.56% complete, ETA 00:10:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 658836.806 ops/s
[info] # Warmup Iteration   2: 707381.371 ops/s
[info] # Warmup Iteration   3: 715028.939 ops/s
[info] Iteration   1: 720312.322 ops/s
[info]                  ·gc.alloc.rate:                   651.701 MB/sec
[info]                  ·gc.alloc.rate.norm:              1424.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.807 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1463.563 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.273 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 708321.974 ops/s
[info]                  ·gc.alloc.rate:                   641.116 MB/sec
[info]                  ·gc.alloc.rate.norm:              1424.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.077 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1486.105 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.185 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 725149.233 ops/s
[info]                  ·gc.alloc.rate:                   656.564 MB/sec
[info]                  ·gc.alloc.rate.norm:              1424.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.604 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1450.113 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.181 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 676813.918 ops/s
[info]                  ·gc.alloc.rate:               612.663 MB/sec
[info]                  ·gc.alloc.rate.norm:          1424.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      334.574 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 777.644 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 697757.523 ops/s
[info]                  ·gc.alloc.rate:                   631.554 MB/sec
[info]                  ·gc.alloc.rate.norm:              1424.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.750 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1510.124 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.141 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala":
[info]   705670.994 ±(99.9%) 74471.689 ops/s [Average]
[info]   (min, avg, max) = (676813.918, 705670.994, 725149.233), stdev = 19340.061
[info]   CI (99.9%): [631199.305, 780142.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   638.720 ±(99.9%) 67.330 MB/sec [Average]
[info]   (min, avg, max) = (612.663, 638.720, 656.564), stdev = 17.485
[info]   CI (99.9%): [571.390, 706.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1424.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1424.001, 1424.001, 1424.001), stdev = 0.001
[info]   CI (99.9%): [1424.001, 1424.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   602.362 ±(99.9%) 576.437 MB/sec [Average]
[info]   (min, avg, max) = (334.574, 602.362, 669.807), stdev = 149.699
[info]   CI (99.9%): [25.926, 1178.799] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1337.510 ±(99.9%) 1208.351 B/op [Average]
[info]   (min, avg, max) = (777.644, 1337.510, 1510.124), stdev = 313.805
[info]   CI (99.9%): [129.159, 2545.861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.176 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.071, 0.125), stdev = 0.046
[info]   CI (99.9%): [≈ 0, 0.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.156 ±(99.9%) 0.384 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.156, 0.273), stdev = 0.100
[info]   CI (99.9%): [≈ 0, 0.539] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless
[info] # Run progress: 83.90% complete, ETA 00:10:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3259802.375 ops/s
[info] # Warmup Iteration   2: 3553821.978 ops/s
[info] # Warmup Iteration   3: 3633590.686 ops/s
[info] Iteration   1: 3598599.154 ops/s
[info]                  ·gc.alloc.rate:                   2140.518 MB/sec
[info]                  ·gc.alloc.rate.norm:              936.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019.370 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     883.025 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.055 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 3660025.750 ops/s
[info]                  ·gc.alloc.rate:                   2176.692 MB/sec
[info]                  ·gc.alloc.rate.norm:              936.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2027.061 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     871.657 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.054 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 3642877.166 ops/s
[info]                  ·gc.alloc.rate:                   2166.498 MB/sec
[info]                  ·gc.alloc.rate.norm:              936.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2372.120 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1024.836 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.045 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 3623584.418 ops/s
[info]                  ·gc.alloc.rate:                   2154.954 MB/sec
[info]                  ·gc.alloc.rate.norm:              936.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2037.686 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     885.065 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.036 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 3709114.011 ops/s
[info]                  ·gc.alloc.rate:                   2206.430 MB/sec
[info]                  ·gc.alloc.rate.norm:              936.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2379.432 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1009.390 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.044 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless":
[info]   3646840.100 ±(99.9%) 160341.546 ops/s [Average]
[info]   (min, avg, max) = (3598599.154, 3646840.100, 3709114.011), stdev = 41640.190
[info]   CI (99.9%): [3486498.554, 3807181.646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate":
[info]   2169.019 ±(99.9%) 95.783 MB/sec [Average]
[info]   (min, avg, max) = (2140.518, 2169.019, 2206.430), stdev = 24.874
[info]   CI (99.9%): [2073.236, 2264.801] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate.norm":
[info]   936.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (936.000, 936.000, 936.000), stdev = 0.001
[info]   CI (99.9%): [936.000, 936.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space":
[info]   2167.134 ±(99.9%) 733.901 MB/sec [Average]
[info]   (min, avg, max) = (2019.370, 2167.134, 2379.432), stdev = 190.592
[info]   CI (99.9%): [1433.232, 2901.035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space.norm":
[info]   934.794 ±(99.9%) 290.790 B/op [Average]
[info]   (min, avg, max) = (871.657, 934.794, 1024.836), stdev = 75.517
[info]   CI (99.9%): [644.005, 1225.584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space":
[info]   0.108 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.108, 0.125), stdev = 0.017
[info]   CI (99.9%): [0.041, 0.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space.norm":
[info]   0.047 ±(99.9%) 0.029 B/op [Average]
[info]   (min, avg, max) = (0.036, 0.047, 0.055), stdev = 0.008
[info]   CI (99.9%): [0.017, 0.076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.count":
[info]   32.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 6.000), stdev = 0.837
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump
[info] # Run progress: 84.25% complete, ETA 00:09:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6425415.238 ops/s
[info] # Warmup Iteration   2: 6818678.241 ops/s
[info] # Warmup Iteration   3: 7013258.405 ops/s
[info] Iteration   1: 6955438.942 ops/s
[info]                  ·gc.alloc.rate:                   813.109 MB/sec
[info]                  ·gc.alloc.rate.norm:              184.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1003.182 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     227.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.028 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 7082946.493 ops/s
[info]                  ·gc.alloc.rate:                   828.068 MB/sec
[info]                  ·gc.alloc.rate.norm:              184.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.834 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     148.617 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.019 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 6752824.658 ops/s
[info]                  ·gc.alloc.rate:                   789.754 MB/sec
[info]                  ·gc.alloc.rate.norm:              184.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.733 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     156.037 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 7068196.851 ops/s
[info]                  ·gc.alloc.rate:                   826.555 MB/sec
[info]                  ·gc.alloc.rate.norm:              184.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1005.453 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     223.825 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.023 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 7015525.888 ops/s
[info]                  ·gc.alloc.rate:                   820.145 MB/sec
[info]                  ·gc.alloc.rate.norm:              184.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.461 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     150.643 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.014 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump":
[info]   6974986.566 ±(99.9%) 515630.419 ops/s [Average]
[info]   (min, avg, max) = (6752824.658, 6974986.566, 7082946.493), stdev = 133907.582
[info]   CI (99.9%): [6459356.147, 7490616.985] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate":
[info]   815.526 ±(99.9%) 59.974 MB/sec [Average]
[info]   (min, avg, max) = (789.754, 815.526, 828.068), stdev = 15.575
[info]   CI (99.9%): [755.552, 875.500] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate.norm":
[info]   184.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (184.000, 184.000, 184.000), stdev = 0.001
[info]   CI (99.9%): [184.000, 184.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space":
[info]   803.732 ±(99.9%) 705.100 MB/sec [Average]
[info]   (min, avg, max) = (668.834, 803.732, 1005.453), stdev = 183.112
[info]   CI (99.9%): [98.632, 1508.833] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space.norm":
[info]   181.227 ±(99.9%) 155.751 B/op [Average]
[info]   (min, avg, max) = (148.617, 181.227, 227.012), stdev = 40.448
[info]   CI (99.9%): [25.476, 336.977] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.079, 0.125), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space.norm":
[info]   0.018 ±(99.9%) 0.034 B/op [Average]
[info]   (min, avg, max) = (0.005, 0.018, 0.028), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson
[info] # Run progress: 84.59% complete, ETA 00:09:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 21219.207 ops/s
[info] # Warmup Iteration   2: 175156.789 ops/s
[info] # Warmup Iteration   3: 186114.197 ops/s
[info] Iteration   1: 190951.289 ops/s
[info]                  ·gc.alloc.rate:                   1593.214 MB/sec
[info]                  ·gc.alloc.rate.norm:              13128.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1632.134 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13448.702 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.515 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 189431.845 ops/s
[info]                  ·gc.alloc.rate:                   1580.211 MB/sec
[info]                  ·gc.alloc.rate.norm:              13128.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1645.825 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13673.108 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.038 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 186247.647 ops/s
[info]                  ·gc.alloc.rate:                   1553.931 MB/sec
[info]                  ·gc.alloc.rate.norm:              13128.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1327.274 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11213.151 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.528 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 188626.565 ops/s
[info]                  ·gc.alloc.rate:                   1573.411 MB/sec
[info]                  ·gc.alloc.rate.norm:              13128.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1669.717 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13931.546 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.695 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 184128.770 ops/s
[info]                  ·gc.alloc.rate:                   1535.934 MB/sec
[info]                  ·gc.alloc.rate.norm:              13128.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1679.731 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14357.074 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.890 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson":
[info]   187877.223 ±(99.9%) 10392.221 ops/s [Average]
[info]   (min, avg, max) = (184128.770, 187877.223, 190951.289), stdev = 2698.827
[info]   CI (99.9%): [177485.002, 198269.445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1567.340 ±(99.9%) 86.921 MB/sec [Average]
[info]   (min, avg, max) = (1535.934, 1567.340, 1593.214), stdev = 22.573
[info]   CI (99.9%): [1480.420, 1654.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   13128.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (13128.002, 13128.002, 13128.002), stdev = 0.001
[info]   CI (99.9%): [13128.002, 13128.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1590.936 ±(99.9%) 572.176 MB/sec [Average]
[info]   (min, avg, max) = (1327.274, 1590.936, 1679.731), stdev = 148.592
[info]   CI (99.9%): [1018.761, 2163.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   13324.716 ±(99.9%) 4727.620 B/op [Average]
[info]   (min, avg, max) = (11213.151, 13324.716, 14357.074), stdev = 1227.748
[info]   CI (99.9%): [8597.096, 18052.336] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.087, 0.125), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.733 ±(99.9%) 0.879 B/op [Average]
[info]   (min, avg, max) = (0.515, 0.733, 1.038), stdev = 0.228
[info]   CI (99.9%): [≈ 0, 1.612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 6.000), stdev = 0.837
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce
[info] # Run progress: 84.93% complete, ETA 00:09:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 487721.165 ops/s
[info] # Warmup Iteration   2: 713805.662 ops/s
[info] # Warmup Iteration   3: 722378.221 ops/s
[info] Iteration   1: 739369.022 ops/s
[info]                  ·gc.alloc.rate:                   2857.529 MB/sec
[info]                  ·gc.alloc.rate.norm:              6080.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3025.906 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6438.258 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.443 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 745364.771 ops/s
[info]                  ·gc.alloc.rate:                   2880.089 MB/sec
[info]                  ·gc.alloc.rate.norm:              6080.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2706.539 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5713.628 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.308 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 738156.316 ops/s
[info]                  ·gc.alloc.rate:                   2851.717 MB/sec
[info]                  ·gc.alloc.rate.norm:              6080.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3054.572 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6512.497 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.178 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 737596.740 ops/s
[info]                  ·gc.alloc.rate:                   2850.741 MB/sec
[info]                  ·gc.alloc.rate.norm:              6080.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2721.124 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5803.556 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.178 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 738584.114 ops/s
[info]                  ·gc.alloc.rate:                   2853.166 MB/sec
[info]                  ·gc.alloc.rate.norm:              6080.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3063.617 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6528.465 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.177 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce":
[info]   739814.192 ±(99.9%) 12205.059 ops/s [Average]
[info]   (min, avg, max) = (737596.740, 739814.192, 745364.771), stdev = 3169.615
[info]   CI (99.9%): [727609.134, 752019.251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.alloc.rate":
[info]   2858.648 ±(99.9%) 47.222 MB/sec [Average]
[info]   (min, avg, max) = (2850.741, 2858.648, 2880.089), stdev = 12.263
[info]   CI (99.9%): [2811.426, 2905.871] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   6080.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6080.001, 6080.001, 6080.001), stdev = 0.001
[info]   CI (99.9%): [6080.001, 6080.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2914.352 ±(99.9%) 707.171 MB/sec [Average]
[info]   (min, avg, max) = (2706.539, 2914.352, 3063.617), stdev = 183.650
[info]   CI (99.9%): [2207.181, 3621.523] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   6199.281 ±(99.9%) 1559.431 B/op [Average]
[info]   (min, avg, max) = (5713.628, 6199.281, 6528.465), stdev = 404.979
[info]   CI (99.9%): [4639.850, 7758.712] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.121 ±(99.9%) 0.215 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.121, 0.208), stdev = 0.056
[info]   CI (99.9%): [≈ 0, 0.336] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.257 ±(99.9%) 0.456 B/op [Average]
[info]   (min, avg, max) = (0.177, 0.257, 0.443), stdev = 0.118
[info]   CI (99.9%): [≈ 0, 0.713] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.count":
[info]   43.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.600, 9.000), stdev = 0.548
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.800, 10.000), stdev = 1.304
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala
[info] # Run progress: 85.27% complete, ETA 00:09:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2792159.548 ops/s
[info] # Warmup Iteration   2: 2792924.008 ops/s
[info] # Warmup Iteration   3: 2821794.541 ops/s
[info] Iteration   1: 2821991.787 ops/s
[info]                  ·gc.alloc.rate:                   1822.199 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.552 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1119.905 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.035 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 2811258.762 ops/s
[info]                  ·gc.alloc.rate:                   1815.012 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1681.232 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     941.113 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.082 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 2765586.282 ops/s
[info]                  ·gc.alloc.rate:                   1785.300 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1687.678 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     960.444 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.036 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 2724207.242 ops/s
[info]                  ·gc.alloc.rate:                   1759.318 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2032.192 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1173.584 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.072 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 2723038.320 ops/s
[info]                  ·gc.alloc.rate:                   1757.865 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1696.035 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     980.264 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.048 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala":
[info]   2769216.479 ±(99.9%) 179831.862 ops/s [Average]
[info]   (min, avg, max) = (2723038.320, 2769216.479, 2821991.787), stdev = 46701.763
[info]   CI (99.9%): [2589384.617, 2949048.341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1787.939 ±(99.9%) 116.115 MB/sec [Average]
[info]   (min, avg, max) = (1757.865, 1787.939, 1822.199), stdev = 30.155
[info]   CI (99.9%): [1671.824, 1904.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1016.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1016.000, 1016.000, 1016.000), stdev = 0.001
[info]   CI (99.9%): [1016.000, 1016.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1821.138 ±(99.9%) 701.368 MB/sec [Average]
[info]   (min, avg, max) = (1681.232, 1821.138, 2032.192), stdev = 182.143
[info]   CI (99.9%): [1119.770, 2522.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1035.062 ±(99.9%) 402.865 B/op [Average]
[info]   (min, avg, max) = (941.113, 1035.062, 1173.584), stdev = 104.623
[info]   CI (99.9%): [632.197, 1437.927] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.096 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.096, 0.146), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.054 ±(99.9%) 0.082 B/op [Average]
[info]   (min, avg, max) = (0.035, 0.054, 0.082), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson
[info] # Run progress: 85.62% complete, ETA 00:08:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 59174.721 ops/s
[info] # Warmup Iteration   2: 252692.513 ops/s
[info] # Warmup Iteration   3: 256236.003 ops/s
[info] Iteration   1: 255794.566 ops/s
[info]                  ·gc.alloc.rate:                   1829.410 MB/sec
[info]                  ·gc.alloc.rate.norm:              11256.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1640.374 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10092.905 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.640 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 259218.774 ops/s
[info]                  ·gc.alloc.rate:                   1854.376 MB/sec
[info]                  ·gc.alloc.rate.norm:              11256.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1988.300 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12068.915 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.885 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 259877.489 ops/s
[info]                  ·gc.alloc.rate:                   1858.738 MB/sec
[info]                  ·gc.alloc.rate.norm:              11256.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1670.476 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10115.938 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.378 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 259127.627 ops/s
[info]                  ·gc.alloc.rate:                   1853.238 MB/sec
[info]                  ·gc.alloc.rate.norm:              11256.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017.088 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12251.175 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.885 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 259561.547 ops/s
[info]                  ·gc.alloc.rate:                   1856.813 MB/sec
[info]                  ·gc.alloc.rate.norm:              11256.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1689.101 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10239.329 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.505 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson":
[info]   258716.001 ±(99.9%) 6391.663 ops/s [Average]
[info]   (min, avg, max) = (255794.566, 258716.001, 259877.489), stdev = 1659.894
[info]   CI (99.9%): [252324.338, 265107.663] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1850.515 ±(99.9%) 46.169 MB/sec [Average]
[info]   (min, avg, max) = (1829.410, 1850.515, 1858.738), stdev = 11.990
[info]   CI (99.9%): [1804.346, 1896.684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   11256.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (11256.002, 11256.002, 11256.002), stdev = 0.001
[info]   CI (99.9%): [11256.001, 11256.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1801.068 ±(99.9%) 712.977 MB/sec [Average]
[info]   (min, avg, max) = (1640.374, 1801.068, 2017.088), stdev = 185.158
[info]   CI (99.9%): [1088.091, 2514.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   10953.653 ±(99.9%) 4253.300 B/op [Average]
[info]   (min, avg, max) = (10092.905, 10953.653, 12251.175), stdev = 1104.568
[info]   CI (99.9%): [6700.353, 15206.952] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.108 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.108, 0.146), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.659 ±(99.9%) 0.872 B/op [Average]
[info]   (min, avg, max) = (0.378, 0.659, 0.885), stdev = 0.226
[info]   CI (99.9%): [≈ 0, 1.530] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 7.000), stdev = 1.140
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce
[info] # Run progress: 85.96% complete, ETA 00:08:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 502177.611 ops/s
[info] # Warmup Iteration   2: 818206.362 ops/s
[info] # Warmup Iteration   3: 829915.673 ops/s
[info] Iteration   1: 835408.588 ops/s
[info]                  ·gc.alloc.rate:                   1928.767 MB/sec
[info]                  ·gc.alloc.rate.norm:              3632.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1996.744 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3760.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.196 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 844975.935 ops/s
[info]                  ·gc.alloc.rate:                   1949.979 MB/sec
[info]                  ·gc.alloc.rate.norm:              3632.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.854 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3743.523 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.271 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 836118.879 ops/s
[info]                  ·gc.alloc.rate:                   1929.803 MB/sec
[info]                  ·gc.alloc.rate.norm:              3632.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1684.575 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3170.466 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.196 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 849543.663 ops/s
[info]                  ·gc.alloc.rate:                   1960.514 MB/sec
[info]                  ·gc.alloc.rate.norm:              3632.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2028.109 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3757.224 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.154 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 837460.789 ops/s
[info]                  ·gc.alloc.rate:                   1932.869 MB/sec
[info]                  ·gc.alloc.rate.norm:              3632.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2034.011 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3822.054 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.196 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce":
[info]   840701.571 ±(99.9%) 24045.120 ops/s [Average]
[info]   (min, avg, max) = (835408.588, 840701.571, 849543.663), stdev = 6244.441
[info]   CI (99.9%): [816656.451, 864746.690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1940.387 ±(99.9%) 54.479 MB/sec [Average]
[info]   (min, avg, max) = (1928.767, 1940.387, 1960.514), stdev = 14.148
[info]   CI (99.9%): [1885.907, 1994.866] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   3632.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3632.001, 3632.001, 3632.001), stdev = 0.001
[info]   CI (99.9%): [3632.000, 3632.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1950.659 ±(99.9%) 575.587 MB/sec [Average]
[info]   (min, avg, max) = (1684.575, 1950.659, 2034.011), stdev = 149.478
[info]   CI (99.9%): [1375.071, 2526.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3650.655 ±(99.9%) 1040.205 B/op [Average]
[info]   (min, avg, max) = (3170.466, 3650.655, 3822.054), stdev = 270.138
[info]   CI (99.9%): [2610.450, 4690.860] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.108 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.108, 0.146), stdev = 0.023
[info]   CI (99.9%): [0.020, 0.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.203 ±(99.9%) 0.163 B/op [Average]
[info]   (min, avg, max) = (0.154, 0.203, 0.271), stdev = 0.042
[info]   CI (99.9%): [0.039, 0.366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 6.000), stdev = 0.894
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala
[info] # Run progress: 86.30% complete, ETA 00:08:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 640945.660 ops/s
[info] # Warmup Iteration   2: 1369675.326 ops/s
[info] # Warmup Iteration   3: 1387995.619 ops/s
[info] Iteration   1: 1425166.332 ops/s
[info]                  ·gc.alloc.rate:                   818.605 MB/sec
[info]                  ·gc.alloc.rate.norm:              904.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          973.279 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1074.809 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.138 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 1402741.586 ops/s
[info]                  ·gc.alloc.rate:                   806.025 MB/sec
[info]                  ·gc.alloc.rate.norm:              904.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          649.098 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     727.998 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.164 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1416772.400 ops/s
[info]                  ·gc.alloc.rate:                   813.856 MB/sec
[info]                  ·gc.alloc.rate.norm:              904.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          977.005 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1085.220 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.093 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1427974.551 ops/s
[info]                  ·gc.alloc.rate:                   820.236 MB/sec
[info]                  ·gc.alloc.rate.norm:              904.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          653.530 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     720.270 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.023 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 1422161.648 ops/s
[info]                  ·gc.alloc.rate:                   817.091 MB/sec
[info]                  ·gc.alloc.rate.norm:              904.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          985.203 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1089.994 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.092 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala":
[info]   1418963.303 ±(99.9%) 38402.994 ops/s [Average]
[info]   (min, avg, max) = (1402741.586, 1418963.303, 1427974.551), stdev = 9973.136
[info]   CI (99.9%): [1380560.310, 1457366.297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   815.163 ±(99.9%) 21.656 MB/sec [Average]
[info]   (min, avg, max) = (806.025, 815.163, 820.236), stdev = 5.624
[info]   CI (99.9%): [793.506, 836.819] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   904.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (904.000, 904.000, 904.000), stdev = 0.001
[info]   CI (99.9%): [904.000, 904.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   847.623 ±(99.9%) 690.280 MB/sec [Average]
[info]   (min, avg, max) = (649.098, 847.623, 985.203), stdev = 179.263
[info]   CI (99.9%): [157.343, 1537.903] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   939.658 ±(99.9%) 757.966 B/op [Average]
[info]   (min, avg, max) = (720.270, 939.658, 1089.994), stdev = 196.841
[info]   CI (99.9%): [181.693, 1697.624] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.185 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.092, 0.146), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.102 ±(99.9%) 0.207 B/op [Average]
[info]   (min, avg, max) = (0.023, 0.102, 0.164), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 4.000), stdev = 0.894
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala
[info] # Run progress: 86.64% complete, ETA 00:08:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3945410.923 ops/s
[info] # Warmup Iteration   2: 4397845.055 ops/s
[info] # Warmup Iteration   3: 4424762.427 ops/s
[info] Iteration   1: 4422680.734 ops/s
[info]                  ·gc.alloc.rate:                   337.202 MB/sec
[info]                  ·gc.alloc.rate.norm:              120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.584 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     182.057 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.007 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 4460078.139 ops/s
[info]                  ·gc.alloc.rate:               340.067 MB/sec
[info]                  ·gc.alloc.rate.norm:          120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.813 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 90.269 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 4463159.816 ops/s
[info]                  ·gc.alloc.rate:                   340.272 MB/sec
[info]                  ·gc.alloc.rate.norm:              120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.048 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     117.100 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.838 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.648 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 4453756.324 ops/s
[info]                  ·gc.alloc.rate:                   339.608 MB/sec
[info]                  ·gc.alloc.rate.norm:              120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.101 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     117.348 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.007 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 4437995.939 ops/s
[info]                  ·gc.alloc.rate:                   338.434 MB/sec
[info]                  ·gc.alloc.rate.norm:              120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.797 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     117.647 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.007 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala":
[info]   4447534.190 ±(99.9%) 65259.563 ops/s [Average]
[info]   (min, avg, max) = (4422680.734, 4447534.190, 4463159.816), stdev = 16947.701
[info]   CI (99.9%): [4382274.627, 4512793.753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   339.117 ±(99.9%) 4.951 MB/sec [Average]
[info]   (min, avg, max) = (337.202, 339.117, 340.272), stdev = 1.286
[info]   CI (99.9%): [334.166, 344.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   120.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (120.000, 120.000, 120.000), stdev = 0.001
[info]   CI (99.9%): [120.000, 120.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   352.668 ±(99.9%) 364.892 MB/sec [Average]
[info]   (min, avg, max) = (255.813, 352.668, 511.584), stdev = 94.761
[info]   CI (99.9%): [≈ 0, 717.561] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   124.884 ±(99.9%) 131.102 B/op [Average]
[info]   (min, avg, max) = (90.269, 124.884, 182.057), stdev = 34.047
[info]   CI (99.9%): [≈ 0, 255.986] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.380 ±(99.9%) 3.139 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.380, 1.838), stdev = 0.815
[info]   CI (99.9%): [≈ 0, 3.519] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.134 ±(99.9%) 1.107 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.134, 0.648), stdev = 0.287
[info]   CI (99.9%): [≈ 0, 1.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 4.000), stdev = 1.304
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson
[info] # Run progress: 86.99% complete, ETA 00:08:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 192320.318 ops/s
[info] # Warmup Iteration   2: 505378.221 ops/s
[info] # Warmup Iteration   3: 499547.001 ops/s
[info] Iteration   1: 511498.152 ops/s
[info]                  ·gc.alloc.rate:                   1749.754 MB/sec
[info]                  ·gc.alloc.rate.norm:              5384.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1641.748 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5051.667 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.192 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 508197.576 ops/s
[info]                  ·gc.alloc.rate:                   1738.607 MB/sec
[info]                  ·gc.alloc.rate.norm:              5384.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1655.130 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5125.496 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.322 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 508299.023 ops/s
[info]                  ·gc.alloc.rate:                   1739.155 MB/sec
[info]                  ·gc.alloc.rate.norm:              5384.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1668.674 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5165.811 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.193 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 510067.333 ops/s
[info]                  ·gc.alloc.rate:                   1745.817 MB/sec
[info]                  ·gc.alloc.rate.norm:              5384.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.504 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6212.617 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.321 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 505095.339 ops/s
[info]                  ·gc.alloc.rate:                   1728.547 MB/sec
[info]                  ·gc.alloc.rate.norm:              5384.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1688.011 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5257.742 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.324 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson":
[info]   508631.485 ±(99.9%) 9250.080 ops/s [Average]
[info]   (min, avg, max) = (505095.339, 508631.485, 511498.152), stdev = 2402.216
[info]   CI (99.9%): [499381.404, 517881.565] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1740.376 ±(99.9%) 31.170 MB/sec [Average]
[info]   (min, avg, max) = (1728.547, 1740.376, 1749.754), stdev = 8.095
[info]   CI (99.9%): [1709.206, 1771.546] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5384.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5384.001, 5384.001, 5384.001), stdev = 0.001
[info]   CI (99.9%): [5384.001, 5384.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1733.614 ±(99.9%) 608.217 MB/sec [Average]
[info]   (min, avg, max) = (1641.748, 1733.614, 2014.504), stdev = 157.952
[info]   CI (99.9%): [1125.397, 2341.830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   5362.666 ±(99.9%) 1851.864 B/op [Average]
[info]   (min, avg, max) = (5051.667, 5362.666, 6212.617), stdev = 480.923
[info]   CI (99.9%): [3510.803, 7214.530] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.087, 0.104), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.271 ±(99.9%) 0.274 B/op [Average]
[info]   (min, avg, max) = (0.192, 0.271, 0.324), stdev = 0.071
[info]   CI (99.9%): [≈ 0, 0.544] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 6.000), stdev = 0.837
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala
[info] # Run progress: 87.33% complete, ETA 00:07:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3419656.062 ops/s
[info] # Warmup Iteration   2: 2146126.331 ops/s
[info] # Warmup Iteration   3: 2156508.242 ops/s
[info] Iteration   1: 2153862.533 ops/s
[info]                  ·gc.alloc.rate:                   1018.138 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          999.505 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     730.384 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.046 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 2175411.992 ops/s
[info]                  ·gc.alloc.rate:                   1028.855 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1001.320 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     724.089 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.045 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 2173587.273 ops/s
[info]                  ·gc.alloc.rate:                   1027.504 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1003.879 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     726.894 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 2161605.066 ops/s
[info]                  ·gc.alloc.rate:               1021.841 MB/sec
[info]                  ·gc.alloc.rate.norm:          744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1006.579 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 732.888 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 2184685.430 ops/s
[info]                  ·gc.alloc.rate:                   1032.928 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1009.751 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     727.306 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.045 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala":
[info]   2169830.459 ±(99.9%) 46709.164 ops/s [Average]
[info]   (min, avg, max) = (2153862.533, 2169830.459, 2184685.430), stdev = 12130.221
[info]   CI (99.9%): [2123121.295, 2216539.622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1025.853 ±(99.9%) 22.570 MB/sec [Average]
[info]   (min, avg, max) = (1018.138, 1025.853, 1032.928), stdev = 5.861
[info]   CI (99.9%): [1003.284, 1048.423] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   744.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (744.000, 744.000, 744.000), stdev = 0.001
[info]   CI (99.9%): [744.000, 744.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1004.207 ±(99.9%) 15.750 MB/sec [Average]
[info]   (min, avg, max) = (999.505, 1004.207, 1009.751), stdev = 4.090
[info]   CI (99.9%): [988.457, 1019.956] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   728.312 ±(99.9%) 13.071 B/op [Average]
[info]   (min, avg, max) = (724.089, 728.312, 732.888), stdev = 3.395
[info]   CI (99.9%): [715.241, 741.383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.042 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.062), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.030 ±(99.9%) 0.082 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.030, 0.046), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson
[info] # Run progress: 87.67% complete, ETA 00:07:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 107905.769 ops/s
[info] # Warmup Iteration   2: 305506.312 ops/s
[info] # Warmup Iteration   3: 313893.764 ops/s
[info] Iteration   1: 309229.645 ops/s
[info]                  ·gc.alloc.rate:                   1634.693 MB/sec
[info]                  ·gc.alloc.rate.norm:              8320.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1638.713 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8340.464 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.212 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 314413.072 ops/s
[info]                  ·gc.alloc.rate:                   1662.105 MB/sec
[info]                  ·gc.alloc.rate.norm:              8320.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1652.375 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8271.299 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.417 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 309108.695 ops/s
[info]                  ·gc.alloc.rate:                   1634.002 MB/sec
[info]                  ·gc.alloc.rate.norm:              8320.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1665.683 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8481.314 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.530 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 311520.747 ops/s
[info]                  ·gc.alloc.rate:                   1646.736 MB/sec
[info]                  ·gc.alloc.rate.norm:              8320.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1676.648 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8471.132 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.316 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 311113.762 ops/s
[info]                  ·gc.alloc.rate:                   1645.127 MB/sec
[info]                  ·gc.alloc.rate.norm:              8320.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1685.176 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8522.542 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.421 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson":
[info]   311077.184 ±(99.9%) 8306.729 ops/s [Average]
[info]   (min, avg, max) = (309108.695, 311077.184, 314413.072), stdev = 2157.231
[info]   CI (99.9%): [302770.455, 319383.913] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1644.532 ±(99.9%) 43.975 MB/sec [Average]
[info]   (min, avg, max) = (1634.002, 1644.532, 1662.105), stdev = 11.420
[info]   CI (99.9%): [1600.557, 1688.508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   8320.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8320.001, 8320.001, 8320.002), stdev = 0.001
[info]   CI (99.9%): [8320.001, 8320.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1663.719 ±(99.9%) 71.662 MB/sec [Average]
[info]   (min, avg, max) = (1638.713, 1663.719, 1685.176), stdev = 18.610
[info]   CI (99.9%): [1592.057, 1735.381] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   8417.350 ±(99.9%) 409.744 B/op [Average]
[info]   (min, avg, max) = (8271.299, 8417.350, 8522.542), stdev = 106.409
[info]   CI (99.9%): [8007.607, 8827.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.104), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.379 ±(99.9%) 0.464 B/op [Average]
[info]   (min, avg, max) = (0.212, 0.379, 0.530), stdev = 0.120
[info]   CI (99.9%): [≈ 0, 0.843] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce
[info] # Run progress: 88.01% complete, ETA 00:07:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 264739.636 ops/s
[info] # Warmup Iteration   2: 471463.132 ops/s
[info] # Warmup Iteration   3: 462904.378 ops/s
[info] Iteration   1: 469487.884 ops/s
[info]                  ·gc.alloc.rate:                   1264.971 MB/sec
[info]                  ·gc.alloc.rate.norm:              4240.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1322.168 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4431.716 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.279 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 476481.948 ops/s
[info]                  ·gc.alloc.rate:                   1284.243 MB/sec
[info]                  ·gc.alloc.rate.norm:              4240.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.622 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4386.523 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.413 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 478099.400 ops/s
[info]                  ·gc.alloc.rate:                   1288.061 MB/sec
[info]                  ·gc.alloc.rate.norm:              4240.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          999.568 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3290.348 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.137 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 475005.674 ops/s
[info]                  ·gc.alloc.rate:                   1279.614 MB/sec
[info]                  ·gc.alloc.rate.norm:              4240.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.919 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4436.506 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.138 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 476139.317 ops/s
[info]                  ·gc.alloc.rate:                   1282.691 MB/sec
[info]                  ·gc.alloc.rate.norm:              4240.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.251 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4443.492 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.275 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce":
[info]   475042.845 ±(99.9%) 12694.686 ops/s [Average]
[info]   (min, avg, max) = (469487.884, 475042.845, 478099.400), stdev = 3296.770
[info]   CI (99.9%): [462348.158, 487737.531] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1279.916 ±(99.9%) 34.237 MB/sec [Average]
[info]   (min, avg, max) = (1264.971, 1279.916, 1288.061), stdev = 8.891
[info]   CI (99.9%): [1245.679, 1314.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   4240.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4240.001, 4240.001, 4240.001), stdev = 0.001
[info]   CI (99.9%): [4240.001, 4240.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1266.706 ±(99.9%) 575.990 MB/sec [Average]
[info]   (min, avg, max) = (999.568, 1266.706, 1344.251), stdev = 149.583
[info]   CI (99.9%): [690.715, 1842.696] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4197.717 ±(99.9%) 1955.077 B/op [Average]
[info]   (min, avg, max) = (3290.348, 4197.717, 4443.492), stdev = 507.727
[info]   CI (99.9%): [2242.640, 6152.794] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.125), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.248 ±(99.9%) 0.444 B/op [Average]
[info]   (min, avg, max) = (0.137, 0.248, 0.413), stdev = 0.115
[info]   CI (99.9%): [≈ 0, 0.693] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala
[info] # Run progress: 88.36% complete, ETA 00:07:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2542375.040 ops/s
[info] # Warmup Iteration   2: 2993688.789 ops/s
[info] # Warmup Iteration   3: 3017656.071 ops/s
[info] Iteration   1: 3005326.853 ops/s
[info]                  ·gc.alloc.rate:                   565.215 MB/sec
[info]                  ·gc.alloc.rate.norm:              296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.137 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     347.805 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.782 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.933 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 2989975.399 ops/s
[info]                  ·gc.alloc.rate:                   562.327 MB/sec
[info]                  ·gc.alloc.rate.norm:              296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.739 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     174.622 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 2994129.388 ops/s
[info]                  ·gc.alloc.rate:                   563.116 MB/sec
[info]                  ·gc.alloc.rate.norm:              296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.475 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     348.754 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.044 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 2999321.197 ops/s
[info]                  ·gc.alloc.rate:                   564.189 MB/sec
[info]                  ·gc.alloc.rate.norm:              296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.592 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     348.152 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.033 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 3020444.672 ops/s
[info]                  ·gc.alloc.rate:               568.323 MB/sec
[info]                  ·gc.alloc.rate.norm:          296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.892 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 172.860 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala":
[info]   3001839.502 ±(99.9%) 45758.655 ops/s [Average]
[info]   (min, avg, max) = (2989975.399, 3001839.502, 3020444.672), stdev = 11883.377
[info]   CI (99.9%): [2956080.847, 3047598.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   564.634 ±(99.9%) 8.983 MB/sec [Average]
[info]   (min, avg, max) = (562.327, 564.634, 568.323), stdev = 2.333
[info]   CI (99.9%): [555.651, 573.617] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   296.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (296.000, 296.000, 296.000), stdev = 0.001
[info]   CI (99.9%): [296.000, 296.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   530.967 ±(99.9%) 700.046 MB/sec [Average]
[info]   (min, avg, max) = (331.739, 530.967, 664.137), stdev = 181.800
[info]   CI (99.9%): [≈ 0, 1231.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   278.438 ±(99.9%) 368.037 B/op [Average]
[info]   (min, avg, max) = (172.860, 278.438, 348.754), stdev = 95.578
[info]   CI (99.9%): [≈ 0, 646.475] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.390 ±(99.9%) 2.999 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.390, 1.782), stdev = 0.779
[info]   CI (99.9%): [≈ 0, 3.389] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.204 ±(99.9%) 1.571 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.204, 0.933), stdev = 0.408
[info]   CI (99.9%): [≈ 0, 1.775] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 3.000), stdev = 0.894
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson
[info] # Run progress: 88.70% complete, ETA 00:07:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 99947.973 ops/s
[info] # Warmup Iteration   2: 335530.082 ops/s
[info] # Warmup Iteration   3: 343208.440 ops/s
[info] Iteration   1: 338424.471 ops/s
[info]                  ·gc.alloc.rate:                   1309.244 MB/sec
[info]                  ·gc.alloc.rate.norm:              6088.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1303.143 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6059.629 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.387 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 335316.288 ops/s
[info]                  ·gc.alloc.rate:                   1297.111 MB/sec
[info]                  ·gc.alloc.rate.norm:              6088.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1311.656 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6156.268 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.879 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 341833.900 ops/s
[info]                  ·gc.alloc.rate:                   1322.277 MB/sec
[info]                  ·gc.alloc.rate.norm:              6088.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1320.264 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6078.737 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.192 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 338807.565 ops/s
[info]                  ·gc.alloc.rate:                   1310.541 MB/sec
[info]                  ·gc.alloc.rate.norm:              6088.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.627 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6176.668 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.290 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 343335.785 ops/s
[info]                  ·gc.alloc.rate:                   1328.335 MB/sec
[info]                  ·gc.alloc.rate.norm:              6088.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.881 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6131.756 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.191 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson":
[info]   339543.602 ±(99.9%) 12068.330 ops/s [Average]
[info]   (min, avg, max) = (335316.288, 339543.602, 343335.785), stdev = 3134.107
[info]   CI (99.9%): [327475.272, 351611.932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1313.501 ±(99.9%) 46.868 MB/sec [Average]
[info]   (min, avg, max) = (1297.111, 1313.501, 1328.335), stdev = 12.171
[info]   CI (99.9%): [1266.634, 1360.369] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   6088.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6088.001, 6088.001, 6088.001), stdev = 0.001
[info]   CI (99.9%): [6088.001, 6088.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1320.514 ±(99.9%) 53.251 MB/sec [Average]
[info]   (min, avg, max) = (1303.143, 1320.514, 1337.881), stdev = 13.829
[info]   CI (99.9%): [1267.264, 1373.765] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   6120.611 ±(99.9%) 192.631 B/op [Average]
[info]   (min, avg, max) = (6059.629, 6120.611, 6176.668), stdev = 50.026
[info]   CI (99.9%): [5927.980, 6313.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.234 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.083, 0.187), stdev = 0.061
[info]   CI (99.9%): [≈ 0, 0.317] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.388 ±(99.9%) 1.103 B/op [Average]
[info]   (min, avg, max) = (0.191, 0.388, 0.879), stdev = 0.287
[info]   CI (99.9%): [≈ 0, 1.491] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce
[info] # Run progress: 89.04% complete, ETA 00:06:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 205541.660 ops/s
[info] # Warmup Iteration   2: 685876.154 ops/s
[info] # Warmup Iteration   3: 722114.145 ops/s
[info] Iteration   1: 711411.074 ops/s
[info]                  ·gc.alloc.rate:                   2109.152 MB/sec
[info]                  ·gc.alloc.rate.norm:              4664.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.669 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4424.110 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.322 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 719135.841 ops/s
[info]                  ·gc.alloc.rate:                   2132.064 MB/sec
[info]                  ·gc.alloc.rate.norm:              4664.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.340 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4404.287 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.364 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 703018.948 ops/s
[info]                  ·gc.alloc.rate:                   2083.242 MB/sec
[info]                  ·gc.alloc.rate.norm:              4664.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2023.039 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4529.219 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.186 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 709393.890 ops/s
[info]                  ·gc.alloc.rate:                   2102.260 MB/sec
[info]                  ·gc.alloc.rate.norm:              4664.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2369.537 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5256.972 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.139 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 714343.598 ops/s
[info]                  ·gc.alloc.rate:                   2116.869 MB/sec
[info]                  ·gc.alloc.rate.norm:              4664.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2036.389 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4486.682 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.183 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce":
[info]   711460.670 ±(99.9%) 23003.871 ops/s [Average]
[info]   (min, avg, max) = (703018.948, 711460.670, 719135.841), stdev = 5974.032
[info]   CI (99.9%): [688456.799, 734464.541] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.alloc.rate":
[info]   2108.717 ±(99.9%) 69.483 MB/sec [Average]
[info]   (min, avg, max) = (2083.242, 2108.717, 2132.064), stdev = 18.045
[info]   CI (99.9%): [2039.234, 2178.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   4664.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4664.001, 4664.001, 4664.001), stdev = 0.001
[info]   CI (99.9%): [4664.001, 4664.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2088.595 ±(99.9%) 606.845 MB/sec [Average]
[info]   (min, avg, max) = (2000.669, 2088.595, 2369.537), stdev = 157.596
[info]   CI (99.9%): [1481.750, 2695.439] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4620.254 ±(99.9%) 1383.894 B/op [Average]
[info]   (min, avg, max) = (4404.287, 4620.254, 5256.972), stdev = 359.393
[info]   CI (99.9%): [3236.360, 6004.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.108 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.108, 0.167), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.239 ±(99.9%) 0.378 B/op [Average]
[info]   (min, avg, max) = (0.139, 0.239, 0.364), stdev = 0.098
[info]   CI (99.9%): [≈ 0, 0.617] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.count":
[info]   31.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 0.707
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala
[info] # Run progress: 89.38% complete, ETA 00:06:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 441166.724 ops/s
[info] # Warmup Iteration   2: 1411821.449 ops/s
[info] # Warmup Iteration   3: 1470296.440 ops/s
[info] Iteration   1: 1487772.206 ops/s
[info]                  ·gc.alloc.rate:                   1126.759 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          977.870 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1034.491 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.088 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1472841.611 ops/s
[info]                  ·gc.alloc.rate:                   1115.774 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1309.317 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1398.765 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.133 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 1446602.047 ops/s
[info]                  ·gc.alloc.rate:                   1096.058 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          987.942 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1074.421 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.091 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1477779.757 ops/s
[info]                  ·gc.alloc.rate:                   1119.283 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          992.325 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1056.793 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.044 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1474472.347 ops/s
[info]                  ·gc.alloc.rate:                   1116.755 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.043 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1420.727 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.111 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala":
[info]   1471893.593 ±(99.9%) 58840.192 ops/s [Average]
[info]   (min, avg, max) = (1446602.047, 1471893.593, 1487772.206), stdev = 15280.611
[info]   CI (99.9%): [1413053.401, 1530733.786] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1114.926 ±(99.9%) 43.864 MB/sec [Average]
[info]   (min, avg, max) = (1096.058, 1114.926, 1126.759), stdev = 11.391
[info]   CI (99.9%): [1071.062, 1158.790] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1192.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1192.000, 1192.000, 1192.000), stdev = 0.001
[info]   CI (99.9%): [1192.000, 1192.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1119.699 ±(99.9%) 705.626 MB/sec [Average]
[info]   (min, avg, max) = (977.870, 1119.699, 1331.043), stdev = 183.249
[info]   CI (99.9%): [414.073, 1825.325] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1197.039 ±(99.9%) 750.272 B/op [Average]
[info]   (min, avg, max) = (1034.491, 1197.039, 1420.727), stdev = 194.843
[info]   CI (99.9%): [446.767, 1947.311] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.087, 0.125), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.094 ±(99.9%) 0.127 B/op [Average]
[info]   (min, avg, max) = (0.044, 0.094, 0.133), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.400, 5.000), stdev = 1.140
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala
[info] # Run progress: 89.73% complete, ETA 00:06:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4951254.605 ops/s
[info] # Warmup Iteration   2: 5514126.340 ops/s
[info] # Warmup Iteration   3: 5633224.122 ops/s
[info] Iteration   1: 5509021.389 ops/s
[info]                  ·gc.alloc.rate:      168.019 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 5495348.429 ops/s
[info]                  ·gc.alloc.rate:               167.607 MB/sec
[info]                  ·gc.alloc.rate.norm:          48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.827 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 73.265 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 5486914.176 ops/s
[info]                  ·gc.alloc.rate:                   167.349 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.826 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73.378 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 5505723.557 ops/s
[info]                  ·gc.alloc.rate:      167.924 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 5610674.801 ops/s
[info]                  ·gc.alloc.rate:               171.184 MB/sec
[info]                  ·gc.alloc.rate.norm:          48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.909 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 71.757 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala":
[info]   5521536.471 ±(99.9%) 194798.766 ops/s [Average]
[info]   (min, avg, max) = (5486914.176, 5521536.471, 5610674.801), stdev = 50588.621
[info]   CI (99.9%): [5326737.705, 5716335.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   168.417 ±(99.9%) 6.044 MB/sec [Average]
[info]   (min, avg, max) = (167.349, 168.417, 171.184), stdev = 1.570
[info]   CI (99.9%): [162.373, 174.460] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   48.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (48.000, 48.000, 48.000), stdev = 0.001
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   153.512 ±(99.9%) 539.618 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 153.512, 255.909), stdev = 140.137
[info]   CI (99.9%): [≈ 0, 693.130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   43.680 ±(99.9%) 153.561 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 43.680, 73.378), stdev = 39.879
[info]   CI (99.9%): [≈ 0, 197.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.006 ±(99.9%) 0.054 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.031), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.002 ±(99.9%) 0.015 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.009), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 1.000
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson
[info] # Run progress: 90.07% complete, ETA 00:06:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 34474.770 ops/s
[info] # Warmup Iteration   2: 199309.664 ops/s
[info] # Warmup Iteration   3: 199737.726 ops/s
[info] Iteration   1: 202687.905 ops/s
[info]                  ·gc.alloc.rate:                   1436.621 MB/sec
[info]                  ·gc.alloc.rate.norm:              11152.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1630.840 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12659.651 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.808 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 202245.997 ops/s
[info]                  ·gc.alloc.rate:                   1433.558 MB/sec
[info]                  ·gc.alloc.rate.norm:              11152.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1314.103 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10222.727 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.810 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 203123.518 ops/s
[info]                  ·gc.alloc.rate:                   1439.520 MB/sec
[info]                  ·gc.alloc.rate.norm:              11152.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1655.258 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12823.327 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.968 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 203825.078 ops/s
[info]                  ·gc.alloc.rate:                   1444.271 MB/sec
[info]                  ·gc.alloc.rate.norm:              11152.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.627 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10297.655 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.482 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 203434.425 ops/s
[info]                  ·gc.alloc.rate:                   1442.145 MB/sec
[info]                  ·gc.alloc.rate.norm:              11152.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.894 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10369.031 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.644 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson":
[info]   203063.385 ±(99.9%) 2381.936 ops/s [Average]
[info]   (min, avg, max) = (202245.997, 203063.385, 203825.078), stdev = 618.581
[info]   CI (99.9%): [200681.449, 205445.320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1439.223 ±(99.9%) 16.447 MB/sec [Average]
[info]   (min, avg, max) = (1433.558, 1439.223, 1444.271), stdev = 4.271
[info]   CI (99.9%): [1422.777, 1455.670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   11152.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (11152.002, 11152.002, 11152.002), stdev = 0.001
[info]   CI (99.9%): [11152.002, 11152.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1454.944 ±(99.9%) 663.123 MB/sec [Average]
[info]   (min, avg, max) = (1314.103, 1454.944, 1655.258), stdev = 172.211
[info]   CI (99.9%): [791.821, 2118.067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   11274.478 ±(99.9%) 5165.404 B/op [Average]
[info]   (min, avg, max) = (10222.727, 11274.478, 12823.327), stdev = 1341.439
[info]   CI (99.9%): [6109.075, 16439.882] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.096 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.096, 0.125), stdev = 0.024
[info]   CI (99.9%): [0.004, 0.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.742 ±(99.9%) 0.713 B/op [Average]
[info]   (min, avg, max) = (0.482, 0.742, 0.968), stdev = 0.185
[info]   CI (99.9%): [0.030, 1.455] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce
[info] # Run progress: 90.41% complete, ETA 00:05:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 449848.306 ops/s
[info] # Warmup Iteration   2: 940228.287 ops/s
[info] # Warmup Iteration   3: 964724.236 ops/s
[info] Iteration   1: 965889.764 ops/s
[info]                  ·gc.alloc.rate:                   1649.596 MB/sec
[info]                  ·gc.alloc.rate.norm:              2688.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1657.654 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2701.131 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.204 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 941861.807 ops/s
[info]                  ·gc.alloc.rate:                   1608.631 MB/sec
[info]                  ·gc.alloc.rate.norm:              2688.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1668.101 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2787.374 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.174 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 951831.336 ops/s
[info]                  ·gc.alloc.rate:                   1626.268 MB/sec
[info]                  ·gc.alloc.rate.norm:              2688.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1677.349 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2772.431 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.103 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 974935.860 ops/s
[info]                  ·gc.alloc.rate:                   1665.130 MB/sec
[info]                  ·gc.alloc.rate.norm:              2688.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1684.723 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2719.630 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.067 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 961929.299 ops/s
[info]                  ·gc.alloc.rate:                   1643.048 MB/sec
[info]                  ·gc.alloc.rate.norm:              2688.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1690.905 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2766.294 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.136 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce":
[info]   959289.613 ±(99.9%) 49263.014 ops/s [Average]
[info]   (min, avg, max) = (941861.807, 959289.613, 974935.860), stdev = 12793.448
[info]   CI (99.9%): [910026.599, 1008552.627] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1638.534 ±(99.9%) 83.806 MB/sec [Average]
[info]   (min, avg, max) = (1608.631, 1638.534, 1665.130), stdev = 21.764
[info]   CI (99.9%): [1554.728, 1722.341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   2688.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2688.000, 2688.000, 2688.000), stdev = 0.001
[info]   CI (99.9%): [2688.000, 2688.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1675.747 ±(99.9%) 50.892 MB/sec [Average]
[info]   (min, avg, max) = (1657.654, 1675.747, 1690.905), stdev = 13.217
[info]   CI (99.9%): [1624.854, 1726.639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2749.372 ±(99.9%) 142.449 B/op [Average]
[info]   (min, avg, max) = (2701.131, 2749.372, 2787.374), stdev = 36.994
[info]   CI (99.9%): [2606.923, 2891.821] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.127 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.083, 0.125), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.137 ±(99.9%) 0.209 B/op [Average]
[info]   (min, avg, max) = (0.067, 0.137, 0.204), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala
[info] # Run progress: 90.75% complete, ETA 00:05:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 896711.497 ops/s
[info] # Warmup Iteration   2: 2453235.100 ops/s
[info] # Warmup Iteration   3: 2460669.171 ops/s
[info] Iteration   1: 2463796.238 ops/s
[info]                  ·gc.alloc.rate:                   1089.891 MB/sec
[info]                  ·gc.alloc.rate.norm:              696.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          978.217 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     624.686 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.040 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 2433510.818 ops/s
[info]                  ·gc.alloc.rate:                   1076.164 MB/sec
[info]                  ·gc.alloc.rate.norm:              696.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1308.991 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     846.579 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.081 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 2454023.093 ops/s
[info]                  ·gc.alloc.rate:                   1085.206 MB/sec
[info]                  ·gc.alloc.rate.norm:              696.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          987.544 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     633.364 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.040 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 2453437.008 ops/s
[info]                  ·gc.alloc.rate:                   1085.394 MB/sec
[info]                  ·gc.alloc.rate.norm:              696.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          993.276 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     636.930 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.053 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 2375396.427 ops/s
[info]                  ·gc.alloc.rate:                   1050.481 MB/sec
[info]                  ·gc.alloc.rate.norm:              696.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.577 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     660.948 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.041 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala":
[info]   2436032.717 ±(99.9%) 137232.321 ops/s [Average]
[info]   (min, avg, max) = (2375396.427, 2436032.717, 2463796.238), stdev = 35638.798
[info]   CI (99.9%): [2298800.396, 2573265.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1077.427 ±(99.9%) 61.097 MB/sec [Average]
[info]   (min, avg, max) = (1050.481, 1077.427, 1089.891), stdev = 15.867
[info]   CI (99.9%): [1016.330, 1138.524] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   696.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (696.000, 696.000, 696.000), stdev = 0.001
[info]   CI (99.9%): [696.000, 696.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1053.121 ±(99.9%) 551.486 MB/sec [Average]
[info]   (min, avg, max) = (978.217, 1053.121, 1308.991), stdev = 143.219
[info]   CI (99.9%): [501.635, 1604.607] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   680.502 ±(99.9%) 361.221 B/op [Average]
[info]   (min, avg, max) = (624.686, 680.502, 846.579), stdev = 93.808
[info]   CI (99.9%): [319.280, 1041.723] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.079, 0.125), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.051 ±(99.9%) 0.067 B/op [Average]
[info]   (min, avg, max) = (0.040, 0.051, 0.081), stdev = 0.018
[info]   CI (99.9%): [≈ 0, 0.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 4.000), stdev = 0.837
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala
[info] # Run progress: 91.10% complete, ETA 00:05:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4521601.071 ops/s
[info] # Warmup Iteration   2: 6448679.766 ops/s
[info] # Warmup Iteration   3: 6517798.504 ops/s
[info] Iteration   1: 6608301.069 ops/s
[info]                  ·gc.alloc.rate:                   537.646 MB/sec
[info]                  ·gc.alloc.rate.norm:              128.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          588.404 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     140.084 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.777 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.423 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 6536602.106 ops/s
[info]                  ·gc.alloc.rate:                   531.805 MB/sec
[info]                  ·gc.alloc.rate.norm:              128.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.393 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     159.913 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 6670885.850 ops/s
[info]                  ·gc.alloc.rate:                   542.514 MB/sec
[info]                  ·gc.alloc.rate.norm:              128.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.738 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     78.270 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 6657165.871 ops/s
[info]                  ·gc.alloc.rate:                   541.408 MB/sec
[info]                  ·gc.alloc.rate.norm:              128.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.469 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     156.858 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 6674430.367 ops/s
[info]                  ·gc.alloc.rate:               542.823 MB/sec
[info]                  ·gc.alloc.rate.norm:          128.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      332.075 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 78.305 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala":
[info]   6629477.052 ±(99.9%) 224333.784 ops/s [Average]
[info]   (min, avg, max) = (6536602.106, 6629477.052, 6674430.367), stdev = 58258.771
[info]   CI (99.9%): [6405143.269, 6853810.836] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   539.239 ±(99.9%) 17.863 MB/sec [Average]
[info]   (min, avg, max) = (531.805, 539.239, 542.823), stdev = 4.639
[info]   CI (99.9%): [521.376, 557.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   128.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (128.000, 128.000, 128.000), stdev = 0.001
[info]   CI (99.9%): [128.000, 128.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   516.016 ±(99.9%) 657.972 MB/sec [Average]
[info]   (min, avg, max) = (331.738, 516.016, 664.393), stdev = 170.873
[info]   CI (99.9%): [≈ 0, 1173.988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   122.686 ±(99.9%) 158.751 B/op [Average]
[info]   (min, avg, max) = (78.270, 122.686, 159.913), stdev = 41.227
[info]   CI (99.9%): [≈ 0, 281.437] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.380 ±(99.9%) 3.007 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.380, 1.777), stdev = 0.781
[info]   CI (99.9%): [≈ 0, 3.387] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.091 ±(99.9%) 0.716 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.091, 0.423), stdev = 0.186
[info]   CI (99.9%): [≈ 0, 0.806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 5.000), stdev = 1.732
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 91.44% complete, ETA 00:05:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4245360.176 ops/s
[info] # Warmup Iteration   2: 6314074.139 ops/s
[info] # Warmup Iteration   3: 6396342.288 ops/s
[info] Iteration   1: 6426911.937 ops/s
[info]                  ·gc.alloc.rate:               392.096 MB/sec
[info]                  ·gc.alloc.rate.norm:          96.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.851 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 62.642 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 6448724.874 ops/s
[info]                  ·gc.alloc.rate:               393.434 MB/sec
[info]                  ·gc.alloc.rate.norm:          96.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.853 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 62.430 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 6444382.423 ops/s
[info]                  ·gc.alloc.rate:                   393.268 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.781 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     162.523 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.808 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.441 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 6454206.510 ops/s
[info]                  ·gc.alloc.rate:                   393.764 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.471 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     81.057 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 6441065.074 ops/s
[info]                  ·gc.alloc.rate:               392.965 MB/sec
[info]                  ·gc.alloc.rate.norm:          96.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      332.477 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 81.223 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc":
[info]   6443058.164 ±(99.9%) 39589.786 ops/s [Average]
[info]   (min, avg, max) = (6426911.937, 6443058.164, 6454206.510), stdev = 10281.342
[info]   CI (99.9%): [6403468.378, 6482647.949] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   393.105 ±(99.9%) 2.440 MB/sec [Average]
[info]   (min, avg, max) = (392.096, 393.105, 393.764), stdev = 0.634
[info]   CI (99.9%): [390.665, 395.546] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   96.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (96.000, 96.000, 96.000), stdev = 0.001
[info]   CI (99.9%): [96.000, 96.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   368.487 ±(99.9%) 656.732 MB/sec [Average]
[info]   (min, avg, max) = (255.851, 368.487, 665.781), stdev = 170.551
[info]   CI (99.9%): [≈ 0, 1025.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   89.975 ±(99.9%) 160.221 B/op [Average]
[info]   (min, avg, max) = (62.430, 89.975, 162.523), stdev = 41.609
[info]   CI (99.9%): [≈ 0, 250.195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.370 ±(99.9%) 3.096 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.370, 1.808), stdev = 0.804
[info]   CI (99.9%): [≈ 0, 3.466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   0.090 ±(99.9%) 0.756 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.090, 0.441), stdev = 0.196
[info]   CI (99.9%): [≈ 0, 0.846] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson
[info] # Run progress: 91.78% complete, ETA 00:05:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 55731.448 ops/s
[info] # Warmup Iteration   2: 299497.480 ops/s
[info] # Warmup Iteration   3: 308584.822 ops/s
[info] Iteration   1: 307230.455 ops/s
[info]                  ·gc.alloc.rate:                   1580.425 MB/sec
[info]                  ·gc.alloc.rate.norm:              8096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1308.301 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6701.998 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.533 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 304545.480 ops/s
[info]                  ·gc.alloc.rate:                   1566.627 MB/sec
[info]                  ·gc.alloc.rate.norm:              8096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1648.405 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8518.613 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.861 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 303122.077 ops/s
[info]                  ·gc.alloc.rate:                   1559.276 MB/sec
[info]                  ·gc.alloc.rate.norm:              8096.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1661.055 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8624.455 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.324 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 298868.223 ops/s
[info]                  ·gc.alloc.rate:                   1537.693 MB/sec
[info]                  ·gc.alloc.rate.norm:              8096.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.873 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7043.944 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.110 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 306223.538 ops/s
[info]                  ·gc.alloc.rate:                   1575.236 MB/sec
[info]                  ·gc.alloc.rate.norm:              8096.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1681.357 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8641.414 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.214 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson":
[info]   303997.955 ±(99.9%) 12593.338 ops/s [Average]
[info]   (min, avg, max) = (298868.223, 303997.955, 307230.455), stdev = 3270.450
[info]   CI (99.9%): [291404.616, 316591.293] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1563.851 ±(99.9%) 64.354 MB/sec [Average]
[info]   (min, avg, max) = (1537.693, 1563.851, 1580.425), stdev = 16.713
[info]   CI (99.9%): [1499.497, 1628.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   8096.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8096.001, 8096.001, 8096.002), stdev = 0.001
[info]   CI (99.9%): [8096.001, 8096.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1527.398 ±(99.9%) 720.733 MB/sec [Average]
[info]   (min, avg, max) = (1308.301, 1527.398, 1681.357), stdev = 187.172
[info]   CI (99.9%): [806.665, 2248.131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   7906.085 ±(99.9%) 3665.738 B/op [Average]
[info]   (min, avg, max) = (6701.998, 7906.085, 8641.414), stdev = 951.980
[info]   CI (99.9%): [4240.347, 11571.822] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.222 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.079, 0.167), stdev = 0.058
[info]   CI (99.9%): [≈ 0, 0.302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.408 ±(99.9%) 1.146 B/op [Average]
[info]   (min, avg, max) = (0.110, 0.408, 0.861), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 6.000), stdev = 0.837
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce
[info] # Run progress: 92.12% complete, ETA 00:04:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2267123.406 ops/s
[info] # Warmup Iteration   2: 3313651.894 ops/s
[info] # Warmup Iteration   3: 3346475.385 ops/s
[info] Iteration   1: 3333928.597 ops/s
[info]                  ·gc.alloc.rate:                   3084.175 MB/sec
[info]                  ·gc.alloc.rate.norm:              1456.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3035.480 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1433.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.020 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 3325837.775 ops/s
[info]                  ·gc.alloc.rate:                   3077.435 MB/sec
[info]                  ·gc.alloc.rate.norm:              1456.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3050.955 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1443.472 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.059 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 3350415.985 ops/s
[info]                  ·gc.alloc.rate:                   3099.481 MB/sec
[info]                  ·gc.alloc.rate.norm:              1456.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3057.885 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1436.460 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.049 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 3384630.856 ops/s
[info]                  ·gc.alloc.rate:                   3131.172 MB/sec
[info]                  ·gc.alloc.rate.norm:              1456.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3063.177 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1424.382 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.048 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 3388035.574 ops/s
[info]                  ·gc.alloc.rate:                   3134.385 MB/sec
[info]                  ·gc.alloc.rate.norm:              1456.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3404.098 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1581.289 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.058 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce":
[info]   3356569.757 ±(99.9%) 110138.996 ops/s [Average]
[info]   (min, avg, max) = (3325837.775, 3356569.757, 3388035.574), stdev = 28602.747
[info]   CI (99.9%): [3246430.762, 3466708.753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   3105.330 ±(99.9%) 101.365 MB/sec [Average]
[info]   (min, avg, max) = (3077.435, 3105.330, 3134.385), stdev = 26.324
[info]   CI (99.9%): [3003.964, 3206.695] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   1456.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1456.000, 1456.000, 1456.000), stdev = 0.001
[info]   CI (99.9%): [1456.000, 1456.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   3122.319 ±(99.9%) 607.874 MB/sec [Average]
[info]   (min, avg, max) = (3035.480, 3122.319, 3404.098), stdev = 157.863
[info]   CI (99.9%): [2514.445, 3730.193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1463.723 ±(99.9%) 254.448 B/op [Average]
[info]   (min, avg, max) = (1424.382, 1463.723, 1581.289), stdev = 66.079
[info]   CI (99.9%): [1209.275, 1718.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.100 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.100, 0.125), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.047 ±(99.9%) 0.062 B/op [Average]
[info]   (min, avg, max) = (0.020, 0.047, 0.059), stdev = 0.016
[info]   CI (99.9%): [≈ 0, 0.108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.count":
[info]   46.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (9.000, 9.200, 10.000), stdev = 0.447
[info]   CI (99.9%): [46.000, 46.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.600, 8.000), stdev = 0.548
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala
[info] # Run progress: 92.47% complete, ETA 00:04:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1668454.328 ops/s
[info] # Warmup Iteration   2: 3928392.161 ops/s
[info] # Warmup Iteration   3: 4013017.104 ops/s
[info] Iteration   1: 3939100.765 ops/s
[info]                  ·gc.alloc.rate:                   2362.856 MB/sec
[info]                  ·gc.alloc.rate.norm:              944.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2328.789 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     930.390 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 3884502.109 ops/s
[info]                  ·gc.alloc.rate:                   2330.077 MB/sec
[info]                  ·gc.alloc.rate.norm:              944.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2349.294 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     951.785 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.034 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 3930498.301 ops/s
[info]                  ·gc.alloc.rate:                   2357.467 MB/sec
[info]                  ·gc.alloc.rate.norm:              944.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2363.786 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     946.530 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.033 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 3934250.181 ops/s
[info]                  ·gc.alloc.rate:                   2359.638 MB/sec
[info]                  ·gc.alloc.rate.norm:              944.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2372.335 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     949.080 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.025 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 3912793.951 ops/s
[info]                  ·gc.alloc.rate:                   2346.865 MB/sec
[info]                  ·gc.alloc.rate.norm:              944.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2377.800 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     956.443 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.042 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala":
[info]   3920229.061 ±(99.9%) 85885.034 ops/s [Average]
[info]   (min, avg, max) = (3884502.109, 3920229.061, 3939100.765), stdev = 22304.071
[info]   CI (99.9%): [3834344.027, 4006114.095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   2351.381 ±(99.9%) 51.343 MB/sec [Average]
[info]   (min, avg, max) = (2330.077, 2351.381, 2362.856), stdev = 13.334
[info]   CI (99.9%): [2300.038, 2402.724] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   944.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (944.000, 944.000, 944.000), stdev = 0.001
[info]   CI (99.9%): [944.000, 944.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   2358.401 ±(99.9%) 76.027 MB/sec [Average]
[info]   (min, avg, max) = (2328.789, 2358.401, 2377.800), stdev = 19.744
[info]   CI (99.9%): [2282.374, 2434.428] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   946.846 ±(99.9%) 38.139 B/op [Average]
[info]   (min, avg, max) = (930.390, 946.846, 956.443), stdev = 9.905
[info]   CI (99.9%): [908.707, 984.985] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.104), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.030 ±(99.9%) 0.037 B/op [Average]
[info]   (min, avg, max) = (0.017, 0.030, 0.042), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.count":
[info]   35.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.000, 7.000), stdev = 0.001
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala
[info] # Run progress: 92.81% complete, ETA 00:04:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6789150.450 ops/s
[info] # Warmup Iteration   2: 7410576.868 ops/s
[info] # Warmup Iteration   3: 7425974.466 ops/s
[info] Iteration   1: 7500844.677 ops/s
[info]                  ·gc.alloc.rate:                   1410.694 MB/sec
[info]                  ·gc.alloc.rate.norm:              296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.244 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     281.218 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 7490516.111 ops/s
[info]                  ·gc.alloc.rate:                   1409.299 MB/sec
[info]                  ·gc.alloc.rate.norm:              296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1680.342 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     352.928 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.022 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 7506265.552 ops/s
[info]                  ·gc.alloc.rate:                   1411.775 MB/sec
[info]                  ·gc.alloc.rate.norm:              296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347.638 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     282.553 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 7352882.293 ops/s
[info]                  ·gc.alloc.rate:                   1383.139 MB/sec
[info]                  ·gc.alloc.rate.norm:              296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350.598 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     289.036 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.013 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 7314465.177 ops/s
[info]                  ·gc.alloc.rate:                   1375.650 MB/sec
[info]                  ·gc.alloc.rate.norm:              296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1353.686 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     291.274 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.013 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala":
[info]   7432994.762 ±(99.9%) 353694.774 ops/s [Average]
[info]   (min, avg, max) = (7314465.177, 7432994.762, 7506265.552), stdev = 91853.410
[info]   CI (99.9%): [7079299.987, 7786689.536] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1398.111 ±(99.9%) 66.663 MB/sec [Average]
[info]   (min, avg, max) = (1375.650, 1398.111, 1411.775), stdev = 17.312
[info]   CI (99.9%): [1331.448, 1464.774] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   296.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (296.000, 296.000, 296.000), stdev = 0.001
[info]   CI (99.9%): [296.000, 296.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1414.501 ±(99.9%) 572.563 MB/sec [Average]
[info]   (min, avg, max) = (1340.244, 1414.501, 1680.342), stdev = 148.693
[info]   CI (99.9%): [841.939, 1987.064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   299.402 ±(99.9%) 116.369 B/op [Average]
[info]   (min, avg, max) = (281.218, 299.402, 352.928), stdev = 30.221
[info]   CI (99.9%): [183.033, 415.770] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.062, 0.104), stdev = 0.026
[info]   CI (99.9%): [≈ 0, 0.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.013 ±(99.9%) 0.021 B/op [Average]
[info]   (min, avg, max) = (0.009, 0.013, 0.022), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce
[info] # Run progress: 93.15% complete, ETA 00:04:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1781108.500 ops/s
[info] # Warmup Iteration   2: 2711442.237 ops/s
[info] # Warmup Iteration   3: 2765898.407 ops/s
[info] Iteration   1: 2786196.265 ops/s
[info]                  ·gc.alloc.rate:                   1727.839 MB/sec
[info]                  ·gc.alloc.rate.norm:              976.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1662.693 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     939.201 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.071 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 2780318.017 ops/s
[info]                  ·gc.alloc.rate:                   1724.134 MB/sec
[info]                  ·gc.alloc.rate.norm:              976.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1672.348 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     946.685 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.071 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 2792070.269 ops/s
[info]                  ·gc.alloc.rate:                   1731.385 MB/sec
[info]                  ·gc.alloc.rate.norm:              976.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1680.301 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     947.203 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.035 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 2760716.540 ops/s
[info]                  ·gc.alloc.rate:                   1711.970 MB/sec
[info]                  ·gc.alloc.rate.norm:              976.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1687.651 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     962.136 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.024 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 2792537.696 ops/s
[info]                  ·gc.alloc.rate:                   1731.675 MB/sec
[info]                  ·gc.alloc.rate.norm:              976.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1692.286 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     953.800 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.047 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce":
[info]   2782367.758 ±(99.9%) 50397.872 ops/s [Average]
[info]   (min, avg, max) = (2760716.540, 2782367.758, 2792537.696), stdev = 13088.167
[info]   CI (99.9%): [2731969.885, 2832765.630] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1725.401 ±(99.9%) 31.230 MB/sec [Average]
[info]   (min, avg, max) = (1711.970, 1725.401, 1731.675), stdev = 8.110
[info]   CI (99.9%): [1694.170, 1756.631] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   976.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (976.000, 976.000, 976.000), stdev = 0.001
[info]   CI (99.9%): [976.000, 976.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1679.056 ±(99.9%) 45.691 MB/sec [Average]
[info]   (min, avg, max) = (1662.693, 1679.056, 1692.286), stdev = 11.866
[info]   CI (99.9%): [1633.364, 1724.747] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   949.805 ±(99.9%) 33.178 B/op [Average]
[info]   (min, avg, max) = (939.201, 949.805, 962.136), stdev = 8.616
[info]   CI (99.9%): [916.627, 982.982] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.087, 0.125), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.049 ±(99.9%) 0.081 B/op [Average]
[info]   (min, avg, max) = (0.024, 0.049, 0.071), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala
[info] # Run progress: 93.49% complete, ETA 00:04:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2260654.527 ops/s
[info] # Warmup Iteration   2: 4821711.940 ops/s
[info] # Warmup Iteration   3: 4847942.314 ops/s
[info] Iteration   1: 4771997.783 ops/s
[info]                  ·gc.alloc.rate:                   1261.545 MB/sec
[info]                  ·gc.alloc.rate.norm:              416.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1313.230 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     433.044 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.014 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 4855911.284 ops/s
[info]                  ·gc.alloc.rate:                   1283.802 MB/sec
[info]                  ·gc.alloc.rate.norm:              416.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          989.481 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     320.629 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.040 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 4871437.913 ops/s
[info]                  ·gc.alloc.rate:                   1288.136 MB/sec
[info]                  ·gc.alloc.rate.norm:              416.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1326.871 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     428.509 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.020 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 4826185.415 ops/s
[info]                  ·gc.alloc.rate:                   1275.750 MB/sec
[info]                  ·gc.alloc.rate.norm:              416.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.675 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     434.888 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.027 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 4838927.578 ops/s
[info]                  ·gc.alloc.rate:                   1279.030 MB/sec
[info]                  ·gc.alloc.rate.norm:              416.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.295 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     435.926 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.027 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala":
[info]   4832891.995 ±(99.9%) 146693.704 ops/s [Average]
[info]   (min, avg, max) = (4771997.783, 4832891.995, 4871437.913), stdev = 38095.889
[info]   CI (99.9%): [4686198.291, 4979585.698] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1277.653 ±(99.9%) 39.113 MB/sec [Average]
[info]   (min, avg, max) = (1261.545, 1277.653, 1288.136), stdev = 10.158
[info]   CI (99.9%): [1238.540, 1316.766] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   416.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (416.000, 416.000, 416.000), stdev = 0.001
[info]   CI (99.9%): [416.000, 416.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1260.710 ±(99.9%) 585.115 MB/sec [Average]
[info]   (min, avg, max) = (989.481, 1260.710, 1340.295), stdev = 151.953
[info]   CI (99.9%): [675.595, 1845.826] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   410.599 ±(99.9%) 193.976 B/op [Average]
[info]   (min, avg, max) = (320.629, 410.599, 435.926), stdev = 50.375
[info]   CI (99.9%): [216.623, 604.575] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.125), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.026 ±(99.9%) 0.038 B/op [Average]
[info]   (min, avg, max) = (0.014, 0.026, 0.040), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala
[info] # Run progress: 93.84% complete, ETA 00:03:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6020576.784 ops/s
[info] # Warmup Iteration   2: 7862032.168 ops/s
[info] # Warmup Iteration   3: 8505815.465 ops/s
[info] Iteration   1: 8490257.949 ops/s
[info]                  ·gc.alloc.rate:                   820.278 MB/sec
[info]                  ·gc.alloc.rate.norm:              152.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.050 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     123.236 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 8585555.904 ops/s
[info]                  ·gc.alloc.rate:                   829.508 MB/sec
[info]                  ·gc.alloc.rate.norm:              152.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.753 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     121.627 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.019 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 8581110.062 ops/s
[info]                  ·gc.alloc.rate:                   828.969 MB/sec
[info]                  ·gc.alloc.rate.norm:              152.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.808 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     182.958 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 8455388.554 ops/s
[info]                  ·gc.alloc.rate:               816.610 MB/sec
[info]                  ·gc.alloc.rate.norm:          152.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.128 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 123.990 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 8599920.018 ops/s
[info]                  ·gc.alloc.rate:                   830.570 MB/sec
[info]                  ·gc.alloc.rate.norm:              152.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1001.565 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     183.293 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.019 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala":
[info]   8542446.497 ±(99.9%) 250730.060 ops/s [Average]
[info]   (min, avg, max) = (8455388.554, 8542446.497, 8599920.018), stdev = 65113.800
[info]   CI (99.9%): [8291716.437, 8793176.557] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   825.187 ±(99.9%) 24.324 MB/sec [Average]
[info]   (min, avg, max) = (816.610, 825.187, 830.570), stdev = 6.317
[info]   CI (99.9%): [800.863, 849.511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   152.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (152.000, 152.000, 152.000), stdev = 0.001
[info]   CI (99.9%): [152.000, 152.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   798.861 ±(99.9%) 705.957 MB/sec [Average]
[info]   (min, avg, max) = (663.753, 798.861, 1001.565), stdev = 183.335
[info]   CI (99.9%): [92.904, 1504.818] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   147.021 ±(99.9%) 126.958 B/op [Average]
[info]   (min, avg, max) = (121.627, 147.021, 183.293), stdev = 32.970
[info]   CI (99.9%): [20.063, 273.978] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.075, 0.104), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.014 ±(99.9%) 0.030 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.019), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 94.18% complete, ETA 00:03:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5397583.308 ops/s
[info] # Warmup Iteration   2: 7725449.482 ops/s
[info] # Warmup Iteration   3: 7732147.951 ops/s
[info] Iteration   1: 7751514.023 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 7707283.225 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 7202444.772 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 7754138.111 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 7752862.792 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   7633648.585 ±(99.9%) 931308.312 ops/s [Average]
[info]   (min, avg, max) = (7202444.772, 7633648.585, 7754138.111), stdev = 241857.811
[info]   CI (99.9%): [6702340.273, 8564956.897] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson
[info] # Run progress: 94.52% complete, ETA 00:03:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3807483.182 ops/s
[info] # Warmup Iteration   2: 4899127.158 ops/s
[info] # Warmup Iteration   3: 5087276.450 ops/s
[info] Iteration   1: 5078099.213 ops/s
[info]                  ·gc.alloc.rate:                   1626.197 MB/sec
[info]                  ·gc.alloc.rate.norm:              504.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1661.389 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     514.907 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.032 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 5016281.411 ops/s
[info]                  ·gc.alloc.rate:                   1606.862 MB/sec
[info]                  ·gc.alloc.rate.norm:              504.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1669.965 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     523.793 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.039 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 5074659.783 ops/s
[info]                  ·gc.alloc.rate:                   1625.291 MB/sec
[info]                  ·gc.alloc.rate.norm:              504.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1678.195 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     520.406 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.019 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 4947133.891 ops/s
[info]                  ·gc.alloc.rate:                   1584.689 MB/sec
[info]                  ·gc.alloc.rate.norm:              504.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1686.546 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     536.395 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.026 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 5024392.147 ops/s
[info]                  ·gc.alloc.rate:                   1608.950 MB/sec
[info]                  ·gc.alloc.rate.norm:              504.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352.300 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     423.605 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.033 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson":
[info]   5028113.289 ±(99.9%) 205357.694 ops/s [Average]
[info]   (min, avg, max) = (4947133.891, 5028113.289, 5078099.213), stdev = 53330.741
[info]   CI (99.9%): [4822755.595, 5233470.983] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1610.398 ±(99.9%) 65.204 MB/sec [Average]
[info]   (min, avg, max) = (1584.689, 1610.398, 1626.197), stdev = 16.933
[info]   CI (99.9%): [1545.194, 1675.602] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   504.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (504.000, 504.000, 504.000), stdev = 0.001
[info]   CI (99.9%): [504.000, 504.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1609.679 ±(99.9%) 555.199 MB/sec [Average]
[info]   (min, avg, max) = (1352.300, 1609.679, 1686.546), stdev = 144.183
[info]   CI (99.9%): [1054.480, 2164.878] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   503.821 ±(99.9%) 175.326 B/op [Average]
[info]   (min, avg, max) = (423.605, 503.821, 536.395), stdev = 45.532
[info]   CI (99.9%): [328.495, 679.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.096 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.096, 0.125), stdev = 0.024
[info]   CI (99.9%): [0.004, 0.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.030 ±(99.9%) 0.029 B/op [Average]
[info]   (min, avg, max) = (0.019, 0.030, 0.039), stdev = 0.007
[info]   CI (99.9%): [0.001, 0.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce
[info] # Run progress: 94.86% complete, ETA 00:03:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 976605.011 ops/s
[info] # Warmup Iteration   2: 1376945.869 ops/s
[info] # Warmup Iteration   3: 1383068.631 ops/s
[info] Iteration   1: 1394833.741 ops/s
[info]                  ·gc.alloc.rate:                   1900.252 MB/sec
[info]                  ·gc.alloc.rate.norm:              2144.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.537 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2259.405 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.141 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 1393398.464 ops/s
[info]                  ·gc.alloc.rate:                   1898.956 MB/sec
[info]                  ·gc.alloc.rate.norm:              2144.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.270 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2275.324 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.165 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 1392960.988 ops/s
[info]                  ·gc.alloc.rate:                   1897.660 MB/sec
[info]                  ·gc.alloc.rate.norm:              2144.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1686.799 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1905.767 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.094 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 1400996.980 ops/s
[info]                  ·gc.alloc.rate:                   1908.443 MB/sec
[info]                  ·gc.alloc.rate.norm:              2144.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2030.386 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2280.995 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.094 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 1376594.507 ops/s
[info]                  ·gc.alloc.rate:                   1875.660 MB/sec
[info]                  ·gc.alloc.rate.norm:              2144.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2035.105 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2326.256 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.071 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce":
[info]   1391756.936 ±(99.9%) 34916.272 ops/s [Average]
[info]   (min, avg, max) = (1376594.507, 1391756.936, 1400996.980), stdev = 9067.645
[info]   CI (99.9%): [1356840.664, 1426673.208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   1896.194 ±(99.9%) 47.079 MB/sec [Average]
[info]   (min, avg, max) = (1875.660, 1896.194, 1908.443), stdev = 12.226
[info]   CI (99.9%): [1849.115, 1943.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2144.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2144.000, 2144.000, 2144.000), stdev = 0.001
[info]   CI (99.9%): [2144.000, 2144.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1954.019 ±(99.9%) 577.336 MB/sec [Average]
[info]   (min, avg, max) = (1686.799, 1954.019, 2035.105), stdev = 149.932
[info]   CI (99.9%): [1376.683, 2531.355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2209.550 ±(99.9%) 660.867 B/op [Average]
[info]   (min, avg, max) = (1905.767, 2209.550, 2326.256), stdev = 171.625
[info]   CI (99.9%): [1548.682, 2870.417] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.100 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.100, 0.146), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.113 ±(99.9%) 0.148 B/op [Average]
[info]   (min, avg, max) = (0.071, 0.113, 0.165), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala
[info] # Run progress: 95.21% complete, ETA 00:02:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 471949.930 ops/s
[info] # Warmup Iteration   2: 1067850.013 ops/s
[info] # Warmup Iteration   3: 1090225.570 ops/s
[info] Iteration   1: 1054579.452 ops/s
[info]                  ·gc.alloc.rate:                   680.858 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.887 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     977.245 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.188 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.265 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1067042.577 ops/s
[info]                  ·gc.alloc.rate:                   688.902 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.247 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     964.890 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.031 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1053370.538 ops/s
[info]                  ·gc.alloc.rate:                   680.167 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          655.647 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     979.373 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.124 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1087334.167 ops/s
[info]                  ·gc.alloc.rate:                   701.898 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          985.191 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1426.067 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.090 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 1070792.462 ops/s
[info]                  ·gc.alloc.rate:               691.248 MB/sec
[info]                  ·gc.alloc.rate.norm:          1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      659.156 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 968.830 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala":
[info]   1066623.839 ±(99.9%) 53327.864 ops/s [Average]
[info]   (min, avg, max) = (1053370.538, 1066623.839, 1087334.167), stdev = 13849.077
[info]   CI (99.9%): [1013295.975, 1119951.703] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   688.615 ±(99.9%) 34.171 MB/sec [Average]
[info]   (min, avg, max) = (680.167, 688.615, 701.898), stdev = 8.874
[info]   CI (99.9%): [654.443, 722.786] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1016.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1016.000, 1016.000, 1016.000), stdev = 0.001
[info]   CI (99.9%): [1016.000, 1016.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   721.825 ±(99.9%) 566.961 MB/sec [Average]
[info]   (min, avg, max) = (654.247, 721.825, 985.191), stdev = 147.238
[info]   CI (99.9%): [154.864, 1288.786] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1063.281 ±(99.9%) 781.259 B/op [Average]
[info]   (min, avg, max) = (964.890, 1063.281, 1426.067), stdev = 202.891
[info]   CI (99.9%): [282.022, 1844.541] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.471 ±(99.9%) 3.698 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.471, 2.188), stdev = 0.960
[info]   CI (99.9%): [≈ 0, 4.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.702 ±(99.9%) 5.520 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.702, 3.265), stdev = 1.433
[info]   CI (99.9%): [≈ 0, 6.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala
[info] # Run progress: 95.55% complete, ETA 00:02:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1647863.388 ops/s
[info] # Warmup Iteration   2: 1815152.072 ops/s
[info] # Warmup Iteration   3: 1828163.891 ops/s
[info] Iteration   1: 1844403.257 ops/s
[info]                  ·gc.alloc.rate:               346.889 MB/sec
[info]                  ·gc.alloc.rate.norm:          296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.804 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 218.277 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 1840450.650 ops/s
[info]                  ·gc.alloc.rate:               346.122 MB/sec
[info]                  ·gc.alloc.rate.norm:          296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.798 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 218.756 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 1839730.889 ops/s
[info]                  ·gc.alloc.rate:                   346.165 MB/sec
[info]                  ·gc.alloc.rate.norm:              296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          335.895 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     287.218 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.522 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.302 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1840915.955 ops/s
[info]                  ·gc.alloc.rate:                   346.291 MB/sec
[info]                  ·gc.alloc.rate.norm:              296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          335.803 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     287.036 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.036 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 1847349.785 ops/s
[info]                  ·gc.alloc.rate:               347.492 MB/sec
[info]                  ·gc.alloc.rate.norm:          296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      335.136 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 285.476 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala":
[info]   1842570.107 ±(99.9%) 12402.307 ops/s [Average]
[info]   (min, avg, max) = (1839730.889, 1842570.107, 1847349.785), stdev = 3220.840
[info]   CI (99.9%): [1830167.800, 1854972.415] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   346.592 ±(99.9%) 2.271 MB/sec [Average]
[info]   (min, avg, max) = (346.122, 346.592, 347.492), stdev = 0.590
[info]   CI (99.9%): [344.321, 348.863] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   296.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (296.000, 296.000, 296.000), stdev = 0.001
[info]   CI (99.9%): [296.000, 296.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   303.687 ±(99.9%) 168.332 MB/sec [Average]
[info]   (min, avg, max) = (255.798, 303.687, 335.895), stdev = 43.715
[info]   CI (99.9%): [135.356, 472.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   259.353 ±(99.9%) 143.570 B/op [Average]
[info]   (min, avg, max) = (218.277, 259.353, 287.218), stdev = 37.285
[info]   CI (99.9%): [115.783, 402.922] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.313 ±(99.9%) 2.604 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.313, 1.522), stdev = 0.676
[info]   CI (99.9%): [≈ 0, 2.917] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.267 ±(99.9%) 2.227 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.267, 1.302), stdev = 0.578
[info]   CI (99.9%): [≈ 0, 2.494] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 2.000), stdev = 0.894
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce
[info] # Run progress: 95.89% complete, ETA 00:02:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 790243.406 ops/s
[info] # Warmup Iteration   2: 1227585.693 ops/s
[info] # Warmup Iteration   3: 1266721.671 ops/s
[info] Iteration   1: 1274672.679 ops/s
[info]                  ·gc.alloc.rate:                   965.734 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661.043 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     815.923 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.077 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1274284.933 ops/s
[info]                  ·gc.alloc.rate:                   965.113 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          992.566 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1225.907 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.129 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 1273556.894 ops/s
[info]                  ·gc.alloc.rate:                   964.555 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          994.860 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1229.451 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.026 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1262710.337 ops/s
[info]                  ·gc.alloc.rate:                   956.723 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          998.616 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1244.195 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.078 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1265541.985 ops/s
[info]                  ·gc.alloc.rate:                   958.520 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1002.249 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1246.381 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.104 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce":
[info]   1270153.366 ±(99.9%) 21589.509 ops/s [Average]
[info]   (min, avg, max) = (1262710.337, 1270153.366, 1274672.679), stdev = 5606.727
[info]   CI (99.9%): [1248563.856, 1291742.875] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   962.129 ±(99.9%) 16.111 MB/sec [Average]
[info]   (min, avg, max) = (956.723, 962.129, 965.734), stdev = 4.184
[info]   CI (99.9%): [946.017, 978.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   1192.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1192.000, 1192.000, 1192.000), stdev = 0.001
[info]   CI (99.9%): [1192.000, 1192.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   929.867 ±(99.9%) 578.836 MB/sec [Average]
[info]   (min, avg, max) = (661.043, 929.867, 1002.249), stdev = 150.322
[info]   CI (99.9%): [351.030, 1508.703] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1152.371 ±(99.9%) 725.046 B/op [Average]
[info]   (min, avg, max) = (815.923, 1152.371, 1246.381), stdev = 188.292
[info]   CI (99.9%): [427.325, 1877.417] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.067, 0.104), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.083 ±(99.9%) 0.147 B/op [Average]
[info]   (min, avg, max) = (0.026, 0.083, 0.129), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala
[info] # Run progress: 96.23% complete, ETA 00:02:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1133986.689 ops/s
[info] # Warmup Iteration   2: 2224929.749 ops/s
[info] # Warmup Iteration   3: 2226896.086 ops/s
[info] Iteration   1: 2252186.669 ops/s
[info]                  ·gc.alloc.rate:                   904.371 MB/sec
[info]                  ·gc.alloc.rate.norm:              632.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          981.552 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     685.936 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.058 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 2316130.903 ops/s
[info]                  ·gc.alloc.rate:                   930.071 MB/sec
[info]                  ·gc.alloc.rate.norm:              632.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          655.494 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     445.420 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.071 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 2301793.039 ops/s
[info]                  ·gc.alloc.rate:                   924.373 MB/sec
[info]                  ·gc.alloc.rate.norm:              632.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          985.667 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     673.907 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.028 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 2310021.542 ops/s
[info]                  ·gc.alloc.rate:                   927.584 MB/sec
[info]                  ·gc.alloc.rate.norm:              632.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          990.869 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     675.119 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.057 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 2268451.648 ops/s
[info]                  ·gc.alloc.rate:                   911.017 MB/sec
[info]                  ·gc.alloc.rate.norm:              632.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          994.999 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     690.261 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.043 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala":
[info]   2289716.760 ±(99.9%) 107482.991 ops/s [Average]
[info]   (min, avg, max) = (2252186.669, 2289716.760, 2316130.903), stdev = 27912.991
[info]   CI (99.9%): [2182233.769, 2397199.751] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   919.483 ±(99.9%) 43.124 MB/sec [Average]
[info]   (min, avg, max) = (904.371, 919.483, 930.071), stdev = 11.199
[info]   CI (99.9%): [876.359, 962.608] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   632.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (632.000, 632.000, 632.000), stdev = 0.001
[info]   CI (99.9%): [632.000, 632.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   921.716 ±(99.9%) 573.400 MB/sec [Average]
[info]   (min, avg, max) = (655.494, 921.716, 994.999), stdev = 148.910
[info]   CI (99.9%): [348.316, 1495.116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   634.129 ±(99.9%) 407.098 B/op [Average]
[info]   (min, avg, max) = (445.420, 634.129, 690.261), stdev = 105.722
[info]   CI (99.9%): [227.031, 1041.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.104), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.051 ±(99.9%) 0.062 B/op [Average]
[info]   (min, avg, max) = (0.028, 0.051, 0.071), stdev = 0.016
[info]   CI (99.9%): [≈ 0, 0.114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.400, 7.000), stdev = 2.074
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala
[info] # Run progress: 96.58% complete, ETA 00:02:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1782006.898 ops/s
[info] # Warmup Iteration   2: 2484132.180 ops/s
[info] # Warmup Iteration   3: 2505555.542 ops/s
[info] Iteration   1: 2458553.340 ops/s
[info]                  ·gc.alloc.rate:                   574.906 MB/sec
[info]                  ·gc.alloc.rate.norm:              368.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.886 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     425.597 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.824 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.167 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 2512952.536 ops/s
[info]                  ·gc.alloc.rate:               587.594 MB/sec
[info]                  ·gc.alloc.rate.norm:          368.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.750 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 207.769 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 2498450.875 ops/s
[info]                  ·gc.alloc.rate:                   584.396 MB/sec
[info]                  ·gc.alloc.rate.norm:              368.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.734 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     417.960 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.092 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 2488038.704 ops/s
[info]                  ·gc.alloc.rate:                   581.971 MB/sec
[info]                  ·gc.alloc.rate.norm:              368.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.390 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     420.117 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.040 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 2498077.424 ops/s
[info]                  ·gc.alloc.rate:                   584.155 MB/sec
[info]                  ·gc.alloc.rate.norm:              368.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.179 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     419.043 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.052 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala":
[info]   2491214.576 ±(99.9%) 78179.549 ops/s [Average]
[info]   (min, avg, max) = (2458553.340, 2491214.576, 2512952.536), stdev = 20302.981
[info]   CI (99.9%): [2413035.027, 2569394.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   582.604 ±(99.9%) 18.282 MB/sec [Average]
[info]   (min, avg, max) = (574.906, 582.604, 587.594), stdev = 4.748
[info]   CI (99.9%): [564.322, 600.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   368.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (368.000, 368.000, 368.000), stdev = 0.001
[info]   CI (99.9%): [368.000, 368.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   597.988 ±(99.9%) 573.101 MB/sec [Average]
[info]   (min, avg, max) = (331.750, 597.988, 665.179), stdev = 148.833
[info]   CI (99.9%): [24.887, 1171.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   378.097 ±(99.9%) 366.818 B/op [Average]
[info]   (min, avg, max) = (207.769, 378.097, 425.597), stdev = 95.261
[info]   CI (99.9%): [11.279, 744.915] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.423 ±(99.9%) 3.022 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.423, 1.824), stdev = 0.785
[info]   CI (99.9%): [≈ 0, 3.445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.270 ±(99.9%) 1.935 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.270, 1.167), stdev = 0.503
[info]   CI (99.9%): [≈ 0, 2.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 96.92% complete, ETA 00:01:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1951142.324 ops/s
[info] # Warmup Iteration   2: 2574906.268 ops/s
[info] # Warmup Iteration   3: 2579244.177 ops/s
[info] Iteration   1: 2578160.737 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2554412.050 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2530281.324 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2578708.211 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2561849.316 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   2560682.328 ±(99.9%) 76900.322 ops/s [Average]
[info]   (min, avg, max) = (2530281.324, 2560682.328, 2578708.211), stdev = 19970.769
[info]   CI (99.9%): [2483782.006, 2637582.650] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson
[info] # Run progress: 97.26% complete, ETA 00:01:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1836153.125 ops/s
[info] # Warmup Iteration   2: 2359310.803 ops/s
[info] # Warmup Iteration   3: 2402215.709 ops/s
[info] Iteration   1: 2404822.179 ops/s
[info]                  ·gc.alloc.rate:                   1100.233 MB/sec
[info]                  ·gc.alloc.rate.norm:              720.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          992.606 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     649.568 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.027 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 2322018.170 ops/s
[info]                  ·gc.alloc.rate:                   1062.263 MB/sec
[info]                  ·gc.alloc.rate.norm:              720.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1326.972 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     899.419 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.042 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 2394355.594 ops/s
[info]                  ·gc.alloc.rate:                   1095.305 MB/sec
[info]                  ·gc.alloc.rate.norm:              720.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          998.476 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     656.349 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.068 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 2406452.211 ops/s
[info]                  ·gc.alloc.rate:                   1100.875 MB/sec
[info]                  ·gc.alloc.rate.norm:              720.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1001.873 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     655.250 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.041 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 2383514.630 ops/s
[info]                  ·gc.alloc.rate:                   1090.864 MB/sec
[info]                  ·gc.alloc.rate.norm:              720.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.608 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     885.498 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.069 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson":
[info]   2382232.557 ±(99.9%) 134376.810 ops/s [Average]
[info]   (min, avg, max) = (2322018.170, 2382232.557, 2406452.211), stdev = 34897.231
[info]   CI (99.9%): [2247855.747, 2516609.366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1089.908 ±(99.9%) 61.525 MB/sec [Average]
[info]   (min, avg, max) = (1062.263, 1089.908, 1100.875), stdev = 15.978
[info]   CI (99.9%): [1028.383, 1151.433] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   720.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (720.000, 720.000, 720.000), stdev = 0.001
[info]   CI (99.9%): [720.000, 720.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1132.307 ±(99.9%) 710.393 MB/sec [Average]
[info]   (min, avg, max) = (992.606, 1132.307, 1341.608), stdev = 184.487
[info]   CI (99.9%): [421.914, 1842.699] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   749.217 ±(99.9%) 503.968 B/op [Average]
[info]   (min, avg, max) = (649.568, 749.217, 899.419), stdev = 130.879
[info]   CI (99.9%): [245.249, 1253.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.104), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.050 ±(99.9%) 0.071 B/op [Average]
[info]   (min, avg, max) = (0.027, 0.050, 0.069), stdev = 0.018
[info]   CI (99.9%): [≈ 0, 0.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 4.000), stdev = 0.837
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce
[info] # Run progress: 97.60% complete, ETA 00:01:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5209.650 ops/s
[info] # Warmup Iteration   2: 10219.386 ops/s
[info] # Warmup Iteration   3: 11259.113 ops/s
[info] Iteration   1: 12135.097 ops/s
[info]                  ·gc.alloc.rate:                   1711.516 MB/sec
[info]                  ·gc.alloc.rate.norm:              221968.038 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1654.411 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     214561.959 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.271 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35.098 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 12066.168 ops/s
[info]                  ·gc.alloc.rate:                   1702.535 MB/sec
[info]                  ·gc.alloc.rate.norm:              221968.036 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1666.469 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     217265.851 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.124 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16.102 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 11994.061 ops/s
[info]                  ·gc.alloc.rate:                   1691.613 MB/sec
[info]                  ·gc.alloc.rate.norm:              221972.921 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1674.199 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     219687.903 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19.119 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 12030.704 ops/s
[info]                  ·gc.alloc.rate:                   1697.084 MB/sec
[info]                  ·gc.alloc.rate.norm:              222008.039 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1683.317 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     220207.060 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.170 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 12141.847 ops/s
[info]                  ·gc.alloc.rate:                   1712.736 MB/sec
[info]                  ·gc.alloc.rate.norm:              222008.036 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1688.504 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     218867.037 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.144 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18.698 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce":
[info]   12073.576 ±(99.9%) 248.518 ops/s [Average]
[info]   (min, avg, max) = (11994.061, 12073.576, 12141.847), stdev = 64.539
[info]   CI (99.9%): [11825.057, 12322.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.alloc.rate":
[info]   1703.097 ±(99.9%) 35.090 MB/sec [Average]
[info]   (min, avg, max) = (1691.613, 1703.097, 1712.736), stdev = 9.113
[info]   CI (99.9%): [1668.007, 1738.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   221985.014 ±(99.9%) 81.294 B/op [Average]
[info]   (min, avg, max) = (221968.036, 221985.014, 222008.039), stdev = 21.112
[info]   CI (99.9%): [221903.720, 222066.307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1673.380 ±(99.9%) 52.224 MB/sec [Average]
[info]   (min, avg, max) = (1654.411, 1673.380, 1688.504), stdev = 13.562
[info]   CI (99.9%): [1621.156, 1725.604] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   218117.962 ±(99.9%) 8772.670 B/op [Average]
[info]   (min, avg, max) = (214561.959, 218117.962, 220207.060), stdev = 2278.234
[info]   CI (99.9%): [209345.292, 226890.632] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.149 ±(99.9%) 0.292 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.149, 0.271), stdev = 0.076
[info]   CI (99.9%): [≈ 0, 0.441] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   19.437 ±(99.9%) 37.728 B/op [Average]
[info]   (min, avg, max) = (8.170, 19.437, 35.098), stdev = 9.798
[info]   CI (99.9%): [≈ 0, 57.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 6.000), stdev = 0.894
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala
[info] # Run progress: 97.95% complete, ETA 00:01:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5250.989 ops/s
[info] # Warmup Iteration   2: 14655.008 ops/s
[info] # Warmup Iteration   3: 14946.789 ops/s
[info] Iteration   1: 15087.297 ops/s
[info]                  ·gc.alloc.rate:                   238.612 MB/sec
[info]                  ·gc.alloc.rate.norm:              24880.031 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.907 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26683.445 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.036 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.742 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 15218.945 ops/s
[info]                  ·gc.alloc.rate:               240.615 MB/sec
[info]                  ·gc.alloc.rate.norm:          24880.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.818 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 26452.055 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 15226.287 ops/s
[info]                  ·gc.alloc.rate:                   240.699 MB/sec
[info]                  ·gc.alloc.rate.norm:              24880.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.790 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26439.897 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.229 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 15284.949 ops/s
[info]                  ·gc.alloc.rate:               241.634 MB/sec
[info]                  ·gc.alloc.rate.norm:          24880.030 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.792 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 26337.859 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 15422.325 ops/s
[info]                  ·gc.alloc.rate:      243.826 MB/sec
[info]                  ·gc.alloc.rate.norm: 24880.038 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala":
[info]   15247.961 ±(99.9%) 467.245 ops/s [Average]
[info]   (min, avg, max) = (15087.297, 15247.961, 15422.325), stdev = 121.342
[info]   CI (99.9%): [14780.715, 15715.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   241.077 ±(99.9%) 7.281 MB/sec [Average]
[info]   (min, avg, max) = (238.612, 241.077, 243.826), stdev = 1.891
[info]   CI (99.9%): [233.796, 248.358] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   24880.031 ±(99.9%) 0.016 B/op [Average]
[info]   (min, avg, max) = (24880.028, 24880.031, 24880.038), stdev = 0.004
[info]   CI (99.9%): [24880.015, 24880.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   204.661 ±(99.9%) 440.549 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.661, 255.907), stdev = 114.409
[info]   CI (99.9%): [≈ 0, 645.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   21182.651 ±(99.9%) 45599.854 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 21182.651, 26683.445), stdev = 11842.137
[info]   CI (99.9%): [≈ 0, 66782.505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.013 ±(99.9%) 0.071 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.036), stdev = 0.018
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.394 ±(99.9%) 7.384 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.394, 3.742), stdev = 1.918
[info]   CI (99.9%): [≈ 0, 8.779] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 4.000), stdev = 1.517
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala
[info] # Run progress: 98.29% complete, ETA 00:01:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16686.030 ops/s
[info] # Warmup Iteration   2: 29662.638 ops/s
[info] # Warmup Iteration   3: 36532.752 ops/s
[info] Iteration   1: 36390.355 ops/s
[info]                  ·gc.alloc.rate:                   400.731 MB/sec
[info]                  ·gc.alloc.rate.norm:              17328.192 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.704 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22126.841 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.451 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 36580.864 ops/s
[info]                  ·gc.alloc.rate:               402.833 MB/sec
[info]                  ·gc.alloc.rate.norm:          17328.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.847 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11005.362 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 36587.774 ops/s
[info]                  ·gc.alloc.rate:                   402.848 MB/sec
[info]                  ·gc.alloc.rate.norm:              17328.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.417 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14298.503 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.683 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 72.406 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 35101.228 ops/s
[info]                  ·gc.alloc.rate:                   386.513 MB/sec
[info]                  ·gc.alloc.rate.norm:              17328.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.893 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29808.268 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.867 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 35612.937 ops/s
[info]                  ·gc.alloc.rate:               392.287 MB/sec
[info]                  ·gc.alloc.rate.norm:          17328.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:      332.573 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 14690.309 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala":
[info]   36054.632 ±(99.9%) 2567.215 ops/s [Average]
[info]   (min, avg, max) = (35101.228, 36054.632, 36587.774), stdev = 666.698
[info]   CI (99.9%): [33487.416, 38621.847] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   397.042 ±(99.9%) 28.186 MB/sec [Average]
[info]   (min, avg, max) = (386.513, 397.042, 402.848), stdev = 7.320
[info]   CI (99.9%): [368.857, 425.228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   17328.048 ±(99.9%) 0.309 B/op [Average]
[info]   (min, avg, max) = (17328.012, 17328.048, 17328.192), stdev = 0.080
[info]   CI (99.9%): [17327.740, 17328.357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   419.487 ±(99.9%) 640.417 MB/sec [Average]
[info]   (min, avg, max) = (255.847, 419.487, 664.893), stdev = 166.314
[info]   CI (99.9%): [≈ 0, 1059.904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   18385.856 ±(99.9%) 29154.592 B/op [Average]
[info]   (min, avg, max) = (11005.362, 18385.856, 29808.268), stdev = 7571.355
[info]   CI (99.9%): [≈ 0, 47540.448] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.347 ±(99.9%) 2.877 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.347, 1.683), stdev = 0.747
[info]   CI (99.9%): [≈ 0, 3.224] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   14.945 ±(99.9%) 123.724 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 14.945, 72.406), stdev = 32.131
[info]   CI (99.9%): [≈ 0, 138.669] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 4.000), stdev = 1.095
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson
[info] # Run progress: 98.63% complete, ETA 00:00:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 863.526 ops/s
[info] # Warmup Iteration   2: 2904.797 ops/s
[info] # Warmup Iteration   3: 2683.818 ops/s
[info] Iteration   1: 2729.690 ops/s
[info]                  ·gc.alloc.rate:                   897.187 MB/sec
[info]                  ·gc.alloc.rate.norm:              517042.464 B/op
[info]                  ·gc.churn.PS_Eden_Space:          982.074 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     565962.174 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 48.012 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   2: 3240.475 ops/s
[info]                  ·gc.alloc.rate:                   1065.043 MB/sec
[info]                  ·gc.alloc.rate.norm:              517177.604 B/op
[info]                  ·gc.churn.PS_Eden_Space:          987.074 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     479316.675 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.110 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 3334.753 ops/s
[info]                  ·gc.alloc.rate:               1095.959 MB/sec
[info]                  ·gc.alloc.rate.norm:          517192.139 B/op
[info]                  ·gc.churn.PS_Eden_Space:      993.435 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 468810.283 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 3341.761 ops/s
[info]                  ·gc.alloc.rate:               1098.209 MB/sec
[info]                  ·gc.alloc.rate.norm:          517192.129 B/op
[info]                  ·gc.churn.PS_Eden_Space:      998.718 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 470337.934 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 3352.777 ops/s
[info]                  ·gc.alloc.rate:                   1101.843 MB/sec
[info]                  ·gc.alloc.rate.norm:              517192.129 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.088 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     628082.643 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.770 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson":
[info]   3199.891 ±(99.9%) 1026.804 ops/s [Average]
[info]   (min, avg, max) = (2729.690, 3199.891, 3352.777), stdev = 266.658
[info]   CI (99.9%): [2173.087, 4226.695] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1051.648 ±(99.9%) 337.281 MB/sec [Average]
[info]   (min, avg, max) = (897.187, 1051.648, 1101.843), stdev = 87.591
[info]   CI (99.9%): [714.367, 1388.929] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   517159.293 ±(99.9%) 252.647 B/op [Average]
[info]   (min, avg, max) = (517042.464, 517159.293, 517192.139), stdev = 65.612
[info]   CI (99.9%): [516906.647, 517411.940] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1059.878 ±(99.9%) 599.359 MB/sec [Average]
[info]   (min, avg, max) = (982.074, 1059.878, 1338.088), stdev = 155.652
[info]   CI (99.9%): [460.519, 1659.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   522501.942 ±(99.9%) 275697.241 B/op [Average]
[info]   (min, avg, max) = (468810.283, 522501.942, 628082.643), stdev = 71597.698
[info]   CI (99.9%): [246804.700, 798199.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.025 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.083), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   13.578 ±(99.9%) 76.553 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 13.578, 48.012), stdev = 19.880
[info]   CI (99.9%): [≈ 0, 90.131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.600, 17.000), stdev = 5.367
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala
[info] # Run progress: 98.97% complete, ETA 00:00:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 25113.704 ops/s
[info] # Warmup Iteration   2: 58924.061 ops/s
[info] # Warmup Iteration   3: 59454.654 ops/s
[info] Iteration   1: 59844.047 ops/s
[info]                  ·gc.alloc.rate:                   764.328 MB/sec
[info]                  ·gc.alloc.rate.norm:              20100.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          646.569 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17003.225 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.643 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 60039.086 ops/s
[info]                  ·gc.alloc.rate:                   766.819 MB/sec
[info]                  ·gc.alloc.rate.norm:              20099.996 B/op
[info]                  ·gc.churn.PS_Eden_Space:          646.548 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16947.441 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.729 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 59782.822 ops/s
[info]                  ·gc.alloc.rate:                   763.522 MB/sec
[info]                  ·gc.alloc.rate.norm:              20099.970 B/op
[info]                  ·gc.churn.PS_Eden_Space:          971.621 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25578.232 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.644 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 57020.770 ops/s
[info]                  ·gc.alloc.rate:                   728.222 MB/sec
[info]                  ·gc.alloc.rate.norm:              20099.982 B/op
[info]                  ·gc.churn.PS_Eden_Space:          650.806 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17963.191 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.575 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 57758.436 ops/s
[info]                  ·gc.alloc.rate:                   737.706 MB/sec
[info]                  ·gc.alloc.rate.norm:              20100.038 B/op
[info]                  ·gc.churn.PS_Eden_Space:          653.545 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17806.932 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.702 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala":
[info]   58889.032 ±(99.9%) 5377.886 ops/s [Average]
[info]   (min, avg, max) = (57020.770, 58889.032, 60039.086), stdev = 1396.620
[info]   CI (99.9%): [53511.146, 64266.918] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   752.119 ±(99.9%) 68.719 MB/sec [Average]
[info]   (min, avg, max) = (728.222, 752.119, 766.819), stdev = 17.846
[info]   CI (99.9%): [683.400, 820.839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   20099.999 ±(99.9%) 0.101 B/op [Average]
[info]   (min, avg, max) = (20099.970, 20099.999, 20100.038), stdev = 0.026
[info]   CI (99.9%): [20099.897, 20100.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   713.818 ±(99.9%) 555.058 MB/sec [Average]
[info]   (min, avg, max) = (646.548, 713.818, 971.621), stdev = 144.147
[info]   CI (99.9%): [158.760, 1268.876] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   19059.804 ±(99.9%) 14142.109 B/op [Average]
[info]   (min, avg, max) = (16947.441, 19059.804, 25578.232), stdev = 3672.661
[info]   CI (99.9%): [4917.695, 33201.914] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.062, 0.104), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.658 ±(99.9%) 2.934 B/op [Average]
[info]   (min, avg, max) = (0.575, 1.658, 2.729), stdev = 0.762
[info]   CI (99.9%): [≈ 0, 4.592] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala
[info] # Run progress: 99.32% complete, ETA 00:00:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 56723.891 ops/s
[info] # Warmup Iteration   2: 79855.738 ops/s
[info] # Warmup Iteration   3: 79423.240 ops/s
[info] Iteration   1: 80650.027 ops/s
[info]                  ·gc.alloc.rate:                   527.205 MB/sec
[info]                  ·gc.alloc.rate.norm:              10288.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          587.576 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11466.098 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.889 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 36.866 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 80982.496 ops/s
[info]                  ·gc.alloc.rate:               529.393 MB/sec
[info]                  ·gc.alloc.rate.norm:          10288.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.772 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6447.517 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 80145.325 ops/s
[info]                  ·gc.alloc.rate:                   523.911 MB/sec
[info]                  ·gc.alloc.rate.norm:              10288.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.173 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13003.038 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.635 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 81142.389 ops/s
[info]                  ·gc.alloc.rate:                   530.558 MB/sec
[info]                  ·gc.alloc.rate.norm:              10288.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.352 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12843.609 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.808 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 80824.244 ops/s
[info]                  ·gc.alloc.rate:               528.368 MB/sec
[info]                  ·gc.alloc.rate.norm:          10288.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.777 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6460.120 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala":
[info]   80748.896 ±(99.9%) 1477.810 ops/s [Average]
[info]   (min, avg, max) = (80145.325, 80748.896, 81142.389), stdev = 383.783
[info]   CI (99.9%): [79271.086, 82226.706] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   527.887 ±(99.9%) 9.800 MB/sec [Average]
[info]   (min, avg, max) = (523.911, 527.887, 530.558), stdev = 2.545
[info]   CI (99.9%): [518.087, 537.687] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   10288.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10288.005, 10288.005, 10288.006), stdev = 0.001
[info]   CI (99.9%): [10288.005, 10288.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   515.130 ±(99.9%) 655.127 MB/sec [Average]
[info]   (min, avg, max) = (331.772, 515.130, 662.352), stdev = 170.134
[info]   CI (99.9%): [≈ 0, 1170.257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   10044.076 ±(99.9%) 12828.334 B/op [Average]
[info]   (min, avg, max) = (6447.517, 10044.076, 13003.038), stdev = 3331.478
[info]   CI (99.9%): [≈ 0, 22872.410] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.403 ±(99.9%) 3.202 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.403, 1.889), stdev = 0.832
[info]   CI (99.9%): [≈ 0, 3.605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   7.862 ±(99.9%) 62.487 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.862, 36.866), stdev = 16.228
[info]   CI (99.9%): [≈ 0, 70.349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 4.000), stdev = 1.483
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 99.66% complete, ETA 00:00:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 62774.839 ops/s
[info] # Warmup Iteration   2: 85524.712 ops/s
[info] # Warmup Iteration   3: 85610.406 ops/s
[info] Iteration   1: 85666.915 ops/s
[info]                  ·gc.alloc.rate:      10.452 MB/sec
[info]                  ·gc.alloc.rate.norm: 192.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 85800.492 ops/s
[info]                  ·gc.alloc.rate:      10.467 MB/sec
[info]                  ·gc.alloc.rate.norm: 192.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 86008.344 ops/s
[info]                  ·gc.alloc.rate:      10.493 MB/sec
[info]                  ·gc.alloc.rate.norm: 192.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 85931.815 ops/s
[info]                  ·gc.alloc.rate:      10.484 MB/sec
[info]                  ·gc.alloc.rate.norm: 192.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 85961.431 ops/s
[info]                  ·gc.alloc.rate:      10.487 MB/sec
[info]                  ·gc.alloc.rate.norm: 192.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc":
[info]   85873.799 ±(99.9%) 535.372 ops/s [Average]
[info]   (min, avg, max) = (85666.915, 85873.799, 86008.344), stdev = 139.034
[info]   CI (99.9%): [85338.427, 86409.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   10.477 ±(99.9%) 0.064 MB/sec [Average]
[info]   (min, avg, max) = (10.452, 10.477, 10.493), stdev = 0.017
[info]   CI (99.9%): [10.412, 10.541] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   192.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (192.005, 192.005, 192.005), stdev = 0.001
[info]   CI (99.9%): [192.005, 192.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # Run complete. Total time: 01:02:06
[info] Benchmark                                                                                 Mode  Cnt         Score         Error   Units
[info] AdtBenchmark.readCirce                                                                   thrpt    5    777050.761 ±   82336.478   ops/s
[info] AdtBenchmark.readCirce:·gc.alloc.rate                                                    thrpt    5      2046.098 ±     216.955  MB/sec
[info] AdtBenchmark.readCirce:·gc.alloc.rate.norm                                               thrpt    5      4144.001 ±       0.001    B/op
[info] AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space                                           thrpt    5      2086.593 ±     590.567  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                      thrpt    5      4224.368 ±     961.312    B/op
[info] AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                       thrpt    5         0.100 ±       0.119  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                  thrpt    5         0.203 ±       0.253    B/op
[info] AdtBenchmark.readCirce:·gc.count                                                         thrpt    5        31.000                counts
[info] AdtBenchmark.readCirce:·gc.time                                                          thrpt    5        25.000                    ms
[info] AdtBenchmark.readJacksonScala                                                            thrpt    5   1626544.154 ±   52888.358   ops/s
[info] AdtBenchmark.readJacksonScala:·gc.alloc.rate                                             thrpt    5      1157.529 ±      37.985  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        thrpt    5      1120.000 ±       0.001    B/op
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                    thrpt    5      1185.480 ±     697.636  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                               thrpt    5      1146.571 ±     659.770    B/op
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                thrpt    5         0.092 ±       0.091  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                           thrpt    5         0.089 ±       0.090    B/op
[info] AdtBenchmark.readJacksonScala:·gc.count                                                  thrpt    5        18.000                counts
[info] AdtBenchmark.readJacksonScala:·gc.time                                                   thrpt    5        18.000                    ms
[info] AdtBenchmark.readJsoniterScala                                                           thrpt    5   3525912.602 ±  252753.681   ops/s
[info] AdtBenchmark.readJsoniterScala:·gc.alloc.rate                                            thrpt    5       233.033 ±      16.616  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       thrpt    5       104.000 ±       0.001    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                   thrpt    5       204.689 ±     440.607  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                              thrpt    5        91.620 ±     197.373    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                               thrpt    5         0.005 ±       0.028  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          thrpt    5         0.002 ±       0.012    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.count                                                 thrpt    5         4.000                counts
[info] AdtBenchmark.readJsoniterScala:·gc.time                                                  thrpt    5         7.000                    ms
[info] AdtBenchmark.readPlayJson                                                                thrpt    5    159322.087 ±    5296.686   ops/s
[info] AdtBenchmark.readPlayJson:·gc.alloc.rate                                                 thrpt    5      1316.957 ±      43.441  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.alloc.rate.norm                                            thrpt    5     13008.003 ±       0.001    B/op
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        thrpt    5      1320.614 ±      52.565  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   thrpt    5     13044.708 ±     609.646    B/op
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    thrpt    5         0.062 ±       0.188  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               thrpt    5         0.617 ±       1.857    B/op
[info] AdtBenchmark.readPlayJson:·gc.count                                                      thrpt    5        20.000                counts
[info] AdtBenchmark.readPlayJson:·gc.time                                                       thrpt    5        21.000                    ms
[info] AdtBenchmark.writeJacksonScala                                                           thrpt    5   2108101.094 ±  121799.048   ops/s
[info] AdtBenchmark.writeJacksonScala:·gc.alloc.rate                                            thrpt    5       878.797 ±      50.932  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       thrpt    5       656.000 ±       0.001    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                   thrpt    5       917.155 ±     566.422  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                              thrpt    5       685.045 ±     431.619    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                               thrpt    5         0.092 ±       0.201  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                          thrpt    5         0.069 ±       0.151    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.count                                                 thrpt    5        14.000                counts
[info] AdtBenchmark.writeJacksonScala:·gc.time                                                  thrpt    5        14.000                    ms
[info] AdtBenchmark.writeJsoniterScala                                                          thrpt    5   8992992.074 ±  428315.703   ops/s
[info] AdtBenchmark.writeJsoniterScala:·gc.alloc.rate                                           thrpt    5       457.205 ±      21.788  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      thrpt    5        80.000 ±       0.001    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  thrpt    5       449.644 ±     764.443  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             thrpt    5        78.638 ±     133.681    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                              thrpt    5         0.394 ±       2.993  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         thrpt    5         0.069 ±       0.526    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.count                                                thrpt    5         7.000                counts
[info] AdtBenchmark.writeJsoniterScala:·gc.time                                                 thrpt    5         9.000                    ms
[info] AdtBenchmark.writePlayJson                                                               thrpt    5    310952.962 ±    4897.590   ops/s
[info] AdtBenchmark.writePlayJson:·gc.alloc.rate                                                thrpt    5       994.406 ±      15.239  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.alloc.rate.norm                                           thrpt    5      5032.001 ±       0.001    B/op
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                       thrpt    5       983.917 ±      26.489  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                  thrpt    5      4978.958 ±     135.488    B/op
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                   thrpt    5         0.062 ±       0.080  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                              thrpt    5         0.316 ±       0.403    B/op
[info] AdtBenchmark.writePlayJson:·gc.count                                                     thrpt    5        15.000                counts
[info] AdtBenchmark.writePlayJson:·gc.time                                                      thrpt    5        15.000                    ms
[info] AnyRefsBenchmark.readCirce                                                               thrpt    5   1618163.924 ±   81418.264   ops/s
[info] AnyRefsBenchmark.readCirce:·gc.alloc.rate                                                thrpt    5      2550.075 ±     128.294  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.alloc.rate.norm                                           thrpt    5      2480.000 ±       0.001    B/op
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                       thrpt    5      2571.539 ±     706.785  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                  thrpt    5      2502.127 ±     755.163    B/op
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                   thrpt    5         0.100 ±       0.164  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                              thrpt    5         0.097 ±       0.156    B/op
[info] AnyRefsBenchmark.readCirce:·gc.count                                                     thrpt    5        38.000                counts
[info] AnyRefsBenchmark.readCirce:·gc.time                                                      thrpt    5        34.000                    ms
[info] AnyRefsBenchmark.readJacksonScala                                                        thrpt    5   2533480.617 ±  186249.513   ops/s
[info] AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate                                         thrpt    5      1777.383 ±     130.942  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                    thrpt    5      1104.000 ±       0.001    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                thrpt    5      1802.757 ±     682.741  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                           thrpt    5      1119.777 ±     417.122    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                            thrpt    5         0.104 ±       0.234  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                       thrpt    5         0.064 ±       0.140    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.count                                              thrpt    5        27.000                counts
[info] AnyRefsBenchmark.readJacksonScala:·gc.time                                               thrpt    5        26.000                    ms
[info] AnyRefsBenchmark.readJsoniterScala                                                       thrpt    5  10377880.490 ±  556360.636   ops/s
[info] AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate                                        thrpt    5      1318.884 ±      70.977  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                   thrpt    5       200.000 ±       0.001    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                               thrpt    5      1345.208 ±      21.254  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                          thrpt    5       204.016 ±       8.630    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                           thrpt    5         0.075 ±       0.146  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      thrpt    5         0.011 ±       0.023    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.count                                             thrpt    5        20.000                counts
[info] AnyRefsBenchmark.readJsoniterScala:·gc.time                                              thrpt    5        16.000                    ms
[info] AnyRefsBenchmark.readPlayJson                                                            thrpt    5    622750.220 ±   24311.773   ops/s
[info] AnyRefsBenchmark.readPlayJson:·gc.alloc.rate                                             thrpt    5      1646.173 ±      63.532  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.alloc.rate.norm                                        thrpt    5      4160.001 ±       0.001    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                    thrpt    5      1662.105 ±      73.508  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                               thrpt    5      4200.245 ±      74.863    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                thrpt    5         0.087 ±       0.119  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                           thrpt    5         0.221 ±       0.300    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.count                                                  thrpt    5        25.000                counts
[info] AnyRefsBenchmark.readPlayJson:·gc.time                                                   thrpt    5        26.000                    ms
[info] AnyRefsBenchmark.writeCirce                                                              thrpt    5   1887381.976 ±   84581.349   ops/s
[info] AnyRefsBenchmark.writeCirce:·gc.alloc.rate                                               thrpt    5      1899.781 ±      85.798  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.alloc.rate.norm                                          thrpt    5      1584.000 ±       0.001    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                      thrpt    5      1949.494 ±     577.218  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                 thrpt    5      1625.582 ±     484.310    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                  thrpt    5         0.092 ±       0.146  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                             thrpt    5         0.076 ±       0.122    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.count                                                    thrpt    5        29.000                counts
[info] AnyRefsBenchmark.writeCirce:·gc.time                                                     thrpt    5        25.000                    ms
[info] AnyRefsBenchmark.writeJacksonScala                                                       thrpt    5   5937528.114 ±  376002.103   ops/s
[info] AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate                                        thrpt    5      1629.851 ±     103.494  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                   thrpt    5       432.000 ±       0.001    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                               thrpt    5      1595.050 ±     537.343  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                          thrpt    5       422.458 ±     123.391    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                           thrpt    5         0.100 ±       0.132  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                      thrpt    5         0.026 ±       0.034    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.count                                             thrpt    5        24.000                counts
[info] AnyRefsBenchmark.writeJacksonScala:·gc.time                                              thrpt    5        23.000                    ms
[info] AnyRefsBenchmark.writeJsoniterScala                                                      thrpt    5  22907537.780 ±  407769.264   ops/s
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate                                       thrpt    5       698.751 ±      11.836  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                  thrpt    5        48.000 ±       0.001    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                              thrpt    5       664.989 ±       2.824  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                         thrpt    5        45.681 ±       0.791    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                          thrpt    5         0.067 ±       0.191  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         0.005 ±       0.013    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.count                                            thrpt    5        10.000                counts
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.time                                             thrpt    5         8.000                    ms
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc                                              thrpt    5  27571586.189 ± 2246035.707   ops/s
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                               thrpt    5        ≈ 10⁻⁴                MB/sec
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                          thrpt    5        ≈ 10⁻⁵                  B/op
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                    thrpt    5           ≈ 0                counts
[info] AnyRefsBenchmark.writePlayJson                                                           thrpt    5   1080002.928 ±   37927.393   ops/s
[info] AnyRefsBenchmark.writePlayJson:·gc.alloc.rate                                            thrpt    5      1619.561 ±      56.735  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.alloc.rate.norm                                       thrpt    5      2360.000 ±       0.001    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                   thrpt    5      1662.370 ±      72.907  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                              thrpt    5      2422.605 ±     156.043    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                               thrpt    5         0.092 ±       0.134  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                          thrpt    5         0.133 ±       0.194    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.count                                                 thrpt    5        25.000                counts
[info] AnyRefsBenchmark.writePlayJson:·gc.time                                                  thrpt    5        30.000                    ms
[info] ArrayOfBigDecimalsBenchmark.readCirce                                                    thrpt    5     14638.720 ±     288.618   ops/s
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate                                     thrpt    5      1321.798 ±      26.575  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate.norm                                thrpt    5    142091.320 ±      26.425    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space                            thrpt    5      1337.779 ±      30.821  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                       thrpt    5    143812.315 ±    4381.194    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                        thrpt    5         0.067 ±       0.119  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                   thrpt    5         7.174 ±      12.879    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.count                                          thrpt    5        20.000                counts
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.time                                           thrpt    5        18.000                    ms
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala                                             thrpt    5     19150.018 ±    1386.925   ops/s
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate                              thrpt    5       739.856 ±      52.797  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate.norm                         thrpt    5     60784.627 ±      57.244    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                     thrpt    5       721.615 ±     562.431  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                thrpt    5     59347.169 ±   47737.076    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                 thrpt    5         0.050 ±       0.122  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm            thrpt    5         4.128 ±      10.092    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.count                                   thrpt    5        11.000                counts
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.time                                    thrpt    5         9.000                    ms
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala                                            thrpt    5     16149.495 ±     229.936   ops/s
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate                             thrpt    5       299.630 ±       4.269  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                        thrpt    5     29200.030 ±       0.016    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                    thrpt    5       286.710 ±     162.964  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm               thrpt    5     27939.743 ±   15836.837    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                thrpt    5         0.354 ±       2.806  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm           thrpt    5        34.594 ±     274.066    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.count                                  thrpt    5         5.000                counts
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.time                                   thrpt    5         8.000                    ms
[info] ArrayOfBigDecimalsBenchmark.readPlayJson                                                 thrpt    5     16417.604 ±     571.036   ops/s
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate                                  thrpt    5       926.414 ±      32.225  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate.norm                             thrpt    5     88808.029 ±       0.020    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                         thrpt    5       922.332 ±     555.922  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                    thrpt    5     88403.834 ±   52943.191    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                     thrpt    5         0.058 ±       0.067  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                thrpt    5         5.581 ±       6.318    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.count                                       thrpt    5        14.000                counts
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.time                                        thrpt    5        14.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeCirce                                                   thrpt    5     12507.609 ±     342.273   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate                                    thrpt    5      1730.355 ±      48.154  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate.norm                               thrpt    5    217715.487 ±     126.750    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                           thrpt    5      1745.537 ±     585.349  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                      thrpt    5    219606.318 ±   72196.855    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                       thrpt    5         0.112 ±       0.257  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                  thrpt    5        14.152 ±      32.308    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.count                                         thrpt    5        26.000                counts
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.time                                          thrpt    5        23.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala                                            thrpt    5     12021.276 ±     570.737   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate                             thrpt    5      1462.942 ±      70.821  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                        thrpt    5    191496.064 ±       0.291    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                    thrpt    5      1461.743 ±     737.776  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm               thrpt    5    191391.752 ±   98071.280    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                thrpt    5         0.087 ±       0.207  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm           thrpt    5        11.465 ±      27.246    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.count                                  thrpt    5        22.000                counts
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.time                                   thrpt    5        26.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala                                           thrpt    5     13215.390 ±     811.030   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate                            thrpt    5      1561.014 ±      95.692  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                       thrpt    5    185904.036 ±       0.019    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                   thrpt    5      1611.612 ±     577.040  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm              thrpt    5    192032.210 ±   72417.513    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space               thrpt    5         0.092 ±       0.122  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm          thrpt    5        10.926 ±      14.697    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.count                                 thrpt    5        24.000                counts
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.time                                  thrpt    5        22.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc                                   thrpt    5     13302.458 ±     489.147   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                    thrpt    5      1545.774 ±      56.932  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm               thrpt    5    182872.035 ±       0.020    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space           thrpt    5      1544.112 ±     688.663  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm      thrpt    5    182651.967 ±   80248.326    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space       thrpt    5         0.112 ±       0.156  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm  thrpt    5        13.272 ±      18.103    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.count                         thrpt    5        23.000                counts
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.time                          thrpt    5        20.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writePlayJson                                                thrpt    5      4219.065 ±     184.347   ops/s
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate                                 thrpt    5      1142.448 ±      50.085  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate.norm                            thrpt    5    426136.009 ±       1.347    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                        thrpt    5      1194.156 ±     701.442  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                   thrpt    5    445505.772 ±  263559.717    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                    thrpt    5         0.054 ±       0.072  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm               thrpt    5        20.153 ±      26.006    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.count                                      thrpt    5        18.000                counts
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.time                                       thrpt    5        16.000                    ms
[info] ArrayOfBigIntsBenchmark.readCirce                                                        thrpt    5      7519.364 ±     311.167   ops/s
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate                                         thrpt    5      1265.559 ±      52.807  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate.norm                                    thrpt    5    264824.058 ±       0.007    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                thrpt    5      1203.954 ±     706.751  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                           thrpt    5    251763.817 ±  142337.614    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                            thrpt    5         0.087 ±       0.207  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                       thrpt    5        18.336 ±      43.895    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.count                                              thrpt    5        18.000                counts
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.time                                               thrpt    5        16.000                    ms
[info] ArrayOfBigIntsBenchmark.readJacksonScala                                                 thrpt    5     24756.681 ±     973.796   ops/s
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate                                  thrpt    5      1064.209 ±      41.421  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                             thrpt    5     67643.458 ±      61.030    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                         thrpt    5      1056.823 ±     580.269  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5     67232.716 ±   39091.317    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                     thrpt    5         0.104 ±       0.098  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5         6.613 ±       6.160    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.count                                       thrpt    5        16.000                counts
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.time                                        thrpt    5        14.000                    ms
[info] ArrayOfBigIntsBenchmark.readJsoniterScala                                                thrpt    5     30365.884 ±     819.802   ops/s
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                 thrpt    5       551.238 ±      14.997  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                            thrpt    5     28568.015 ±       0.009    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                        thrpt    5       533.102 ±     703.134  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5     27596.212 ±   36038.321    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                    thrpt    5         0.346 ±       2.715  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5        17.885 ±     140.514    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.count                                      thrpt    5         8.000                counts
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.time                                       thrpt    5         8.000                    ms
[info] ArrayOfBigIntsBenchmark.writeJacksonScala                                                thrpt    5     13110.851 ±     558.596   ops/s
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                 thrpt    5      1389.260 ±      59.696  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                            thrpt    5    166760.034 ±       0.386    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                        thrpt    5      1393.507 ±     552.314  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5    167311.544 ±   67868.523    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                    thrpt    5         0.104 ±       0.196  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5        12.504 ±      23.669    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.count                                      thrpt    5        21.000                counts
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.time                                       thrpt    5        20.000                    ms
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala                                               thrpt    5     14612.378 ±     354.426   ops/s
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                thrpt    5      1415.651 ±      34.931  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                           thrpt    5    152456.033 ±       0.026    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                       thrpt    5      1407.768 ±     549.922  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5    151647.688 ±   61222.374    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                   thrpt    5         0.083 ±       0.127  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5         8.965 ±      13.671    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.count                                     thrpt    5        21.000                counts
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.time                                      thrpt    5        18.000                    ms
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc                                       thrpt    5     14924.801 ±     447.678   ops/s
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                        thrpt    5      1396.499 ±      41.398  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                   thrpt    5    147248.031 ±       0.018    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space               thrpt    5      1407.927 ±     563.231  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm          thrpt    5    148513.154 ±   62261.845    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space           thrpt    5         0.087 ±       0.143  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm      thrpt    5         9.237 ±      15.332    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                             thrpt    5        21.000                counts
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.time                              thrpt    5        18.000                    ms
[info] ArrayOfBooleansBenchmark.readCirce                                                       thrpt    5    324132.105 ±   14099.259   ops/s
[info] ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate                                        thrpt    5      1787.603 ±      77.807  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                   thrpt    5      8680.001 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                               thrpt    5      1817.797 ±     704.467  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                          thrpt    5      8830.861 ±    3602.677    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                           thrpt    5         0.087 ±       0.154  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                      thrpt    5         0.424 ±       0.738    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.count                                             thrpt    5        27.000                counts
[info] ArrayOfBooleansBenchmark.readCirce:·gc.time                                              thrpt    5        23.000                    ms
[info] ArrayOfBooleansBenchmark.readJacksonScala                                                thrpt    5    700886.589 ±    4292.144   ops/s
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                 thrpt    5       580.711 ±       3.545  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                            thrpt    5      1304.001 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                        thrpt    5       589.217 ±     564.987  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5      1323.277 ±    1270.978    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                    thrpt    5         0.479 ±       3.679  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5         1.075 ±       8.251    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.count                                      thrpt    5         9.000                counts
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.time                                       thrpt    5         9.000                    ms
[info] ArrayOfBooleansBenchmark.readJsoniterScala                                               thrpt    5   1728280.845 ±   88913.969   ops/s
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                thrpt    5       333.863 ±      17.069  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                           thrpt    5       304.000 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                       thrpt    5       302.071 ±     162.463  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5       274.932 ±     143.438    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                   thrpt    5         0.333 ±       2.760  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5         0.308 ±       2.551    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.count                                     thrpt    5         5.000                counts
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.time                                      thrpt    5         8.000                    ms
[info] ArrayOfBooleansBenchmark.readPlayJson                                                    thrpt    5    104528.176 ±    4966.873   ops/s
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                     thrpt    5      3797.749 ±     181.145  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                thrpt    5     57176.004 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                            thrpt    5      3804.243 ±     582.406  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                       thrpt    5     57270.801 ±    7881.837    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                        thrpt    5         0.142 ±       0.222  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                   thrpt    5         2.127 ±       3.285    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.count                                          thrpt    5        56.000                counts
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.time                                           thrpt    5        44.000                    ms
[info] ArrayOfBooleansBenchmark.writeCirce                                                      thrpt    5    349394.910 ±     874.283   ops/s
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                       thrpt    5      1189.995 ±       2.434  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                  thrpt    5      5360.001 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space                              thrpt    5      1199.826 ±     703.993  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                         thrpt    5      5404.355 ±    3172.990    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                          thrpt    5         0.079 ±       0.088  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         0.356 ±       0.395    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.count                                            thrpt    5        18.000                counts
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.time                                             thrpt    5        15.000                    ms
[info] ArrayOfBooleansBenchmark.writeJacksonScala                                               thrpt    5    889443.472 ±   12195.940   ops/s
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                thrpt    5       628.492 ±       8.824  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                           thrpt    5      1112.000 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                       thrpt    5       655.152 ±       6.587  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5      1159.178 ±      14.191    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                   thrpt    5         0.479 ±       3.455  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5         0.848 ±       6.118    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.count                                     thrpt    5        10.000                counts
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.time                                      thrpt    5        10.000                    ms
[info] ArrayOfBooleansBenchmark.writeJsoniterScala                                              thrpt    5   2032174.306 ±  117035.076   ops/s
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                               thrpt    5       940.078 ±      54.251  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                          thrpt    5       728.000 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                      thrpt    5       932.406 ±     566.051  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5       722.146 ±     439.928    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                  thrpt    5         0.083 ±       0.150  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5         0.064 ±       0.115    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.count                                    thrpt    5        14.000                counts
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.time                                     thrpt    5        12.000                    ms
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc                                      thrpt    5   2453203.887 ±   44593.039   ops/s
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                       thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                            thrpt    5           ≈ 0                counts
[info] ArrayOfBooleansBenchmark.writePlayJson                                                   thrpt    5    502687.825 ±   29309.184   ops/s
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                    thrpt    5       587.761 ±      34.503  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                               thrpt    5      1840.001 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                           thrpt    5       591.894 ±     567.209  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                      thrpt    5      1847.603 ±    1702.800    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                       thrpt    5         0.446 ±       3.528  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                  thrpt    5         1.382 ±      10.931    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.count                                         thrpt    5         9.000                counts
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.time                                          thrpt    5         9.000                    ms
[info] ArrayOfBytesBenchmark.readCirce                                                          thrpt    5    171441.563 ±    4961.703   ops/s
[info] ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate                                           thrpt    5      2107.310 ±      60.330  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate.norm                                      thrpt    5     19344.003 ±       0.001    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                  thrpt    5      2093.437 ±     569.757  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                             thrpt    5     19222.605 ±    5629.179    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                              thrpt    5         0.142 ±       0.132  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                         thrpt    5         1.300 ±       1.226    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.count                                                thrpt    5        31.000                counts
[info] ArrayOfBytesBenchmark.readCirce:·gc.time                                                 thrpt    5        26.000                    ms
[info] ArrayOfBytesBenchmark.readJacksonScala                                                   thrpt    5    423075.540 ±    6693.277   ops/s
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate                                    thrpt    5       350.532 ±       5.547  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate.norm                               thrpt    5      1304.001 ±       0.001    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                           thrpt    5       349.589 ±     368.288  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                      thrpt    5      1300.624 ±    1376.687    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                       thrpt    5         0.446 ±       3.705  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                  thrpt    5         1.657 ±      13.771    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.count                                         thrpt    5         6.000                counts
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.time                                          thrpt    5        12.000                    ms
[info] ArrayOfBytesBenchmark.readJsoniterScala                                                  thrpt    5    970476.269 ±   72001.509   ops/s
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate                                   thrpt    5       187.490 ±      13.856  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                              thrpt    5       304.000 ±       0.001    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                          thrpt    5       204.682 ±     440.594  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5       329.962 ±     710.616    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                      thrpt    5         0.006 ±       0.036  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5         0.010 ±       0.058    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.count                                        thrpt    5         4.000                counts
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.time                                         thrpt    5         8.000                    ms
[info] ArrayOfBytesBenchmark.readPlayJson                                                       thrpt    5     81048.994 ±    2772.392   ops/s
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate                                        thrpt    5      3345.197 ±     114.491  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate.norm                                   thrpt    5     64952.005 ±       0.001    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                               thrpt    5      3324.325 ±     636.358  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                          thrpt    5     64553.039 ±   12764.272    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                           thrpt    5         0.150 ±       0.154  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                      thrpt    5         2.913 ±       3.046    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.count                                             thrpt    5        49.000                counts
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.time                                              thrpt    5        44.000                    ms
[info] ArrayOfBytesBenchmark.writeCirce                                                         thrpt    5    269094.101 ±   12919.062   ops/s
[info] ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate                                          thrpt    5      1484.289 ±      71.196  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate.norm                                     thrpt    5      8680.002 ±       0.001    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                 thrpt    5      1473.762 ±     730.904  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                            thrpt    5      8612.935 ±    4036.909    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                             thrpt    5         0.067 ±       0.067  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                        thrpt    5         0.390 ±       0.394    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.count                                               thrpt    5        22.000                counts
[info] ArrayOfBytesBenchmark.writeCirce:·gc.time                                                thrpt    5        19.000                    ms
[info] ArrayOfBytesBenchmark.writeJsoniterScala                                                 thrpt    5   1806507.636 ±  109731.027   ops/s
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate                                  thrpt    5       486.765 ±      29.721  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                             thrpt    5       424.000 ±       0.001    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                         thrpt    5       516.032 ±     657.243  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5       450.869 ±     591.264    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                     thrpt    5         0.391 ±       3.008  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5         0.338 ±       2.600    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.count                                       thrpt    5         8.000                counts
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.time                                        thrpt    5        10.000                    ms
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc                                         thrpt    5   1966296.242 ±    9838.579   ops/s
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                          thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                     thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.count                               thrpt    5           ≈ 0                counts
[info] ArrayOfBytesBenchmark.writePlayJson                                                      thrpt    5     38506.081 ±    1470.412   ops/s
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate                                       thrpt    5      1680.126 ±      64.377  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate.norm                                  thrpt    5     68656.610 ±       5.156    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                              thrpt    5      1674.619 ±      54.620  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                         thrpt    5     68436.283 ±    3172.426    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                          thrpt    5         0.087 ±       0.105  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         3.574 ±       4.277    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.count                                            thrpt    5        25.000                counts
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.time                                             thrpt    5        22.000                    ms
[info] ArrayOfDoublesBenchmark.readCirce                                                        thrpt    5     25197.352 ±     406.960   ops/s
[info] ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate                                         thrpt    5      1587.181 ±      25.802  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate.norm                                    thrpt    5     99109.434 ±      29.333    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                thrpt    5      1611.303 ±     592.720  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                           thrpt    5    100602.383 ±   36379.143    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                            thrpt    5         0.079 ±       0.132  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                       thrpt    5         4.944 ±       8.227    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.count                                              thrpt    5        24.000                counts
[info] ArrayOfDoublesBenchmark.readCirce:·gc.time                                               thrpt    5        25.000                    ms
[info] ArrayOfDoublesBenchmark.readJacksonScala                                                 thrpt    5     58058.888 ±     433.987   ops/s
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate                                  thrpt    5      1017.577 ±       7.653  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate.norm                             thrpt    5     27584.008 ±       0.001    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                         thrpt    5      1055.483 ±     580.776  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5     28616.785 ±   15949.726    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                     thrpt    5         0.062 ±       0.150  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5         1.693 ±       4.066    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.count                                       thrpt    5        16.000                counts
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.time                                        thrpt    5        14.000                    ms
[info] ArrayOfDoublesBenchmark.readJsoniterScala                                                thrpt    5     65961.439 ±    5519.126   ops/s
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate                                 thrpt    5       443.599 ±      37.167  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                            thrpt    5     10584.007 ±       0.001    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                        thrpt    5       450.344 ±     766.017  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5     10767.114 ±   18458.224    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                    thrpt    5         0.357 ±       2.855  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5         8.390 ±      66.863    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.count                                      thrpt    5         7.000                counts
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.time                                       thrpt    5         8.000                    ms
[info] ArrayOfDoublesBenchmark.readPlayJson                                                     thrpt    5     33898.610 ±    1198.632   ops/s
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate                                      thrpt    5      1734.809 ±      61.837  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate.norm                                 thrpt    5     80538.186 ±      18.696    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                             thrpt    5      1738.688 ±     556.276  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                        thrpt    5     80702.641 ±   24641.700    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                         thrpt    5         0.087 ±       0.088  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                    thrpt    5         4.054 ±       3.984    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.count                                           thrpt    5        26.000                counts
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.time                                            thrpt    5        24.000                    ms
[info] ArrayOfDoublesBenchmark.writeCirce                                                       thrpt    5     38811.821 ±    1691.960   ops/s
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate                                        thrpt    5       612.272 ±      26.642  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate.norm                                   thrpt    5     24824.494 ±       4.155    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                               thrpt    5       594.426 ±     566.895  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                          thrpt    5     24076.112 ±   22655.490    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                           thrpt    5         0.409 ±       2.984  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                      thrpt    5        16.477 ±     120.211    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.count                                             thrpt    5         9.000                counts
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.time                                              thrpt    5         8.000                    ms
[info] ArrayOfDoublesBenchmark.writeJacksonScala                                                thrpt    5     40481.535 ±    2359.072   ops/s
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate                                 thrpt    5       407.116 ±      23.946  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                            thrpt    5     15824.011 ±       0.002    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                        thrpt    5       429.472 ±     574.826  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5     16637.760 ±   21281.678    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                    thrpt    5         0.450 ±       3.509  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5        17.646 ±     137.946    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.count                                      thrpt    5         7.000                counts
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.time                                       thrpt    5        10.000                    ms
[info] ArrayOfDoublesBenchmark.writeJsoniterScala                                               thrpt    5     42765.309 ±     802.497   ops/s
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate                                thrpt    5       419.614 ±       7.802  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                           thrpt    5     15440.010 ±       0.001    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                       thrpt    5       383.240 ±     618.211  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5     14084.545 ±   22474.182    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                   thrpt    5         0.375 ±       2.921  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5        13.753 ±     107.066    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.count                                     thrpt    5         6.000                counts
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.time                                      thrpt    5         7.000                    ms
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc                                       thrpt    5     44402.377 ±    4718.640   ops/s
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                        thrpt    5       384.900 ±      40.686  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                   thrpt    5     13640.010 ±       0.001    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space               thrpt    5       368.088 ±     491.185  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm          thrpt    5     13139.223 ±   19247.595    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space           thrpt    5         0.380 ±       3.020  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm      thrpt    5        14.077 ±     112.316    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.count                             thrpt    5         6.000                counts
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.time                              thrpt    5         8.000                    ms
[info] ArrayOfDurationsBenchmark.readCirce                                                      thrpt    5     14853.790 ±     974.822   ops/s
[info] ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate                                       thrpt    5      1060.314 ±      69.981  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate.norm                                  thrpt    5    112341.960 ±      53.898    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space                              thrpt    5       999.226 ±      17.927  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                         thrpt    5    105891.063 ±    6246.255    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                          thrpt    5         0.075 ±       0.146  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         7.931 ±      15.322    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.count                                            thrpt    5        15.000                counts
[info] ArrayOfDurationsBenchmark.readCirce:·gc.time                                             thrpt    5        13.000                    ms
[info] ArrayOfDurationsBenchmark.readJacksonScala                                               thrpt    5     16409.560 ±    1347.167   ops/s
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate                                thrpt    5       995.657 ±      81.903  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate.norm                           thrpt    5     95483.357 ±      59.196    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                       thrpt    5       988.907 ±      25.076  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5     94860.362 ±    5528.848    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                   thrpt    5         0.067 ±       0.174  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5         6.397 ±      16.524    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.count                                     thrpt    5        15.000                counts
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.time                                      thrpt    5        13.000                    ms
[info] ArrayOfDurationsBenchmark.readJsoniterScala                                              thrpt    5     73742.548 ±    4684.049   ops/s
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate                               thrpt    5       191.917 ±      12.182  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                          thrpt    5      4096.006 ±       0.001    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                      thrpt    5       204.642 ±     440.506  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5      4368.101 ±    9409.304    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                  thrpt    5         0.002 ±       0.018  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5         0.044 ±       0.380    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.count                                    thrpt    5         4.000                counts
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.time                                     thrpt    5         7.000                    ms
[info] ArrayOfDurationsBenchmark.readPlayJson                                                   thrpt    5     13191.075 ±     900.263   ops/s
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate                                    thrpt    5      1263.935 ±      86.154  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate.norm                               thrpt    5    150800.241 ±       1.791    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                           thrpt    5      1261.161 ±     585.794  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                      thrpt    5    150263.896 ±   61876.724    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                       thrpt    5         0.050 ±       0.044  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                  thrpt    5         5.954 ±       5.074    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.count                                         thrpt    5        19.000                counts
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.time                                          thrpt    5        17.000                    ms
[info] ArrayOfDurationsBenchmark.writeCirce                                                     thrpt    5     55770.576 ±     852.920   ops/s
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate                                      thrpt    5      1382.731 ±      20.454  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate.norm                                 thrpt    5     39016.008 ±       0.001    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                             thrpt    5      1337.289 ±      33.587  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                        thrpt    5     37734.027 ±     949.568    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                         thrpt    5         0.092 ±       0.185  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                    thrpt    5         2.585 ±       5.218    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.count                                           thrpt    5        20.000                counts
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.time                                            thrpt    5        17.000                    ms
[info] ArrayOfDurationsBenchmark.writeJsoniterScala                                             thrpt    5    281545.974 ±   16128.775   ops/s
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate                              thrpt    5       446.554 ±      25.451  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                         thrpt    5      2496.002 ±       0.001    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                     thrpt    5       449.550 ±     763.849  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                thrpt    5      2515.767 ±    4309.469    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                 thrpt    5         0.396 ±       3.085  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm            thrpt    5         2.255 ±      17.620    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.count                                   thrpt    5         7.000                counts
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.time                                    thrpt    5         9.000                    ms
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc                                     thrpt    5    337346.241 ±    4020.173   ops/s
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                      thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                 thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.count                           thrpt    5           ≈ 0                counts
[info] ArrayOfDurationsBenchmark.writePlayJson                                                  thrpt    5     71911.978 ±    1394.301   ops/s
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate                                   thrpt    5      1357.767 ±      26.595  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate.norm                              thrpt    5     29712.006 ±       0.001    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                          thrpt    5      1399.178 ±     577.310  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                     thrpt    5     30619.224 ±   12666.370    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                      thrpt    5         0.067 ±       0.143  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                 thrpt    5         1.457 ±       3.131    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.count                                        thrpt    5        21.000                counts
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.time                                         thrpt    5        18.000                    ms
[info] ArrayOfEnumsBenchmark.readCirce                                                          thrpt    5     26642.741 ±     949.812   ops/s
[info] ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate                                           thrpt    5       591.899 ±      21.412  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate.norm                                      thrpt    5     34960.018 ±       0.012    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                  thrpt    5       593.557 ±     569.322  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                             thrpt    5     35071.871 ±   33807.861    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                              thrpt    5         0.396 ±       3.052  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                         thrpt    5        23.284 ±     179.363    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.count                                                thrpt    5         9.000                counts
[info] ArrayOfEnumsBenchmark.readCirce:·gc.time                                                 thrpt    5        10.000                    ms
[info] ArrayOfEnumsBenchmark.readJsoniterScala                                                  thrpt    5    123199.695 ±   10789.131   ops/s
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate                                   thrpt    5       481.016 ±      42.138  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                              thrpt    5      6144.004 ±       0.001    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                          thrpt    5       450.238 ±     628.968  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5      5771.826 ±    8295.755    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                      thrpt    5         0.354 ±       2.783  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5         4.699 ±      37.080    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.count                                        thrpt    5         7.000                counts
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.time                                         thrpt    5         9.000                    ms
[info] ArrayOfEnumsBenchmark.readPlayJson                                                       thrpt    5     21651.289 ±     735.106   ops/s
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate                                        thrpt    5      1209.991 ±      41.148  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm                                   thrpt    5     87944.061 ±       0.332    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                               thrpt    5      1253.359 ±     583.795  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                          thrpt    5     91059.618 ±   41075.535    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                           thrpt    5         0.058 ±       0.067  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                      thrpt    5         4.239 ±       4.885    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.count                                             thrpt    5        19.000                counts
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.time                                              thrpt    5        21.000                    ms
[info] ArrayOfEnumsBenchmark.writeCirce                                                         thrpt    5    163603.654 ±    9280.155   ops/s
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate                                          thrpt    5      1070.331 ±      60.711  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate.norm                                     thrpt    5     10296.003 ±       0.001    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                 thrpt    5      1063.770 ±     554.059  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                            thrpt    5     10222.515 ±    4835.539    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                             thrpt    5         0.079 ±       0.067  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                        thrpt    5         0.762 ±       0.657    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.count                                               thrpt    5        16.000                counts
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.time                                                thrpt    5        13.000                    ms
[info] ArrayOfEnumsBenchmark.writeJsoniterScala                                                 thrpt    5    547366.454 ±   43649.094   ops/s
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate                                  thrpt    5       420.147 ±      33.412  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                             thrpt    5      1208.001 ±       0.001    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                         thrpt    5       383.071 ±     617.887  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5      1103.999 ±    1800.178    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                     thrpt    5         0.367 ±       3.002  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5         1.070 ±       8.766    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.count                                       thrpt    5         6.000                counts
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.time                                        thrpt    5         8.000                    ms
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc                                         thrpt    5    606227.331 ±    1733.134   ops/s
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                          thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                     thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count                               thrpt    5           ≈ 0                counts
[info] ArrayOfEnumsBenchmark.writePlayJson                                                      thrpt    5    328819.250 ±   14310.703   ops/s
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate                                       thrpt    5       909.383 ±      39.987  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm                                  thrpt    5      4352.001 ±       0.001    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                              thrpt    5       917.962 ±     558.910  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                         thrpt    5      4387.774 ±    2539.658    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                          thrpt    5         0.087 ±       0.105  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         0.418 ±       0.495    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.count                                            thrpt    5        14.000                counts
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.time                                             thrpt    5        14.000                    ms
[info] ArrayOfFloatsBenchmark.readCirce                                                         thrpt    5     35706.660 ±     700.057   ops/s
[info] ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate                                          thrpt    5      1682.696 ±      32.754  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate.norm                                     thrpt    5     74160.013 ±       0.009    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                 thrpt    5      1680.413 ±      42.974  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                            thrpt    5     74061.569 ±    2729.192    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                             thrpt    5         0.087 ±       0.105  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                        thrpt    5         3.852 ±       4.589    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.count                                               thrpt    5        25.000                counts
[info] ArrayOfFloatsBenchmark.readCirce:·gc.time                                                thrpt    5        22.000                    ms
[info] ArrayOfFloatsBenchmark.readJacksonScala                                                  thrpt    5     93514.594 ±    2486.958   ops/s
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate                                   thrpt    5      1091.720 ±      30.535  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate.norm                              thrpt    5     18371.694 ±      31.764    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                          thrpt    5      1056.894 ±     568.084  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5     17782.886 ±    9421.581    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                      thrpt    5         0.075 ±       0.122  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5         1.261 ±       2.036    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.count                                        thrpt    5        16.000                counts
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.time                                         thrpt    5        14.000                    ms
[info] ArrayOfFloatsBenchmark.readJsoniterScala                                                 thrpt    5    159092.078 ±    5247.767   ops/s
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate                                  thrpt    5       103.522 ±       3.441  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                             thrpt    5      1024.003 ±       0.001    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                         thrpt    5       102.332 ±     539.567  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5      1010.888 ±    5330.386    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                     thrpt    5         0.442 ±       3.729  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5         4.336 ±      36.545    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.count                                       thrpt    5         2.000                counts
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.time                                        thrpt    5         3.000                    ms
[info] ArrayOfFloatsBenchmark.readPlayJson                                                      thrpt    5     38324.750 ±    1549.694   ops/s
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate                                       thrpt    5      2009.489 ±      81.417  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate.norm                                  thrpt    5     82504.012 ±       0.007    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                              thrpt    5      2013.557 ±     850.550  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                         thrpt    5     82651.962 ±   34271.247    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                          thrpt    5         0.092 ±       0.072  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         3.760 ±       2.929    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.count                                            thrpt    5        30.000                counts
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.time                                             thrpt    5        29.000                    ms
[info] ArrayOfFloatsBenchmark.writeCirce                                                        thrpt    5     85594.724 ±    1615.229   ops/s
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate                                         thrpt    5       683.994 ±      12.975  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate.norm                                    thrpt    5     12576.005 ±       0.001    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                thrpt    5       661.404 ±       6.177  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                           thrpt    5     12160.942 ±     286.041    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                            thrpt    5         0.042 ±       0.150  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                       thrpt    5         0.764 ±       2.747    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.count                                              thrpt    5        10.000                counts
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.time                                               thrpt    5         9.000                    ms
[info] ArrayOfFloatsBenchmark.writeJacksonScala                                                 thrpt    5     95550.503 ±    3726.371   ops/s
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate                                  thrpt    5       376.904 ±      14.707  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                             thrpt    5      6208.005 ±       0.001    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                         thrpt    5       363.859 ±     638.439  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5      6006.536 ±   10701.813    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                     thrpt    5         0.442 ±       3.803  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5         7.336 ±      63.168    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.count                                       thrpt    5         6.000                counts
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.time                                        thrpt    5         9.000                    ms
[info] ArrayOfFloatsBenchmark.writeJsoniterScala                                                thrpt    5    110105.497 ±   12983.191   ops/s
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate                                 thrpt    5       407.498 ±      47.988  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                            thrpt    5      5824.004 ±       0.001    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                        thrpt    5       434.404 ±     577.252  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5      6235.208 ±    8549.275    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                    thrpt    5         0.367 ±       2.937  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5         5.148 ±      41.225    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.count                                      thrpt    5         7.000                counts
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.time                                       thrpt    5         9.000                    ms
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc                                        thrpt    5    112877.367 ±    3481.584   ops/s
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                         thrpt    5       328.794 ±       9.928  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                    thrpt    5      4584.004 ±       0.001    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                thrpt    5       352.814 ±     364.690  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm           thrpt    5      4916.672 ±    5061.657    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space            thrpt    5         0.369 ±       3.087  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm       thrpt    5         5.125 ±      42.898    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.count                              thrpt    5         6.000                counts
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.time                               thrpt    5        10.000                    ms
[info] ArrayOfInstantsBenchmark.readCirce                                                       thrpt    5      9474.536 ±     481.255   ops/s
[info] ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate                                        thrpt    5      1570.951 ±      80.072  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate.norm                                   thrpt    5    260931.661 ±      26.881    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space                               thrpt    5      1609.265 ±     564.883  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                          thrpt    5    267221.592 ±   89637.680    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                           thrpt    5         0.092 ±       0.072  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                      thrpt    5        15.185 ±      11.266    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.count                                             thrpt    5        24.000                counts
[info] ArrayOfInstantsBenchmark.readCirce:·gc.time                                              thrpt    5        21.000                    ms
[info] ArrayOfInstantsBenchmark.readJacksonScala                                                thrpt    5      9656.875 ±     336.185   ops/s
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate                                 thrpt    5      1485.789 ±      51.807  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate.norm                            thrpt    5    242111.528 ±      53.542    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                        thrpt    5      1465.286 ±     717.557  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5    238838.056 ±  119194.840    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                    thrpt    5         0.087 ±       0.143  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5        14.242 ±      23.402    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.count                                      thrpt    5        22.000                counts
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.time                                       thrpt    5        19.000                    ms
[info] ArrayOfInstantsBenchmark.readJsoniterScala                                               thrpt    5     97240.993 ±    7718.159   ops/s
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate                                thrpt    5       253.076 ±      20.062  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                           thrpt    5      4096.005 ±       0.001    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                       thrpt    5       220.173 ±     491.302  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5      3554.336 ±    8026.248    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                   thrpt    5         0.321 ±       2.694  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5         5.317 ±      44.713    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.count                                     thrpt    5         4.000                counts
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.time                                      thrpt    5         7.000                    ms
[info] ArrayOfInstantsBenchmark.readPlayJson                                                    thrpt    5      5611.191 ±     167.791   ops/s
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate                                     thrpt    5      1492.683 ±      44.602  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate.norm                                thrpt    5    418664.078 ±       0.012    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                            thrpt    5      1464.528 ±     688.428  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                       thrpt    5    410712.411 ±  190367.566    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                        thrpt    5         0.062 ±       0.127  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                   thrpt    5        17.562 ±      36.023    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.count                                          thrpt    5        22.000                counts
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.time                                           thrpt    5        21.000                    ms
[info] ArrayOfInstantsBenchmark.writeCirce                                                      thrpt    5     24583.727 ±     971.069   ops/s
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate                                       thrpt    5      1809.917 ±      69.000  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate.norm                                  thrpt    5    115855.065 ±     122.758    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                              thrpt    5      1815.388 ±     740.235  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                         thrpt    5    116153.750 ±   44672.164    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                          thrpt    5         0.100 ±       0.105  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         6.403 ±       6.827    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.count                                            thrpt    5        27.000                counts
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.time                                             thrpt    5        26.000                    ms
[info] ArrayOfInstantsBenchmark.writeJsoniterScala                                              thrpt    5    333527.517 ±   10724.844   ops/s
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate                               thrpt    5       735.810 ±      23.647  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                          thrpt    5      3472.001 ±       0.001    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                      thrpt    5       731.480 ±     577.973  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5      3449.817 ±    2671.099    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                  thrpt    5         0.075 ±       0.185  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5         0.355 ±       0.880    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.count                                    thrpt    5        11.000                counts
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.time                                     thrpt    5        11.000                    ms
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc                                      thrpt    5    388507.554 ±    2464.086   ops/s
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                       thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                  thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.count                            thrpt    5           ≈ 0                counts
[info] ArrayOfInstantsBenchmark.writePlayJson                                                   thrpt    5     28039.304 ±     572.969   ops/s
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate                                    thrpt    5      1838.660 ±      37.642  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate.norm                               thrpt    5    103200.017 ±       0.010    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                           thrpt    5      1879.801 ±     706.193  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                      thrpt    5    105490.569 ±   38674.171    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                       thrpt    5         0.100 ±       0.105  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                  thrpt    5         5.608 ±       5.876    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.count                                         thrpt    5        28.000                counts
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.time                                          thrpt    5        25.000                    ms
[info] ArrayOfIntsBenchmark.readCirce                                                           thrpt    5    128141.133 ±    6188.374   ops/s
[info] ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate                                            thrpt    5      2205.755 ±     108.083  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate.norm                                       thrpt    5     27088.003 ±       0.001    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                   thrpt    5      2230.451 ±     729.883  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                              thrpt    5     27399.542 ±    9320.288    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                               thrpt    5         0.079 ±       0.191  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                          thrpt    5         0.971 ±       2.342    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.count                                                 thrpt    5        33.000                counts
[info] ArrayOfIntsBenchmark.readCirce:·gc.time                                                  thrpt    5        28.000                    ms
[info] ArrayOfIntsBenchmark.readJacksonScala                                                    thrpt    5    291128.729 ±   17022.336   ops/s
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate                                     thrpt    5       411.424 ±      24.127  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                thrpt    5      2224.002 ±       0.001    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                            thrpt    5       429.045 ±     573.361  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                       thrpt    5      2325.328 ±    3211.733    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                        thrpt    5         0.461 ±       3.728  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                   thrpt    5         2.523 ±      20.381    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.count                                          thrpt    5         7.000                counts
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.time                                           thrpt    5        11.000                    ms
[info] ArrayOfIntsBenchmark.readJsoniterScala                                                   thrpt    5    725032.284 ±   10475.951   ops/s
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                    thrpt    5       471.786 ±       7.052  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                               thrpt    5      1024.001 ±       0.001    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                           thrpt    5       450.372 ±     765.928  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                      thrpt    5       977.946 ±    1667.550    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                       thrpt    5         0.348 ±       2.752  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  thrpt    5         0.755 ±       5.968    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.count                                         thrpt    5         7.000                counts
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.time                                          thrpt    5         8.000                    ms
[info] ArrayOfIntsBenchmark.readPlayJson                                                        thrpt    5     70819.362 ±    4092.883   ops/s
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate                                         thrpt    5      3008.388 ±     173.710  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                    thrpt    5     66856.006 ±       0.001    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                thrpt    5      2980.022 ±     555.670  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                           thrpt    5     66205.591 ±    9631.662    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                            thrpt    5         0.167 ±       0.212  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                       thrpt    5         3.693 ±       4.583    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.count                                              thrpt    5        44.000                counts
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.time                                               thrpt    5        38.000                    ms
[info] ArrayOfIntsBenchmark.writeCirce                                                          thrpt    5    209370.883 ±   10327.088   ops/s
[info] ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate                                           thrpt    5      1701.743 ±      83.569  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm                                      thrpt    5     12792.002 ±       0.001    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                  thrpt    5      1745.931 ±     536.328  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                             thrpt    5     13119.017 ±    3602.802    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                              thrpt    5         0.079 ±       0.154  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                         thrpt    5         0.593 ±       1.138    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.count                                                thrpt    5        26.000                counts
[info] ArrayOfIntsBenchmark.writeCirce:·gc.time                                                 thrpt    5        22.000                    ms
[info] ArrayOfIntsBenchmark.writeJacksonScala                                                   thrpt    5    829653.172 ±   56604.673   ops/s
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                    thrpt    5       653.729 ±      44.711  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                               thrpt    5      1240.001 ±       0.001    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                           thrpt    5       655.295 ±       6.379  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                      thrpt    5      1243.291 ±      87.207    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                       thrpt    5         0.465 ±       3.645  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                  thrpt    5         0.870 ±       6.816    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.count                                         thrpt    5        10.000                counts
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.time                                          thrpt    5        16.000                    ms
[info] ArrayOfIntsBenchmark.writeJsoniterScala                                                  thrpt    5   1023290.010 ±   19962.231   ops/s
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                   thrpt    5       556.568 ±      10.679  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                              thrpt    5       856.000 ±       0.001    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                          thrpt    5       531.215 ±     699.387  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5       817.589 ±    1082.762    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                      thrpt    5         0.401 ±       3.010  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5         0.617 ±       4.628    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.count                                        thrpt    5         8.000                counts
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.time                                         thrpt    5         8.000                    ms
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc                                          thrpt    5    970155.925 ±  206219.777   ops/s
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                           thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                      thrpt    5        ≈ 10⁻³                  B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                thrpt    5           ≈ 0                counts
[info] ArrayOfIntsBenchmark.writePlayJson                                                       thrpt    5     30454.479 ±    1303.354   ops/s
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate                                        thrpt    5      1681.299 ±      71.242  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm                                   thrpt    5     86875.177 ±      27.228    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                               thrpt    5      1674.605 ±      52.433  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                          thrpt    5     86533.480 ±    2692.657    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                           thrpt    5         0.083 ±       0.160  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                      thrpt    5         4.321 ±       8.520    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.count                                             thrpt    5        25.000                counts
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.time                                              thrpt    5        23.000                    ms
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala                                               thrpt    5    193672.940 ±   10701.758   ops/s
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate                                thrpt    5      1155.854 ±      63.177  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm                           thrpt    5      9392.002 ±       0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                       thrpt    5      1122.575 ±     675.984  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5      9113.242 ±    5189.305    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                   thrpt    5         0.087 ±       0.191  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5         0.712 ±       1.561    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.count                                     thrpt    5        17.000                counts
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.time                                      thrpt    5        16.000                    ms
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala                                              thrpt    5    261271.256 ±   14956.408   ops/s
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate                               thrpt    5       850.035 ±      48.453  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                          thrpt    5      5120.002 ±       0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                      thrpt    5       800.637 ±     702.307  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5      4820.458 ±    4174.436    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                  thrpt    5         0.079 ±       0.105  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5         0.477 ±       0.635    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.count                                    thrpt    5        12.000                counts
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.time                                     thrpt    5        10.000                    ms
[info] ArrayOfJavaEnumsBenchmark.readPlayJson                                                   thrpt    5     65496.809 ±    3043.950   ops/s
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate                                    thrpt    5      2722.440 ±     126.434  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm                               thrpt    5     65408.007 ±       0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                           thrpt    5      2767.214 ±     502.070  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                      thrpt    5     66513.235 ±   14596.580    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                       thrpt    5         0.125 ±       0.234  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                  thrpt    5         2.996 ±       5.604    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.count                                         thrpt    5        41.000                counts
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.time                                          thrpt    5        43.000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala                                              thrpt    5    559914.793 ±   52206.901   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate                               thrpt    5       566.501 ±      53.107  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                          thrpt    5      1592.001 ±       0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                      thrpt    5       573.959 ±     545.341  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5      1615.923 ±    1558.888    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                  thrpt    5         0.474 ±       3.724  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5         1.374 ±      10.836    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.count                                    thrpt    5         9.000                counts
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.time                                     thrpt    5        12.000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala                                             thrpt    5    564216.959 ±   26314.660   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate                              thrpt    5       433.113 ±      20.110  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                         thrpt    5      1208.001 ±       0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                     thrpt    5       383.074 ±     618.191  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                thrpt    5      1067.189 ±    1691.799    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                 thrpt    5         0.377 ±       3.102  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm            thrpt    5         1.041 ±       8.559    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.count                                   thrpt    5         6.000                counts
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.time                                    thrpt    5         8.000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc                                     thrpt    5    581053.630 ±  101794.200   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                      thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                 thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count                           thrpt    5           ≈ 0                counts
[info] ArrayOfJavaEnumsBenchmark.writePlayJson                                                  thrpt    5    347693.685 ±   20836.377   ops/s
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate                                   thrpt    5       957.999 ±      56.886  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm                              thrpt    5      4336.001 ±       0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                          thrpt    5       984.621 ±      25.409  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                     thrpt    5      4457.174 ±     233.005    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                      thrpt    5         0.062 ±       0.127  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                 thrpt    5         0.284 ±       0.589    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.count                                        thrpt    5        15.000                counts
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.time                                         thrpt    5        16.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readCirce                                                 thrpt    5      9489.882 ±     375.217   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate                                  thrpt    5      1243.052 ±      49.207  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                             thrpt    5    206147.935 ±      26.693    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                         thrpt    5      1268.852 ±     576.168  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                    thrpt    5    210507.725 ±   98035.527    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                     thrpt    5         0.075 ±       0.156  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                thrpt    5        12.480 ±      26.711    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.count                                       thrpt    5        19.000                counts
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.time                                        thrpt    5        16.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala                                          thrpt    5      9444.034 ±     282.512   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                           thrpt    5      1131.808 ±      33.863  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                      thrpt    5    188599.482 ±      54.171    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                  thrpt    5      1123.920 ±     688.007  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm             thrpt    5    187145.450 ±  109897.274    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space              thrpt    5         0.083 ±       0.057  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm         thrpt    5        13.884 ±       9.636    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.count                                thrpt    5        17.000                counts
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.time                                 thrpt    5        16.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala                                         thrpt    5    143121.356 ±    7997.436   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                          thrpt    5       931.251 ±      51.661  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                     thrpt    5     10240.003 ±       0.001    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                 thrpt    5       935.354 ±     572.430  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm            thrpt    5     10301.777 ±    6660.004    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space             thrpt    5         0.062 ±       0.179  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm        thrpt    5         0.691 ±       1.993    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.count                               thrpt    5        14.000                counts
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.time                                thrpt    5        12.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson                                              thrpt    5      7982.231 ±     287.821   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate                               thrpt    5      1486.489 ±      53.693  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                          thrpt    5    293080.056 ±       0.010    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                      thrpt    5      1532.061 ±     703.396  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                 thrpt    5    302125.412 ±  140482.549    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                  thrpt    5         0.062 ±       0.113  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm             thrpt    5        12.294 ±      22.091    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.count                                    thrpt    5        23.000                counts
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.time                                     thrpt    5        22.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeCirce                                                thrpt    5     19828.604 ±     853.513   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate                                 thrpt    5      1053.549 ±      46.187  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                            thrpt    5     83606.998 ±     112.795    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                        thrpt    5      1064.431 ±     582.047  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                   thrpt    5     84500.186 ±   47134.327    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                    thrpt    5         0.083 ±       0.113  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm               thrpt    5         6.610 ±       9.069    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.count                                      thrpt    5        16.000                counts
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.time                                       thrpt    5        13.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala                                        thrpt    5    686281.865 ±   33561.952   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                         thrpt    5      1238.465 ±      60.719  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                    thrpt    5      2840.001 ±       0.001    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                thrpt    5      1204.086 ±     705.236  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm           thrpt    5      2759.119 ±    1547.795    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space            thrpt    5         0.058 ±       0.132  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm       thrpt    5         0.134 ±       0.304    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.count                              thrpt    5        18.000                counts
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.time                               thrpt    5        17.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc                                thrpt    5    539788.833 ±   28105.428   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                 thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm            thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                      thrpt    5           ≈ 0                counts
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson                                             thrpt    5     22467.482 ±     267.012   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate                              thrpt    5      1036.409 ±      11.491  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                         thrpt    5     72589.035 ±     262.763    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                     thrpt    5       993.656 ±      22.591  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                thrpt    5     69594.700 ±    1460.892    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                 thrpt    5         0.075 ±       0.201  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm            thrpt    5         5.246 ±      14.054    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.count                                   thrpt    5        15.000                counts
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.time                                    thrpt    5        14.000                    ms
[info] ArrayOfLocalDatesBenchmark.readCirce                                                     thrpt    5     23499.128 ±     228.613   ops/s
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate                                      thrpt    5      1316.231 ±      11.301  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate.norm                                 thrpt    5     88134.529 ±      33.381    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space                             thrpt    5      1336.247 ±      32.315  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                        thrpt    5     89474.276 ±    1525.828    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                         thrpt    5         0.092 ±       0.216  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                    thrpt    5         6.135 ±      14.525    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.count                                           thrpt    5        20.000                counts
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.time                                            thrpt    5        18.000                    ms
[info] ArrayOfLocalDatesBenchmark.readJacksonScala                                              thrpt    5     28253.795 ±    1883.756   ops/s
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate                               thrpt    5      1308.704 ±      87.515  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate.norm                          thrpt    5     72888.565 ±      53.573    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                      thrpt    5      1327.236 ±     869.755  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5     73839.344 ±   46053.421    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                  thrpt    5         0.046 ±       0.132  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5         2.539 ±       7.183    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.count                                    thrpt    5        20.000                counts
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.time                                     thrpt    5        18.000                    ms
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala                                             thrpt    5    249041.506 ±    7119.481   ops/s
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate                              thrpt    5       648.182 ±      18.393  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                         thrpt    5      4096.002 ±       0.001    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                     thrpt    5       599.925 ±     574.423  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                thrpt    5      3788.105 ±    3591.190    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                 thrpt    5         0.075 ±       0.231  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm            thrpt    5         0.473 ±       1.455    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.count                                   thrpt    5         9.000                counts
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.time                                    thrpt    5         7.000                    ms
[info] ArrayOfLocalDatesBenchmark.readPlayJson                                                  thrpt    5     16873.980 ±     401.088   ops/s
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate                                   thrpt    5      1671.200 ±      39.778  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate.norm                              thrpt    5    155864.584 ±       4.787    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                          thrpt    5      1670.996 ±      58.362  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                     thrpt    5    155844.921 ±    3484.742    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                      thrpt    5         0.087 ±       0.105  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                 thrpt    5         8.146 ±       9.619    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.count                                        thrpt    5        25.000                counts
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.time                                         thrpt    5        23.000                    ms
[info] ArrayOfLocalDatesBenchmark.writeCirce                                                    thrpt    5     43064.354 ±    1617.360   ops/s
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate                                     thrpt    5      1369.244 ±      51.373  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate.norm                                thrpt    5     50040.010 ±       0.001    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                            thrpt    5      1403.246 ±     545.395  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                       thrpt    5     51270.930 ±   19155.824    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                        thrpt    5         0.079 ±       0.154  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                   thrpt    5         2.892 ±       5.620    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.count                                          thrpt    5        21.000                counts
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.time                                           thrpt    5        18.000                    ms
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala                                            thrpt    5   1000348.325 ±   12159.447   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate                             thrpt    5      1072.858 ±      12.974  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                        thrpt    5      1688.000 ±       0.001    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                    thrpt    5      1001.063 ±      16.316  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm               thrpt    5      1575.045 ±      23.760    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                thrpt    5         0.079 ±       0.105  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm           thrpt    5         0.125 ±       0.166    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.count                                  thrpt    5        15.000                counts
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.time                                   thrpt    5        11.000                    ms
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc                                    thrpt    5    673137.663 ±   37932.572   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                     thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.count                          thrpt    5           ≈ 0                counts
[info] ArrayOfLocalDatesBenchmark.writePlayJson                                                 thrpt    5     47483.560 ±     520.856   ops/s
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate                                  thrpt    5      1258.978 ±      13.912  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate.norm                             thrpt    5     41728.009 ±       0.001    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                         thrpt    5      1262.995 ±     552.889  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                    thrpt    5     41852.763 ±   18013.098    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                     thrpt    5         0.075 ±       0.185  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                thrpt    5         2.486 ±       6.133    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.count                                       thrpt    5        19.000                counts
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.time                                        thrpt    5        17.000                    ms
[info] ArrayOfLocalTimesBenchmark.readCirce                                                     thrpt    5     14662.700 ±     450.979   ops/s
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate                                      thrpt    5      1331.816 ±      40.056  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate.norm                                 thrpt    5    142922.533 ±      25.615    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                             thrpt    5      1337.735 ±      31.184  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                        thrpt    5    143562.146 ±    3974.606    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                         thrpt    5         0.100 ±       0.067  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                    thrpt    5        10.723 ±       7.142    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.count                                           thrpt    5        20.000                counts
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.time                                            thrpt    5        17.000                    ms
[info] ArrayOfLocalTimesBenchmark.readJacksonScala                                              thrpt    5     15550.318 ±     804.689   ops/s
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate                               thrpt    5      1266.833 ±      65.306  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                          thrpt    5    128196.585 ±      50.846    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                      thrpt    5      1259.701 ±     559.126  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5    127451.443 ±   55473.749    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                  thrpt    5         0.058 ±       0.088  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5         5.909 ±       9.024    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.count                                    thrpt    5        19.000                counts
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.time                                     thrpt    5        17.000                    ms
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala                                             thrpt    5    263791.008 ±   11915.814   ops/s
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate                              thrpt    5       686.613 ±      31.065  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                         thrpt    5      4096.002 ±       0.001    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                     thrpt    5       666.635 ±       2.896  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                thrpt    5      3977.258 ±     178.459    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                 thrpt    5         0.071 ±       0.176  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm            thrpt    5         0.422 ±       1.044    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.count                                   thrpt    5        10.000                counts
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.time                                    thrpt    5         9.000                    ms
[info] ArrayOfLocalTimesBenchmark.readPlayJson                                                  thrpt    5     11677.621 ±     537.067   ops/s
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate                                   thrpt    5      1604.622 ±      73.048  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                              thrpt    5    216280.558 ±       4.481    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                          thrpt    5      1668.876 ±      59.759  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                     thrpt    5    224971.997 ±   14812.487    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                      thrpt    5         0.096 ±       0.091  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                 thrpt    5        12.880 ±      11.882    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.count                                        thrpt    5        25.000                counts
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.time                                         thrpt    5        23.000                    ms
[info] ArrayOfLocalTimesBenchmark.writeCirce                                                    thrpt    5     35111.439 ±    2465.346   ops/s
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate                                     thrpt    5      1333.742 ±      93.727  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                thrpt    5     59773.089 ±      43.709    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                            thrpt    5      1335.984 ±      35.454  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                       thrpt    5     59884.400 ±    2960.329    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                        thrpt    5         0.067 ±       0.132  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                   thrpt    5         3.001 ±       6.057    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.count                                          thrpt    5        20.000                counts
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.time                                           thrpt    5        18.000                    ms
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala                                            thrpt    5   1088911.497 ±   35750.900   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                             thrpt    5       990.869 ±      31.950  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                        thrpt    5      1432.000 ±       0.001    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                    thrpt    5      1000.522 ±      15.462  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm               thrpt    5      1446.027 ±      49.304    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                thrpt    5         0.083 ±       0.127  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm           thrpt    5         0.120 ±       0.181    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.count                                  thrpt    5        15.000                counts
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.time                                   thrpt    5        13.000                    ms
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc                                    thrpt    5   1306286.728 ±    9283.747   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                     thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                thrpt    5        ≈ 10⁻³                  B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                          thrpt    5           ≈ 0                counts
[info] ArrayOfLocalTimesBenchmark.writePlayJson                                                 thrpt    5      3528.686 ±     626.629   ops/s
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate                                  thrpt    5       481.104 ±      85.287  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                             thrpt    5    214544.124 ±       0.025    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                         thrpt    5       445.534 ±     753.422  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                    thrpt    5    197021.204 ±  315816.813    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                     thrpt    5         0.434 ±       3.440  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                thrpt    5       190.350 ±    1504.469    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.count                                       thrpt    5         7.000                counts
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.time                                        thrpt    5         9.000                    ms
[info] ArrayOfLongsBenchmark.readCirce                                                          thrpt    5    118359.162 ±    3186.285   ops/s
[info] ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate                                           thrpt    5      2196.686 ±      58.939  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate.norm                                      thrpt    5     29208.004 ±       0.001    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                  thrpt    5      2162.219 ±     719.809  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                             thrpt    5     28756.622 ±    9934.531    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                              thrpt    5         0.117 ±       0.201  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                         thrpt    5         1.547 ±       2.649    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.count                                                thrpt    5        32.000                counts
[info] ArrayOfLongsBenchmark.readCirce:·gc.time                                                 thrpt    5        27.000                    ms
[info] ArrayOfLongsBenchmark.readJacksonScala                                                   thrpt    5    248700.359 ±   10918.434   ops/s
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate                                    thrpt    5       546.143 ±      24.103  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate.norm                               thrpt    5      3456.002 ±       0.001    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                           thrpt    5       574.655 ±     546.261  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                      thrpt    5      3638.921 ±    3499.272    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                       thrpt    5         0.475 ±       3.646  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                  thrpt    5         2.980 ±      22.818    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.count                                         thrpt    5         9.000                counts
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.time                                          thrpt    5        11.000                    ms
[info] ArrayOfLongsBenchmark.readJsoniterScala                                                  thrpt    5    479188.368 ±   31594.820   ops/s
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate                                   thrpt    5       604.084 ±      39.628  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                              thrpt    5      1984.001 ±       0.001    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                          thrpt    5       666.173 ±       1.975  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5      2188.442 ±     147.231    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                      thrpt    5         0.358 ±       2.594  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5         1.164 ±       8.405    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.count                                        thrpt    5        10.000                counts
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.time                                         thrpt    5         9.000                    ms
[info] ArrayOfLongsBenchmark.readPlayJson                                                       thrpt    5     69626.241 ±    2074.337   ops/s
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate                                        thrpt    5      3017.703 ±      91.088  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate.norm                                   thrpt    5     68198.508 ±     262.624    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                               thrpt    5      2980.493 ±     565.324  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                          thrpt    5     67353.329 ±   12221.506    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                           thrpt    5         0.117 ±       0.122  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                      thrpt    5         2.635 ±       2.761    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.count                                             thrpt    5        44.000                counts
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.time                                              thrpt    5        39.000                    ms
[info] ArrayOfLongsBenchmark.writeCirce                                                         thrpt    5    184753.052 ±    6625.068   ops/s
[info] ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate                                          thrpt    5      1884.925 ±      66.808  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate.norm                                     thrpt    5     16056.002 ±       0.001    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                 thrpt    5      1884.523 ±     728.024  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                            thrpt    5     16062.991 ±    6642.045    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                             thrpt    5         0.112 ±       0.146  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                        thrpt    5         0.960 ±       1.277    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.count                                               thrpt    5        28.000                counts
[info] ArrayOfLongsBenchmark.writeCirce:·gc.time                                                thrpt    5        22.000                    ms
[info] ArrayOfLongsBenchmark.writeJacksonScala                                                  thrpt    5    476199.042 ±    8650.286   ops/s
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate                                   thrpt    5       488.987 ±       9.059  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                              thrpt    5      1616.001 ±       0.001    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                          thrpt    5       443.563 ±     747.923  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5      1464.866 ±    2461.073    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                      thrpt    5         0.444 ±       3.689  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5         1.461 ±      12.137    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.count                                        thrpt    5         7.000                counts
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.time                                         thrpt    5         9.000                    ms
[info] ArrayOfLongsBenchmark.writeJsoniterScala                                                 thrpt    5    562483.289 ±    6069.471   ops/s
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate                                  thrpt    5       440.330 ±       4.705  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                             thrpt    5      1232.001 ±       0.001    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                         thrpt    5       449.536 ±     763.931  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5      1258.680 ±    2148.350    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                     thrpt    5         0.395 ±       3.137  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5         1.109 ±       8.819    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.count                                       thrpt    5         7.000                counts
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.time                                        thrpt    5         9.000                    ms
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc                                         thrpt    5    644385.703 ±    4253.121   ops/s
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                          thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                     thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.count                               thrpt    5           ≈ 0                counts
[info] ArrayOfLongsBenchmark.writePlayJson                                                      thrpt    5     27027.073 ±     818.518   ops/s
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate                                       thrpt    5      1485.845 ±      43.732  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate.norm                                  thrpt    5     86516.508 ±      27.013    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                              thrpt    5      1468.155 ±     676.761  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                         thrpt    5     85477.970 ±   38965.456    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                          thrpt    5         0.083 ±       0.080  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         4.855 ±       4.788    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.count                                            thrpt    5        22.000                counts
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.time                                             thrpt    5        18.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readCirce                                                thrpt    5      7291.637 ±     455.592   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate                                 thrpt    5      1153.218 ±      71.494  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                            thrpt    5    248864.061 ±       0.012    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                        thrpt    5      1200.548 ±     703.670  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                   thrpt    5    258869.425 ±  144557.654    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                    thrpt    5         0.096 ±       0.108  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm               thrpt    5        20.622 ±      22.537    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.count                                      thrpt    5        18.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.time                                       thrpt    5        16.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala                                        thrpt    5     92649.637 ±    6773.187   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                         thrpt    5       897.781 ±      65.814  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                    thrpt    5     15248.005 ±       0.001    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                thrpt    5       868.145 ±     702.535  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm           thrpt    5     14773.019 ±   12485.482    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space            thrpt    5         0.062 ±       0.227  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm       thrpt    5         1.068 ±       3.872    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.count                              thrpt    5        13.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.time                               thrpt    5        11.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson                                             thrpt    5      6789.874 ±     432.922   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate                              thrpt    5      1239.498 ±      78.115  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                         thrpt    5    287232.065 ±       0.007    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                     thrpt    5      1259.567 ±     559.480  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                thrpt    5    292106.811 ±  136465.851    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                 thrpt    5         0.050 ±       0.044  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm            thrpt    5        11.606 ±      10.752    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.count                                   thrpt    5        19.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.time                                    thrpt    5        18.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce                                               thrpt    5     16834.021 ±     447.529   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate                                thrpt    5       993.143 ±      25.850  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                           thrpt    5     92844.654 ±     125.096    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                       thrpt    5       996.336 ±      17.496  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                  thrpt    5     93145.456 ±    2182.620    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                   thrpt    5         0.083 ±       0.150  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm              thrpt    5         7.770 ±      13.829    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.count                                     thrpt    5        15.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.time                                      thrpt    5        13.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala                                       thrpt    5    398905.962 ±  131384.928   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                        thrpt    5       904.455 ±     297.840  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                   thrpt    5      3568.001 ±       0.001    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space               thrpt    5       866.113 ±     703.351  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm          thrpt    5      3413.291 ±    2547.781    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space           thrpt    5         0.071 ±       0.091  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm      thrpt    5         0.282 ±       0.405    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.count                             thrpt    5        13.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.time                              thrpt    5        11.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc                               thrpt    5    529780.100 ±   20215.106   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm           thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                     thrpt    5           ≈ 0                counts
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson                                            thrpt    5     18105.364 ±     642.175   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate                             thrpt    5       916.774 ±      32.864  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                        thrpt    5     79682.902 ±      28.385    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                    thrpt    5       858.897 ±     694.585  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm               thrpt    5     74583.410 ±   58849.984    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                thrpt    5         0.062 ±       0.127  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm           thrpt    5         5.412 ±      10.842    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.count                                  thrpt    5        13.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.time                                   thrpt    5        12.000                    ms
[info] ArrayOfOffsetTimesBenchmark.readCirce                                                    thrpt    5     11817.553 ±     368.525   ops/s
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate                                     thrpt    5      1218.551 ±      38.201  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate.norm                                thrpt    5    162256.135 ±      30.815    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                            thrpt    5      1201.716 ±     698.072  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                       thrpt    5    160048.358 ±   93866.441    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                        thrpt    5         0.046 ±       0.067  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                   thrpt    5         6.104 ±       8.980    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.count                                          thrpt    5        18.000                counts
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.time                                           thrpt    5        17.000                    ms
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala                                             thrpt    5     12213.211 ±     516.999   ops/s
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate                              thrpt    5      1133.698 ±      48.812  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                         thrpt    5    146064.329 ±      61.659    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                     thrpt    5      1124.080 ±     697.683  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                thrpt    5    144754.684 ±   87398.702    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                 thrpt    5         0.067 ±       0.067  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm            thrpt    5         8.570 ±       8.430    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.count                                   thrpt    5        17.000                counts
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.time                                    thrpt    5        16.000                    ms
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala                                            thrpt    5    169369.749 ±    5981.668   ops/s
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate                             thrpt    5       979.915 ±      34.622  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                        thrpt    5      9104.003 ±       0.001    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                    thrpt    5       935.985 ±     580.324  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm               thrpt    5      8700.152 ±    5487.827    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                thrpt    5         0.075 ±       0.134  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm           thrpt    5         0.697 ±       1.249    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.count                                  thrpt    5        14.000                counts
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.time                                   thrpt    5        12.000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeCirce                                                   thrpt    5     27082.358 ±    1792.905   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate                                    thrpt    5      1188.953 ±      77.427  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate.norm                               thrpt    5     69073.478 ±     107.452    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                           thrpt    5      1200.065 ±     718.325  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                      thrpt    5     69746.534 ±   42338.743    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                       thrpt    5         0.058 ±       0.154  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                  thrpt    5         3.413 ±       9.176    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.count                                         thrpt    5        18.000                counts
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.time                                          thrpt    5        15.000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala                                           thrpt    5    662049.774 ±   24161.005   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                            thrpt    5       908.722 ±      33.039  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                       thrpt    5      2160.001 ±       0.001    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                   thrpt    5       932.718 ±     576.124  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm              thrpt    5      2216.547 ±    1356.369    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space               thrpt    5         0.075 ±       0.122  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm          thrpt    5         0.178 ±       0.288    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.count                                 thrpt    5        14.000                counts
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.time                                  thrpt    5        12.000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc                                   thrpt    5    690534.279 ±   16481.346   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                    thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm               thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                         thrpt    5           ≈ 0                counts
[info] ArrayOfPeriodsBenchmark.readCirce                                                        thrpt    5     22263.250 ±     514.752   ops/s
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate                                         thrpt    5      1106.106 ±      25.442  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate.norm                                    thrpt    5     78182.142 ±      14.697    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                thrpt    5      1131.461 ±     697.944  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                           thrpt    5     80000.375 ±   50120.017    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                            thrpt    5         0.075 ±       0.146  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                       thrpt    5         5.307 ±      10.388    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.count                                              thrpt    5        17.000                counts
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.time                                               thrpt    5        15.000                    ms
[info] ArrayOfPeriodsBenchmark.readJacksonScala                                                 thrpt    5     18424.551 ±    1236.027   ops/s
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate                                  thrpt    5       735.490 ±      50.304  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate.norm                             thrpt    5     62817.063 ±      60.714    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                         thrpt    5       721.276 ±     560.463  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5     61584.586 ±   47007.740    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                     thrpt    5         0.469 ±       3.635  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5        40.966 ±     318.798    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.count                                       thrpt    5        11.000                counts
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.time                                        thrpt    5        12.000                    ms
[info] ArrayOfPeriodsBenchmark.readJsoniterScala                                                thrpt    5    176616.877 ±    3244.192   ops/s
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate                                 thrpt    5       459.686 ±       8.190  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                            thrpt    5      4096.002 ±       0.001    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                        thrpt    5       451.015 ±     767.162  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5      4019.425 ±    6840.414    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                    thrpt    5         0.348 ±       2.687  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5         3.093 ±      23.903    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.count                                      thrpt    5         7.000                counts
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.time                                       thrpt    5         9.000                    ms
[info] ArrayOfPeriodsBenchmark.readPlayJson                                                     thrpt    5     15951.060 ±     681.224   ops/s
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate                                      thrpt    5      1197.793 ±      51.426  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate.norm                                 thrpt    5    118162.311 ±      29.042    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                             thrpt    5      1191.018 ±     706.337  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                        thrpt    5    117581.929 ±   72022.523    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                         thrpt    5         0.075 ±       0.091  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                    thrpt    5         7.412 ±       9.276    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.count                                           thrpt    5        18.000                counts
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.time                                            thrpt    5        17.000                    ms
[info] ArrayOfPeriodsBenchmark.writeCirce                                                       thrpt    5     80496.751 ±    2522.757   ops/s
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate                                        thrpt    5      1590.517 ±      49.614  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate.norm                                   thrpt    5     31096.005 ±       0.001    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                               thrpt    5      1608.971 ±     563.395  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                          thrpt    5     31448.582 ±   10593.144    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                           thrpt    5         0.092 ±       0.156  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                      thrpt    5         1.794 ±       3.085    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.count                                             thrpt    5        24.000                counts
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.time                                              thrpt    5        22.000                    ms
[info] ArrayOfPeriodsBenchmark.writeJacksonScala                                                thrpt    5    154050.306 ±    9307.589   ops/s
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate                                 thrpt    5      1627.201 ±      98.100  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                            thrpt    5     16624.003 ±       0.001    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                        thrpt    5      1669.959 ±      62.296  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5     17064.964 ±    1397.814    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                    thrpt    5         0.096 ±       0.091  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5         0.976 ±       0.895    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.count                                      thrpt    5        25.000                counts
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.time                                       thrpt    5        23.000                    ms
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala                                               thrpt    5    433046.017 ±   40334.779   ops/s
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate                                thrpt    5       479.873 ±      44.592  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                           thrpt    5      1744.001 ±       0.001    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                       thrpt    5       449.516 ±     628.141  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5      1630.393 ±    2219.343    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                   thrpt    5         0.372 ±       3.023  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5         1.361 ±      11.088    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.count                                     thrpt    5         7.000                counts
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.time                                      thrpt    5         9.000                    ms
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc                                       thrpt    5    528923.232 ±    6085.149   ops/s
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                        thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                   thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.count                             thrpt    5           ≈ 0                counts
[info] ArrayOfPeriodsBenchmark.writePlayJson                                                    thrpt    5    105588.913 ±    4301.074   ops/s
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate                                     thrpt    5      1509.983 ±      61.841  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate.norm                                thrpt    5     22504.004 ±       0.001    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                            thrpt    5      1536.177 ±     678.166  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                       thrpt    5     22901.361 ±   10359.852    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                        thrpt    5         0.100 ±       0.164  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                   thrpt    5         1.486 ±       2.399    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.count                                          thrpt    5        23.000                counts
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.time                                           thrpt    5        20.000                    ms
[info] ArrayOfShortsBenchmark.readCirce                                                         thrpt    5    147192.185 ±    6854.747   ops/s
[info] ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate                                          thrpt    5      2538.240 ±     117.167  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate.norm                                     thrpt    5     27136.003 ±       0.001    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                 thrpt    5      2506.298 ±     722.742  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                            thrpt    5     26792.991 ±    7518.779    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                             thrpt    5         0.108 ±       0.119  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                        thrpt    5         1.156 ±       1.244    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.count                                               thrpt    5        37.000                counts
[info] ArrayOfShortsBenchmark.readCirce:·gc.time                                                thrpt    5        30.000                    ms
[info] ArrayOfShortsBenchmark.readJacksonScala                                                  thrpt    5    353966.755 ±   18645.966   ops/s
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate                                   thrpt    5       361.740 ±      18.829  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate.norm                              thrpt    5      1608.001 ±       0.001    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                          thrpt    5       363.936 ±     639.544  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5      1614.012 ±    2790.626    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                      thrpt    5         0.445 ±       3.664  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5         1.963 ±      16.170    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.count                                        thrpt    5         6.000                counts
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.time                                         thrpt    5        11.000                    ms
[info] ArrayOfShortsBenchmark.readJsoniterScala                                                 thrpt    5    887137.103 ±   57662.693   ops/s
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate                                  thrpt    5       306.658 ±      19.968  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                             thrpt    5       544.001 ±       0.001    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                         thrpt    5       286.752 ±     715.571  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5       506.492 ±    1263.786    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                     thrpt    5         0.332 ±       2.695  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5         0.599 ±       4.868    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.count                                       thrpt    5         5.000                counts
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.time                                        thrpt    5         9.000                    ms
[info] ArrayOfShortsBenchmark.readPlayJson                                                      thrpt    5     77231.381 ±    1223.129   ops/s
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate                                       thrpt    5      3313.508 ±      51.866  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate.norm                                  thrpt    5     67512.006 ±       0.001    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                              thrpt    5      3323.139 ±     596.201  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                         thrpt    5     67708.003 ±   12088.365    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                          thrpt    5         0.154 ±       0.091  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         3.139 ±       1.843    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.count                                            thrpt    5        49.000                counts
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.time                                             thrpt    5        43.000                    ms
[info] ArrayOfShortsBenchmark.writeCirce                                                        thrpt    5    237928.432 ±   11670.841   ops/s
[info] ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate                                         thrpt    5      1822.807 ±      89.626  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate.norm                                    thrpt    5     12056.002 ±       0.001    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                thrpt    5      1815.325 ±     694.141  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                           thrpt    5     12010.985 ±    4766.854    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                            thrpt    5         0.087 ±       0.088  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                       thrpt    5         0.578 ±       0.577    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.count                                              thrpt    5        27.000                counts
[info] ArrayOfShortsBenchmark.writeCirce:·gc.time                                               thrpt    5        22.000                    ms
[info] ArrayOfShortsBenchmark.writeJacksonScala                                                 thrpt    5   1222573.656 ±   59713.330   ops/s
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate                                  thrpt    5       801.860 ±      38.680  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                             thrpt    5      1032.000 ±       0.001    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                         thrpt    5       788.931 ±     697.947  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5      1016.318 ±     918.094    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                     thrpt    5         0.058 ±       0.143  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5         0.075 ±       0.185    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.count                                       thrpt    5        12.000                counts
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.time                                        thrpt    5        11.000                    ms
[info] ArrayOfShortsBenchmark.writeJsoniterScala                                                thrpt    5   1224583.948 ±   77231.815   ops/s
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate                                 thrpt    5       504.280 ±      31.974  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                            thrpt    5       648.000 ±       0.001    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                        thrpt    5       464.648 ±     699.947  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5       598.415 ±     917.025    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                    thrpt    5         0.386 ±       2.972  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5         0.501 ±       3.856    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.count                                      thrpt    5         7.000                counts
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.time                                       thrpt    5         7.000                    ms
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc                                        thrpt    5   1301366.027 ±   73018.760   ops/s
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                         thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                    thrpt    5        ≈ 10⁻³                  B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.count                              thrpt    5           ≈ 0                counts
[info] ArrayOfShortsBenchmark.writePlayJson                                                     thrpt    5     33379.446 ±    1471.401   ops/s
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate                                      thrpt    5      1689.232 ±      73.440  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate.norm                                 thrpt    5     79634.105 ±      18.008    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                             thrpt    5      1674.667 ±      52.959  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                        thrpt    5     78950.081 ±    1441.664    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                         thrpt    5         0.083 ±       0.057  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                    thrpt    5         3.926 ±       2.641    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.count                                           thrpt    5        25.000                counts
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.time                                            thrpt    5        24.000                    ms
[info] ArrayOfUUIDsBenchmark.readCirce                                                          thrpt    5     18003.521 ±     371.212   ops/s
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate                                           thrpt    5      1889.495 ±      39.261  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate.norm                                      thrpt    5    165173.972 ±      15.856    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                  thrpt    5      1886.753 ±     700.793  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                             thrpt    5    164962.754 ±   62524.687    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                              thrpt    5         0.125 ±       0.204  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                         thrpt    5        10.905 ±      17.645    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.count                                                thrpt    5        28.000                counts
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.time                                                 thrpt    5        25.000                    ms
[info] ArrayOfUUIDsBenchmark.readJacksonScala                                                   thrpt    5     97797.103 ±    3560.912   ops/s
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate                                    thrpt    5      1283.770 ±      46.465  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate.norm                               thrpt    5     20656.004 ±       0.001    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                           thrpt    5      1326.762 ±      46.280  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                      thrpt    5     21350.114 ±    1346.280    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                       thrpt    5         0.100 ±       0.105  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                  thrpt    5         1.607 ±       1.674    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.count                                         thrpt    5        20.000                counts
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.time                                          thrpt    5        18.000                    ms
[info] ArrayOfUUIDsBenchmark.readJsoniterScala                                                  thrpt    5    231088.275 ±    8538.914   ops/s
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate                                   thrpt    5       751.811 ±      27.721  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                              thrpt    5      5120.002 ±       0.001    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                          thrpt    5       733.330 ±     575.239  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5      4994.775 ±    3929.648    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                      thrpt    5         0.046 ±       0.132  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5         0.313 ±       0.907    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.count                                        thrpt    5        11.000                counts
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.time                                         thrpt    5        10.000                    ms
[info] ArrayOfUUIDsBenchmark.readPlayJson                                                       thrpt    5     16356.687 ±     370.272   ops/s
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate                                        thrpt    5      2085.592 ±      46.524  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate.norm                                   thrpt    5    200640.029 ±       0.015    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                               thrpt    5      2083.319 ±     518.136  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                          thrpt    5    200448.259 ±   51765.489    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                           thrpt    5         0.075 ±       0.122  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                      thrpt    5         7.219 ±      11.791    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.count                                             thrpt    5        31.000                counts
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.time                                              thrpt    5        27.000                    ms
[info] ArrayOfUUIDsBenchmark.writeCirce                                                         thrpt    5     20621.216 ±     766.876   ops/s
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate                                          thrpt    5      1668.981 ±      62.062  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate.norm                                     thrpt    5    127370.728 ±      69.439    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                 thrpt    5      1678.026 ±      47.005  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                            thrpt    5    128071.087 ±    6162.861    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                             thrpt    5         0.075 ±       0.146  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                        thrpt    5         5.719 ±      11.072    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.count                                               thrpt    5        25.000                counts
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.time                                                thrpt    5        22.000                    ms
[info] ArrayOfUUIDsBenchmark.writeJacksonScala                                                  thrpt    5     98197.263 ±    1658.295   ops/s
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate                                   thrpt    5      1345.422 ±      23.478  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                              thrpt    5     21560.009 ±       0.065    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                          thrpt    5      1327.590 ±      47.571  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5     21274.881 ±     971.985    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                      thrpt    5         0.079 ±       0.230  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5         1.268 ±       3.676    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.count                                        thrpt    5        20.000                counts
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.time                                         thrpt    5        20.000                    ms
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala                                                 thrpt    5    224692.947 ±    2364.885   ops/s
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate                                  thrpt    5       716.117 ±       7.535  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                             thrpt    5      5016.002 ±       0.001    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                         thrpt    5       730.897 ±     570.489  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5      5120.012 ±    4009.958    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                     thrpt    5         0.087 ±       0.183  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5         0.612 ±       1.280    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.count                                       thrpt    5        11.000                counts
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.time                                        thrpt    5         9.000                    ms
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc                                         thrpt    5    250850.047 ±   17706.609   ops/s
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                          thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                     thrpt    5         0.002 ±       0.001    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.count                               thrpt    5           ≈ 0                counts
[info] ArrayOfUUIDsBenchmark.writePlayJson                                                      thrpt    5     25361.793 ±     983.250   ops/s
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate                                       thrpt    5      1729.124 ±      66.694  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate.norm                                  thrpt    5    107288.038 ±       0.176    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                              thrpt    5      1742.458 ±     529.087  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                         thrpt    5    108095.961 ±   31129.464    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                          thrpt    5         0.087 ±       0.105  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         5.418 ±       6.388    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.count                                            thrpt    5        26.000                counts
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.time                                             thrpt    5        23.000                    ms
[info] ArrayOfZoneIdsBenchmark.readCirce                                                        thrpt    5     73188.435 ±    3061.131   ops/s
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate                                         thrpt    5      1574.860 ±      66.121  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate.norm                                    thrpt    5     33856.006 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                thrpt    5      1606.262 ±     593.532  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                           thrpt    5     34544.729 ±   13266.135    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                            thrpt    5         0.058 ±       0.105  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                       thrpt    5         1.251 ±       2.208    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.count                                              thrpt    5        24.000                counts
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.time                                               thrpt    5        21.000                    ms
[info] ArrayOfZoneIdsBenchmark.readJacksonScala                                                 thrpt    5     90967.572 ±    5305.868   ops/s
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate                                  thrpt    5      1133.416 ±      66.250  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate.norm                             thrpt    5     19608.005 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                         thrpt    5      1120.027 ±     696.076  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5     19368.987 ±   11747.346    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                     thrpt    5         0.092 ±       0.122  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5         1.583 ±       2.064    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.count                                       thrpt    5        17.000                counts
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.time                                        thrpt    5        17.000                    ms
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala                                                thrpt    5    105465.015 ±    1203.139   ops/s
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate                                 thrpt    5      1233.733 ±      14.371  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                            thrpt    5     18408.004 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                        thrpt    5      1268.424 ±     566.239  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5     18921.105 ±    8286.121    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                    thrpt    5         0.075 ±       0.091  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5         1.119 ±       1.370    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.count                                      thrpt    5        19.000                counts
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.time                                       thrpt    5        18.000                    ms
[info] ArrayOfZoneIdsBenchmark.readPlayJson                                                     thrpt    5     46406.774 ±     693.951   ops/s
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate                                      thrpt    5      2224.811 ±      33.696  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate.norm                                 thrpt    5     75448.010 ±       0.002    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                             thrpt    5      2219.378 ±     706.008  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                        thrpt    5     75248.772 ±   23059.510    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                         thrpt    5         0.125 ±       0.234  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                    thrpt    5         4.239 ±       7.958    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.count                                           thrpt    5        33.000                counts
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.time                                            thrpt    5        29.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeCirce                                                       thrpt    5    120178.638 ±    4097.468   ops/s
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate                                        thrpt    5      1127.699 ±      38.333  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate.norm                                   thrpt    5     14768.004 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                               thrpt    5      1126.262 ±     681.163  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                          thrpt    5     14750.583 ±    8949.314    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                           thrpt    5         0.062 ±       0.113  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                      thrpt    5         0.816 ±       1.474    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.count                                             thrpt    5        17.000                counts
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.time                                              thrpt    5        14.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala                                                thrpt    5    336248.956 ±   14187.527   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate                                 thrpt    5       499.096 ±      20.993  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                            thrpt    5      2336.001 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                        thrpt    5       507.475 ±     647.648  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5      2377.469 ±    3059.671    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                    thrpt    5         0.556 ±       4.390  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5         2.610 ±      20.602    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.count                                      thrpt    5         8.000                counts
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.time                                       thrpt    5        11.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala                                               thrpt    5    621051.512 ±   48806.095   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate                                thrpt    5       770.285 ±      60.398  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                           thrpt    5      1952.001 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                       thrpt    5       729.577 ±     567.522  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5      1847.209 ±    1375.767    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                   thrpt    5         0.058 ±       0.154  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5         0.148 ±       0.386    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.count                                     thrpt    5        11.000                counts
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.time                                      thrpt    5        10.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc                                       thrpt    5    700387.801 ±    7958.956   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                        thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                   thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.count                             thrpt    5           ≈ 0                counts
[info] ArrayOfZoneIdsBenchmark.writePlayJson                                                    thrpt    5    210425.616 ±   10897.931   ops/s
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate                                     thrpt    5       687.792 ±      35.699  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate.norm                                thrpt    5      5144.002 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                            thrpt    5       655.932 ±       7.362  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                       thrpt    5      4906.362 ±     234.027    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                        thrpt    5         0.046 ±       0.119  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                   thrpt    5         0.344 ±       0.899    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.count                                          thrpt    5        10.000                counts
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.time                                           thrpt    5         9.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala                                             thrpt    5    185171.018 ±   11564.345   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate                              thrpt    5      1104.243 ±      68.665  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate.norm                         thrpt    5      9384.002 ±       0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                     thrpt    5      1124.019 ±     707.312  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                thrpt    5      9555.343 ±    6076.294    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                 thrpt    5         0.071 ±       0.166  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm            thrpt    5         0.603 ±       1.432    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.count                                   thrpt    5        17.000                counts
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.time                                    thrpt    5        15.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala                                            thrpt    5    321730.587 ±    5462.544   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate                             thrpt    5       624.732 ±      10.668  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                        thrpt    5      3056.001 ±       0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                    thrpt    5       666.697 ±       2.708  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm               thrpt    5      3261.330 ±      55.748    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                thrpt    5         0.348 ±       2.548  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm           thrpt    5         1.701 ±      12.471    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.count                                  thrpt    5        10.000                counts
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.time                                   thrpt    5         9.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala                                            thrpt    5    532863.003 ±   21167.893   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate                             thrpt    5       525.532 ±      20.997  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                        thrpt    5      1552.001 ±       0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                    thrpt    5       509.145 ±     648.528  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm               thrpt    5      1499.774 ±    1863.999    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                thrpt    5         0.456 ±       3.617  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm           thrpt    5         1.339 ±      10.610    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.count                                  thrpt    5         8.000                counts
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.time                                   thrpt    5        10.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala                                           thrpt    5    993833.259 ±   31968.865   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate                            thrpt    5       737.570 ±      23.994  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                       thrpt    5      1168.000 ±       0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                   thrpt    5       731.189 ±     578.887  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm              thrpt    5      1156.622 ±     876.937    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space               thrpt    5         0.062 ±       0.127  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm          thrpt    5         0.099 ±       0.197    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.count                                 thrpt    5        11.000                counts
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.time                                  thrpt    5         9.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc                                   thrpt    5   1114502.646 ±    3495.051   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                    thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm               thrpt    5        ≈ 10⁻³                  B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.count                         thrpt    5           ≈ 0                counts
[info] ArrayOfZonedDateTimesBenchmark.readCirce                                                 thrpt    5       682.390 ±      23.002   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate                                  thrpt    5      1424.642 ±      48.744  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                             thrpt    5   3284912.740 ±       0.611    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                         thrpt    5      1399.762 ±     575.467  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                    thrpt    5   3227258.725 ± 1304032.011    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                     thrpt    5         0.062 ±       0.150  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                thrpt    5       143.685 ±     343.479    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.count                                       thrpt    5        21.000                counts
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.time                                        thrpt    5        20.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala                                         thrpt    5     30013.684 ±    1433.534   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                          thrpt    5       542.221 ±      25.909  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                     thrpt    5     28432.016 ±       0.009    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                 thrpt    5       514.948 ±     656.984  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm            thrpt    5     27060.386 ±   35205.662    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space             thrpt    5         0.465 ±       3.734  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm        thrpt    5        24.450 ±     196.365    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.count                               thrpt    5         8.000                counts
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.time                                thrpt    5         9.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson                                              thrpt    5       667.908 ±      26.505   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate                               thrpt    5      1429.974 ±      56.474  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                          thrpt    5   3368478.354 ±      71.419    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                      thrpt    5      1457.954 ±     718.180  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                 thrpt    5   3433688.214 ± 1656216.776    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                  thrpt    5         0.037 ±       0.088  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm             thrpt    5        88.246 ±     206.140    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.count                                    thrpt    5        22.000                counts
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.time                                     thrpt    5        22.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeCirce                                                thrpt    5     13007.567 ±     109.317   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate                                 thrpt    5      1047.580 ±       9.425  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                            thrpt    5    126750.546 ±     134.387    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                        thrpt    5      1058.746 ±     593.120  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                   thrpt    5    128093.203 ±   71420.700    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                    thrpt    5         0.062 ±       0.057  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm               thrpt    5         7.559 ±       6.919    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.count                                      thrpt    5        16.000                counts
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.time                                       thrpt    5        13.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala                                        thrpt    5    273524.772 ±    8938.185   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                         thrpt    5       964.893 ±      31.390  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                    thrpt    5      5552.002 ±       0.001    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                thrpt    5       930.493 ±     577.124  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm           thrpt    5      5353.055 ±    3295.191    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space            thrpt    5         0.083 ±       0.127  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm       thrpt    5         0.479 ±       0.735    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.count                              thrpt    5        14.000                counts
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.time                               thrpt    5        12.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc                                thrpt    5    297178.516 ±    6882.511   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                 thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm            thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                      thrpt    5           ≈ 0                counts
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson                                             thrpt    5     14860.857 ±     580.543   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate                              thrpt    5       984.814 ±      38.458  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                         thrpt    5    104279.096 ±       7.764    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                     thrpt    5       987.653 ±      23.511  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                thrpt    5    104588.784 ±    4992.857    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                 thrpt    5         0.062 ±       0.098  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm            thrpt    5         6.623 ±      10.474    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.count                                   thrpt    5        15.000                counts
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.time                                    thrpt    5        13.000                    ms
[info] ArraysBenchmark.readCirce                                                                thrpt    5    883404.219 ±   17196.068   ops/s
[info] ArraysBenchmark.readCirce:·gc.alloc.rate                                                 thrpt    5      2887.482 ±      56.016  MB/sec
[info] ArraysBenchmark.readCirce:·gc.alloc.rate.norm                                            thrpt    5      5144.001 ±       0.001    B/op
[info] ArraysBenchmark.readCirce:·gc.churn.PS_Eden_Space                                        thrpt    5      2915.109 ±     710.078  MB/sec
[info] ArraysBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                   thrpt    5      5192.129 ±    1176.973    B/op
[info] ArraysBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                    thrpt    5         0.137 ±       0.108  MB/sec
[info] ArraysBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                               thrpt    5         0.245 ±       0.187    B/op
[info] ArraysBenchmark.readCirce:·gc.count                                                      thrpt    5        43.000                counts
[info] ArraysBenchmark.readCirce:·gc.time                                                       thrpt    5        35.000                    ms
[info] ArraysBenchmark.readJacksonScala                                                         thrpt    5   1612198.192 ±   86910.927   ops/s
[info] ArraysBenchmark.readJacksonScala:·gc.alloc.rate                                          thrpt    5      1516.199 ±      81.973  MB/sec
[info] ArraysBenchmark.readJacksonScala:·gc.alloc.rate.norm                                     thrpt    5      1480.000 ±       0.001    B/op
[info] ArraysBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                 thrpt    5      1528.040 ±     669.175  MB/sec
[info] ArraysBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                            thrpt    5      1490.582 ±     606.367    B/op
[info] ArraysBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                             thrpt    5         0.087 ±       0.200  MB/sec
[info] ArraysBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                        thrpt    5         0.085 ±       0.194    B/op
[info] ArraysBenchmark.readJacksonScala:·gc.count                                               thrpt    5        23.000                counts
[info] ArraysBenchmark.readJacksonScala:·gc.time                                                thrpt    5        22.000                    ms
[info] ArraysBenchmark.readJsoniterScala                                                        thrpt    5   7054263.992 ±  356490.596   ops/s
[info] ArraysBenchmark.readJsoniterScala:·gc.alloc.rate                                         thrpt    5      2115.800 ±     107.301  MB/sec
[info] ArraysBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                    thrpt    5       472.000 ±       0.001    B/op
[info] ArraysBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                thrpt    5      2096.794 ±     573.467  MB/sec
[info] ArraysBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                           thrpt    5       467.751 ±     124.698    B/op
[info] ArraysBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                            thrpt    5         0.079 ±       0.174  MB/sec
[info] ArraysBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       thrpt    5         0.018 ±       0.038    B/op
[info] ArraysBenchmark.readJsoniterScala:·gc.count                                              thrpt    5        31.000                counts
[info] ArraysBenchmark.readJsoniterScala:·gc.time                                               thrpt    5        24.000                    ms
[info] ArraysBenchmark.readPlayJson                                                             thrpt    5    316408.561 ±    6716.200   ops/s
[info] ArraysBenchmark.readPlayJson:·gc.alloc.rate                                              thrpt    5      1928.581 ±      40.059  MB/sec
[info] ArraysBenchmark.readPlayJson:·gc.alloc.rate.norm                                         thrpt    5      9592.001 ±       0.001    B/op
[info] ArraysBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                     thrpt    5      1936.430 ±     533.698  MB/sec
[info] ArraysBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                thrpt    5      9630.300 ±    2600.753    B/op
[info] ArraysBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                 thrpt    5         0.108 ±       0.143  MB/sec
[info] ArraysBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                            thrpt    5         0.538 ±       0.707    B/op
[info] ArraysBenchmark.readPlayJson:·gc.count                                                   thrpt    5        29.000                counts
[info] ArraysBenchmark.readPlayJson:·gc.time                                                    thrpt    5        31.000                    ms
[info] ArraysBenchmark.writeCirce                                                               thrpt    5   1036781.236 ±   32376.619   ops/s
[info] ArraysBenchmark.writeCirce:·gc.alloc.rate                                                thrpt    5      2387.565 ±      76.235  MB/sec
[info] ArraysBenchmark.writeCirce:·gc.alloc.rate.norm                                           thrpt    5      3624.000 ±       0.001    B/op
[info] ArraysBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                       thrpt    5      2364.764 ±      56.691  MB/sec
[info] ArraysBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                  thrpt    5      3589.642 ±     166.319    B/op
[info] ArraysBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                   thrpt    5         0.104 ±       0.098  MB/sec
[info] ArraysBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                              thrpt    5         0.158 ±       0.150    B/op
[info] ArraysBenchmark.writeCirce:·gc.count                                                     thrpt    5        35.000                counts
[info] ArraysBenchmark.writeCirce:·gc.time                                                      thrpt    5        28.000                    ms
[info] ArraysBenchmark.writeJacksonScala                                                        thrpt    5   3446395.027 ±   60396.100   ops/s
[info] ArraysBenchmark.writeJacksonScala:·gc.alloc.rate                                         thrpt    5      1997.072 ±      35.132  MB/sec
[info] ArraysBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                    thrpt    5       912.000 ±       0.001    B/op
[info] ArraysBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                thrpt    5      1941.861 ±     539.059  MB/sec
[info] ArraysBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                           thrpt    5       886.606 ±     234.479    B/op
[info] ArraysBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                            thrpt    5         0.104 ±       0.188  MB/sec
[info] ArraysBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                       thrpt    5         0.048 ±       0.086    B/op
[info] ArraysBenchmark.writeJacksonScala:·gc.count                                              thrpt    5        29.000                counts
[info] ArraysBenchmark.writeJacksonScala:·gc.time                                               thrpt    5        29.000                    ms
[info] ArraysBenchmark.writeJsoniterScala                                                       thrpt    5  13177727.083 ±  601175.431   ops/s
[info] ArraysBenchmark.writeJsoniterScala:·gc.alloc.rate                                        thrpt    5       803.949 ±      36.189  MB/sec
[info] ArraysBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                   thrpt    5        96.000 ±       0.001    B/op
[info] ArraysBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                               thrpt    5       799.158 ±     705.024  MB/sec
[info] ArraysBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                          thrpt    5        95.429 ±      84.081    B/op
[info] ArraysBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                           thrpt    5         0.071 ±       0.193  MB/sec
[info] ArraysBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      thrpt    5         0.008 ±       0.023    B/op
[info] ArraysBenchmark.writeJsoniterScala:·gc.count                                             thrpt    5        12.000                counts
[info] ArraysBenchmark.writeJsoniterScala:·gc.time                                              thrpt    5        10.000                    ms
[info] ArraysBenchmark.writePlayJson                                                            thrpt    5    428495.021 ±    9426.817   ops/s
[info] ArraysBenchmark.writePlayJson:·gc.alloc.rate                                             thrpt    5      1529.192 ±      32.991  MB/sec
[info] ArraysBenchmark.writePlayJson:·gc.alloc.rate.norm                                        thrpt    5      5616.001 ±       0.001    B/op
[info] ArraysBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                    thrpt    5      1527.147 ±     702.699  MB/sec
[info] ArraysBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                               thrpt    5      5607.391 ±    2533.161    B/op
[info] ArraysBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                thrpt    5         0.079 ±       0.164  MB/sec
[info] ArraysBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                           thrpt    5         0.290 ±       0.599    B/op
[info] ArraysBenchmark.writePlayJson:·gc.count                                                  thrpt    5        23.000                counts
[info] ArraysBenchmark.writePlayJson:·gc.time                                                   thrpt    5        24.000                    ms
[info] BitSetsBenchmark.readJacksonScala                                                        thrpt    5   2131971.679 ±   54636.806   ops/s
[info] BitSetsBenchmark.readJacksonScala:·gc.alloc.rate                                         thrpt    5      1289.757 ±      33.592  MB/sec
[info] BitSetsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                    thrpt    5       952.000 ±       0.001    B/op
[info] BitSetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                thrpt    5      1254.986 ±     543.318  MB/sec
[info] BitSetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                           thrpt    5       926.508 ±     406.824    B/op
[info] BitSetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                            thrpt    5         0.075 ±       0.134  MB/sec
[info] BitSetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                       thrpt    5         0.055 ±       0.099    B/op
[info] BitSetsBenchmark.readJacksonScala:·gc.count                                              thrpt    5        19.000                counts
[info] BitSetsBenchmark.readJacksonScala:·gc.time                                               thrpt    5        19.000                    ms
[info] BitSetsBenchmark.readJsoniterScala                                                       thrpt    5   5130158.683 ±   31581.706   ops/s
[info] BitSetsBenchmark.readJsoniterScala:·gc.alloc.rate                                        thrpt    5       678.078 ±       4.266  MB/sec
[info] BitSetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                   thrpt    5       208.000 ±       0.001    B/op
[info] BitSetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                               thrpt    5       732.863 ±     579.642  MB/sec
[info] BitSetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                          thrpt    5       224.816 ±     178.107    B/op
[info] BitSetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                           thrpt    5         0.079 ±       0.119  MB/sec
[info] BitSetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      thrpt    5         0.024 ±       0.036    B/op
[info] BitSetsBenchmark.readJsoniterScala:·gc.count                                             thrpt    5        11.000                counts
[info] BitSetsBenchmark.readJsoniterScala:·gc.time                                              thrpt    5        10.000                    ms
[info] BitSetsBenchmark.readPlayJson                                                            thrpt    5    374225.929 ±    4826.609   ops/s
[info] BitSetsBenchmark.readPlayJson:·gc.alloc.rate                                             thrpt    5      1755.727 ±      22.654  MB/sec
[info] BitSetsBenchmark.readPlayJson:·gc.alloc.rate.norm                                        thrpt    5      7384.001 ±       0.001    B/op
[info] BitSetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                    thrpt    5      1798.607 ±     697.359  MB/sec
[info] BitSetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                               thrpt    5      7565.764 ±    3001.150    B/op
[info] BitSetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                thrpt    5         0.112 ±       0.166  MB/sec
[info] BitSetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                           thrpt    5         0.473 ±       0.703    B/op
[info] BitSetsBenchmark.readPlayJson:·gc.count                                                  thrpt    5        27.000                counts
[info] BitSetsBenchmark.readPlayJson:·gc.time                                                   thrpt    5        27.000                    ms
[info] BitSetsBenchmark.writeJacksonScala                                                       thrpt    5   2706879.472 ±  101238.887   ops/s
[info] BitSetsBenchmark.writeJacksonScala:·gc.alloc.rate                                        thrpt    5      1431.098 ±      53.201  MB/sec
[info] BitSetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                   thrpt    5       832.000 ±       0.001    B/op
[info] BitSetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                               thrpt    5      1459.044 ±     715.175  MB/sec
[info] BitSetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                          thrpt    5       848.707 ±     432.406    B/op
[info] BitSetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                           thrpt    5         0.075 ±       0.217  MB/sec
[info] BitSetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                      thrpt    5         0.044 ±       0.128    B/op
[info] BitSetsBenchmark.writeJacksonScala:·gc.count                                             thrpt    5        22.000                counts
[info] BitSetsBenchmark.writeJacksonScala:·gc.time                                              thrpt    5        21.000                    ms
[info] BitSetsBenchmark.writeJsoniterScala                                                      thrpt    5   6365333.706 ±  167098.315   ops/s
[info] BitSetsBenchmark.writeJsoniterScala:·gc.alloc.rate                                       thrpt    5       970.828 ±      25.668  MB/sec
[info] BitSetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                  thrpt    5       240.000 ±       0.001    B/op
[info] BitSetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                              thrpt    5       999.527 ±      14.493  MB/sec
[info] BitSetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                         thrpt    5       247.105 ±       8.117    B/op
[info] BitSetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                          thrpt    5         0.062 ±       0.113  MB/sec
[info] BitSetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         0.015 ±       0.028    B/op
[info] BitSetsBenchmark.writeJsoniterScala:·gc.count                                            thrpt    5        15.000                counts
[info] BitSetsBenchmark.writeJsoniterScala:·gc.time                                             thrpt    5        12.000                    ms
[info] BitSetsBenchmark.writePlayJson                                                           thrpt    5    647864.342 ±   10410.989   ops/s
[info] BitSetsBenchmark.writePlayJson:·gc.alloc.rate                                            thrpt    5      1916.896 ±      30.389  MB/sec
[info] BitSetsBenchmark.writePlayJson:·gc.alloc.rate.norm                                       thrpt    5      4656.001 ±       0.001    B/op
[info] BitSetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                   thrpt    5      1939.554 ±     575.437  MB/sec
[info] BitSetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                              thrpt    5      4711.521 ±    1423.631    B/op
[info] BitSetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                               thrpt    5         0.096 ±       0.091  MB/sec
[info] BitSetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                          thrpt    5         0.233 ±       0.221    B/op
[info] BitSetsBenchmark.writePlayJson:·gc.count                                                 thrpt    5        29.000                counts
[info] BitSetsBenchmark.writePlayJson:·gc.time                                                  thrpt    5        30.000                    ms
[info] ExtractFieldsBenchmark.readCirce                                                         thrpt    5    801261.078 ±   43381.767   ops/s
[info] ExtractFieldsBenchmark.readCirce:·gc.alloc.rate                                          thrpt    5      2667.933 ±     144.561  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.alloc.rate.norm                                     thrpt    5      5240.001 ±       0.001    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                 thrpt    5      2640.650 ±     597.284  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                            thrpt    5      5188.455 ±    1296.040    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                             thrpt    5         0.117 ±       0.166  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                        thrpt    5         0.229 ±       0.320    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.count                                               thrpt    5        39.000                counts
[info] ExtractFieldsBenchmark.readCirce:·gc.time                                                thrpt    5        32.000                    ms
[info] ExtractFieldsBenchmark.readJacksonScala                                                  thrpt    5    985208.655 ±   65932.272   ops/s
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate                                   thrpt    5      1222.021 ±      82.161  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate.norm                              thrpt    5      1952.000 ±       0.001    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                          thrpt    5      1188.238 ±     707.420  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5      1899.132 ±    1156.937    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                      thrpt    5         0.087 ±       0.105  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5         0.140 ±       0.173    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.count                                        thrpt    5        18.000                counts
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.time                                         thrpt    5        18.000                    ms
[info] ExtractFieldsBenchmark.readJsoniterScala                                                 thrpt    5   7521913.581 ±  496740.374   ops/s
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate                                  thrpt    5       344.143 ±      22.519  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                             thrpt    5        72.000 ±       0.001    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                         thrpt    5       303.660 ±     168.028  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5        63.444 ±      32.031    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                     thrpt    5         0.319 ±       2.600  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5         0.066 ±       0.537    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.count                                       thrpt    5         5.000                counts
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.time                                        thrpt    5         7.000                    ms
[info] ExtractFieldsBenchmark.readPlayJson                                                      thrpt    5    315470.407 ±    5276.829   ops/s
[info] ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate                                       thrpt    5      1751.060 ±      29.361  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate.norm                                  thrpt    5      8736.001 ±       0.001    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                              thrpt    5      1796.600 ±     699.578  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                         thrpt    5      8965.161 ±    3580.914    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                          thrpt    5         0.087 ±       0.183  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         0.437 ±       0.919    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.count                                            thrpt    5        27.000                counts
[info] ExtractFieldsBenchmark.readPlayJson:·gc.time                                             thrpt    5        28.000                    ms
[info] GoogleMapsAPIBenchmark.readCirce                                                         thrpt    5      7892.584 ±     403.088   ops/s
[info] GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate                                          thrpt    5      2031.443 ±     104.377  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate.norm                                     thrpt    5    405016.056 ±       0.011    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space                                 thrpt    5      2086.258 ±     564.890  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                            thrpt    5    415751.312 ±   94594.515    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space                             thrpt    5         0.180 ±       0.305  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                        thrpt    5        35.779 ±      60.786    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.count                                               thrpt    5        31.000                counts
[info] GoogleMapsAPIBenchmark.readCirce:·gc.time                                                thrpt    5        29.000                    ms
[info] GoogleMapsAPIBenchmark.readJacksonScala                                                  thrpt    5     13584.010 ±     306.305   ops/s
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate                                   thrpt    5       495.234 ±      10.907  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm                              thrpt    5     57368.035 ±       0.019    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                          thrpt    5       440.131 ±     739.541  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5     51071.115 ±   86695.348    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                      thrpt    5         0.533 ±       4.541  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5        61.763 ±     526.577    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.count                                        thrpt    5         7.000                counts
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.time                                         thrpt    5        12.000                    ms
[info] GoogleMapsAPIBenchmark.readJsoniterScala                                                 thrpt    5     22833.945 ±     322.438   ops/s
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate                                  thrpt    5       427.328 ±       5.665  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm                             thrpt    5     29448.021 ±       0.014    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                         thrpt    5       434.934 ±     578.701  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5     29970.742 ±   39804.982    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                     thrpt    5         0.352 ±       2.862  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5        24.318 ±     197.970    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.count                                       thrpt    5         7.000                counts
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.time                                        thrpt    5         9.000                    ms
[info] GoogleMapsAPIBenchmark.readPlayJson                                                      thrpt    5      2277.219 ±     150.759   ops/s
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate                                       thrpt    5      1426.319 ±      95.162  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate.norm                                  thrpt    5    985529.672 ±      12.734    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                              thrpt    5      1483.723 ±     628.973  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                         thrpt    5   1026050.629 ±  463454.911    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Old_Gen                                 thrpt    5         0.027 ±       0.236  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Old_Gen.norm                            thrpt    5        19.437 ±     167.354    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                          thrpt    5         0.062 ±       0.272  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                     thrpt    5        43.709 ±     193.912    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.count                                            thrpt    5        24.000                counts
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.time                                             thrpt    5        52.000                    ms
[info] GoogleMapsAPIBenchmark.writeCirce                                                        thrpt    5      8724.053 ±      75.858   ops/s
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate                                         thrpt    5      1941.803 ±      15.847  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate.norm                                    thrpt    5    350238.078 ±      51.899    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                thrpt    5      1950.331 ±     597.033  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                           thrpt    5    351778.972 ±  107835.850    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                            thrpt    5         0.080 ±       0.221  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                       thrpt    5        14.410 ±      39.881    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.count                                              thrpt    5        29.000                counts
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.time                                               thrpt    5        28.000                    ms
[info] GoogleMapsAPIBenchmark.writeJacksonScala                                                 thrpt    5     41567.682 ±    1450.669   ops/s
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate                                  thrpt    5       602.438 ±      20.974  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm                             thrpt    5     22807.835 ±       0.306    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                         thrpt    5       584.188 ±     559.198  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5     22138.700 ±   21448.411    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                     thrpt    5         0.568 ±       4.622  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5        21.427 ±     174.332    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.count                                       thrpt    5         9.000                counts
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.time                                        thrpt    5        11.000                    ms
[info] GoogleMapsAPIBenchmark.writeJsoniterScala                                                thrpt    5     76168.968 ±    5774.895   ops/s
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate                                 thrpt    5       572.714 ±      43.776  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                            thrpt    5     11832.006 ±       0.001    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                        thrpt    5       530.323 ±     699.038  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5     10964.126 ±   14521.192    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                    thrpt    5         0.426 ±       3.268  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5         8.668 ±      66.368    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.count                                      thrpt    5         8.000                counts
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.time                                       thrpt    5         7.000                    ms
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc                                        thrpt    5     80141.260 ±     159.415   ops/s
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                         thrpt    5         1.222 ±       0.002  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                    thrpt    5        24.005 ±       0.001    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count                              thrpt    5           ≈ 0                counts
[info] GoogleMapsAPIBenchmark.writePlayJson                                                     thrpt    5      5841.714 ±     157.321   ops/s
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate                                      thrpt    5      1746.079 ±      47.375  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate.norm                                 thrpt    5    470335.868 ±       2.856    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                             thrpt    5      1665.908 ±      72.487  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                        thrpt    5    448735.561 ±   12207.889    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                         thrpt    5         0.054 ±       0.122  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                    thrpt    5        14.573 ±      32.556    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.count                                           thrpt    5        25.000                counts
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.time                                            thrpt    5        28.000                    ms
[info] IntAndLongMapsBenchmark.readJsoniterScala                                                thrpt    5   5244704.357 ±  395774.375   ops/s
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.alloc.rate                                 thrpt    5      1573.038 ±     119.481  MB/sec
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                            thrpt    5       472.000 ±       0.001    B/op
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                        thrpt    5      1547.712 ±     720.390  MB/sec
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5       464.330 ±     210.600    B/op
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                    thrpt    5         0.087 ±       0.119  MB/sec
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5         0.026 ±       0.037    B/op
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.count                                      thrpt    5        23.000                counts
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.time                                       thrpt    5        19.000                    ms
[info] IntAndLongMapsBenchmark.readPlayJson                                                     thrpt    5    351536.595 ±    5136.432   ops/s
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.alloc.rate                                      thrpt    5      1889.193 ±      27.641  MB/sec
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.alloc.rate.norm                                 thrpt    5      8456.001 ±       0.001    B/op
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                             thrpt    5      1871.709 ±     732.331  MB/sec
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                        thrpt    5      8378.164 ±    3295.299    B/op
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                         thrpt    5         0.079 ±       0.067  MB/sec
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                    thrpt    5         0.354 ±       0.303    B/op
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.count                                           thrpt    5        28.000                counts
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.time                                            thrpt    5        28.000                    ms
[info] IntAndLongMapsBenchmark.writeJsoniterScala                                               thrpt    5   3355208.345 ±   47704.260   ops/s
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.alloc.rate                                thrpt    5       494.638 ±       7.122  MB/sec
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                           thrpt    5       232.000 ±       0.001    B/op
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                       thrpt    5       515.784 ±     656.908  MB/sec
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5       241.865 ±     307.412    B/op
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                   thrpt    5         0.399 ±       2.991  MB/sec
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5         0.187 ±       1.402    B/op
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.count                                     thrpt    5         8.000                counts
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.time                                      thrpt    5        10.000                    ms
[info] IntAndLongMapsBenchmark.writePlayJson                                                    thrpt    5    335183.120 ±    6090.331   ops/s
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.alloc.rate                                     thrpt    5      1313.849 ±      24.075  MB/sec
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.alloc.rate.norm                                thrpt    5      6168.001 ±       0.001    B/op
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                            thrpt    5      1321.125 ±      50.345  MB/sec
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                       thrpt    5      6202.361 ±     296.926    B/op
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                        thrpt    5         0.067 ±       0.132  MB/sec
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                   thrpt    5         0.313 ±       0.617    B/op
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.count                                          thrpt    5        20.000                counts
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.time                                           thrpt    5        22.000                    ms
[info] IterablesBenchmark.readCirce                                                             thrpt    5    663717.858 ±   10546.940   ops/s
[info] IterablesBenchmark.readCirce:·gc.alloc.rate                                              thrpt    5      2419.073 ±      39.036  MB/sec
[info] IterablesBenchmark.readCirce:·gc.alloc.rate.norm                                         thrpt    5      5736.001 ±       0.001    B/op
[info] IterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                     thrpt    5      2433.774 ±     531.823  MB/sec
[info] IterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                thrpt    5      5771.562 ±    1319.664    B/op
[info] IterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                 thrpt    5         0.096 ±       0.122  MB/sec
[info] IterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                            thrpt    5         0.227 ±       0.286    B/op
[info] IterablesBenchmark.readCirce:·gc.count                                                   thrpt    5        36.000                counts
[info] IterablesBenchmark.readCirce:·gc.time                                                    thrpt    5        31.000                    ms
[info] IterablesBenchmark.readJacksonScala                                                      thrpt    5    610026.183 ±   20117.184   ops/s
[info] IterablesBenchmark.readJacksonScala:·gc.alloc.rate                                       thrpt    5       710.124 ±      23.223  MB/sec
[info] IterablesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                  thrpt    5      1832.001 ±       0.001    B/op
[info] IterablesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                              thrpt    5       714.879 ±     553.295  MB/sec
[info] IterablesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                         thrpt    5      1842.941 ±    1384.790    B/op
[info] IterablesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                          thrpt    5         0.572 ±       4.565  MB/sec
[info] IterablesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         1.463 ±      11.674    B/op
[info] IterablesBenchmark.readJacksonScala:·gc.count                                            thrpt    5        11.000                counts
[info] IterablesBenchmark.readJacksonScala:·gc.time                                             thrpt    5        13.000                    ms
[info] IterablesBenchmark.readJsoniterScala                                                     thrpt    5   3718657.054 ±   83890.498   ops/s
[info] IterablesBenchmark.readJsoniterScala:·gc.alloc.rate                                      thrpt    5      1474.464 ±      32.770  MB/sec
[info] IterablesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                 thrpt    5       624.000 ±       0.001    B/op
[info] IterablesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                             thrpt    5      1478.834 ±     728.214  MB/sec
[info] IterablesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                        thrpt    5       625.727 ±     303.017    B/op
[info] IterablesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                         thrpt    5         0.092 ±       0.176  MB/sec
[info] IterablesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    thrpt    5         0.039 ±       0.074    B/op
[info] IterablesBenchmark.readJsoniterScala:·gc.count                                           thrpt    5        22.000                counts
[info] IterablesBenchmark.readJsoniterScala:·gc.time                                            thrpt    5        19.000                    ms
[info] IterablesBenchmark.readPlayJson                                                          thrpt    5    233337.763 ±    6473.271   ops/s
[info] IterablesBenchmark.readPlayJson:·gc.alloc.rate                                           thrpt    5      1623.914 ±      44.030  MB/sec
[info] IterablesBenchmark.readPlayJson:·gc.alloc.rate.norm                                      thrpt    5     10952.002 ±       0.001    B/op
[info] IterablesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                  thrpt    5      1661.114 ±      74.970  MB/sec
[info] IterablesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                             thrpt    5     11203.233 ±     554.930    B/op
[info] IterablesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                              thrpt    5         0.096 ±       0.072  MB/sec
[info] IterablesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                         thrpt    5         0.646 ±       0.481    B/op
[info] IterablesBenchmark.readPlayJson:·gc.count                                                thrpt    5        25.000                counts
[info] IterablesBenchmark.readPlayJson:·gc.time                                                 thrpt    5        26.000                    ms
[info] IterablesBenchmark.writeCirce                                                            thrpt    5    917813.623 ±   43288.612   ops/s
[info] IterablesBenchmark.writeCirce:·gc.alloc.rate                                             thrpt    5      2211.389 ±     103.876  MB/sec
[info] IterablesBenchmark.writeCirce:·gc.alloc.rate.norm                                        thrpt    5      3792.000 ±       0.001    B/op
[info] IterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                    thrpt    5      2227.047 ±     744.101  MB/sec
[info] IterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                               thrpt    5      3816.421 ±    1124.766    B/op
[info] IterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                thrpt    5         0.087 ±       0.036  MB/sec
[info] IterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                           thrpt    5         0.150 ±       0.062    B/op
[info] IterablesBenchmark.writeCirce:·gc.count                                                  thrpt    5        33.000                counts
[info] IterablesBenchmark.writeCirce:·gc.time                                                   thrpt    5        28.000                    ms
[info] IterablesBenchmark.writeJacksonScala                                                     thrpt    5   1554807.042 ±   54456.057   ops/s
[info] IterablesBenchmark.writeJacksonScala:·gc.alloc.rate                                      thrpt    5      1019.541 ±      35.798  MB/sec
[info] IterablesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                 thrpt    5      1032.000 ±       0.001    B/op
[info] IterablesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                             thrpt    5       982.594 ±      29.788  MB/sec
[info] IterablesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                        thrpt    5       994.662 ±      43.343    B/op
[info] IterablesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                         thrpt    5         0.079 ±       0.132  MB/sec
[info] IterablesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                    thrpt    5         0.080 ±       0.135    B/op
[info] IterablesBenchmark.writeJacksonScala:·gc.count                                           thrpt    5        15.000                counts
[info] IterablesBenchmark.writeJacksonScala:·gc.time                                            thrpt    5        15.000                    ms
[info] IterablesBenchmark.writeJsoniterScala                                                    thrpt    5   6809462.495 ±  254136.850   ops/s
[info] IterablesBenchmark.writeJsoniterScala:·gc.alloc.rate                                     thrpt    5       761.520 ±      28.474  MB/sec
[info] IterablesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                thrpt    5       176.000 ±       0.001    B/op
[info] IterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                            thrpt    5       731.062 ±     574.357  MB/sec
[info] IterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                       thrpt    5       169.093 ±     136.415    B/op
[info] IterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                        thrpt    5         0.071 ±       0.134  MB/sec
[info] IterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   thrpt    5         0.016 ±       0.031    B/op
[info] IterablesBenchmark.writeJsoniterScala:·gc.count                                          thrpt    5        11.000                counts
[info] IterablesBenchmark.writeJsoniterScala:·gc.time                                           thrpt    5        10.000                    ms
[info] IterablesBenchmark.writePlayJson                                                         thrpt    5    483744.763 ±   12228.347   ops/s
[info] IterablesBenchmark.writePlayJson:·gc.alloc.rate                                          thrpt    5      1684.592 ±      42.893  MB/sec
[info] IterablesBenchmark.writePlayJson:·gc.alloc.rate.norm                                     thrpt    5      5480.001 ±       0.001    B/op
[info] IterablesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                 thrpt    5      1731.444 ±     610.199  MB/sec
[info] IterablesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                            thrpt    5      5631.539 ±    1927.387    B/op
[info] IterablesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                             thrpt    5         0.096 ±       0.072  MB/sec
[info] IterablesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                        thrpt    5         0.312 ±       0.238    B/op
[info] IterablesBenchmark.writePlayJson:·gc.count                                               thrpt    5        26.000                counts
[info] IterablesBenchmark.writePlayJson:·gc.time                                                thrpt    5        27.000                    ms
[info] MapsBenchmark.readCirce                                                                  thrpt    5    644816.678 ±   15338.306   ops/s
[info] MapsBenchmark.readCirce:·gc.alloc.rate                                                   thrpt    5      2284.678 ±      54.542  MB/sec
[info] MapsBenchmark.readCirce:·gc.alloc.rate.norm                                              thrpt    5      5576.001 ±       0.001    B/op
[info] MapsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                          thrpt    5      2296.258 ±     564.419  MB/sec
[info] MapsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                     thrpt    5      5604.474 ±    1388.102    B/op
[info] MapsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                      thrpt    5         0.100 ±       0.105  MB/sec
[info] MapsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                 thrpt    5         0.244 ±       0.257    B/op
[info] MapsBenchmark.readCirce:·gc.count                                                        thrpt    5        34.000                counts
[info] MapsBenchmark.readCirce:·gc.time                                                         thrpt    5        29.000                    ms
[info] MapsBenchmark.readJsoniterScala                                                          thrpt    5   4477561.624 ±  392558.133   ops/s
[info] MapsBenchmark.readJsoniterScala:·gc.alloc.rate                                           thrpt    5      1115.342 ±      98.097  MB/sec
[info] MapsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                      thrpt    5       392.000 ±       0.001    B/op
[info] MapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                  thrpt    5      1070.413 ±     575.631  MB/sec
[info] MapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                             thrpt    5       375.747 ±     178.555    B/op
[info] MapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                              thrpt    5         0.058 ±       0.067  MB/sec
[info] MapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         thrpt    5         0.021 ±       0.024    B/op
[info] MapsBenchmark.readJsoniterScala:·gc.count                                                thrpt    5        16.000                counts
[info] MapsBenchmark.readJsoniterScala:·gc.time                                                 thrpt    5        14.000                    ms
[info] MapsBenchmark.readPlayJson                                                               thrpt    5    362232.454 ±    5255.375   ops/s
[info] MapsBenchmark.readPlayJson:·gc.alloc.rate                                                thrpt    5      1883.968 ±      27.696  MB/sec
[info] MapsBenchmark.readPlayJson:·gc.alloc.rate.norm                                           thrpt    5      8184.001 ±       0.001    B/op
[info] MapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                       thrpt    5      1936.980 ±     573.380  MB/sec
[info] MapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                  thrpt    5      8414.661 ±    2506.778    B/op
[info] MapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                   thrpt    5         0.112 ±       0.209  MB/sec
[info] MapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                              thrpt    5         0.489 ±       0.915    B/op
[info] MapsBenchmark.readPlayJson:·gc.count                                                     thrpt    5        29.000                counts
[info] MapsBenchmark.readPlayJson:·gc.time                                                      thrpt    5        31.000                    ms
[info] MapsBenchmark.writeCirce                                                                 thrpt    5    481441.186 ±   19931.463   ops/s
[info] MapsBenchmark.writeCirce:·gc.alloc.rate                                                  thrpt    5      1311.720 ±      54.398  MB/sec
[info] MapsBenchmark.writeCirce:·gc.alloc.rate.norm                                             thrpt    5      4288.001 ±       0.001    B/op
[info] MapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                         thrpt    5      1333.818 ±      37.204  MB/sec
[info] MapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                    thrpt    5      4360.761 ±     257.595    B/op
[info] MapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                     thrpt    5         0.050 ±       0.091  MB/sec
[info] MapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                thrpt    5         0.163 ±       0.296    B/op
[info] MapsBenchmark.writeCirce:·gc.count                                                       thrpt    5        20.000                counts
[info] MapsBenchmark.writeCirce:·gc.time                                                        thrpt    5        17.000                    ms
[info] MapsBenchmark.writeJsoniterScala                                                         thrpt    5   3581682.010 ±   56532.952   ops/s
[info] MapsBenchmark.writeJsoniterScala:·gc.alloc.rate                                          thrpt    5       582.657 ±       9.382  MB/sec
[info] MapsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                     thrpt    5       256.000 ±       0.001    B/op
[info] MapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                 thrpt    5       597.724 ±     572.250  MB/sec
[info] MapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                            thrpt    5       262.786 ±     253.551    B/op
[info] MapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                             thrpt    5         0.392 ±       2.929  MB/sec
[info] MapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        thrpt    5         0.173 ±       1.290    B/op
[info] MapsBenchmark.writeJsoniterScala:·gc.count                                               thrpt    5         9.000                counts
[info] MapsBenchmark.writeJsoniterScala:·gc.time                                                thrpt    5        10.000                    ms
[info] MapsBenchmark.writePlayJson                                                              thrpt    5    319711.986 ±   16827.087   ops/s
[info] MapsBenchmark.writePlayJson:·gc.alloc.rate                                               thrpt    5      1178.312 ±      62.263  MB/sec
[info] MapsBenchmark.writePlayJson:·gc.alloc.rate.norm                                          thrpt    5      5800.001 ±       0.001    B/op
[info] MapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                      thrpt    5      1185.300 ±     674.835  MB/sec
[info] MapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                 thrpt    5      5838.809 ±    3443.974    B/op
[info] MapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                  thrpt    5         0.067 ±       0.119  MB/sec
[info] MapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                             thrpt    5         0.327 ±       0.583    B/op
[info] MapsBenchmark.writePlayJson:·gc.count                                                    thrpt    5        18.000                counts
[info] MapsBenchmark.writePlayJson:·gc.time                                                     thrpt    5        19.000                    ms
[info] MissingReqFieldBenchmark.readCirce                                                       thrpt    5   1978346.152 ±   43239.939   ops/s
[info] MissingReqFieldBenchmark.readCirce:·gc.alloc.rate                                        thrpt    5      3177.859 ±      69.794  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.alloc.rate.norm                                   thrpt    5      2528.000 ±       0.001    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space                               thrpt    5      3188.301 ±     730.724  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                          thrpt    5      2536.367 ±     583.599    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space                           thrpt    5         0.104 ±       0.150  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                      thrpt    5         0.083 ±       0.119    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.count                                             thrpt    5        47.000                counts
[info] MissingReqFieldBenchmark.readCirce:·gc.time                                              thrpt    5        37.000                    ms
[info] MissingReqFieldBenchmark.readJacksonScala                                                thrpt    5    314732.963 ±    7559.756   ops/s
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate                                 thrpt    5       740.843 ±      18.317  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate.norm                            thrpt    5      3704.001 ±       0.001    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                        thrpt    5       718.426 ±     557.909  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5      3592.660 ±    2809.713    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                    thrpt    5         0.501 ±       3.956  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5         2.528 ±      19.987    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.count                                      thrpt    5        11.000                counts
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.time                                       thrpt    5        13.000                    ms
[info] MissingReqFieldBenchmark.readJsoniterScala                                               thrpt    5    705670.994 ±   74471.689   ops/s
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate                                thrpt    5       638.720 ±      67.330  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate.norm                           thrpt    5      1424.001 ±       0.001    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                       thrpt    5       602.362 ±     576.437  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5      1337.510 ±    1208.351    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                   thrpt    5         0.071 ±       0.176  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5         0.156 ±       0.384    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.count                                     thrpt    5         9.000                counts
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.time                                      thrpt    5         7.000                    ms
[info] MissingReqFieldBenchmark.readJsoniterStackless                                           thrpt    5   3646840.100 ±  160341.546   ops/s
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate                            thrpt    5      2169.019 ±      95.783  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate.norm                       thrpt    5       936.000 ±       0.001    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space                   thrpt    5      2167.134 ±     733.901  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space.norm              thrpt    5       934.794 ±     290.790    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space               thrpt    5         0.108 ±       0.067  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space.norm          thrpt    5         0.047 ±       0.029    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.count                                 thrpt    5        32.000                counts
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.time                                  thrpt    5        24.000                    ms
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump                                     thrpt    5   6974986.566 ±  515630.419   ops/s
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate                      thrpt    5       815.526 ±      59.974  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate.norm                 thrpt    5       184.000 ±       0.001    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space             thrpt    5       803.732 ±     705.100  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space.norm        thrpt    5       181.227 ±     155.751    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space         thrpt    5         0.079 ±       0.154  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space.norm    thrpt    5         0.018 ±       0.034    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.count                           thrpt    5        12.000                counts
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.time                            thrpt    5         9.000                    ms
[info] MissingReqFieldBenchmark.readPlayJson                                                    thrpt    5    187877.223 ±   10392.221   ops/s
[info] MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate                                     thrpt    5      1567.340 ±      86.921  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate.norm                                thrpt    5     13128.002 ±       0.001    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                            thrpt    5      1590.936 ±     572.176  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                       thrpt    5     13324.716 ±    4727.620    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                        thrpt    5         0.087 ±       0.105  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                   thrpt    5         0.733 ±       0.879    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.count                                          thrpt    5        24.000                counts
[info] MissingReqFieldBenchmark.readPlayJson:·gc.time                                           thrpt    5        26.000                    ms
[info] MutableIterablesBenchmark.readCirce                                                      thrpt    5    739814.192 ±   12205.059   ops/s
[info] MutableIterablesBenchmark.readCirce:·gc.alloc.rate                                       thrpt    5      2858.648 ±      47.222  MB/sec
[info] MutableIterablesBenchmark.readCirce:·gc.alloc.rate.norm                                  thrpt    5      6080.001 ±       0.001    B/op
[info] MutableIterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space                              thrpt    5      2914.352 ±     707.171  MB/sec
[info] MutableIterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                         thrpt    5      6199.281 ±    1559.431    B/op
[info] MutableIterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                          thrpt    5         0.121 ±       0.215  MB/sec
[info] MutableIterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         0.257 ±       0.456    B/op
[info] MutableIterablesBenchmark.readCirce:·gc.count                                            thrpt    5        43.000                counts
[info] MutableIterablesBenchmark.readCirce:·gc.time                                             thrpt    5        39.000                    ms
[info] MutableIterablesBenchmark.readJsoniterScala                                              thrpt    5   2769216.479 ±  179831.862   ops/s
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.alloc.rate                               thrpt    5      1787.939 ±     116.115  MB/sec
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                          thrpt    5      1016.000 ±       0.001    B/op
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                      thrpt    5      1821.138 ±     701.368  MB/sec
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5      1035.062 ±     402.865    B/op
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                  thrpt    5         0.096 ±       0.146  MB/sec
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5         0.054 ±       0.082    B/op
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.count                                    thrpt    5        27.000                counts
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.time                                     thrpt    5        23.000                    ms
[info] MutableIterablesBenchmark.readPlayJson                                                   thrpt    5    258716.001 ±    6391.663   ops/s
[info] MutableIterablesBenchmark.readPlayJson:·gc.alloc.rate                                    thrpt    5      1850.515 ±      46.169  MB/sec
[info] MutableIterablesBenchmark.readPlayJson:·gc.alloc.rate.norm                               thrpt    5     11256.002 ±       0.001    B/op
[info] MutableIterablesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                           thrpt    5      1801.068 ±     712.977  MB/sec
[info] MutableIterablesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                      thrpt    5     10953.653 ±    4253.300    B/op
[info] MutableIterablesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                       thrpt    5         0.108 ±       0.143  MB/sec
[info] MutableIterablesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                  thrpt    5         0.659 ±       0.872    B/op
[info] MutableIterablesBenchmark.readPlayJson:·gc.count                                         thrpt    5        27.000                counts
[info] MutableIterablesBenchmark.readPlayJson:·gc.time                                          thrpt    5        27.000                    ms
[info] MutableIterablesBenchmark.writeCirce                                                     thrpt    5    840701.571 ±   24045.120   ops/s
[info] MutableIterablesBenchmark.writeCirce:·gc.alloc.rate                                      thrpt    5      1940.387 ±      54.479  MB/sec
[info] MutableIterablesBenchmark.writeCirce:·gc.alloc.rate.norm                                 thrpt    5      3632.001 ±       0.001    B/op
[info] MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                             thrpt    5      1950.659 ±     575.587  MB/sec
[info] MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                        thrpt    5      3650.655 ±    1040.205    B/op
[info] MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                         thrpt    5         0.108 ±       0.088  MB/sec
[info] MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                    thrpt    5         0.203 ±       0.163    B/op
[info] MutableIterablesBenchmark.writeCirce:·gc.count                                           thrpt    5        29.000                counts
[info] MutableIterablesBenchmark.writeCirce:·gc.time                                            thrpt    5        23.000                    ms
[info] MutableIterablesBenchmark.writeJacksonScala                                              thrpt    5   1418963.303 ±   38402.994   ops/s
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.alloc.rate                               thrpt    5       815.163 ±      21.656  MB/sec
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                          thrpt    5       904.000 ±       0.001    B/op
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                      thrpt    5       847.623 ±     690.280  MB/sec
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5       939.658 ±     757.966    B/op
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                  thrpt    5         0.092 ±       0.185  MB/sec
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5         0.102 ±       0.207    B/op
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.count                                    thrpt    5        13.000                counts
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.time                                     thrpt    5        13.000                    ms
[info] MutableIterablesBenchmark.writeJsoniterScala                                             thrpt    5   4447534.190 ±   65259.563   ops/s
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.alloc.rate                              thrpt    5       339.117 ±       4.951  MB/sec
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                         thrpt    5       120.000 ±       0.001    B/op
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                     thrpt    5       352.668 ±     364.892  MB/sec
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                thrpt    5       124.884 ±     131.102    B/op
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                 thrpt    5         0.380 ±       3.139  MB/sec
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm            thrpt    5         0.134 ±       1.107    B/op
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.count                                   thrpt    5         6.000                counts
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.time                                    thrpt    5        11.000                    ms
[info] MutableIterablesBenchmark.writePlayJson                                                  thrpt    5    508631.485 ±    9250.080   ops/s
[info] MutableIterablesBenchmark.writePlayJson:·gc.alloc.rate                                   thrpt    5      1740.376 ±      31.170  MB/sec
[info] MutableIterablesBenchmark.writePlayJson:·gc.alloc.rate.norm                              thrpt    5      5384.001 ±       0.001    B/op
[info] MutableIterablesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                          thrpt    5      1733.614 ±     608.217  MB/sec
[info] MutableIterablesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                     thrpt    5      5362.666 ±    1851.864    B/op
[info] MutableIterablesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                      thrpt    5         0.087 ±       0.088  MB/sec
[info] MutableIterablesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                 thrpt    5         0.271 ±       0.274    B/op
[info] MutableIterablesBenchmark.writePlayJson:·gc.count                                        thrpt    5        26.000                counts
[info] MutableIterablesBenchmark.writePlayJson:·gc.time                                         thrpt    5        26.000                    ms
[info] MutableMapsBenchmark.readJsoniterScala                                                   thrpt    5   2169830.459 ±   46709.164   ops/s
[info] MutableMapsBenchmark.readJsoniterScala:·gc.alloc.rate                                    thrpt    5      1025.853 ±      22.570  MB/sec
[info] MutableMapsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                               thrpt    5       744.000 ±       0.001    B/op
[info] MutableMapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                           thrpt    5      1004.207 ±      15.750  MB/sec
[info] MutableMapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                      thrpt    5       728.312 ±      13.071    B/op
[info] MutableMapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                       thrpt    5         0.042 ±       0.113  MB/sec
[info] MutableMapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  thrpt    5         0.030 ±       0.082    B/op
[info] MutableMapsBenchmark.readJsoniterScala:·gc.count                                         thrpt    5        15.000                counts
[info] MutableMapsBenchmark.readJsoniterScala:·gc.time                                          thrpt    5        12.000                    ms
[info] MutableMapsBenchmark.readPlayJson                                                        thrpt    5    311077.184 ±    8306.729   ops/s
[info] MutableMapsBenchmark.readPlayJson:·gc.alloc.rate                                         thrpt    5      1644.532 ±      43.975  MB/sec
[info] MutableMapsBenchmark.readPlayJson:·gc.alloc.rate.norm                                    thrpt    5      8320.001 ±       0.001    B/op
[info] MutableMapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                thrpt    5      1663.719 ±      71.662  MB/sec
[info] MutableMapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                           thrpt    5      8417.350 ±     409.744    B/op
[info] MutableMapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                            thrpt    5         0.075 ±       0.091  MB/sec
[info] MutableMapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                       thrpt    5         0.379 ±       0.464    B/op
[info] MutableMapsBenchmark.readPlayJson:·gc.count                                              thrpt    5        25.000                counts
[info] MutableMapsBenchmark.readPlayJson:·gc.time                                               thrpt    5        25.000                    ms
[info] MutableMapsBenchmark.writeCirce                                                          thrpt    5    475042.845 ±   12694.686   ops/s
[info] MutableMapsBenchmark.writeCirce:·gc.alloc.rate                                           thrpt    5      1279.916 ±      34.237  MB/sec
[info] MutableMapsBenchmark.writeCirce:·gc.alloc.rate.norm                                      thrpt    5      4240.001 ±       0.001    B/op
[info] MutableMapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                  thrpt    5      1266.706 ±     575.990  MB/sec
[info] MutableMapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                             thrpt    5      4197.717 ±    1955.077    B/op
[info] MutableMapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                              thrpt    5         0.075 ±       0.134  MB/sec
[info] MutableMapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                         thrpt    5         0.248 ±       0.444    B/op
[info] MutableMapsBenchmark.writeCirce:·gc.count                                                thrpt    5        19.000                counts
[info] MutableMapsBenchmark.writeCirce:·gc.time                                                 thrpt    5        16.000                    ms
[info] MutableMapsBenchmark.writeJsoniterScala                                                  thrpt    5   3001839.502 ±   45758.655   ops/s
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.alloc.rate                                   thrpt    5       564.634 ±       8.983  MB/sec
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                              thrpt    5       296.000 ±       0.001    B/op
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                          thrpt    5       530.967 ±     700.046  MB/sec
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5       278.438 ±     368.037    B/op
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                      thrpt    5         0.390 ±       2.999  MB/sec
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5         0.204 ±       1.571    B/op
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.count                                        thrpt    5         8.000                counts
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.time                                         thrpt    5         8.000                    ms
[info] MutableMapsBenchmark.writePlayJson                                                       thrpt    5    339543.602 ±   12068.330   ops/s
[info] MutableMapsBenchmark.writePlayJson:·gc.alloc.rate                                        thrpt    5      1313.501 ±      46.868  MB/sec
[info] MutableMapsBenchmark.writePlayJson:·gc.alloc.rate.norm                                   thrpt    5      6088.001 ±       0.001    B/op
[info] MutableMapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                               thrpt    5      1320.514 ±      53.251  MB/sec
[info] MutableMapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                          thrpt    5      6120.611 ±     192.631    B/op
[info] MutableMapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                           thrpt    5         0.083 ±       0.234  MB/sec
[info] MutableMapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                      thrpt    5         0.388 ±       1.103    B/op
[info] MutableMapsBenchmark.writePlayJson:·gc.count                                             thrpt    5        20.000                counts
[info] MutableMapsBenchmark.writePlayJson:·gc.time                                              thrpt    5        21.000                    ms
[info] PrimitivesBenchmark.readCirce                                                            thrpt    5    711460.670 ±   23003.871   ops/s
[info] PrimitivesBenchmark.readCirce:·gc.alloc.rate                                             thrpt    5      2108.717 ±      69.483  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.alloc.rate.norm                                        thrpt    5      4664.001 ±       0.001    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                    thrpt    5      2088.595 ±     606.845  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                               thrpt    5      4620.254 ±    1383.894    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                thrpt    5         0.108 ±       0.174  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                           thrpt    5         0.239 ±       0.378    B/op
[info] PrimitivesBenchmark.readCirce:·gc.count                                                  thrpt    5        31.000                counts
[info] PrimitivesBenchmark.readCirce:·gc.time                                                   thrpt    5        25.000                    ms
[info] PrimitivesBenchmark.readJacksonScala                                                     thrpt    5   1471893.593 ±   58840.192   ops/s
[info] PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate                                      thrpt    5      1114.926 ±      43.864  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                 thrpt    5      1192.000 ±       0.001    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                             thrpt    5      1119.699 ±     705.626  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                        thrpt    5      1197.039 ±     750.272    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                         thrpt    5         0.087 ±       0.119  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                    thrpt    5         0.094 ±       0.127    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.count                                           thrpt    5        17.000                counts
[info] PrimitivesBenchmark.readJacksonScala:·gc.time                                            thrpt    5        17.000                    ms
[info] PrimitivesBenchmark.readJsoniterScala                                                    thrpt    5   5521536.471 ±  194798.766   ops/s
[info] PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate                                     thrpt    5       168.417 ±       6.044  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                thrpt    5        48.000 ±       0.001    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                            thrpt    5       153.512 ±     539.618  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                       thrpt    5        43.680 ±     153.561    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                        thrpt    5         0.006 ±       0.054  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   thrpt    5         0.002 ±       0.015    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.count                                          thrpt    5         3.000                counts
[info] PrimitivesBenchmark.readJsoniterScala:·gc.time                                           thrpt    5         5.000                    ms
[info] PrimitivesBenchmark.readPlayJson                                                         thrpt    5    203063.385 ±    2381.936   ops/s
[info] PrimitivesBenchmark.readPlayJson:·gc.alloc.rate                                          thrpt    5      1439.223 ±      16.447  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.alloc.rate.norm                                     thrpt    5     11152.002 ±       0.001    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                 thrpt    5      1454.944 ±     663.123  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                            thrpt    5     11274.478 ±    5165.404    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                             thrpt    5         0.096 ±       0.091  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                        thrpt    5         0.742 ±       0.713    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.count                                               thrpt    5        22.000                counts
[info] PrimitivesBenchmark.readPlayJson:·gc.time                                                thrpt    5        23.000                    ms
[info] PrimitivesBenchmark.writeCirce                                                           thrpt    5    959289.613 ±   49263.014   ops/s
[info] PrimitivesBenchmark.writeCirce:·gc.alloc.rate                                            thrpt    5      1638.534 ±      83.806  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.alloc.rate.norm                                       thrpt    5      2688.000 ±       0.001    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                   thrpt    5      1675.747 ±      50.892  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                              thrpt    5      2749.372 ±     142.449    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                               thrpt    5         0.083 ±       0.127  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                          thrpt    5         0.137 ±       0.209    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.count                                                 thrpt    5        25.000                counts
[info] PrimitivesBenchmark.writeCirce:·gc.time                                                  thrpt    5        21.000                    ms
[info] PrimitivesBenchmark.writeJacksonScala                                                    thrpt    5   2436032.717 ±  137232.321   ops/s
[info] PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate                                     thrpt    5      1077.427 ±      61.097  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                thrpt    5       696.000 ±       0.001    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                            thrpt    5      1053.121 ±     551.486  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                       thrpt    5       680.502 ±     361.221    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                        thrpt    5         0.079 ±       0.105  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                   thrpt    5         0.051 ±       0.067    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.count                                          thrpt    5        16.000                counts
[info] PrimitivesBenchmark.writeJacksonScala:·gc.time                                           thrpt    5        14.000                    ms
[info] PrimitivesBenchmark.writeJsoniterScala                                                   thrpt    5   6629477.052 ±  224333.784   ops/s
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate                                    thrpt    5       539.239 ±      17.863  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                               thrpt    5       128.000 ±       0.001    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                           thrpt    5       516.016 ±     657.972  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                      thrpt    5       122.686 ±     158.751    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                       thrpt    5         0.380 ±       3.007  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  thrpt    5         0.091 ±       0.716    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.count                                         thrpt    5         8.000                counts
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.time                                          thrpt    5        10.000                    ms
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc                                           thrpt    5   6443058.164 ±   39589.786   ops/s
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                            thrpt    5       393.105 ±       2.440  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                       thrpt    5        96.000 ±       0.001    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                   thrpt    5       368.487 ±     656.732  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm              thrpt    5        89.975 ±     160.221    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space               thrpt    5         0.370 ±       3.096  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm          thrpt    5         0.090 ±       0.756    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                 thrpt    5         6.000                counts
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.time                                  thrpt    5         9.000                    ms
[info] PrimitivesBenchmark.writePlayJson                                                        thrpt    5    303997.955 ±   12593.338   ops/s
[info] PrimitivesBenchmark.writePlayJson:·gc.alloc.rate                                         thrpt    5      1563.851 ±      64.354  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.alloc.rate.norm                                    thrpt    5      8096.001 ±       0.001    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                thrpt    5      1527.398 ±     720.733  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                           thrpt    5      7906.085 ±    3665.738    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                            thrpt    5         0.079 ±       0.222  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                       thrpt    5         0.408 ±       1.146    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.count                                              thrpt    5        23.000                counts
[info] PrimitivesBenchmark.writePlayJson:·gc.time                                               thrpt    5        24.000                    ms
[info] StringOfAsciiCharsBenchmark.readCirce                                                    thrpt    5   3356569.757 ±  110138.996   ops/s
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate                                     thrpt    5      3105.330 ±     101.365  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm                                thrpt    5      1456.000 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space                            thrpt    5      3122.319 ±     607.874  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                       thrpt    5      1463.723 ±     254.448    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                        thrpt    5         0.100 ±       0.132  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                   thrpt    5         0.047 ±       0.062    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.count                                          thrpt    5        46.000                counts
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.time                                           thrpt    5        38.000                    ms
[info] StringOfAsciiCharsBenchmark.readJacksonScala                                             thrpt    5   3920229.061 ±   85885.034   ops/s
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate                              thrpt    5      2351.381 ±      51.343  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                         thrpt    5       944.000 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                     thrpt    5      2358.401 ±      76.027  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                thrpt    5       946.846 ±      38.139    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                 thrpt    5         0.075 ±       0.091  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm            thrpt    5         0.030 ±       0.037    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.count                                   thrpt    5        35.000                counts
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.time                                    thrpt    5        32.000                    ms
[info] StringOfAsciiCharsBenchmark.readJsoniterScala                                            thrpt    5   7432994.762 ±  353694.774   ops/s
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate                             thrpt    5      1398.111 ±      66.663  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                        thrpt    5       296.000 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                    thrpt    5      1414.501 ±     572.563  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm               thrpt    5       299.402 ±     116.369    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                thrpt    5         0.062 ±       0.098  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm           thrpt    5         0.013 ±       0.021    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.count                                  thrpt    5        21.000                counts
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.time                                   thrpt    5        16.000                    ms
[info] StringOfAsciiCharsBenchmark.writeCirce                                                   thrpt    5   2782367.758 ±   50397.872   ops/s
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate                                    thrpt    5      1725.401 ±      31.230  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm                               thrpt    5       976.000 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                           thrpt    5      1679.056 ±      45.691  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                      thrpt    5       949.805 ±      33.178    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                       thrpt    5         0.087 ±       0.143  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                  thrpt    5         0.049 ±       0.081    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.count                                         thrpt    5        25.000                counts
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.time                                          thrpt    5        19.000                    ms
[info] StringOfAsciiCharsBenchmark.writeJacksonScala                                            thrpt    5   4832891.995 ±  146693.704   ops/s
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate                             thrpt    5      1277.653 ±      39.113  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                        thrpt    5       416.000 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                    thrpt    5      1260.710 ±     585.115  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm               thrpt    5       410.599 ±     193.976    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                thrpt    5         0.079 ±       0.119  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm           thrpt    5         0.026 ±       0.038    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.count                                  thrpt    5        19.000                counts
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.time                                   thrpt    5        16.000                    ms
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala                                           thrpt    5   8542446.497 ±  250730.060   ops/s
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                            thrpt    5       825.187 ±      24.324  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                       thrpt    5       152.000 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                   thrpt    5       798.861 ±     705.957  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm              thrpt    5       147.021 ±     126.958    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space               thrpt    5         0.075 ±       0.166  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm          thrpt    5         0.014 ±       0.030    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.count                                 thrpt    5        12.000                counts
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.time                                  thrpt    5        10.000                    ms
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc                                   thrpt    5   7633648.585 ±  931308.312   ops/s
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                    thrpt    5        ≈ 10⁻⁴                MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm               thrpt    5        ≈ 10⁻⁴                  B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                         thrpt    5           ≈ 0                counts
[info] StringOfAsciiCharsBenchmark.writePlayJson                                                thrpt    5   5028113.289 ±  205357.694   ops/s
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate                                 thrpt    5      1610.398 ±      65.204  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                            thrpt    5       504.000 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                        thrpt    5      1609.679 ±     555.199  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                   thrpt    5       503.821 ±     175.326    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                    thrpt    5         0.096 ±       0.091  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm               thrpt    5         0.030 ±       0.029    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.count                                      thrpt    5        24.000                counts
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.time                                       thrpt    5        21.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readCirce                                                 thrpt    5   1391756.936 ±   34916.272   ops/s
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate                                  thrpt    5      1896.194 ±      47.079  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm                             thrpt    5      2144.000 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space                         thrpt    5      1954.019 ±     577.336  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                    thrpt    5      2209.550 ±     660.867    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                     thrpt    5         0.100 ±       0.132  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                thrpt    5         0.113 ±       0.148    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.count                                       thrpt    5        29.000                counts
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.time                                        thrpt    5        24.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala                                          thrpt    5   1066623.839 ±   53327.864   ops/s
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate                           thrpt    5       688.615 ±      34.171  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                      thrpt    5      1016.000 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                  thrpt    5       721.825 ±     566.961  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm             thrpt    5      1063.281 ±     781.259    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space              thrpt    5         0.471 ±       3.698  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm         thrpt    5         0.702 ±       5.520    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.count                                thrpt    5        11.000                counts
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.time                                 thrpt    5        11.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala                                         thrpt    5   1842570.107 ±   12402.307   ops/s
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate                          thrpt    5       346.592 ±       2.271  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                     thrpt    5       296.000 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                 thrpt    5       303.687 ±     168.332  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm            thrpt    5       259.353 ±     143.570    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space             thrpt    5         0.313 ±       2.604  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm        thrpt    5         0.267 ±       2.227    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.count                               thrpt    5         5.000                counts
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.time                                thrpt    5         7.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeCirce                                                thrpt    5   1270153.366 ±   21589.509   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate                                 thrpt    5       962.129 ±      16.111  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm                            thrpt    5      1192.000 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                        thrpt    5       929.867 ±     578.836  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                   thrpt    5      1152.371 ±     725.046    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                    thrpt    5         0.067 ±       0.119  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm               thrpt    5         0.083 ±       0.147    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.count                                      thrpt    5        14.000                counts
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.time                                       thrpt    5        13.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala                                         thrpt    5   2289716.760 ±  107482.991   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate                          thrpt    5       919.483 ±      43.124  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                     thrpt    5       632.000 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                 thrpt    5       921.716 ±     573.400  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm            thrpt    5       634.129 ±     407.098    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space             thrpt    5         0.075 ±       0.091  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm        thrpt    5         0.051 ±       0.062    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.count                               thrpt    5        14.000                counts
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.time                                thrpt    5        17.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala                                        thrpt    5   2491214.576 ±   78179.549   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                         thrpt    5       582.604 ±      18.282  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                    thrpt    5       368.000 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                thrpt    5       597.988 ±     573.101  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm           thrpt    5       378.097 ±     366.818    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space            thrpt    5         0.423 ±       3.022  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm       thrpt    5         0.270 ±       1.935    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.count                              thrpt    5         9.000                counts
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.time                               thrpt    5         9.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc                                thrpt    5   2560682.328 ±   76900.322   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                 thrpt    5        ≈ 10⁻⁴                MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm            thrpt    5        ≈ 10⁻⁴                  B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                      thrpt    5           ≈ 0                counts
[info] StringOfNonAsciiCharsBenchmark.writePlayJson                                             thrpt    5   2382232.557 ±  134376.810   ops/s
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate                              thrpt    5      1089.908 ±      61.525  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                         thrpt    5       720.000 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                     thrpt    5      1132.307 ±     710.393  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                thrpt    5       749.217 ±     503.968    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                 thrpt    5         0.075 ±       0.108  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm            thrpt    5         0.050 ±       0.071    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.count                                   thrpt    5        17.000                counts
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.time                                    thrpt    5        14.000                    ms
[info] TwitterAPIBenchmark.readCirce                                                            thrpt    5     12073.576 ±     248.518   ops/s
[info] TwitterAPIBenchmark.readCirce:·gc.alloc.rate                                             thrpt    5      1703.097 ±      35.090  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.alloc.rate.norm                                        thrpt    5    221985.014 ±      81.294    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space                                    thrpt    5      1673.380 ±      52.224  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                               thrpt    5    218117.962 ±    8772.670    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                thrpt    5         0.149 ±       0.292  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                           thrpt    5        19.437 ±      37.728    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.count                                                  thrpt    5        25.000                counts
[info] TwitterAPIBenchmark.readCirce:·gc.time                                                   thrpt    5        23.000                    ms
[info] TwitterAPIBenchmark.readJacksonScala                                                     thrpt    5     15247.961 ±     467.245   ops/s
[info] TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate                                      thrpt    5       241.077 ±       7.281  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm                                 thrpt    5     24880.031 ±       0.016    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                             thrpt    5       204.661 ±     440.549  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                        thrpt    5     21182.651 ±   45599.854    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                         thrpt    5         0.013 ±       0.071  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                    thrpt    5         1.394 ±       7.384    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.count                                           thrpt    5         4.000                counts
[info] TwitterAPIBenchmark.readJacksonScala:·gc.time                                            thrpt    5        13.000                    ms
[info] TwitterAPIBenchmark.readJsoniterScala                                                    thrpt    5     36054.632 ±    2567.215   ops/s
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate                                     thrpt    5       397.042 ±      28.186  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                thrpt    5     17328.048 ±       0.309    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                            thrpt    5       419.487 ±     640.417  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                       thrpt    5     18385.856 ±   29154.592    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                        thrpt    5         0.347 ±       2.877  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   thrpt    5        14.945 ±     123.724    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.count                                          thrpt    5         7.000                counts
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.time                                           thrpt    5        11.000                    ms
[info] TwitterAPIBenchmark.readPlayJson                                                         thrpt    5      3199.891 ±    1026.804   ops/s
[info] TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate                                          thrpt    5      1051.648 ±     337.281  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate.norm                                     thrpt    5    517159.293 ±     252.647    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                 thrpt    5      1059.878 ±     599.359  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                            thrpt    5    522501.942 ±  275697.241    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                             thrpt    5         0.025 ±       0.132  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                        thrpt    5        13.578 ±      76.553    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.count                                               thrpt    5        16.000                counts
[info] TwitterAPIBenchmark.readPlayJson:·gc.time                                                thrpt    5        38.000                    ms
[info] TwitterAPIBenchmark.writeJacksonScala                                                    thrpt    5     58889.032 ±    5377.886   ops/s
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate                                     thrpt    5       752.119 ±      68.719  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                thrpt    5     20099.999 ±       0.101    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                            thrpt    5       713.818 ±     555.058  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                       thrpt    5     19059.804 ±   14142.109    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                        thrpt    5         0.062 ±       0.113  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                   thrpt    5         1.658 ±       2.934    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.count                                          thrpt    5        11.000                counts
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.time                                           thrpt    5        12.000                    ms
[info] TwitterAPIBenchmark.writeJsoniterScala                                                   thrpt    5     80748.896 ±    1477.810   ops/s
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate                                    thrpt    5       527.887 ±       9.800  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                               thrpt    5     10288.005 ±       0.001    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                           thrpt    5       515.130 ±     655.127  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                      thrpt    5     10044.076 ±   12828.334    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                       thrpt    5         0.403 ±       3.202  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  thrpt    5         7.862 ±      62.487    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.count                                         thrpt    5         8.000                counts
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.time                                          thrpt    5         9.000                    ms
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc                                           thrpt    5     85873.799 ±     535.372   ops/s
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                            thrpt    5        10.477 ±       0.064  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                       thrpt    5       192.005 ±       0.001    B/op
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count                                 thrpt    5           ≈ 0                counts
[info] Benchmark result is saved to jdk8.json
[success] Total time: 3777 s, completed Feb 16, 2018 6:38:42 PM
